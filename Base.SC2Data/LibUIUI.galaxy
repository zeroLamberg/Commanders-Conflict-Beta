include "TriggerLibs/NativeLib"
include "LibAIAI_h"
include "LibCore_h"
include "LibGame_h"
include "LibMapM_h"

include "LibUIUI_h"

//--------------------------------------------------------------------------------------------------
// Library: UI
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libUIUI_InitLibraries () {
    libNtve_InitVariables();
    libAIAI_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libMapM_InitVariables();
}

// Variable Initialization
bool libUIUI_InitVariables_completed = false;

void libUIUI_InitVariables () {
    int init_i;
    int init_j;
    int init_i1;
    int init_j1;
    int init_k1;

    if (libUIUI_InitVariables_completed) {
        return;
    }

    libUIUI_InitVariables_completed = true;

    libUIUI_gv_allyTeamColor = Color(23.14, 48.63, 87.45);
    libUIUI_gv_enemyTeamColor = Color(87.45, 21.57, 24.71);
    libUIUI_gv_uITopPanel.lv_mainDialog = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uITopPanel.lv_team_LevelInfo[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uITopPanel.lv_team_Level[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uITopPanel.lv_team_ExpProgressBar[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uITopPanel.lv_portraits_Panel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_bALMaxTeams; init_j1 += 1) {
            libUIUI_gv_uITopPanel.lv_portraits_Frame[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_bALMaxTeams; init_j1 += 1) {
            libUIUI_gv_uITopPanel.lv_portraits_Image[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_bALMaxTeams; init_j1 += 1) {
            libUIUI_gv_uITopPanel.lv_portraits_DeathImage[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_bALMaxTeams; init_j1 += 1) {
            libUIUI_gv_uITopPanel.lv_portraits_DeathTimeLabel[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_bALMaxTeams; init_j1 += 1) {
            libUIUI_gv_uITopPanel.lv_portraits_HearthAnim[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uITopPanel.lv_teamAdvantage_Label[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uITopPanel.lv_teamAdvantage_Image[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_bALMaxTeams; init_j1 += 1) {
            libUIUI_gv_uITopPanel.lv_heroic_Panel[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_bALMaxTeams; init_j1 += 1) {
            libUIUI_gv_uITopPanel.lv_heroic_AbilityImage[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_bALMaxTeams; init_j1 += 1) {
            libUIUI_gv_uITopPanel.lv_heroic_CDLabel[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_bALMaxTeams; init_j1 += 1) {
            libUIUI_gv_uITopPanel.lv_heroic_ReadyImage[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_bALMaxTeams; init_j1 += 1) {
            libUIUI_gv_uITopPanel.lv_heroic_ProgressBar[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uITopPanel.lv_statusFrameCore[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uITopPanel.lv_statusFrameCoreInvulnerable[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_bALMaxTeams; init_j1 += 1) {
            for (init_k1 = 0; init_k1 <= libUIUI_gv_uITopPanelUnitStatusFrameMaximum; init_k1 += 1) {
                libUIUI_gv_uITopPanel.lv_statusFrameHealthAndMana[init_i1][init_j1][init_k1] = c_invalidDialogControlId;
            }
        }
    }
    libUIUI_gv_uITopPanel.lv_timer = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libUIUI_gv_uIMyTalentsPanelPlayerViewingQuickTalentsTierCtrlTab[init_i] = 1;
    }
    libUIUI_gv_uIMyTalentsPanel.lv_talentsPanel = c_invalidDialogControlId;
    libUIUI_gv_uIMyTalentsPanel.lv_talentButtonsPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsperTier; init_i1 += 1) {
        libUIUI_gv_uIMyTalentsPanel.lv_talentFrames[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsperTier; init_i1 += 1) {
        libUIUI_gv_uIMyTalentsPanel.lv_talentButtons[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsperTier; init_i1 += 1) {
        libUIUI_gv_uIMyTalentsPanel.lv_talentIcons[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsperTier; init_i1 += 1) {
        libUIUI_gv_uIMyTalentsPanel.lv_talentName[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsperTier; init_i1 += 1) {
        libUIUI_gv_uIMyTalentsPanel.lv_talentDescriptionLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsperTier; init_i1 += 1) {
        libUIUI_gv_uIMyTalentsPanel.lv_hotkeyFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsperTier; init_i1 += 1) {
        libUIUI_gv_uIMyTalentsPanel.lv_hotkeyLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsperTier; init_i1 += 1) {
        libUIUI_gv_uIMyTalentsPanel.lv_tooltipNameLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsperTier; init_i1 += 1) {
        libUIUI_gv_uIMyTalentsPanel.lv_tooltipInfoLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsperTier; init_i1 += 1) {
        libUIUI_gv_uIMyTalentsPanel.lv_tooltipDescriptionLabel[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_uIMyTalentsPanel.lv_tierSelectionPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsTiers; init_i1 += 1) {
        libUIUI_gv_uIMyTalentsPanel.lv_tierSelectionButton[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_uIMyTalentsPanel.lv_talentPointsLabel = c_invalidDialogControlId;
    libUIUI_gv_uIMyPropertyPanel.lv_mainPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uIMyPropertyPanelUnitProperty; init_i1 += 1) {
        libUIUI_gv_uIMyPropertyPanel.lv_property_Tooltip[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_uIMyPropertyPanel.lv_attackDamage = c_invalidDialogControlId;
    libUIUI_gv_uIMyPropertyPanel.lv_attackRange = c_invalidDialogControlId;
    libUIUI_gv_uIMyPropertyPanel.lv_attackSpeed = c_invalidDialogControlId;
    libUIUI_gv_uIMyPropertyPanel.lv_powerKinetic = c_invalidDialogControlId;
    libUIUI_gv_uIMyPropertyPanel.lv_powerEnergetic = c_invalidDialogControlId;
    libUIUI_gv_uIMyPropertyPanel.lv_powerStorm = c_invalidDialogControlId;
    libUIUI_gv_uIMyPropertyPanel.lv_moveSpeed = c_invalidDialogControlId;
    libUIUI_gv_uIMyPropertyPanel.lv_armorKinetic = c_invalidDialogControlId;
    libUIUI_gv_uIMyPropertyPanel.lv_armorEnergetic = c_invalidDialogControlId;
    libUIUI_gv_uIMyPropertyPanel.lv_armorStorm = c_invalidDialogControlId;
    libUIUI_gv_uiMyPropertyPanelPropertyType = libUIUI_ge_UIMyPropertyPanelPropertyType_None;
    libUIUI_gv_uIMyCustomLeaderBoard.lv_mainDialog = c_invalidDialogControlId;
    libUIUI_gv_uIMyCustomLeaderBoard.lv_showDeathButton = c_invalidDialogControlId;
    libUIUI_gv_uIMyCustomLeaderBoard.lv_showStatsButton = c_invalidDialogControlId;
    libUIUI_gv_uIMyCustomLeaderBoard.lv_showTalentsButton = c_invalidDialogControlId;
    libUIUI_gv_uIMyCustomLeaderBoard.lv_teamLabelKillsAlly = c_invalidDialogControlId;
    libUIUI_gv_uIMyCustomLeaderBoard.lv_teamLabelKillsEnemy = c_invalidDialogControlId;
    libUIUI_gv_uIMyCustomLeaderBoard.lv_teamLabelLevelAlly = c_invalidDialogControlId;
    libUIUI_gv_uIMyCustomLeaderBoard.lv_teamLabelLevelEnemy = c_invalidDialogControlId;
    libUIUI_gv_uIMyCustomLeaderBoard.lv_statsContainerFrame = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIMyCustomLeaderBoard.lv_statsContainerFramePlayer[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_uIMyCustomLeaderBoard.lv_talentsContainerFrame = c_invalidDialogControlId;
    libUIUI_gv_uIMyCustomLeaderBoard.lv_sortKills = c_invalidDialogControlId;
    libUIUI_gv_uIMyCustomLeaderBoard.lv_sortAssists = c_invalidDialogControlId;
    libUIUI_gv_uIMyCustomLeaderBoard.lv_sortDeaths = c_invalidDialogControlId;
    libUIUI_gv_uIMyCustomLeaderBoard.lv_sortSiegeDamage = c_invalidDialogControlId;
    libUIUI_gv_uIMyCustomLeaderBoard.lv_sortHeroDamage = c_invalidDialogControlId;
    libUIUI_gv_uIMyCustomLeaderBoard.lv_sortHealedAndAbsorbed = c_invalidDialogControlId;
    libUIUI_gv_uIMyCustomLeaderBoard.lv_sortDamageTaken = c_invalidDialogControlId;
    libUIUI_gv_uIMyCustomLeaderBoard.lv_sortXPContribution = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameMainDialog[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFramePlayerName[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameHeroName[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameHeroIconImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsKillsLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsKillsFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsAssistsLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsAssistsFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsDeathsLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsDeathsFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsSiegeDamageLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsSiegeDamageFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsHeroDamageLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsHeroDamageFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsHealedandAbsorbedLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsHealedandAbsorbedFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsDamageTakenLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsDamageTakenFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsXPContributionLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsXPContributionFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsGoldImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsGoldLabel[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_uIMyCustomLeaderBoardSortButton = libUIUI_ge_UIMyCustomLeaderBoardSortButton_Kills;
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libUIUI_gv_uIMyCustomLeaderBoardPlayerWatchingStats[init_i] = true;
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libUIUI_gv_uIMyCustomLeaderBoardSortingPlayerCurrentSort[init_i] = libUIUI_ge_UIMyCustomLeaderBoardSortingSortingType_DefaultSorting;
    }
    libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentsContainerFrame = c_invalidDialogControlId;
    libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_heroNameLabel = c_invalidDialogControlId;
    libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentPointsValueLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_heroSelectionButtonTeamAlly[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_heroSelectionButtonTeamAllyHeroImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_heroSelectionButtonTeamEnemy[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_heroSelectionButtonTeamEnemyHeroImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsTiers; init_i1 += 1) {
        libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_tierLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsTiers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentsperTier; init_j1 += 1) {
            libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentFrame[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsTiers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentsperTier; init_j1 += 1) {
            libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentButton[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsTiers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentsperTier; init_j1 += 1) {
            libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentButtonImage[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsTiers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentsperTier; init_j1 += 1) {
            libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentButtonTooltip[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsTiers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentsperTier; init_j1 += 1) {
            libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentQuestProgressBar[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsTiers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentsperTier; init_j1 += 1) {
            libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentTooltipHotkeyFrame[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsTiers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentsperTier; init_j1 += 1) {
            libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentTooltipHotkeyLabel[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsTiers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentsperTier; init_j1 += 1) {
            libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentTooltipLabelName[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsTiers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentsperTier; init_j1 += 1) {
            libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentTooltipLabelInfo[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsTiers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentsperTier; init_j1 += 1) {
            libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentTooltipLabelDescription[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsTiers; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentsperTier; init_j1 += 1) {
            libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentTooltipLabelQuestProgression[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libCore_gv_dataHeroesMaxPrestigeAbilities; init_i += 1) {
        libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[init_i].lv_button = c_invalidDialogControlId;
        libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[init_i].lv_image = c_invalidDialogControlId;
        libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[init_i].lv_cooldownLabel = c_invalidDialogControlId;
        libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[init_i].lv_cooldownProgressBar = c_invalidDialogControlId;
        libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[init_i].lv_tooltipDialogItem = c_invalidDialogControlId;
        libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[init_i].lv_tooltipName = c_invalidDialogControlId;
        libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[init_i].lv_tooltipInfo = c_invalidDialogControlId;
        libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[init_i].lv_tooltipDescription = c_invalidDialogControlId;
    }
    libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilitiesTooltip = c_invalidDialogControlId;
    libUIUI_gv_uIKillLog.lv_mainPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uIKillLogMaxLogs; init_i1 += 1) {
        libUIUI_gv_uIKillLog.lv_killLogPanel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uIKillLogMaxLogs; init_i1 += 1) {
        libUIUI_gv_uIKillLog.lv_killingPlayerFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uIKillLogMaxLogs; init_i1 += 1) {
        libUIUI_gv_uIKillLog.lv_killingPlayerPortraitImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uIKillLogMaxLogs; init_i1 += 1) {
        libUIUI_gv_uIKillLog.lv_killingPlayerPortraitBorder[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uIKillLogMaxLogs; init_i1 += 1) {
        libUIUI_gv_uIKillLog.lv_killingPlayerCutsceneFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uIKillLogMaxLogs; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_uIKillLogDeathPlayersMax; init_j1 += 1) {
            libUIUI_gv_uIKillLog.lv_deadPlayerFrame[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uIKillLogMaxLogs; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_uIKillLogDeathPlayersMax; init_j1 += 1) {
            libUIUI_gv_uIKillLog.lv_deadPlayerStrikethroughFrame[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uIKillLogMaxLogs; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_uIKillLogDeathPlayersMax; init_j1 += 1) {
            libUIUI_gv_uIKillLog.lv_deadPlayerPortraitImage[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uIKillLogMaxLogs; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_uIKillLogDeathPlayersMax; init_j1 += 1) {
            libUIUI_gv_uIKillLog.lv_deadPlayerPortraitBorderColors[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uIKillLogMaxLogs; init_i1 += 1) {
        libUIUI_gv_uIKillLog.lv_questFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uIKillLogMaxLogs; init_i1 += 1) {
        libUIUI_gv_uIKillLog.lv_questCompleteFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uIKillLogMaxLogs; init_i1 += 1) {
        libUIUI_gv_uIKillLog.lv_questTalentIconImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uIKillLogMaxLogs; init_i1 += 1) {
        libUIUI_gv_uIKillLog.lv_questTimeLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uIKillLogMaxLogs; init_i1 += 1) {
        libUIUI_gv_uIKillLog.lv_vSImageFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uIKillLogMaxLogs; init_i1 += 1) {
        libUIUI_gv_uIKillLog.lv_vSImageIMAGEFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libUIUI_gv_uIKillLogMaxLogs; init_i += 1) {
        libUIUI_gv_uIKillLogLogInfo[init_i].lv_logTimer = TimerCreate();
    }
    libUIUI_gv_annUI.lv_mainDialog = c_invalidDialogId;
    libUIUI_gv_annUI.lv_textLabel = c_invalidDialogControlId;
    libUIUI_gv_uIDamageFlashUI.lv_mainDialog = c_invalidDialogControlId;
    libUIUI_gv_uIDamageFlashUI.lv_lightSplashImage = c_invalidDialogControlId;
    libUIUI_gv_uIDamageFlashUI.lv_intenseSplashImage = c_invalidDialogControlId;
    libUIUI_gv_uIDamageFlashUI.lv_lowHealthPersistentImage = c_invalidDialogControlId;
    libUIUI_gv_uIDamageFlashLowHPThreshold = 30.0;
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libUIUI_gv_deathAnnouncement_AnnouncementVisibleTimers[init_i] = TimerCreate();
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_deathAnnouncement_Panel.lv_teamPanels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_bALMaxPlayersOnATeam; init_j1 += 1) {
            libUIUI_gv_deathAnnouncement_Panel.lv_heroPanels[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_bALMaxPlayersOnATeam; init_j1 += 1) {
            libUIUI_gv_deathAnnouncement_Panel.lv_heroPortraitImages[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_bALMaxPlayersOnATeam; init_j1 += 1) {
            libUIUI_gv_deathAnnouncement_Panel.lv_heroNameLabels[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_bALMaxPlayersOnATeam; init_j1 += 1) {
            libUIUI_gv_deathAnnouncement_Panel.lv_playerNameLabels[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    libUIUI_gv_encouragement_Panel.lv_mainDialog = c_invalidDialogControlId;
    libUIUI_gv_encouragement_Panel.lv_closeButton = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libUIUI_gv_encouragement_MaxNumberOfStatCalloutsDisplayed_C; init_i1 += 1) {
        libUIUI_gv_encouragement_Panel.lv_statCalloutLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_encouragement_MaxNumberOfDeathTipsDisplayed_C; init_i1 += 1) {
        libUIUI_gv_encouragement_Panel.lv_deathTipLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[init_i] = TimerCreate();
    }
    libUIUI_gv_fullscreenOverlaysPanel.lv_mainDialog = c_invalidDialogControlId;
    libUIUI_gv_fullscreenOverlaysPanel.lv_cCSplashImage = c_invalidDialogControlId;
    libUIUI_gv_fullscreenOverlaysPanel.lv_flashBangImage = c_invalidDialogControlId;
    libUIUI_gv_fullscreenOverlaysPanel.lv_abathurSymbioteOverlay = c_invalidDialogControlId;
    libUIUI_gv_fullscreenOverlaysPanel.lv_deathOverlay = c_invalidDialogControlId;
    libUIUI_gv_fullscreenOverlaysPanel.lv_specialOverlay = c_invalidDialogControlId;
    libUIUI_gv_fullscreenOverlaysPanelRework.lv_mainDialog = c_invalidDialogControlId;
    libUIUI_gv_fullscreenOverlaysPanelRework.lv_overlayCutscene = c_invalidDialogControlId;
    libUIUI_gv_gameOverSplash.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_gameOverSplash.lv_victoryFrame = c_invalidDialogControlId;
    libUIUI_gv_gameOverSplash.lv_defeatFrame = c_invalidDialogControlId;
    libUIUI_gv_gameOverSplash.lv_defeatLabel = c_invalidDialogControlId;
    libUIUI_gv_gameOverSplash.lv_leaveButton = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_fullscreenUpperContainer = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_consoleUIContainer = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_helpButton = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_talentsButton = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_gameMenuButton = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_pingButton = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_minimapPanel = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_disableMinimapCommandsButton = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_enableMinimapCommandsButton = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIVisibility = true;
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        for (init_j = 0; init_j <= libUIUI_gv_uI_HealingFountainsHelpText_ArraySize_C; init_j += 1) {
            libUIUI_gv_uIHealingFountainsHelpText[init_i][init_j].lv_textTag = c_textTagNone;
            libUIUI_gv_uIHealingFountainsHelpText[init_i][init_j].lv_cooldown = c_textTagNone;
        }
    }
    libUIUI_gv_uIHeroConsole.lv_heroConsolePanel = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_heroStatsFrame = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uIHeroConsoleUnitStatusMaximum; init_i1 += 1) {
        libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrameOrange = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrameBlinking = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrameYellow = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFramePink = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrameNoEnergy = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrameNoEnergyNoShield = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_heroStatsHealthBar = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_heroStatsManaBar = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_gameUIPortrait = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_gameUICommandPanel = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_gameUICommandCardPanelFrame = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_gameUIInventoryPanel = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_buffDebuffPanel = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_buffBar = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_debuffBar = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_neutralBar = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarParentFrame = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarLeftBar = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarRightBar = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarIcon = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarDescriptionLabel = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarTimeLabel = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_castChannelBarParentFrame = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrame = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarDurationBar = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarBehaviorLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_dialog = c_invalidDialogId;
    libUIUI_gv_heroSelection.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_countdownLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_finalCountdownFrame = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_titleLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_selectedHeroPanel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_selectedHeroName = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_selectedHeroRole = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_pickHeroPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libUIUI_gv_heroSelectionNumberofRows; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_heroSelectionNumberofCols; init_j1 += 1) {
            libUIUI_gv_heroSelection.lv_heroButtons[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_heroSelectionNumberofRows; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_heroSelectionNumberofCols; init_j1 += 1) {
            libUIUI_gv_heroSelection.lv_heroButtonImage[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_heroSelectionNumberofRows; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_heroSelectionNumberofCols; init_j1 += 1) {
            libUIUI_gv_heroSelection.lv_heroButtonBorder[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_heroSelectionNumberofRows; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_heroSelectionNumberofCols; init_j1 += 1) {
            libUIUI_gv_heroSelection.lv_heroButtonBordersEmpty[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_heroSelectionNumberofRows; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_heroSelectionNumberofCols; init_j1 += 1) {
            libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByMe1[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_heroSelectionNumberofRows; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_heroSelectionNumberofCols; init_j1 += 1) {
            libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByMe2[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_heroSelectionNumberofRows; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_heroSelectionNumberofCols; init_j1 += 1) {
            libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByMe3[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_heroSelectionNumberofRows; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_heroSelectionNumberofCols; init_j1 += 1) {
            libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByAlly1[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_heroSelectionNumberofRows; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_heroSelectionNumberofCols; init_j1 += 1) {
            libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByAlly2[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_heroSelectionNumberofRows; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_heroSelectionNumberofCols; init_j1 += 1) {
            libUIUI_gv_heroSelection.lv_heroButtonBordersThinking[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_heroSelectionNumberofRows; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_heroSelectionNumberofCols; init_j1 += 1) {
            libUIUI_gv_heroSelection.lv_heroButtonBordersLockedbyMe1[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_heroSelectionNumberofRows; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_heroSelectionNumberofCols; init_j1 += 1) {
            libUIUI_gv_heroSelection.lv_heroButtonBordersLockedbyMe2[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_heroSelectionNumberofRows; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_heroSelectionNumberofCols; init_j1 += 1) {
            libUIUI_gv_heroSelection.lv_heroButtonBordersLockedByAlly1[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_heroSelectionNumberofRows; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_heroSelectionNumberofCols; init_j1 += 1) {
            libUIUI_gv_heroSelection.lv_heroButtonBordersLockedByAlly2[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    libUIUI_gv_heroSelection.lv_teamPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_teamHeroFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_teamHeroImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_teamHeroRole[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_teamHeroRoleBG[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_teamHeroEmpty[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_teamHeroBorder[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_teamHeroLocked[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_teamHeroLockedAnimation[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_teamHeroSelectedAlly[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_teamHeroThinking[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_teamHeroPlayerName[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_teamHeroHeroName[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_heroContainerFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_heroCutsceneFrame[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_heroSelection.lv_abilitiesButton = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_talentsButton = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_brawlButton = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_lockButton = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_debugCrazyBtn = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_debugRerollBtn = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelCloseButton = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelHeroContainerFrame = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelUniverseIconImage = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelNameLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelInfoLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelAbilitiesTilelist = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfPassiveAbilitiesPerHero2; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItem[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfPassiveAbilitiesPerHero2; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemIconImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfPassiveAbilitiesPerHero2; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemNameLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfPassiveAbilitiesPerHero2; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemDescriptionSimpleLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfPassiveAbilitiesPerHero2; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemHotkeyFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfPassiveAbilitiesPerHero2; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemHotkeyLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfPassiveAbilitiesPerHero2; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfPassiveAbilitiesPerHero2; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipNameLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfPassiveAbilitiesPerHero2; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipInfoLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfPassiveAbilitiesPerHero2; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipDescriptionLabel[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItem = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemIconImage = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemNameLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemDescriptionSimpleLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemHotkeyFrame = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemHotkeyLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemTooltipFrame = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemTooltipNameLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemTooltipInfoLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemTooltipDescriptionLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfPassiveAbilitiesPerHero3; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItem[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfPassiveAbilitiesPerHero3; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemIconImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfPassiveAbilitiesPerHero3; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemNameLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfPassiveAbilitiesPerHero3; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemDescriptionSimpleLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfPassiveAbilitiesPerHero3; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemHotkeyFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfPassiveAbilitiesPerHero3; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemHotkeyLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfPassiveAbilitiesPerHero3; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemTooltipFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfPassiveAbilitiesPerHero3; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemTooltipNameLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfPassiveAbilitiesPerHero3; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemTooltipInfoLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesNumberOfPassiveAbilitiesPerHero3; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemTooltipDescriptionLabel[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_heroSelection.lv_abiltiyFrame = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_talentsPanel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_talentsPanelCloseButton = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_talentsPanelHeroContainerFrame = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_talentsPanelUniverseIconImage = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_talentsPanelNameLabel = c_invalidDialogControlId;
    libUIUI_gv_heroSelection.lv_talentsPanelInfoLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsTiers; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_talentsPanelTierButton[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsperTier; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButton[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsperTier; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonIconImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsperTier; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsperTier; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsperTier; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonPriceLabel22222222222222222222222222222222[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsperTier; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonNameLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsperTier; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonDescriptionSimpleLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsperTier; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_talentsPanelTooltipFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsperTier; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_talentsPanelTooltipNameLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsperTier; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_talentsPanelTooltipInfoLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsperTier; init_i1 += 1) {
        libUIUI_gv_heroSelection.lv_talentsPanelTooltipDescriptionLabel[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_pvEUIDirectivePanel.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_pvEUIDirectivePanel.lv_directiveTextFrame = c_invalidDialogControlId;
    libUIUI_gv_pvEUIDirectivePanel.lv_directiveTitleLabel = c_invalidDialogControlId;
    libUIUI_gv_pvEUIDirectivePanel.lv_directiveDescriptionLabel = c_invalidDialogControlId;
    libUIUI_gv_pvEUIDirectivePanel.lv_mainPanelSmall = c_invalidDialogControlId;
    libUIUI_gv_pvEUIDirectivePanel.lv_directiveTextFrameSmall = c_invalidDialogControlId;
    libUIUI_gv_pvEUIDirectivePanel.lv_directiveTitleLabelSmall = c_invalidDialogControlId;
    libUIUI_gv_pvEUIDirectivePanel.lv_directiveDescriptionLabelSmall = c_invalidDialogControlId;
    libUIUI_gv_heroSelectionSetting.lv_countdownTimer = TimerCreate();
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_heroSelectionSetting.lv_talentTierPressedButton[init_i1] = 1;
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libUIUI_gv_uIHeroStatusFrames[init_i].lv_playerNameLabel = c_invalidDialogControlId;
        libUIUI_gv_uIHeroStatusFrames[init_i].lv_heroNameLabel = c_invalidDialogControlId;
        libUIUI_gv_uIHeroStatusFrames[init_i].lv_botDifficultyLabel = c_invalidDialogControlId;
        libUIUI_gv_uIHeroStatusFrames[init_i].lv_botStatusLabel = c_invalidDialogControlId;
        libUIUI_gv_uIHeroStatusFrames[init_i].lv_mapMechanicFrame = c_invalidDialogControlId;
        libUIUI_gv_uIHeroStatusFrames[init_i].lv_mapMechanicIcon = c_invalidDialogControlId;
        libUIUI_gv_uIHeroStatusFrames[init_i].lv_mapMechanicCount = c_invalidDialogControlId;
    }
    libUIUI_gv_uIHeroTrackerArrows.lv_mainPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uI_MaxHeroGroupStatusFrames; init_i1 += 1) {
        libUIUI_gv_uIHeroTrackerArrows.lv_offscreenUnit[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uI_MaxHeroGroupStatusFrames; init_i1 += 1) {
        libUIUI_gv_uIHeroTrackerArrows.lv_arrow[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uI_MaxHeroGroupStatusFrames; init_i1 += 1) {
        libUIUI_gv_uIHeroTrackerArrows.lv_portraitImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libAIAI_gv_defMaxCamps; init_i += 1) {
        libUIUI_gv_jCIInfo[init_i].lv_mainPanel = c_invalidDialogControlId;
        libUIUI_gv_jCIInfo[init_i].lv_campTimerLabel = c_invalidDialogControlId;
        libUIUI_gv_jCIInfo[init_i].lv_campEliteLabel = c_invalidDialogControlId;
        libUIUI_gv_jCIInfo[init_i].lv_campTitleLabel = c_invalidDialogControlId;
        libUIUI_gv_jCIInfo[init_i].lv_playerNameLabel = c_invalidDialogControlId;
        libUIUI_gv_jCIInfo[init_i].lv_campDescriptionLabel = c_invalidDialogControlId;
        libUIUI_gv_jCIInfo[init_i].lv_debugLabel = c_invalidDialogControlId;
    }
    libUIUI_gv_mapMechanicsPanel.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtPanel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnInfoLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnTimerLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTeamTributeFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTeamTributeCounterLabel[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseInfoLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseTimerLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayPanel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayChestSpawnFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayDoubloonModeFrame = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayDoubloonCounterLabel[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonModeFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonRemainingCannonballsLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libUIUI_gv_mapMechanicsBlackheartsBayCannonballCount_C; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonCannonballImages[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonShotCounterLabel[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesPanel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeRemainingSkullsLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeSkullCounterLabel[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesMineTimerModeFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesMineTimerLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesGolemModeFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesAllyGolemHealthUnitStatus = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesEnemyGolemHealthUnitStatus = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesAllyGolemModeSkullCounterLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesEnemyGolemModeSkullCounterLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_dragonShirePanel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineTimerModeFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineTimerLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineModeFrame = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineDisabledImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineEnabledImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineDisabledImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineEnabledImage[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonModeFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonInfoLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonTimerLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonHealthUnitStatus = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonHealthLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorPanel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrame = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelGold[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelRed[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameBlueSeedImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameRedSeedImage[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorTimeOfDayFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorTimeOfDayCountdownLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemHealthUnitStatus = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemHealthUnitStatus = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemStatusLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemStatusLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemTimerLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemTimerLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_battleForSlaynPanel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_battleForSlaynSpawnTimerModeFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_battleForSlaynSpawnTimerLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_battleForSlaynGolemModeFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_battleForSlaynAllyGolemHealthUnitStatus = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_battleForSlaynAllyGolemHealthUnitStatusHealthLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_battleForSlaynEnemyGolemHealthUnitStatus = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_battleForSlaynEnemyGolemHealthUnitStatusHealthLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsBlackheartsBayChestsSpawnedFrameTimer = TimerCreate();
    libUIUI_gv_mapMechanicsBlackheartsBayCurrentMode = libUIUI_ge_MapMechanicsBlackheartsBayModes_Doubloons;
    libUIUI_gv_uINotificationDisplay.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_uINotificationDisplay.lv_flashFrame = c_invalidDialogControlId;
    libUIUI_gv_uITargetInfoPanel.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_uITargetInfoPanel.lv_unitName = c_invalidDialogControlId;
    libUIUI_gv_uITargetInfoPanel.lv_playerName = c_invalidDialogControlId;
    libUIUI_gv_uITargetInfoPanel.lv_level = c_invalidDialogControlId;
    libUIUI_gv_uITargetInfoPanel.lv_portraitImage = c_invalidDialogControlId;
    libUIUI_gv_uITargetInfoPanel.lv_unitTargetFrame = c_invalidDialogControlId;
    libUIUI_gv_uITargetInfoPanel.lv_mapMechanicIcon = c_invalidDialogControlId;
    libUIUI_gv_uITargetInfoPanel.lv_mapMechanicLabel = c_invalidDialogControlId;
    libUIUI_gv_uITargetInfoPanel.lv_descriptionLabel = c_invalidDialogControlId;
    libUIUI_gv_uITargetInfoPanel.lv_cursedBuildingIcon = c_invalidDialogControlId;
    libUIUI_gv_uITargetInfoPanel.lv_healthAndManaUnitStatusStatusFrame = c_invalidDialogControlId;
    libUIUI_gv_uITargetInfoPanel.lv_healthOnlyUnitStatusStatusFrame = c_invalidDialogControlId;
    libUIUI_gv_uITargetInfoPanel.lv_towerWithAmmoUnitStatusStatusFrame = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libUIUI_gv_uITargetInfoPanelCurretTargetStatusBarType[init_i] = libUIUI_ge_UITargetInfoPanelStatusBarTypes_Null;
    }
    libUIUI_gv_teamLevel_Panel.lv_mainDialog = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_teamLevel_Panel.lv_levelLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_teamLevel_Panel.lv_xPBarUnitStatusFrames[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_teamLevel_Panel.lv_xPBarUnitStatusBars[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_teamStatusPanel.lv_mainPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_teamStatusPanel.lv_coreHealthBarFrames[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_teamStatusPanel.lv_topChevron = c_invalidDialogControlId;
    libUIUI_gv_teamStatusPanel.lv_topChevronEmpty = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_teamStatusPanel.lv_teamColorBar[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_teamStatusPanel.lv_mapMechanicMainPanel = c_invalidDialogControlId;
    libUIUI_gv_teamStatusPanel.lv_mapMechanicImage = c_invalidDialogControlId;
    libUIUI_gv_teamStatusPanel.lv_mapMechanicImageTooltipFrame = c_invalidDialogControlId;
    libUIUI_gv_teamStatusPanel.lv_mapMechanicLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamPanel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamLabelTooltipFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 2; init_j1 += 1) {
            libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamImages[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActivePanel = c_invalidDialogControlId;
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveImage = c_invalidDialogControlId;
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveImageTooltipFrame = c_invalidDialogControlId;
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamPanel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamSubLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamImageBG[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamHPBar[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamHPBarLabel[init_i1] = c_invalidDialogControlId;
    }
}

// Presets
// Functions
void libUIUI_gf_TalentsSetDialogItemTalentHotkeyColorTypeForPlayer (int lp_hotkeyDialogItem, int lp_hotkeyType, int lp_player) {
    // Automatic Variable Declarations
    int autoE0EE62BE_val;

    // Implementation
    autoE0EE62BE_val = lp_hotkeyType;
    if (autoE0EE62BE_val == libCore_ge_HeroTalentType_Heroic) {
        libCore_gf_SetDialogItemAnimationState(lp_hotkeyDialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "HeroAbilHotkeyFrame", "HotkeyHeroic");
    }
    else if (autoE0EE62BE_val == libCore_ge_HeroTalentType_Active) {
        libCore_gf_SetDialogItemAnimationState(lp_hotkeyDialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "HeroAbilHotkeyFrame", "HotkeyActive");
    }
    else if (autoE0EE62BE_val == libCore_ge_HeroTalentType_Passive) {
        libCore_gf_SetDialogItemAnimationState(lp_hotkeyDialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "HeroAbilHotkeyFrame", "HotkeyPassive");
    }
    else {
        libCore_gf_SetDialogItemAnimationState(lp_hotkeyDialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "HeroAbilHotkeyFrame", "HotkeyAbility");
    }
}

void libUIUI_gf_TalentsSetDialogItemTalentHotkeyTypeForPlayer (int lp_hotkeyType, int lp_hotkeyDialogItem, int lp_player) {
    // Automatic Variable Declarations
    int auto59946560_val;

    // Implementation
    auto59946560_val = lp_hotkeyType;
    if (auto59946560_val == libUIUI_ge_TalentsHotkeyType_HotkeyMissing) {
        libCore_gf_SetDialogItemAnimationState(lp_hotkeyDialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "HotkeyType", "HotkeyMissing");
    }
    else if (auto59946560_val == libUIUI_ge_TalentsHotkeyType_HotkeyNormal) {
        libCore_gf_SetDialogItemAnimationState(lp_hotkeyDialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "HotkeyType", "HotkeyNormal");
    }
    else if (auto59946560_val == libUIUI_ge_TalentsHotkeyType_HotkeyQuesting) {
        libCore_gf_SetDialogItemAnimationState(lp_hotkeyDialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "HotkeyType", "HotkeyQuesting");
    }
    else if (auto59946560_val == libUIUI_ge_TalentsHotkeyType_HotkeyUpgrade) {
        libCore_gf_SetDialogItemAnimationState(lp_hotkeyDialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "HotkeyType", "HotkeyUpgrade");
    }
    else {
    }
}

void libUIUI_gf_UISetUpTalentsPrice () {
    // Variable Declarations
    int lv_itTier;

    // Automatic Variable Declarations
    int auto370CD9AA_ae;

    // Variable Initialization

    // Implementation
    auto370CD9AA_ae = libCore_gv_dataHeroesMaxTalentsTiers;
    lv_itTier = 1;
    for ( ; lv_itTier <= auto370CD9AA_ae ; lv_itTier += 1 ) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_74396703", "A", FixedToText(libCore_gv_talentsTierInfo[lv_itTier].lv_price, 0));
        libNtve_gf_SetDialogItemTooltip(libUIUI_gv_uIMyTalentsPanel.lv_tierSelectionButton[lv_itTier], TextExpressionAssemble("Param/Expression/lib_UIUI_74396703"), PlayerGroupAll());
        DialogControlHookup(libUIUI_gv_uIMyTalentsPanel.lv_tierSelectionButton[lv_itTier], c_triggerControlTypeLabel, "TierLabelFrame");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(lv_itTier), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_tierLabels[lv_itTier], FixedToText(libCore_gv_talentsTierInfo[lv_itTier].lv_price, 0), PlayerGroupAll());
    }
}

void libUIUI_gf_UITopPanelSetUpPlayerHero (int lp_player) {
    // Variable Declarations
    int lv_team;
    int lv_slot;
    playergroup lv_teamGroup;
    int lv_statusFrameID;

    // Automatic Variable Declarations
    string autoB4DCD408_val;

    // Variable Initialization
    lv_teamGroup = PlayerGroupEmpty();

    // Implementation
    lv_team = libGame_gf_PlayerGetPlayerTeam(lp_player);
    lv_slot = libGame_gv_players[lp_player].lv_playerAllySlot;
    lv_teamGroup = libGame_gf_PlayersOnTeamHeroes(lv_team, false);
    autoB4DCD408_val = UnitGetType(libGame_gf_PlayerHeroUnit(lp_player));
    if (autoB4DCD408_val == "HeroKatarina") {
        lv_statusFrameID = libUIUI_ge_UITopPanelUnitStatusFrame_OrangeEnergy;
    }
    else {
        lv_statusFrameID = libUIUI_ge_UITopPanelUnitStatusFrame_Default;
    }
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_uITopPanel.lv_statusFrameHealthAndMana[lv_slot][lv_team][lv_statusFrameID], libGame_gf_PlayerHeroUnit(lp_player), PlayerGroupAll());
    DialogControlSetVisible(libUIUI_gv_uITopPanel.lv_statusFrameHealthAndMana[lv_slot][lv_team][lv_statusFrameID], lv_teamGroup, true);
    DialogControlSetVisible(libUIUI_gv_uITopPanel.lv_portraits_Frame[lv_slot][lv_team], PlayerGroupAll(), true);
    DialogControlSetVisible(libUIUI_gv_uITopPanel.lv_portraits_DeathImage[lv_slot][lv_team], PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_uITopPanel.lv_portraits_Image[lv_slot][lv_team], libCore_gv_heroData[libCore_gf_CommandersGetHeroIndexOfPlayerHero(lp_player)].lv_topPanelImage, PlayerGroupAll());
}

void libUIUI_gf_UITopPanelShowHidePlayerHeroUnitStatusFrame (bool lp_showHide, int lp_player) {
    // Variable Declarations
    int lv_team;
    int lv_slot;
    playergroup lv_teamGroup;
    int lv_statusFrameID;

    // Automatic Variable Declarations
    string auto0A04EFE7_val;

    // Variable Initialization
    lv_teamGroup = PlayerGroupEmpty();

    // Implementation
    lv_team = libGame_gf_PlayerGetPlayerTeam(lp_player);
    lv_slot = libGame_gv_players[lp_player].lv_playerAllySlot;
    lv_teamGroup = libGame_gf_PlayersOnTeamHeroes(lv_team, false);
    auto0A04EFE7_val = UnitGetType(libGame_gf_PlayerHeroUnit(lp_player));
    if (auto0A04EFE7_val == "HeroKatarina") {
        lv_statusFrameID = libUIUI_ge_UITopPanelUnitStatusFrame_OrangeEnergy;
    }
    else {
        lv_statusFrameID = libUIUI_ge_UITopPanelUnitStatusFrame_Default;
    }
    DialogControlSetVisible(libUIUI_gv_uITopPanel.lv_statusFrameHealthAndMana[lv_slot][lv_team][lv_statusFrameID], lv_teamGroup, lp_showHide);
}

trigger auto_libUIUI_gf_UITopPanelDeathTimerStartForPlayer_Trigger = null;
int auto_libUIUI_gf_UITopPanelDeathTimerStartForPlayer_lp_player;

void libUIUI_gf_UITopPanelDeathTimerStartForPlayer (int lp_player) {
    auto_libUIUI_gf_UITopPanelDeathTimerStartForPlayer_lp_player = lp_player;

    if (auto_libUIUI_gf_UITopPanelDeathTimerStartForPlayer_Trigger == null) {
        auto_libUIUI_gf_UITopPanelDeathTimerStartForPlayer_Trigger = TriggerCreate("auto_libUIUI_gf_UITopPanelDeathTimerStartForPlayer_TriggerFunc");
    }

    TriggerExecute(auto_libUIUI_gf_UITopPanelDeathTimerStartForPlayer_Trigger, false, false);
}

bool auto_libUIUI_gf_UITopPanelDeathTimerStartForPlayer_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libUIUI_gf_UITopPanelDeathTimerStartForPlayer_lp_player;

    // Variable Declarations
    int lv_team;
    int lv_playerSlot;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_team = libGame_gf_PlayerGetPlayerTeam(lp_player);
    lv_playerSlot = libGame_gv_players[lp_player].lv_playerAllySlot;
    DialogControlSetVisible(libUIUI_gv_uITopPanel.lv_portraits_DeathTimeLabel[lv_playerSlot][lv_team], PlayerGroupAll(), true);
    libUIUI_gf_UITopPanelShowHidePlayerHeroUnitStatusFrame(false, lp_player);
    while ((TimerGetRemaining(libGame_gv_players[lp_player].lv_respawnTimer) > 0.0)) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_uITopPanel.lv_portraits_DeathTimeLabel[lv_playerSlot][lv_team], FixedToText(TimerGetRemaining(libGame_gv_players[lp_player].lv_respawnTimer), 0), PlayerGroupAll());
        if ((TimerGetRemaining(libGame_gv_players[lp_player].lv_respawnTimer) == 5.125)) {
            DialogControlSendAnimationEvent(libUIUI_gv_uITopPanel.lv_portraits_Frame[lv_playerSlot][lv_team], PlayerGroupAll(), "HeroAlmostRespawned");
        }

        Wait(0.0625, c_timeGame);
    }
    DialogControlSendAnimationEvent(libUIUI_gv_uITopPanel.lv_portraits_Frame[lv_playerSlot][lv_team], PlayerGroupAll(), "HeroRespawned");
    DialogControlSetVisible(libUIUI_gv_uITopPanel.lv_portraits_DeathTimeLabel[lv_playerSlot][lv_team], PlayerGroupAll(), false);
    libUIUI_gf_UITopPanelShowHidePlayerHeroUnitStatusFrame(true, lp_player);
    return true;
}

void libUIUI_gf_UITopPanelCoreActionTrigger () {
    // Automatic Variable Declarations
    const int auto3A556ED0_ae = libCore_gv_bALMaxTeams;
    int auto3A556ED0_var;
    const int auto3377DAC2_ae = libCore_gv_bALMaxTeams;
    int auto3377DAC2_var;

    // Implementation
    libUIUI_gf_UITopPanelShowHideCoreHealthFrame(true);
    auto3A556ED0_var = 1;
    for ( ; auto3A556ED0_var <= auto3A556ED0_ae; auto3A556ED0_var += 1 ) {
        if ((libUIUI_gv_uITopPanel.lv_invulnerableFrameVisible[auto3A556ED0_var] == false) && (UnitHasBehavior2(libGame_gv_teams[auto3A556ED0_var].lv_core, "CoreInvulnerability") == true)) {
            libUIUI_gf_UITopPanelShowHideCoreInvulnerable(true, auto3A556ED0_var);
        }
    }
    auto3377DAC2_var = 1;
    for ( ; auto3377DAC2_var <= auto3377DAC2_ae; auto3377DAC2_var += 1 ) {
        if ((UnitHasBehavior2(libGame_gv_teams[auto3377DAC2_var].lv_core, "CoreInvulnerability") == false) && (libUIUI_gv_uITopPanel.lv_invulnerableFrameVisible[auto3377DAC2_var] == false)) {
            libUIUI_gf_UITopPanelShowHideCoreInvulnerable(false, auto3377DAC2_var);
        }
    }
}

void libUIUI_gf_UITopPanelShowHideCoreInvulnerable (bool lp_showHide, int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_showHide == true)) {
        DialogControlSendAnimationEvent(libUIUI_gv_uITopPanel.lv_statusFrameCoreInvulnerable[lp_team], PlayerGroupAll(), "CoreIsInvulnerable");
        libUIUI_gv_uITopPanel.lv_invulnerableFrameVisible[lp_team] = true;
    }
    else {
        DialogControlSendAnimationEvent(libUIUI_gv_uITopPanel.lv_statusFrameCoreInvulnerable[lp_team], PlayerGroupAll(), "Hide");
        libUIUI_gv_uITopPanel.lv_invulnerableFrameVisible[lp_team] = false;
    }
}

void libUIUI_gf_UITopPanelShowHideCoreHealthFrame (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_showHide == true)) {
        if ((libUIUI_gv_uITopPanelCoreHealthFrameIsVisible == false)) {
            DialogControlSetVisible(libUIUI_gv_uITopPanel.lv_statusFrameCore[libGame_gv_teamOrderIndex_C], PlayerGroupAll(), true);
            DialogControlSetVisible(libUIUI_gv_uITopPanel.lv_statusFrameCore[libGame_gv_teamChaosIndex_C], PlayerGroupAll(), true);
            libUIUI_gv_uITopPanelCoreHealthFrameIsVisible = true;
        }
    }
    else {
        if ((libUIUI_gv_uITopPanelCoreHealthFrameIsVisible == true)) {
            DialogControlSetVisible(libUIUI_gv_uITopPanel.lv_statusFrameCore[libGame_gv_teamOrderIndex_C], PlayerGroupAll(), false);
            DialogControlSetVisible(libUIUI_gv_uITopPanel.lv_statusFrameCore[libGame_gv_teamChaosIndex_C], PlayerGroupAll(), false);
            libUIUI_gv_uITopPanelCoreHealthFrameIsVisible = false;
        }
    }
}

void libUIUI_gf_UITopPanelSetCoreLifeTo0 (int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookup(libUIUI_gv_uITopPanel.lv_statusFrameCore[lp_team], c_triggerControlTypeLabel, "HealthLabel/StatusLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText("0%"), PlayerGroupAll());
}

int libUIUI_gf_UIMyTalentsPanelCalculateWheelNextTalentsTier (int lp_currentTier) {
    // Variable Declarations
    int lv_returnValue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_currentTier >= 1) && (lp_currentTier < libCore_gv_dataHeroesMaxTalentsTiers)) {
        lv_returnValue = (lp_currentTier + 1);
    }
    else if ((lp_currentTier == libCore_gv_dataHeroesMaxTalentsTiers)) {
        lv_returnValue = 1;
    }
    return lv_returnValue;
}

void libUIUI_gf_UIMyTalentsPanelTierButtonPressedbyPlayer (int lp_player, int lp_buttonTier) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gv_uIMyTalentsPanelPlayerViewingQuickTalentsTierCtrlTab[lp_player] = lp_buttonTier;
    if ((libUIUI_gv_uIMyTalentsPanelPlayerViewingQuickTalents[lp_player] == true)) {
        if ((libUIUI_gv_uIMyTalentsPanelPlayerViewingQuickTalentsTier[lp_player] == lp_buttonTier)) {
            libNtve_gf_SetDialogItemToggled(libUIUI_gv_uIMyTalentsPanel.lv_tierSelectionButton[lp_buttonTier], false, libCore_gv_playerGroupFromPlayer[lp_player]);
            libUIUI_gf_UIMyTalentsPanelShowHideQuickTalentsPanelforPlayer(false, lp_player);
            libUIUI_gv_uIMyTalentsPanelNumberofViewingQuickTalentsPlayers -= 1;
            libUIUI_gv_uIMyTalentsPanelPlayerViewingQuickTalents[lp_player] = false;
            libUIUI_gv_uIMyTalentsPanelPlayerViewingQuickTalentsTier[lp_player] = 0;
        }
        else {
            libNtve_gf_SetDialogItemToggled(libUIUI_gv_uIMyTalentsPanel.lv_tierSelectionButton[libUIUI_gv_uIMyTalentsPanelPlayerViewingQuickTalentsTier[lp_player]], false, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemToggled(libUIUI_gv_uIMyTalentsPanel.lv_tierSelectionButton[lp_buttonTier], true, libCore_gv_playerGroupFromPlayer[lp_player]);
            libUIUI_gv_uIMyTalentsPanelPlayerViewingQuickTalentsTier[lp_player] = lp_buttonTier;
            libUIUI_gf_UIMyTalentsPanelSetQuickTalentsTierforPlayer(lp_player, lp_buttonTier);
        }
        return ;
    }

    libUIUI_gv_uIMyTalentsPanelPlayerViewingQuickTalents[lp_player] = true;
    libUIUI_gv_uIMyTalentsPanelPlayerViewingQuickTalentsTier[lp_player] = lp_buttonTier;
    libUIUI_gf_UIMyTalentsPanelSetQuickTalentsTierforPlayer(lp_player, lp_buttonTier);
    libUIUI_gf_UIMyTalentsPanelShowHideQuickTalentsPanelforPlayer(true, lp_player);
    libUIUI_gv_uIMyTalentsPanelNumberofViewingQuickTalentsPlayers += 1;
    if ((TriggerIsEnabled(libUIUI_gt_UIMyTalentsPanelPlayerViewingQuickTalentsUpdate) == false)) {
        TriggerEnable(libUIUI_gt_UIMyTalentsPanelPlayerViewingQuickTalentsUpdate, true);
    }

}

void libUIUI_gf_UIMyTalentsPanelSetQuickTalentsTierforPlayer (int lp_player, int lp_tier) {
    // Variable Declarations
    int lv_itTalent;
    int lv_heroIndex;

    // Automatic Variable Declarations
    int autoF0F96F61_ae;
    int autoAC662AFE_val;

    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;

    // Implementation
    autoF0F96F61_ae = libCore_gv_dataHeroesMaxTalentsperTier;
    lv_itTalent = 1;
    for ( ; lv_itTalent <= autoF0F96F61_ae ; lv_itTalent += 1 ) {
        if ((libCore_gv_heroData[lv_heroIndex].lv_talentsData[lp_tier][lv_itTalent].lv_talentLink != null)) {
            DialogControlSetVisible(libUIUI_gv_uIMyTalentsPanel.lv_talentFrames[lv_itTalent], libCore_gv_playerGroupFromPlayer[lp_player], true);
            libNtve_gf_SetDialogItemImage(libUIUI_gv_uIMyTalentsPanel.lv_talentIcons[lv_itTalent], libCore_gv_heroData[lv_heroIndex].lv_talentsData[lp_tier][lv_itTalent].lv_talentIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyTalentsPanel.lv_talentName[lv_itTalent], libCore_gv_heroData[lv_heroIndex].lv_talentsData[lp_tier][lv_itTalent].lv_talentName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyTalentsPanel.lv_talentDescriptionLabel[lv_itTalent], libCore_gv_heroData[lv_heroIndex].lv_talentsData[lp_tier][lv_itTalent].lv_talentSimpleText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyTalentsPanel.lv_hotkeyLabel[lv_itTalent], libCore_gv_heroData[lv_heroIndex].lv_talentsData[lp_tier][lv_itTalent].lv_talentHotkey, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyTalentsPanel.lv_tooltipNameLabel[lv_itTalent], libCore_gv_heroData[lv_heroIndex].lv_talentsData[lp_tier][lv_itTalent].lv_talentName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyTalentsPanel.lv_tooltipInfoLabel[lv_itTalent], libCore_gv_heroData[lv_heroIndex].lv_talentsData[lp_tier][lv_itTalent].lv_talentInfoText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyTalentsPanel.lv_tooltipDescriptionLabel[lv_itTalent], libCore_gv_heroData[lv_heroIndex].lv_talentsData[lp_tier][lv_itTalent].lv_talentTooltipText[0], libCore_gv_playerGroupFromPlayer[lp_player]);
            autoAC662AFE_val = libCore_gv_heroData[lv_heroIndex].lv_talentsData[lp_tier][lv_itTalent].lv_talentType;
            if (autoAC662AFE_val == libCore_ge_HeroTalentType_Active) {
                libUIUI_gf_TalentsSetDialogItemTalentHotkeyColorTypeForPlayer(libUIUI_gv_uIMyTalentsPanel.lv_hotkeyFrame[lv_itTalent], libCore_ge_HeroTalentType_Active, lp_player);
                if ((libCore_gv_heroData[lv_heroIndex].lv_talentsData[lp_tier][lv_itTalent].lv_isQuest == true)) {
                    libUIUI_gf_TalentsSetDialogItemTalentHotkeyTypeForPlayer(libUIUI_ge_TalentsHotkeyType_HotkeyQuesting, libUIUI_gv_uIMyTalentsPanel.lv_hotkeyFrame[lv_itTalent], lp_player);
                }
                else {
                    libUIUI_gf_TalentsSetDialogItemTalentHotkeyTypeForPlayer(libUIUI_ge_TalentsHotkeyType_HotkeyNormal, libUIUI_gv_uIMyTalentsPanel.lv_hotkeyFrame[lv_itTalent], lp_player);
                }
            }
            else if (autoAC662AFE_val == libCore_ge_HeroTalentType_Passive) {
                libUIUI_gf_TalentsSetDialogItemTalentHotkeyColorTypeForPlayer(libUIUI_gv_uIMyTalentsPanel.lv_hotkeyFrame[lv_itTalent], libCore_ge_HeroTalentType_Passive, lp_player);
                if ((libCore_gv_heroData[lv_heroIndex].lv_talentsData[lp_tier][lv_itTalent].lv_isQuest == true)) {
                    libUIUI_gf_TalentsSetDialogItemTalentHotkeyTypeForPlayer(libUIUI_ge_TalentsHotkeyType_HotkeyQuesting, libUIUI_gv_uIMyTalentsPanel.lv_hotkeyFrame[lv_itTalent], lp_player);
                }
                else {
                    libUIUI_gf_TalentsSetDialogItemTalentHotkeyTypeForPlayer(libUIUI_ge_TalentsHotkeyType_HotkeyNormal, libUIUI_gv_uIMyTalentsPanel.lv_hotkeyFrame[lv_itTalent], lp_player);
                }
            }
            else if (autoAC662AFE_val == libCore_ge_HeroTalentType_Heroic) {
                libUIUI_gf_TalentsSetDialogItemTalentHotkeyColorTypeForPlayer(libUIUI_gv_uIMyTalentsPanel.lv_hotkeyFrame[lv_itTalent], libCore_ge_HeroTalentType_Heroic, lp_player);
                if ((libCore_gv_heroData[lv_heroIndex].lv_talentsData[lp_tier][lv_itTalent].lv_isQuest == true)) {
                    libUIUI_gf_TalentsSetDialogItemTalentHotkeyTypeForPlayer(libUIUI_ge_TalentsHotkeyType_HotkeyQuesting, libUIUI_gv_uIMyTalentsPanel.lv_hotkeyFrame[lv_itTalent], lp_player);
                }
                else {
                    libUIUI_gf_TalentsSetDialogItemTalentHotkeyTypeForPlayer(libUIUI_ge_TalentsHotkeyType_HotkeyUpgrade, libUIUI_gv_uIMyTalentsPanel.lv_hotkeyFrame[lv_itTalent], lp_player);
                }
            }
            else {
                libUIUI_gf_TalentsSetDialogItemTalentHotkeyColorTypeForPlayer(libUIUI_gv_uIMyTalentsPanel.lv_hotkeyFrame[lv_itTalent], libCore_ge_HeroTalentType_Basic, lp_player);
                if ((libCore_gv_heroData[lv_heroIndex].lv_talentsData[lp_tier][lv_itTalent].lv_isQuest == true)) {
                    libUIUI_gf_TalentsSetDialogItemTalentHotkeyTypeForPlayer(libUIUI_ge_TalentsHotkeyType_HotkeyQuesting, libUIUI_gv_uIMyTalentsPanel.lv_hotkeyFrame[lv_itTalent], lp_player);
                }
                else {
                    libUIUI_gf_TalentsSetDialogItemTalentHotkeyTypeForPlayer(libUIUI_ge_TalentsHotkeyType_HotkeyUpgrade, libUIUI_gv_uIMyTalentsPanel.lv_hotkeyFrame[lv_itTalent], lp_player);
                }
            }
        }
        else {
            if ((DialogControlIsVisible(libUIUI_gv_uIMyTalentsPanel.lv_talentFrames[lv_itTalent], lp_player) == true)) {
                DialogControlSetVisible(libUIUI_gv_uIMyTalentsPanel.lv_talentFrames[lv_itTalent], libCore_gv_playerGroupFromPlayer[lp_player], false);
            }

        }
    }
}

void libUIUI_gf_UIMyTalentsPanelShowHideQuickTalentsPanelforPlayer (bool lp_showHide, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_showHide == true)) {
        DialogControlSendAnimationEvent(libUIUI_gv_uIMyTalentsPanel.lv_talentsPanel, libCore_gv_playerGroupFromPlayer[lp_player], "Show");
    }
    else {
        DialogControlSendAnimationEvent(libUIUI_gv_uIMyTalentsPanel.lv_talentsPanel, libCore_gv_playerGroupFromPlayer[lp_player], "Hide");
    }
}

void libUIUI_gf_UIPropertyFramePanelTooltipSetup () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyPropertyPanel.lv_property_Tooltip[libUIUI_ge_UIMyPropertyPanelPropertyType_AttackDamage], StringExternal("Param/Value/lib_UIUI_FFF72835"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyPropertyPanel.lv_property_Tooltip[libUIUI_ge_UIMyPropertyPanelPropertyType_AttackSpeed], StringExternal("Param/Value/lib_UIUI_6A2A4BAD"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyPropertyPanel.lv_property_Tooltip[libUIUI_ge_UIMyPropertyPanelPropertyType_AttackRange], StringExternal("Param/Value/lib_UIUI_F484943E"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyPropertyPanel.lv_property_Tooltip[libUIUI_ge_UIMyPropertyPanelPropertyType_MoveSpeed], StringExternal("Param/Value/lib_UIUI_DCA379E3"), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_UIUI_AA732E00", "A", IntToText(libGame_gv_unitStatsPowerMaxValuePositive));
    TextExpressionSetToken("Param/Expression/lib_UIUI_AA732E00", "B", IntToText(libGame_gv_unitStatsPowerMaxValueNegative));
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyPropertyPanel.lv_property_Tooltip[libUIUI_ge_UIMyPropertyPanelPropertyType_PowerKinetic], TextExpressionAssemble("Param/Expression/lib_UIUI_AA732E00"), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_UIUI_43965D7E", "A", IntToText(libGame_gv_unitStatsPowerMaxValuePositive));
    TextExpressionSetToken("Param/Expression/lib_UIUI_43965D7E", "B", IntToText(libGame_gv_unitStatsPowerMaxValueNegative));
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyPropertyPanel.lv_property_Tooltip[libUIUI_ge_UIMyPropertyPanelPropertyType_PowerEnergetic], TextExpressionAssemble("Param/Expression/lib_UIUI_43965D7E"), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_UIUI_4B20A972", "A", IntToText(libGame_gv_unitStatsPowerMaxValuePositive));
    TextExpressionSetToken("Param/Expression/lib_UIUI_4B20A972", "B", IntToText(libGame_gv_unitStatsPowerMaxValueNegative));
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyPropertyPanel.lv_property_Tooltip[libUIUI_ge_UIMyPropertyPanelPropertyType_PowerStorm], TextExpressionAssemble("Param/Expression/lib_UIUI_4B20A972"), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_UIUI_79294DE9", "A", IntToText(libGame_gv_unitStatsMaximumArmor));
    TextExpressionSetToken("Param/Expression/lib_UIUI_79294DE9", "B", IntToText(libGame_gv_unitStatsMaximumArmor));
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyPropertyPanel.lv_property_Tooltip[libUIUI_ge_UIMyPropertyPanelPropertyType_ArmorKinetic], TextExpressionAssemble("Param/Expression/lib_UIUI_79294DE9"), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_UIUI_C2B33005", "A", IntToText(libGame_gv_unitStatsMaximumArmor));
    TextExpressionSetToken("Param/Expression/lib_UIUI_C2B33005", "B", IntToText(libGame_gv_unitStatsMaximumArmor));
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyPropertyPanel.lv_property_Tooltip[libUIUI_ge_UIMyPropertyPanelPropertyType_ArmorEnergetic], TextExpressionAssemble("Param/Expression/lib_UIUI_C2B33005"), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_UIUI_DFB38287", "A", IntToText(libGame_gv_unitStatsMaximumArmor));
    TextExpressionSetToken("Param/Expression/lib_UIUI_DFB38287", "B", IntToText(libGame_gv_unitStatsMaximumArmor));
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyPropertyPanel.lv_property_Tooltip[libUIUI_ge_UIMyPropertyPanelPropertyType_ArmorStorm], TextExpressionAssemble("Param/Expression/lib_UIUI_DFB38287"), PlayerGroupAll());
}

text libUIUI_gf_UIMyPropertyPanelGetStatText (int lp_propertyType, unit lp_unit) {
    // Variable Declarations
    fixed lv_realStatValue;
    int lv_index;
    string lv_style;
    string lv_d09FD0BBD18ED181D09CD0B8D0BDD183D181;
    string lv_d09FD180D0BED186D0B5D0BDD182D18B;
    int lv_itStatValue;

    // Automatic Variable Declarations
    int auto500AB358_val;

    // Variable Initialization
    lv_style = "";
    lv_d09FD0BBD18ED181D09CD0B8D0BDD183D181 = "";
    lv_d09FD180D0BED186D0B5D0BDD182D18B = "";

    // Implementation
    auto500AB358_val = lp_propertyType;
    if (auto500AB358_val == libUIUI_ge_UIMyPropertyPanelPropertyType_AttackDamage) {
        lv_realStatValue = libCore_gf_WeaponDamageOfUnit(lp_unit);
        return FixedToText(lv_realStatValue, 1);
    }
    else if (auto500AB358_val == libUIUI_ge_UIMyPropertyPanelPropertyType_AttackSpeed) {
        lv_realStatValue = libCore_gf_GetWeaponAttackSpeedForUnit(lp_unit);
        return FixedToText(lv_realStatValue, 2);
    }
    else if (auto500AB358_val == libUIUI_ge_UIMyPropertyPanelPropertyType_AttackRange) {
        lv_realStatValue = UnitWeaponRange(lp_unit, 1);
        return FixedToText(lv_realStatValue, 2);
    }
    else if (auto500AB358_val == libUIUI_ge_UIMyPropertyPanelPropertyType_MoveSpeed) {
        if ((UnitIsAlive(lp_unit) == true)) {
            lv_realStatValue = UnitGetPropertyFixed(lp_unit, c_unitPropMovementSpeed, c_unitPropCurrent);
        }
        else {
            lv_realStatValue = UnitGetPropertyFixed(lp_unit, c_unitPropMovementSpeed, c_unitPropNormal);
        }
        if ((lv_realStatValue == libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, UnitGetType(lp_unit), "Speed", libCore_gv_cOMPUTER_Neutral))) {
            lv_style = "<s val=\"Storm_TargetInfoPanel_Label\">";
        }
        else if ((lv_realStatValue > libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, UnitGetType(lp_unit), "Speed", libCore_gv_cOMPUTER_Neutral))) {
            lv_style = "<s val=\"Storm_targetInfoPanel_Label_Buff\">";
        }
        else if ((lv_realStatValue < libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, UnitGetType(lp_unit), "Speed", libCore_gv_cOMPUTER_Neutral))) {
            lv_style = "<s val=\"Storm_targetInfoPanel_Label_Debuff\">";
        }
        return (StringToText(lv_style) + FixedToText(lv_realStatValue, 2));
    }
    else if (auto500AB358_val == libUIUI_ge_UIMyPropertyPanelPropertyType_PowerKinetic) {
        if ((UnitGetOwner(lp_unit) <= libCore_gv_bALMaxPlayers)) {
            lv_itStatValue = libGame_gf_UnitStatsValidPowerValueOfUnit((libGame_ge_UnitStatsPowerType_PowerKinetic), lp_unit);
        }
        lv_d09FD180D0BED186D0B5D0BDD182D18B = "%";
    }
    else if (auto500AB358_val == libUIUI_ge_UIMyPropertyPanelPropertyType_PowerEnergetic) {
        if ((UnitGetOwner(lp_unit) <= libCore_gv_bALMaxPlayers)) {
            lv_itStatValue = libGame_gf_UnitStatsValidPowerValueOfUnit((libGame_ge_UnitStatsPowerType_PowerEnergetic), lp_unit);
        }
        lv_d09FD180D0BED186D0B5D0BDD182D18B = "%";
    }
    else if (auto500AB358_val == libUIUI_ge_UIMyPropertyPanelPropertyType_PowerStorm) {
        if ((UnitGetOwner(lp_unit) <= libCore_gv_bALMaxPlayers)) {
            lv_itStatValue = libGame_gf_UnitStatsValidPowerValueOfUnit((libGame_ge_UnitStatsPowerType_PowerStorm), lp_unit);
        }
        lv_d09FD180D0BED186D0B5D0BDD182D18B = "%";
    }
    else if (auto500AB358_val == libUIUI_ge_UIMyPropertyPanelPropertyType_ArmorKinetic) {
        lv_itStatValue = libGame_gf_UnitStatsValidArmorValueOfUnit((libGame_ge_UnitStatsArmorBehaviorType_ArmorKinetic), libGame_ge_UnitStatsArmorUnitType_Hero, lp_unit);
    }
    else if (auto500AB358_val == libUIUI_ge_UIMyPropertyPanelPropertyType_ArmorEnergetic) {
        lv_itStatValue = libGame_gf_UnitStatsValidArmorValueOfUnit((libGame_ge_UnitStatsArmorBehaviorType_ArmorEnergetic), libGame_ge_UnitStatsArmorUnitType_Hero, lp_unit);
    }
    else if (auto500AB358_val == libUIUI_ge_UIMyPropertyPanelPropertyType_ArmorStorm) {
        lv_itStatValue = libGame_gf_UnitStatsValidArmorValueOfUnit((libGame_ge_UnitStatsArmorBehaviorType_ArmorStorm), libGame_ge_UnitStatsArmorUnitType_Hero, lp_unit);
    }
    else {
    }
    if ((lv_itStatValue == 0)) {
        lv_style = "<s val=\"Storm_TargetInfoPanel_Label\">";
        lv_d09FD0BBD18ED181D09CD0B8D0BDD183D181 = "";
    }
    else if ((lv_itStatValue > 0) && ((lp_propertyType == libUIUI_ge_UIMyPropertyPanelPropertyType_PowerEnergetic) || (lp_propertyType == libUIUI_ge_UIMyPropertyPanelPropertyType_PowerKinetic) || (lp_propertyType == libUIUI_ge_UIMyPropertyPanelPropertyType_PowerStorm))) {
        lv_style = "<s val=\"Storm_targetInfoPanel_Label_Buff\">";
        lv_d09FD0BBD18ED181D09CD0B8D0BDD183D181 = "+";
    }
    else if ((lv_itStatValue < 0)) {
        lv_style = "<s val=\"Storm_targetInfoPanel_Label_Debuff\">";
    }
    return (StringToText(lv_style) + StringToText(lv_d09FD0BBD18ED181D09CD0B8D0BDD183D181) + IntToText(lv_itStatValue) + StringToText(lv_d09FD180D0BED186D0B5D0BDD182D18B));
}

void libUIUI_gf_UIMyPropertyPanelUpdateStatsofUnitforPlayer (unit lp_monitoredUnit, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyPropertyPanel.lv_attackDamage, libUIUI_gf_UIMyPropertyPanelGetStatText(libUIUI_ge_UIMyPropertyPanelPropertyType_AttackDamage, lp_monitoredUnit), libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyPropertyPanel.lv_attackSpeed, libUIUI_gf_UIMyPropertyPanelGetStatText(libUIUI_ge_UIMyPropertyPanelPropertyType_AttackSpeed, lp_monitoredUnit), libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyPropertyPanel.lv_attackRange, libUIUI_gf_UIMyPropertyPanelGetStatText(libUIUI_ge_UIMyPropertyPanelPropertyType_AttackRange, lp_monitoredUnit), libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyPropertyPanel.lv_moveSpeed, libUIUI_gf_UIMyPropertyPanelGetStatText(libUIUI_ge_UIMyPropertyPanelPropertyType_MoveSpeed, lp_monitoredUnit), libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyPropertyPanel.lv_powerKinetic, libUIUI_gf_UIMyPropertyPanelGetStatText(libUIUI_ge_UIMyPropertyPanelPropertyType_PowerKinetic, lp_monitoredUnit), libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyPropertyPanel.lv_powerEnergetic, libUIUI_gf_UIMyPropertyPanelGetStatText(libUIUI_ge_UIMyPropertyPanelPropertyType_PowerEnergetic, lp_monitoredUnit), libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyPropertyPanel.lv_powerStorm, libUIUI_gf_UIMyPropertyPanelGetStatText(libUIUI_ge_UIMyPropertyPanelPropertyType_PowerStorm, lp_monitoredUnit), libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyPropertyPanel.lv_armorKinetic, libUIUI_gf_UIMyPropertyPanelGetStatText(libUIUI_ge_UIMyPropertyPanelPropertyType_ArmorKinetic, lp_monitoredUnit), libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyPropertyPanel.lv_armorEnergetic, libUIUI_gf_UIMyPropertyPanelGetStatText(libUIUI_ge_UIMyPropertyPanelPropertyType_ArmorEnergetic, lp_monitoredUnit), libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyPropertyPanel.lv_armorStorm, libUIUI_gf_UIMyPropertyPanelGetStatText(libUIUI_ge_UIMyPropertyPanelPropertyType_ArmorStorm, lp_monitoredUnit), libCore_gv_playerGroupFromPlayer[lp_player]);
}

void libUIUI_gf_UIMyCustomLeaderBoardSetUpPlayeronLeaderBoard (int lp_player) {
    // Variable Declarations
    int lv_l;
    int lv_p;
    int lv_allyTeam;
    int lv_enemyTeam;
    int lv_slot;
    int lv_enemySlot;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_slot = libGame_gv_players[lp_player].lv_playerAllySlot;
    lv_enemySlot = libGame_gv_players[lp_player].lv_playerEnemySlot;
    lv_allyTeam = libGame_gf_PlayerGetPlayerTeam(lp_player);
    lv_enemyTeam = libGame_gf_EnemyTeamNumberOfTeam(lv_allyTeam);
    libCore_gf_SetDialogItemAnimationState(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameMainDialog[lv_slot], libGame_gv_teams[lv_allyTeam].lv_teamPlayerGroupNoNPCPlayers, "Visibility", "Visible");
    libCore_gf_SetDialogItemAnimationState(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameMainDialog[lv_enemySlot], libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, "Visibility", "Visible");
    libCore_gf_SetDialogItemAnimationState(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameMainDialog[lv_slot], libGame_gv_teams[lv_allyTeam].lv_teamPlayerGroupNoNPCPlayers, "PlayerTypeState", "LocalPlayer");
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFramePlayerName[lv_slot], libGame_gv_players[lp_player].lv_playerName, libGame_gv_teams[lv_allyTeam].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameHeroName[lv_slot], libGame_gv_players[lp_player].lv_heroName, libGame_gv_teams[lv_allyTeam].lv_teamPlayerGroupNoNPCPlayers);
    libCore_gf_SetDialogItemAnimationState(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameMainDialog[lv_slot], libGame_gv_teams[lv_allyTeam].lv_teamPlayerGroupNoNPCPlayers, "PlayerTypeState", "AllyPlayer");
    libNtve_gf_SetDialogItemImage(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameHeroIconImage[lv_slot], libCore_gv_heroData[libGame_gv_players[lp_player].lv_heroIndex].lv_leaderboardImage, libGame_gv_teams[lv_allyTeam].lv_teamPlayerGroupNoNPCPlayers);
    libCore_gf_SetDialogItemAnimationState(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameMainDialog[lv_slot], libGame_gv_teams[lv_allyTeam].lv_teamPlayerGroupNoNPCPlayers, "PlayerTypeState", "AllyPlayer");
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFramePlayerName[lv_enemySlot], libGame_gv_players[lp_player].lv_playerName, libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameHeroName[lv_enemySlot], libGame_gv_players[lp_player].lv_heroName, libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    libCore_gf_SetDialogItemAnimationState(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameMainDialog[lv_slot], libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, "PlayerTypeState", "EnemyPlayer");
    libNtve_gf_SetDialogItemImage(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameHeroIconImage[lv_enemySlot], libCore_gv_heroData[libGame_gv_players[lp_player].lv_heroIndex].lv_leaderboardImage, libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    libCore_gf_SetDialogItemAnimationState(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameMainDialog[lv_enemySlot], libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, "PlayerTypeState", "EnemyPlayer");
    libCore_gf_SetDialogItemAnimationState(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameMainDialog[lv_slot], libCore_gv_playerGroupFromPlayer[lp_player], "PlayerTypeState", "LocalPlayer");
}

bool libUIUI_gf_UIMyCustomLeaderBoardAnyPlayerWatchingLeaderBoard () {
    // Automatic Variable Declarations
    const int autoD8B5BB1F_ae = libCore_gv_bALMaxPlayers;
    int autoD8B5BB1F_var;

    // Implementation
    autoD8B5BB1F_var = 1;
    for ( ; autoD8B5BB1F_var <= autoD8B5BB1F_ae; autoD8B5BB1F_var += 1 ) {
        if ((PlayerStatus(autoD8B5BB1F_var) == c_playerStatusActive) && (DialogControlIsVisible(libUIUI_gv_uIMyCustomLeaderBoard.lv_mainDialog, autoD8B5BB1F_var) == true)) {
            return true;
        }
    }
    return false;
}

bool libUIUI_gf_UIMyCustomLeaderBoardAnyPlayerWatchingStats () {
    // Automatic Variable Declarations
    const int autoC9CF12FB_ae = libCore_gv_bALMaxPlayers;
    int autoC9CF12FB_var;

    // Implementation
    autoC9CF12FB_var = 1;
    for ( ; autoC9CF12FB_var <= autoC9CF12FB_ae; autoC9CF12FB_var += 1 ) {
        if ((PlayerStatus(autoC9CF12FB_var) == c_playerStatusActive) && (libUIUI_gv_uIMyCustomLeaderBoardPlayerWatchingStats[autoC9CF12FB_var] == true)) {
            return true;
        }
    }
    return false;
}

bool libUIUI_gf_UIMyCustomLeaderBoardAnyPlayerWatchingTalents () {
    // Automatic Variable Declarations
    const int autoC6115E3A_ae = libCore_gv_bALMaxPlayers;
    int autoC6115E3A_var;

    // Implementation
    autoC6115E3A_var = 1;
    for ( ; autoC6115E3A_var <= autoC6115E3A_ae; autoC6115E3A_var += 1 ) {
        if ((PlayerStatus(autoC6115E3A_var) == c_playerStatusActive) && (libUIUI_gv_uIMyCustomLeaderBoardPlayerWatchingTalents[autoC6115E3A_var] == true)) {
            return true;
        }
    }
    return false;
}

bool libUIUI_gf_UIMyCustomLeaderBoardPlayerWatchingLeaderBoard (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return DialogControlIsVisible(libUIUI_gv_uIMyCustomLeaderBoard.lv_mainDialog, lp_player);
}

bool libUIUI_gf_UIMyCustomLeaderBoardPlayerWatchingStats (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libUIUI_gv_uIMyCustomLeaderBoardPlayerWatchingStats[lp_player];
}

bool libUIUI_gf_UIMyCustomLeaderBoardPlayerWatchingTalents (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libUIUI_gv_uIMyCustomLeaderBoardPlayerWatchingTalents[lp_player];
}

void libUIUI_gf_UIMyCustomLeaderBoardChangeWatchingContainerForPlayer (int lp_containerType, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_containerType == libUIUI_ge_UIMyCustomLeaderBoardContainerType_Stats)) {
        libUIUI_gv_uIMyCustomLeaderBoardPlayerWatchingStats[lp_player] = true;
        libUIUI_gv_uIMyCustomLeaderBoardPlayerWatchingTalents[lp_player] = false;
        libUIUI_gv_uIMyCustomLeaderBoardPlayerWatchingDeathRecap[lp_player] = false;
    }
    else if ((lp_containerType == libUIUI_ge_UIMyCustomLeaderBoardContainerType_Talents)) {
        libUIUI_gv_uIMyCustomLeaderBoardPlayerWatchingTalents[lp_player] = true;
        libUIUI_gv_uIMyCustomLeaderBoardPlayerWatchingStats[lp_player] = false;
        libUIUI_gv_uIMyCustomLeaderBoardPlayerWatchingDeathRecap[lp_player] = false;
    }
    else if ((lp_containerType == libUIUI_ge_UIMyCustomLeaderBoardContainerType_DeatD180Recap)) {
        libUIUI_gv_uIMyCustomLeaderBoardPlayerWatchingDeathRecap[lp_player] = true;
        libUIUI_gv_uIMyCustomLeaderBoardPlayerWatchingTalents[lp_player] = false;
        libUIUI_gv_uIMyCustomLeaderBoardPlayerWatchingStats[lp_player] = false;
    }
}

void libUIUI_gf_UIMyCustomLeaderBoardSortingChangeState (int lp_player, int lp_sortingType) {
    // Automatic Variable Declarations
    // Implementation
    if ((libUIUI_gv_uIMyCustomLeaderBoardSortingPlayerCurrentSort[lp_player] != lp_sortingType)) {
        libUIUI_gv_uIMyCustomLeaderBoardSortingPlayerCurrentSort[lp_player] = lp_sortingType;
    }
    else {
        libUIUI_gv_uIMyCustomLeaderBoardSortingPlayerCurrentSort[lp_player] = libUIUI_ge_UIMyCustomLeaderBoardSortingSortingType_DefaultSorting;
    }
    libUIUI_gf_UIMyCustomLeaderBoardSortingChangeButtonAvailability(lp_player, libUIUI_gv_uIMyCustomLeaderBoardSortingPlayerCurrentSort[lp_player]);
}

void libUIUI_gf_UIMyCustomLeaderBoardSortingSetDefaultState (int lp_triggeringPlayer) {
    // Variable Declarations
    int lv_allyTeam;
    int lv_enemyTeam;
    int lv_allySlot;
    int lv_enemySlot;
    int lv_itPlayer;
    int lv_slot;
    string lv_image;
    playergroup lv_bothTeams;

    // Automatic Variable Declarations
    playergroup autoBFF06AE0_g;

    // Variable Initialization
    lv_bothTeams = PlayerGroupEmpty();

    // Implementation
    lv_allyTeam = libGame_gf_PlayerGetPlayerTeam(lp_triggeringPlayer);
    lv_enemyTeam = libGame_gf_EnemyTeamNumberOfTeam(lv_allyTeam);
    lv_bothTeams = libNtve_gf_UnionOfPlayerGroups(libGame_gf_PlayersOnTeamHeroes(1, false), libGame_gf_PlayersOnTeamHeroes(2, false));
    autoBFF06AE0_g = lv_bothTeams;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoBFF06AE0_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        lv_allySlot = libGame_gv_players[lv_itPlayer].lv_playerAllySlot;
        lv_enemySlot = libGame_gv_players[lv_itPlayer].lv_playerEnemySlot;
        if ((PlayerGroupHasPlayer(libGame_gv_teams[lv_allyTeam].lv_teamPlayerGroup, lv_itPlayer) == true)) {
            lv_slot = libGame_gv_players[lv_itPlayer].lv_playerAllySlot;
            if ((lv_itPlayer == lp_triggeringPlayer)) {
                libCore_gf_SetDialogItemAnimationState(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameMainDialog[lv_slot], libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "PlayerTypeState", "LocalPlayer");
            }
            else {
                libCore_gf_SetDialogItemAnimationState(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameMainDialog[lv_slot], libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "PlayerTypeState", "AllyPlayer");
            }
        }
        else {
            lv_slot = libGame_gv_players[lv_itPlayer].lv_playerEnemySlot;
            libCore_gf_SetDialogItemAnimationState(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameMainDialog[lv_slot], libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "PlayerTypeState", "EnemyPlayer");
        }
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFramePlayerName[lv_slot], libGame_gv_players[lv_itPlayer].lv_playerName, libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameHeroName[lv_slot], libGame_gv_players[lv_itPlayer].lv_heroName, libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
        libNtve_gf_SetDialogItemImage(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameHeroIconImage[lv_slot], libCore_gv_heroData[libCore_gf_CommandersGetHeroIndexOfPlayerHero(lv_itPlayer)].lv_leaderboardImage, libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsKillsLabel[lv_slot], IntToText(libGame_gv_scoreValues[lv_itPlayer].lv_kills), libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsAssistsLabel[lv_slot], IntToText(libGame_gv_scoreValues[lv_itPlayer].lv_assists), libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsDeathsLabel[lv_slot], IntToText(libGame_gv_scoreValues[lv_itPlayer].lv_deaths), libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsSiegeDamageLabel[lv_slot], FixedToText(libGame_gv_scoreValues[lv_itPlayer].lv_siegeDamage[lv_allyTeam], 0), libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsHeroDamageLabel[lv_slot], FixedToText(libGame_gv_scoreValues[lv_itPlayer].lv_heroDamage[lv_allyTeam], 0), libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsHealedandAbsorbedLabel[lv_slot], FixedToText(libGame_gv_scoreValues[lv_itPlayer].lv_healedandAbsorbed[lv_allyTeam], 0), libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsDamageTakenLabel[lv_slot], FixedToText(libGame_gv_scoreValues[lv_itPlayer].lv_damageTaken[lv_allyTeam], 0), libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsXPContributionLabel[lv_slot], FixedToText(libGame_gv_scoreValues[lv_itPlayer].lv_individualTalentPointsEarned[lv_allyTeam], 0), libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
        libUIUI_gf_UIMyCustomLeaderBoardSortingUpdateBestValueOfSortedPlayer(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsSiegeDamageFrame[lv_slot], libUIUI_ge_UIMyCustomLeaderBoardSortButton_SiegeDamage, lp_triggeringPlayer, lv_itPlayer);
        libUIUI_gf_UIMyCustomLeaderBoardSortingUpdateBestValueOfSortedPlayer(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsHeroDamageFrame[lv_slot], libUIUI_ge_UIMyCustomLeaderBoardSortButton_HeroDamage, lp_triggeringPlayer, lv_itPlayer);
        libUIUI_gf_UIMyCustomLeaderBoardSortingUpdateBestValueOfSortedPlayer(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsHealedandAbsorbedFrame[lv_slot], libUIUI_ge_UIMyCustomLeaderBoardSortButton_HealedandAbsorbed, lp_triggeringPlayer, lv_itPlayer);
        libUIUI_gf_UIMyCustomLeaderBoardSortingUpdateBestValueOfSortedPlayer(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsDamageTakenFrame[lv_slot], libUIUI_ge_UIMyCustomLeaderBoardSortButton_DamageTaken, lp_triggeringPlayer, lv_itPlayer);
        libUIUI_gf_UIMyCustomLeaderBoardSortingUpdateBestValueOfSortedPlayer(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsXPContributionFrame[lv_slot], libUIUI_ge_UIMyCustomLeaderBoardSortButton_XPContribution, lp_triggeringPlayer, lv_itPlayer);

    }
}

void libUIUI_gf_UIMyCustomLeaderBoardSortingSetNonDefaultState (int lp_triggeringPlayer, int lp_sortingType) {
    // Variable Declarations
    int lv_highPlayerInSlot;
    int lv_sortedPlayer;
    int lv_itSlot;
    playergroup lv_bothTeams;
    playergroup lv_alreadySortedPlayers;
    int lv_allyTeam;

    // Automatic Variable Declarations
    int auto34434AB9_ae;
    playergroup auto4964AE64_g;

    // Variable Initialization
    lv_bothTeams = PlayerGroupEmpty();
    lv_alreadySortedPlayers = PlayerGroupEmpty();

    // Implementation
    lv_allyTeam = libGame_gf_TeamNumberOfPlayer(lp_triggeringPlayer);
    lv_bothTeams = libNtve_gf_UnionOfPlayerGroups(libGame_gf_PlayersOnTeamHeroes(1, false), libGame_gf_PlayersOnTeamHeroes(2, false));
    auto34434AB9_ae = libCore_gv_numberofPlayerstoSpawnHeroes;
    lv_itSlot = 1;
    for ( ; lv_itSlot <= auto34434AB9_ae ; lv_itSlot += 1 ) {
        lv_highPlayerInSlot = 0;
        auto4964AE64_g = lv_bothTeams;
        lv_sortedPlayer = -1;
        while (true) {
            lv_sortedPlayer = PlayerGroupNextPlayer(auto4964AE64_g, lv_sortedPlayer);
            if (lv_sortedPlayer < 0) { break; }
            if ((PlayerGroupHasPlayer(lv_alreadySortedPlayers, lv_sortedPlayer) == true)) {
                continue;
            }
            if ((lp_sortingType == libUIUI_ge_UIMyCustomLeaderBoardSortingSortingType_Kills) && (libGame_gv_scoreValues[lv_sortedPlayer].lv_kills >= libGame_gv_scoreValues[lv_highPlayerInSlot].lv_kills)) {
                lv_highPlayerInSlot = lv_sortedPlayer;
            }
            else if ((lp_sortingType == libUIUI_ge_UIMyCustomLeaderBoardSortingSortingType_Assists) && (libGame_gv_scoreValues[lv_sortedPlayer].lv_assists >= libGame_gv_scoreValues[lv_highPlayerInSlot].lv_assists)) {
                lv_highPlayerInSlot = lv_sortedPlayer;
            }
            else if ((lp_sortingType == libUIUI_ge_UIMyCustomLeaderBoardSortingSortingType_Deaths) && (libGame_gv_scoreValues[lv_sortedPlayer].lv_deaths >= libGame_gv_scoreValues[lv_highPlayerInSlot].lv_deaths)) {
                lv_highPlayerInSlot = lv_sortedPlayer;
            }
            else if ((lp_sortingType == libUIUI_ge_UIMyCustomLeaderBoardSortingSortingType_SiegeDamage) && (libGame_gv_scoreValues[lv_sortedPlayer].lv_siegeDamage[lv_allyTeam] >= libGame_gv_scoreValues[lv_highPlayerInSlot].lv_siegeDamage[lv_allyTeam])) {
                lv_highPlayerInSlot = lv_sortedPlayer;
            }
            else if ((lp_sortingType == libUIUI_ge_UIMyCustomLeaderBoardSortingSortingType_HeroDamage) && (libGame_gv_scoreValues[lv_sortedPlayer].lv_heroDamage[lv_allyTeam] >= libGame_gv_scoreValues[lv_highPlayerInSlot].lv_heroDamage[lv_allyTeam])) {
                lv_highPlayerInSlot = lv_sortedPlayer;
            }
            else if ((lp_sortingType == libUIUI_ge_UIMyCustomLeaderBoardSortingSortingType_HealedandAbsorbed) && (libGame_gv_scoreValues[lv_sortedPlayer].lv_healedandAbsorbed[lv_allyTeam] >= libGame_gv_scoreValues[lv_highPlayerInSlot].lv_healedandAbsorbed[lv_allyTeam])) {
                lv_highPlayerInSlot = lv_sortedPlayer;
            }
            else if ((lp_sortingType == libUIUI_ge_UIMyCustomLeaderBoardSortingSortingType_DamageTaken) && (libGame_gv_scoreValues[lv_sortedPlayer].lv_damageTaken[lv_allyTeam] >= libGame_gv_scoreValues[lv_highPlayerInSlot].lv_damageTaken[lv_allyTeam])) {
                lv_highPlayerInSlot = lv_sortedPlayer;
            }
            else if ((lp_sortingType == libUIUI_ge_UIMyCustomLeaderBoardSortingSortingType_XPContribution) && (libGame_gv_scoreValues[lv_sortedPlayer].lv_individualTalentPointsEarned[lv_allyTeam] >= libGame_gv_scoreValues[lv_highPlayerInSlot].lv_individualTalentPointsEarned[lv_allyTeam])) {
                lv_highPlayerInSlot = lv_sortedPlayer;
            }
        }
        if ((lv_highPlayerInSlot == 0) && (lv_itSlot == 1)) {
            return ;
        }
        PlayerGroupAdd(lv_alreadySortedPlayers, lv_highPlayerInSlot);
        libUIUI_gf_UIMyCustomLeaderBoardSortingMoveSortedPlayerToSlot(lp_triggeringPlayer, lv_itSlot, lv_highPlayerInSlot);
    }
}

void libUIUI_gf_UIMyCustomLeaderBoardSortingDoSorting (int lp_player) {
    // Variable Declarations
    int lv_sortingType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sortingType = libUIUI_gv_uIMyCustomLeaderBoardSortingPlayerCurrentSort[lp_player];

    // Implementation
    if ((lv_sortingType == libUIUI_ge_UIMyCustomLeaderBoardSortingSortingType_DefaultSorting)) {
        libUIUI_gf_UIMyCustomLeaderBoardSortingSetDefaultState(lp_player);
    }
    else {
        libUIUI_gf_UIMyCustomLeaderBoardSortingSetNonDefaultState(lp_player, lv_sortingType);
    }
}

void libUIUI_gf_UIMyCustomLeaderBoardSortingMoveSortedPlayerToSlot (int lp_triggeringPlayer, int lp_slotIndex, int lp_sortedPlayer) {
    // Variable Declarations
    int lv_allyTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_allyTeam = libGame_gf_TeamNumberOfPlayer(lp_triggeringPlayer);
    if ((libGame_gf_PlayerGetPlayerTeam(lp_sortedPlayer) == libGame_gf_PlayerGetPlayerTeam(lp_triggeringPlayer))) {
        libCore_gf_SetDialogItemAnimationState(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameMainDialog[lp_slotIndex], libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "PlayerTypeState", "AllyPlayer");
    }
    else {
        libCore_gf_SetDialogItemAnimationState(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameMainDialog[lp_slotIndex], libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "PlayerTypeState", "EnemyPlayer");
    }
    if ((lp_sortedPlayer == lp_triggeringPlayer)) {
        libCore_gf_SetDialogItemAnimationState(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameMainDialog[lp_slotIndex], libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "PlayerTypeState", "LocalPlayer");
    }

    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFramePlayerName[lp_slotIndex], libGame_gv_players[lp_sortedPlayer].lv_playerName, libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameHeroName[lp_slotIndex], libGame_gv_players[lp_sortedPlayer].lv_heroName, libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameHeroIconImage[lp_slotIndex], libCore_gv_heroData[libCore_gf_CommandersGetHeroIndexOfPlayerHero(lp_sortedPlayer)].lv_leaderboardImage, libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsKillsLabel[lp_slotIndex], IntToText(libGame_gv_scoreValues[lp_sortedPlayer].lv_kills), libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsAssistsLabel[lp_slotIndex], IntToText(libGame_gv_scoreValues[lp_sortedPlayer].lv_assists), libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsDeathsLabel[lp_slotIndex], IntToText(libGame_gv_scoreValues[lp_sortedPlayer].lv_deaths), libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsSiegeDamageLabel[lp_slotIndex], FixedToText(libGame_gv_scoreValues[lp_sortedPlayer].lv_siegeDamage[lv_allyTeam], 0), libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsHeroDamageLabel[lp_slotIndex], FixedToText(libGame_gv_scoreValues[lp_sortedPlayer].lv_heroDamage[lv_allyTeam], 0), libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsHealedandAbsorbedLabel[lp_slotIndex], FixedToText(libGame_gv_scoreValues[lp_sortedPlayer].lv_healedandAbsorbed[lv_allyTeam], 0), libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsDamageTakenLabel[lp_slotIndex], FixedToText(libGame_gv_scoreValues[lp_sortedPlayer].lv_damageTaken[lv_allyTeam], 0), libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsXPContributionLabel[lp_slotIndex], FixedToText(libGame_gv_scoreValues[lp_sortedPlayer].lv_individualTalentPointsEarned[lv_allyTeam], 0), libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
    libUIUI_gf_UIMyCustomLeaderBoardSortingUpdateBestValueOfSortedPlayer(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsSiegeDamageFrame[lp_slotIndex], libUIUI_ge_UIMyCustomLeaderBoardSortButton_SiegeDamage, lp_triggeringPlayer, lp_sortedPlayer);
    libUIUI_gf_UIMyCustomLeaderBoardSortingUpdateBestValueOfSortedPlayer(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsHeroDamageFrame[lp_slotIndex], libUIUI_ge_UIMyCustomLeaderBoardSortButton_HeroDamage, lp_triggeringPlayer, lp_sortedPlayer);
    libUIUI_gf_UIMyCustomLeaderBoardSortingUpdateBestValueOfSortedPlayer(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsHealedandAbsorbedFrame[lp_slotIndex], libUIUI_ge_UIMyCustomLeaderBoardSortButton_HealedandAbsorbed, lp_triggeringPlayer, lp_sortedPlayer);
    libUIUI_gf_UIMyCustomLeaderBoardSortingUpdateBestValueOfSortedPlayer(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsDamageTakenFrame[lp_slotIndex], libUIUI_ge_UIMyCustomLeaderBoardSortButton_DamageTaken, lp_triggeringPlayer, lp_sortedPlayer);
    libUIUI_gf_UIMyCustomLeaderBoardSortingUpdateBestValueOfSortedPlayer(libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsXPContributionFrame[lp_slotIndex], libUIUI_ge_UIMyCustomLeaderBoardSortButton_XPContribution, lp_triggeringPlayer, lp_sortedPlayer);
}

void libUIUI_gf_UIMyCustomLeaderBoardSortingChangeButtonAvailability (int lp_player, int lp_sortingType) {
    // Variable Declarations
    bool lv_acceptMouseState;
    bool lv_toggledState;

    // Automatic Variable Declarations
    int autoF7A0A9A7_val;

    // Variable Initialization

    // Implementation
    if ((lp_sortingType != libUIUI_ge_UIMyCustomLeaderBoardSortingSortingType_DefaultSorting)) {
        lv_acceptMouseState = false;
        libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIMyCustomLeaderBoard.lv_sortKills, lv_acceptMouseState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIMyCustomLeaderBoard.lv_sortAssists, lv_acceptMouseState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIMyCustomLeaderBoard.lv_sortDeaths, lv_acceptMouseState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIMyCustomLeaderBoard.lv_sortSiegeDamage, lv_acceptMouseState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIMyCustomLeaderBoard.lv_sortHeroDamage, lv_acceptMouseState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIMyCustomLeaderBoard.lv_sortHealedAndAbsorbed, lv_acceptMouseState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIMyCustomLeaderBoard.lv_sortDamageTaken, lv_acceptMouseState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIMyCustomLeaderBoard.lv_sortXPContribution, lv_acceptMouseState, libCore_gv_playerGroupFromPlayer[lp_player]);
        autoF7A0A9A7_val = lp_sortingType;
        if (autoF7A0A9A7_val == libUIUI_ge_UIMyCustomLeaderBoardSortingSortingType_Kills) {
            libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIMyCustomLeaderBoard.lv_sortKills, true, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (autoF7A0A9A7_val == libUIUI_ge_UIMyCustomLeaderBoardSortingSortingType_Assists) {
            libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIMyCustomLeaderBoard.lv_sortAssists, true, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (autoF7A0A9A7_val == libUIUI_ge_UIMyCustomLeaderBoardSortingSortingType_Deaths) {
            libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIMyCustomLeaderBoard.lv_sortDeaths, true, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (autoF7A0A9A7_val == libUIUI_ge_UIMyCustomLeaderBoardSortingSortingType_SiegeDamage) {
            libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIMyCustomLeaderBoard.lv_sortSiegeDamage, true, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (autoF7A0A9A7_val == libUIUI_ge_UIMyCustomLeaderBoardSortingSortingType_HeroDamage) {
            libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIMyCustomLeaderBoard.lv_sortHeroDamage, true, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (autoF7A0A9A7_val == libUIUI_ge_UIMyCustomLeaderBoardSortingSortingType_HealedandAbsorbed) {
            libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIMyCustomLeaderBoard.lv_sortHealedAndAbsorbed, true, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (autoF7A0A9A7_val == libUIUI_ge_UIMyCustomLeaderBoardSortingSortingType_DamageTaken) {
            libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIMyCustomLeaderBoard.lv_sortDamageTaken, true, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (autoF7A0A9A7_val == libUIUI_ge_UIMyCustomLeaderBoardSortingSortingType_XPContribution) {
            libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIMyCustomLeaderBoard.lv_sortXPContribution, true, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else {
        }
    }
    else {
        lv_acceptMouseState = true;
        lv_toggledState = false;
        libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIMyCustomLeaderBoard.lv_sortKills, lv_acceptMouseState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIMyCustomLeaderBoard.lv_sortAssists, lv_acceptMouseState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIMyCustomLeaderBoard.lv_sortDeaths, lv_acceptMouseState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIMyCustomLeaderBoard.lv_sortSiegeDamage, lv_acceptMouseState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIMyCustomLeaderBoard.lv_sortHeroDamage, lv_acceptMouseState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIMyCustomLeaderBoard.lv_sortHealedAndAbsorbed, lv_acceptMouseState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIMyCustomLeaderBoard.lv_sortDamageTaken, lv_acceptMouseState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_uIMyCustomLeaderBoard.lv_sortXPContribution, lv_acceptMouseState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_uIMyCustomLeaderBoard.lv_sortKills, lv_toggledState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_uIMyCustomLeaderBoard.lv_sortAssists, lv_toggledState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_uIMyCustomLeaderBoard.lv_sortDeaths, lv_toggledState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_uIMyCustomLeaderBoard.lv_sortSiegeDamage, lv_toggledState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_uIMyCustomLeaderBoard.lv_sortHeroDamage, lv_toggledState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_uIMyCustomLeaderBoard.lv_sortHealedAndAbsorbed, lv_toggledState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_uIMyCustomLeaderBoard.lv_sortDamageTaken, lv_toggledState, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_uIMyCustomLeaderBoard.lv_sortXPContribution, lv_toggledState, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
}

void libUIUI_gf_UIMyCustomLeaderBoardSortingChangeBestValueTypeOfFrameForPlayer (int lp_bestValueType, int lp_dialogItem, int lp_triggeringPlayer) {
    // Variable Declarations
    int lv_valueFrame;

    // Automatic Variable Declarations
    int autoFB3070C6_val;

    // Variable Initialization
    lv_valueFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlHookup(lp_dialogItem, c_triggerControlTypePanel, "ScoreValueFrame0");
    lv_valueFrame = DialogControlLastCreated();
    autoFB3070C6_val = lp_bestValueType;
    if (autoFB3070C6_val == libUIUI_ge_UIMyCustomLeaderBoardSortingBestValue_AllyBestValue) {
        DialogControlSendAnimationEvent(lv_valueFrame, libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "AllyBestValue");
    }
    else if (autoFB3070C6_val == libUIUI_ge_UIMyCustomLeaderBoardSortingBestValue_AllyNotBestValue) {
        DialogControlSendAnimationEvent(lv_valueFrame, libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "AllyNotBestValue");
    }
    else if (autoFB3070C6_val == libUIUI_ge_UIMyCustomLeaderBoardSortingBestValue_EnemyBestValue) {
        DialogControlSendAnimationEvent(lv_valueFrame, libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "EnemyBestValue");
    }
    else if (autoFB3070C6_val == libUIUI_ge_UIMyCustomLeaderBoardSortingBestValue_EnemyNotBestValue) {
        DialogControlSendAnimationEvent(lv_valueFrame, libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "EnemyNotBestValue");
    }
    else {
    }
}

void libUIUI_gf_UIMyCustomLeaderBoardSortingCalculateBestSortingPlayerForBothTeams () {
    // Variable Declarations
    int lv_itNumber;
    int lv_itTeam;
    int lv_itPlayerFirst;
    int lv_itPlayerSecond;
    int lv_itSorting;
    int lv_allyTeam;
    int lv_enemyTeam;

    // Automatic Variable Declarations
    int auto082768D7_ae;
    int auto8870B1F7_ae;
    int autoE89094AD_ae;
    int auto96E76E20_n;
    int auto96E76E20_i;

    // Variable Initialization

    // Implementation
    auto082768D7_ae = libCore_gv_bALMaxTeams;
    lv_itTeam = 1;
    for ( ; lv_itTeam <= auto082768D7_ae ; lv_itTeam += 1 ) {
        lv_allyTeam = lv_itTeam;
        lv_enemyTeam = libGame_gf_EnemyTeamNumberOfTeam(lv_allyTeam);
        if ((PlayerGroupCount(libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers) == 1)) {
            auto8870B1F7_ae = libUIUI_gv_uIMyCustomLeaderBoardsMaxSortingButtons;
            lv_itSorting = 3;
            for ( ; lv_itSorting <= auto8870B1F7_ae ; lv_itSorting += 1 ) {
                lv_itPlayerFirst = PlayerGroupPlayer(libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, 1);
                if ((lv_itSorting == libUIUI_ge_UIMyCustomLeaderBoardSortButton_HeroDamage)) {
                    libUIUI_gv_uIMyCustomLeaderBoardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_allyTeam] = libGame_gv_scoreValues[lv_itPlayerFirst].lv_heroDamage[lv_allyTeam];
                    libUIUI_gv_uIMyCustomLeaderBoardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_enemyTeam] = libGame_gv_scoreValues[lv_itPlayerFirst].lv_heroDamage[lv_enemyTeam];
                }
                else if ((lv_itSorting == libUIUI_ge_UIMyCustomLeaderBoardSortButton_SiegeDamage)) {
                    libUIUI_gv_uIMyCustomLeaderBoardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_allyTeam] = libGame_gv_scoreValues[lv_itPlayerFirst].lv_siegeDamage[lv_allyTeam];
                    libUIUI_gv_uIMyCustomLeaderBoardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_enemyTeam] = libGame_gv_scoreValues[lv_itPlayerFirst].lv_siegeDamage[lv_enemyTeam];
                }
                else if ((lv_itSorting == libUIUI_ge_UIMyCustomLeaderBoardSortButton_DamageTaken)) {
                    libUIUI_gv_uIMyCustomLeaderBoardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_allyTeam] = libGame_gv_scoreValues[lv_itPlayerFirst].lv_damageTaken[lv_allyTeam];
                    libUIUI_gv_uIMyCustomLeaderBoardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_enemyTeam] = libGame_gv_scoreValues[lv_itPlayerFirst].lv_damageTaken[lv_enemyTeam];
                }
                else if ((lv_itSorting == libUIUI_ge_UIMyCustomLeaderBoardSortButton_HealedandAbsorbed)) {
                    libUIUI_gv_uIMyCustomLeaderBoardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_allyTeam] = libGame_gv_scoreValues[lv_itPlayerFirst].lv_healedandAbsorbed[lv_allyTeam];
                    libUIUI_gv_uIMyCustomLeaderBoardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_enemyTeam] = libGame_gv_scoreValues[lv_itPlayerFirst].lv_healedandAbsorbed[lv_enemyTeam];
                }
                else if ((lv_itSorting == libUIUI_ge_UIMyCustomLeaderBoardSortButton_XPContribution)) {
                    libUIUI_gv_uIMyCustomLeaderBoardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_allyTeam] = libGame_gv_scoreValues[lv_itPlayerFirst].lv_individualTalentPointsEarned[lv_allyTeam];
                    libUIUI_gv_uIMyCustomLeaderBoardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_enemyTeam] = libGame_gv_scoreValues[lv_itPlayerFirst].lv_individualTalentPointsEarned[lv_enemyTeam];
                }
            }
        }
        else {
            autoE89094AD_ae = libUIUI_gv_uIMyCustomLeaderBoardsMaxSortingButtons;
            lv_itSorting = 3;
            for ( ; lv_itSorting <= autoE89094AD_ae ; lv_itSorting += 1 ) {
                lv_itNumber = 0;
                auto96E76E20_n = (PlayerGroupCount(libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers) - 1);
                for (auto96E76E20_i = 1; auto96E76E20_i <= auto96E76E20_n; auto96E76E20_i += 1) {
                    lv_itNumber += 1;
                    lv_itPlayerFirst = PlayerGroupPlayer(libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, lv_itNumber);
                    lv_itPlayerSecond = PlayerGroupPlayer(libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, (lv_itNumber+1));
                    if ((lv_itSorting == libUIUI_ge_UIMyCustomLeaderBoardSortButton_HeroDamage)) {
                        libUIUI_gv_uIMyCustomLeaderBoardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_allyTeam] = MaxF(libGame_gv_scoreValues[lv_itPlayerFirst].lv_heroDamage[lv_allyTeam], libGame_gv_scoreValues[lv_itPlayerSecond].lv_heroDamage[lv_allyTeam]);
                        libUIUI_gv_uIMyCustomLeaderBoardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_enemyTeam] = MaxF(libGame_gv_scoreValues[lv_itPlayerFirst].lv_heroDamage[lv_enemyTeam], libGame_gv_scoreValues[lv_itPlayerSecond].lv_heroDamage[lv_enemyTeam]);
                    }
                    else if ((lv_itSorting == libUIUI_ge_UIMyCustomLeaderBoardSortButton_SiegeDamage)) {
                        libUIUI_gv_uIMyCustomLeaderBoardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_allyTeam] = MaxF(libGame_gv_scoreValues[lv_itPlayerFirst].lv_siegeDamage[lv_allyTeam], libGame_gv_scoreValues[lv_itPlayerSecond].lv_siegeDamage[lv_allyTeam]);
                        libUIUI_gv_uIMyCustomLeaderBoardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_enemyTeam] = MaxF(libGame_gv_scoreValues[lv_itPlayerFirst].lv_siegeDamage[lv_enemyTeam], libGame_gv_scoreValues[lv_itPlayerSecond].lv_siegeDamage[lv_enemyTeam]);
                    }
                    else if ((lv_itSorting == libUIUI_ge_UIMyCustomLeaderBoardSortButton_DamageTaken)) {
                        libUIUI_gv_uIMyCustomLeaderBoardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_allyTeam] = MaxF(libGame_gv_scoreValues[lv_itPlayerFirst].lv_damageTaken[lv_allyTeam], libGame_gv_scoreValues[lv_itPlayerSecond].lv_damageTaken[lv_allyTeam]);
                        libUIUI_gv_uIMyCustomLeaderBoardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_enemyTeam] = MaxF(libGame_gv_scoreValues[lv_itPlayerFirst].lv_damageTaken[lv_enemyTeam], libGame_gv_scoreValues[lv_itPlayerSecond].lv_damageTaken[lv_enemyTeam]);
                    }
                    else if ((lv_itSorting == libUIUI_ge_UIMyCustomLeaderBoardSortButton_HealedandAbsorbed)) {
                        libUIUI_gv_uIMyCustomLeaderBoardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_allyTeam] = MaxF(libGame_gv_scoreValues[lv_itPlayerFirst].lv_healedandAbsorbed[lv_allyTeam], libGame_gv_scoreValues[lv_itPlayerSecond].lv_healedandAbsorbed[lv_allyTeam]);
                        libUIUI_gv_uIMyCustomLeaderBoardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_enemyTeam] = MaxF(libGame_gv_scoreValues[lv_itPlayerFirst].lv_healedandAbsorbed[lv_enemyTeam], libGame_gv_scoreValues[lv_itPlayerSecond].lv_healedandAbsorbed[lv_enemyTeam]);
                    }
                    else if ((lv_itSorting == libUIUI_ge_UIMyCustomLeaderBoardSortButton_XPContribution)) {
                        libUIUI_gv_uIMyCustomLeaderBoardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_allyTeam] = MaxF(libGame_gv_scoreValues[lv_itPlayerFirst].lv_individualTalentPointsEarned[lv_allyTeam], libGame_gv_scoreValues[lv_itPlayerSecond].lv_individualTalentPointsEarned[lv_allyTeam]);
                        libUIUI_gv_uIMyCustomLeaderBoardSortingBestValueOfSort[lv_itTeam][lv_itSorting][lv_enemyTeam] = MaxF(libGame_gv_scoreValues[lv_itPlayerFirst].lv_individualTalentPointsEarned[lv_enemyTeam], libGame_gv_scoreValues[lv_itPlayerSecond].lv_individualTalentPointsEarned[lv_enemyTeam]);
                    }
                }
            }
        }
    }
}

void libUIUI_gf_UIMyCustomLeaderBoardSortingUpdateBestValueOfSortedPlayer (int lp_dialogItem, int lp_sortingType, int lp_triggeringPlayer, int lp_sortedPlayer) {
    // Variable Declarations
    int lv_sortedPlayerTeam;
    int lv_triggeringPlayerTeam;
    fixed lv_valueReal;

    // Automatic Variable Declarations
    int autoD1DA03A3_val;

    // Variable Initialization

    // Implementation
    lv_sortedPlayerTeam = libGame_gf_PlayerGetPlayerTeam(lp_sortedPlayer);
    lv_triggeringPlayerTeam = libGame_gf_PlayerGetPlayerTeam(lp_triggeringPlayer);
    autoD1DA03A3_val = lp_sortingType;
    if (autoD1DA03A3_val == libUIUI_ge_UIMyCustomLeaderBoardSortButton_HeroDamage) {
        lv_valueReal = libGame_gv_scoreValues[lp_sortedPlayer].lv_heroDamage[lv_triggeringPlayerTeam];
    }
    else if (autoD1DA03A3_val == libUIUI_ge_UIMyCustomLeaderBoardSortButton_SiegeDamage) {
        lv_valueReal = libGame_gv_scoreValues[lp_sortedPlayer].lv_siegeDamage[lv_triggeringPlayerTeam];
    }
    else if (autoD1DA03A3_val == libUIUI_ge_UIMyCustomLeaderBoardSortButton_HealedandAbsorbed) {
        lv_valueReal = libGame_gv_scoreValues[lp_sortedPlayer].lv_healedandAbsorbed[lv_triggeringPlayerTeam];
    }
    else if (autoD1DA03A3_val == libUIUI_ge_UIMyCustomLeaderBoardSortButton_DamageTaken) {
        lv_valueReal = libGame_gv_scoreValues[lp_sortedPlayer].lv_damageTaken[lv_triggeringPlayerTeam];
    }
    else if (autoD1DA03A3_val == libUIUI_ge_UIMyCustomLeaderBoardSortButton_XPContribution) {
        lv_valueReal = libGame_gv_scoreValues[lp_sortedPlayer].lv_individualTalentPointsEarned[lv_triggeringPlayerTeam];
    }
    else {
    }
    if ((lv_valueReal == 0.0)) {
        return ;
    }
    if ((lv_sortedPlayerTeam == libGame_gf_PlayerGetPlayerTeam(lp_triggeringPlayer))) {
        if ((lv_valueReal == libUIUI_gv_uIMyCustomLeaderBoardSortingBestValueOfSort[lv_sortedPlayerTeam][(lp_sortingType)][lv_triggeringPlayerTeam])) {
            libUIUI_gf_UIMyCustomLeaderBoardSortingChangeBestValueTypeOfFrameForPlayer(libUIUI_ge_UIMyCustomLeaderBoardSortingBestValue_AllyBestValue, lp_dialogItem, lp_triggeringPlayer);
        }
        else {
            libUIUI_gf_UIMyCustomLeaderBoardSortingChangeBestValueTypeOfFrameForPlayer(libUIUI_ge_UIMyCustomLeaderBoardSortingBestValue_AllyNotBestValue, lp_dialogItem, lp_triggeringPlayer);
        }
    }
    else {
        if ((lv_valueReal == libUIUI_gv_uIMyCustomLeaderBoardSortingBestValueOfSort[lv_sortedPlayerTeam][(lp_sortingType)][lv_triggeringPlayerTeam])) {
            libUIUI_gf_UIMyCustomLeaderBoardSortingChangeBestValueTypeOfFrameForPlayer(libUIUI_ge_UIMyCustomLeaderBoardSortingBestValue_EnemyBestValue, lp_dialogItem, lp_triggeringPlayer);
        }
        else {
            libUIUI_gf_UIMyCustomLeaderBoardSortingChangeBestValueTypeOfFrameForPlayer(libUIUI_ge_UIMyCustomLeaderBoardSortingBestValue_EnemyNotBestValue, lp_dialogItem, lp_triggeringPlayer);
        }
    }
}

void libUIUI_gf_UIMyCustomLeaderBoardTalentsUpdateTalentsBoardforPlayer (int lp_triggeringPlayer) {
    // Variable Declarations
    int lv_itTier;
    int lv_itColumn;
    int lv_targetPlayer;
    int lv_heroIndex;
    int lv_questBehaviorStacksCountCurrent;
    int lv_questBehaviorStacksCountMax;

    // Automatic Variable Declarations
    int autoEA4C6D9D_ae;
    int auto6C9D7367_ae;

    // Variable Initialization

    // Implementation
    lv_targetPlayer = libUIUI_gv_uIMyCustomLeaderBoardTalentsPlayerMonitoringTalentsOfPlayer[lp_triggeringPlayer];
    lv_heroIndex = libCore_gf_CommandersGetHeroIndexOfPlayerHero(lv_targetPlayer);
    autoEA4C6D9D_ae = libCore_gv_dataHeroesMaxTalentsTiers;
    lv_itTier = 1;
    for ( ; lv_itTier <= autoEA4C6D9D_ae ; lv_itTier += 1 ) {
        if ((lv_targetPlayer == lp_triggeringPlayer)) {
            if ((libGame_gv_players[lp_triggeringPlayer].lv_eXPPoints >= libCore_gv_talentsTierInfo[lv_itTier].lv_price) && (lv_itTier <= libGame_gv_players[lp_triggeringPlayer].lv_talentsCurrentMaxTier) && (libGame_gv_players[lp_triggeringPlayer].lv_talentsNumberofPickedTalentsPerTier[lv_itTier] < libCore_gv_talentsTierInfo[lv_itTier].lv_maximumAvailiableTalents)) {
                DialogControlSetEnabled(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_tierLabels[lv_itTier], libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], true);
            }
            else {
                DialogControlSetEnabled(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_tierLabels[lv_itTier], libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], false);
            }
        }
        else {
            DialogControlSetEnabled(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_tierLabels[lv_itTier], libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], false);
        }
        auto6C9D7367_ae = libCore_gv_dataHeroesMaxTalentsperTier;
        lv_itColumn = 1;
        for ( ; lv_itColumn <= auto6C9D7367_ae ; lv_itColumn += 1 ) {
            if ((lv_targetPlayer == lp_triggeringPlayer)) {
                if (((libGame_gv_players[lp_triggeringPlayer].lv_eXPPoints < libCore_gv_talentsTierInfo[lv_itTier].lv_price) || (libGame_gv_players[lp_triggeringPlayer].lv_talentsNumberofPickedTalentsPerTier[lv_itTier] == libCore_gv_talentsTierInfo[lv_itTier].lv_maximumAvailiableTalents))) {
                    libCore_gf_SetDialogItemAnimationState(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentButton[lv_itTier][lv_itColumn], libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "CustomDisabling", "Disabled");
                    if ((libGame_gv_players[lp_triggeringPlayer].lv_mYTalentsTalentPicked[lv_itTier][lv_itColumn] == false)) {
                        libUIUI_gf_UIMyCustomLeaderBoardTalentsSelectDeselectTalentUIForPlayer(lp_triggeringPlayer, false, lv_itTier, lv_itColumn);
                    }
                    else {
                        libUIUI_gf_UIMyCustomLeaderBoardTalentsSelectDeselectTalentUIForPlayer(lp_triggeringPlayer, true, lv_itTier, lv_itColumn);
                    }
                }
                else {
                    if ((libGame_gv_players[lp_triggeringPlayer].lv_talentsCurrentMaxTier >= lv_itTier)) {
                        if ((libGame_gv_players[lp_triggeringPlayer].lv_mYTalentsTalentPicked[lv_itTier][lv_itColumn] == true)) {
                            libUIUI_gf_UIMyCustomLeaderBoardTalentsSelectDeselectTalentUIForPlayer(lp_triggeringPlayer, true, lv_itTier, lv_itColumn);
                            libCore_gf_SetDialogItemAnimationState(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentButton[lv_itTier][lv_itColumn], libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "CustomDisabling", "Disabled");
                        }
                        else {
                            libUIUI_gf_UIMyCustomLeaderBoardTalentsSelectDeselectTalentUIForPlayer(lp_triggeringPlayer, false, lv_itTier, lv_itColumn);
                            libCore_gf_SetDialogItemAnimationState(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentButton[lv_itTier][lv_itColumn], libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "CustomDisabling", "Enabled");
                        }
                    }

                }
            }
            else {
                if ((libGame_gv_players[lv_targetPlayer].lv_mYTalentsTalentPicked[lv_itTier][lv_itColumn] == true)) {
                    libUIUI_gf_UIMyCustomLeaderBoardTalentsSelectDeselectTalentUIForPlayer(lp_triggeringPlayer, true, lv_itTier, lv_itColumn);
                    libCore_gf_SetDialogItemAnimationState(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentButton[lv_itTier][lv_itColumn], libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "CustomDisabling", "Enabled");
                }
                else {
                    libUIUI_gf_UIMyCustomLeaderBoardTalentsSelectDeselectTalentUIForPlayer(lp_triggeringPlayer, false, lv_itTier, lv_itColumn);
                    libCore_gf_SetDialogItemAnimationState(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentButton[lv_itTier][lv_itColumn], libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "CustomDisabling", "Disabled");
                }
            }
            if ((libCore_gv_heroData[lv_heroIndex].lv_talentsData[lv_itTier][lv_itColumn].lv_isQuest == true)) {
                lv_questBehaviorStacksCountCurrent = UnitBehaviorCount(libGame_gf_PlayerHeroUnit(lv_targetPlayer), libCore_gv_heroData[lv_heroIndex].lv_talentsData[lv_itTier][lv_itColumn].lv_questBehaviorLink);
                lv_questBehaviorStacksCountMax = libCore_gv_heroData[lv_heroIndex].lv_talentsData[lv_itTier][lv_itColumn].lv_questBehaviorMaxStacks;
                DialogControlSetVisible(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentTooltipLabelQuestProgression[lv_itTier][lv_itColumn], libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], true);
                TextExpressionSetToken("Param/Expression/lib_UIUI_5606D9BC", "A", IntToText(lv_questBehaviorStacksCountCurrent));
                TextExpressionSetToken("Param/Expression/lib_UIUI_5606D9BC", "B", IntToText(lv_questBehaviorStacksCountMax));
                libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentTooltipLabelQuestProgression[lv_itTier][lv_itColumn], (StringExternal("Param/Value/lib_UIUI_1D8D5993") + TextExpressionAssemble("Param/Expression/lib_UIUI_5606D9BC")), libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
                if ((libGame_gv_players[lv_targetPlayer].lv_mYTalentsTalentPicked[lv_itTier][lv_itColumn] == true)) {
                    if ((lv_questBehaviorStacksCountCurrent > 0) && (lv_questBehaviorStacksCountCurrent < lv_questBehaviorStacksCountMax)) {
                        libCore_gf_SetDialogItemAnimationState(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentFrame[lv_itTier][lv_itColumn], libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "TalentQuestProgress", "HasQuest");
                        libNtve_gf_SetDialogItemMaximumValue(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentQuestProgressBar[lv_itTier][lv_itColumn], lv_questBehaviorStacksCountMax, libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
                        libNtve_gf_SetDialogItemCurrentValue(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentQuestProgressBar[lv_itTier][lv_itColumn], lv_questBehaviorStacksCountCurrent, libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
                    }
                    else if ((lv_questBehaviorStacksCountCurrent == lv_questBehaviorStacksCountMax)) {
                        libCore_gf_SetDialogItemAnimationState(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentFrame[lv_itTier][lv_itColumn], libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "TalentQuestProgress", "FinishedQuest");
                    }
                }
                else {
                    libCore_gf_SetDialogItemAnimationState(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentFrame[lv_itTier][lv_itColumn], libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "TalentQuestProgress", "StartedQuest");
                }
            }
            else {
                DialogControlSetVisible(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentTooltipLabelQuestProgression[lv_itTier][lv_itColumn], libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], false);
                libCore_gf_SetDialogItemAnimationState(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentFrame[lv_itTier][lv_itColumn], libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "TalentQuestProgress", "NoQuest");
            }
        }
    }
}

void libUIUI_gf_UIMyCustomLeaderBoardTalentsSelectDeselectTalentUIForPlayer (int lp_player, bool lp_selectDeselect, int lp_talentTier, int lp_talentColumn) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_selectDeselect == true)) {
        libCore_gf_SetDialogItemAnimationState(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentButton[lp_talentTier][lp_talentColumn], libCore_gv_playerGroupFromPlayer[lp_player], "SelectedGroup", "Selected");
    }
    else {
        libCore_gf_SetDialogItemAnimationState(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentButton[lp_talentTier][lp_talentColumn], libCore_gv_playerGroupFromPlayer[lp_player], "SelectedGroup", "Deselected");
    }
}

void libUIUI_gf_UIMyCustomLeaderBoardTalentsPlayerClicksOnTalentHeroIconSelectionDialogItem (int lp_triggeringPlayer, int lp_dialogItem) {
    // Variable Declarations
    int lv_itHeroSelectionButtonImage;
    int lv_triggeringPlayerTeam;
    int lv_newMonitoredPlayerTeam;
    int lv_slot;
    int lv_newMonitoredPlayer;
    int lv_oldMonitoredPlayer;
    int lv_newMonitoredPlayerSlot;

    // Automatic Variable Declarations
    int autoBE5093AF_ae;
    int auto15234265_ae;

    // Variable Initialization

    // Implementation
    lv_slot = libGame_gv_players[lp_triggeringPlayer].lv_playerAllySlot;
    lv_triggeringPlayerTeam = libGame_gf_TeamNumberOfPlayer(lp_triggeringPlayer);
    autoBE5093AF_ae = libCore_gv_bALMaxPlayersOnATeam;
    lv_itHeroSelectionButtonImage = 1;
    for ( ; lv_itHeroSelectionButtonImage <= autoBE5093AF_ae ; lv_itHeroSelectionButtonImage += 1 ) {
        if ((libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_heroSelectionButtonTeamAlly[lv_itHeroSelectionButtonImage] == lp_dialogItem)) {
            lv_newMonitoredPlayer = PlayerGroupPlayer(libGame_gv_teams[lv_triggeringPlayerTeam].lv_teamPlayerGroupNoNPCPlayers, lv_itHeroSelectionButtonImage);
            break;
        }
        else if ((libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_heroSelectionButtonTeamEnemy[lv_itHeroSelectionButtonImage] == lp_dialogItem)) {
            lv_newMonitoredPlayer = PlayerGroupPlayer(libGame_gv_teams[libGame_gf_EnemyTeamNumberOfTeam(lv_triggeringPlayerTeam)].lv_teamPlayerGroupNoNPCPlayers, lv_itHeroSelectionButtonImage);
            break;
        }
    }
    lv_oldMonitoredPlayer = libUIUI_gv_uIMyCustomLeaderBoardTalentsPlayerMonitoringTalentsOfPlayer[lp_triggeringPlayer];
    if ((lv_newMonitoredPlayer == lv_oldMonitoredPlayer)) {
        return ;
    }
    auto15234265_ae = libCore_gv_bALMaxPlayersOnATeam;
    lv_itHeroSelectionButtonImage = 1;
    for ( ; lv_itHeroSelectionButtonImage <= auto15234265_ae ; lv_itHeroSelectionButtonImage += 1 ) {
        if ((lv_slot == lv_itHeroSelectionButtonImage)) {
            libCore_gf_SetDialogItemAnimationState(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_heroSelectionButtonTeamAlly[lv_itHeroSelectionButtonImage], libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "HeroSelectionType", "UnselectedSelf");
        }
        else {
            libCore_gf_SetDialogItemAnimationState(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_heroSelectionButtonTeamAlly[lv_itHeroSelectionButtonImage], libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "HeroSelectionType", "UnselectedAlly");
        }
        libCore_gf_SetDialogItemAnimationState(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_heroSelectionButtonTeamEnemy[lv_itHeroSelectionButtonImage], libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "HeroSelectionType", "UnselectedEnemy");
    }
    SoundPlayForPlayer(SoundLink("UI_BNet_HeroChoose", -1), lp_triggeringPlayer, libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], 100.0, 0.0);
    lv_newMonitoredPlayerSlot = libGame_gv_players[lv_newMonitoredPlayer].lv_playerAllySlot;
    lv_newMonitoredPlayerTeam = libGame_gf_TeamNumberOfPlayer(lv_newMonitoredPlayer);
    libUIUI_gv_uIMyCustomLeaderBoardTalentsPlayerMonitoringTalentsOfPlayer[lp_triggeringPlayer] = lv_newMonitoredPlayer;
    if ((lv_triggeringPlayerTeam == lv_newMonitoredPlayerTeam)) {
        if ((lv_slot == lv_newMonitoredPlayerSlot)) {
            libCore_gf_SetDialogItemAnimationState(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_heroSelectionButtonTeamAlly[lv_newMonitoredPlayerSlot], libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "HeroSelectionType", "SelectedSelf");
        }
        else {
            libCore_gf_SetDialogItemAnimationState(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_heroSelectionButtonTeamAlly[lv_newMonitoredPlayerSlot], libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "HeroSelectionType", "SelectedAlly");
        }
    }
    else {
        libCore_gf_SetDialogItemAnimationState(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_heroSelectionButtonTeamEnemy[lv_newMonitoredPlayerSlot], libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer], "HeroSelectionType", "SelectedEnemy");
    }
    libUIUI_gf_UIMyCustomLeaderBoardTalentsSetUpTalentsOfPlayerForPlayer(lp_triggeringPlayer, lv_newMonitoredPlayer);
}

void libUIUI_gf_UIMyCustomLeaderBoardTalentsSetUpPlayerHeroNameForPlayer (int lp_triggeringPlayer, int lp_targetPlayer) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_heroNameLabel, libGame_gv_players[lp_targetPlayer].lv_heroName, libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer]);
}

void libUIUI_gf_UIMyCustomLeaderBoardTalentsSetUpPlayerHeroImageOfPlayer (int lp_triggeringPlayer) {
    // Variable Declarations
    int lv_slot;
    int lv_heroIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_slot = libGame_gv_players[lp_triggeringPlayer].lv_playerAllySlot;
    lv_heroIndex = libCore_gf_CommandersGetHeroIndexOfPlayerHero(lp_triggeringPlayer);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_heroSelectionButtonTeamAllyHeroImage[lv_slot], libCore_gv_heroData[lv_heroIndex].lv_heroSelectScreenButtonPortrait, libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lp_triggeringPlayer)].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_heroSelectionButtonTeamEnemyHeroImage[lv_slot], libCore_gv_heroData[lv_heroIndex].lv_heroSelectScreenButtonPortrait, libGame_gv_teams[libGame_gf_EnemyTeamNumberOfPlayer(lp_triggeringPlayer)].lv_teamPlayerGroupNoNPCPlayers);
}

void libUIUI_gf_UIMyCustomLeaderBoardTalentsSetUpTalentsOfPlayerForPlayer (int lp_triggeringPlayer, int lp_targetPlayer) {
    // Variable Declarations
    int lv_itTalentTier;
    int lv_itTalentColumn;
    int lv_itHero;
    int lv_itTooltip;
    int lv_hotkeyFrame;
    int lv_heroIndex;
    playergroup lv_triggeringPlayerGroup;
    int lv_questBehaviorStacksCountCurrent;
    int lv_questBehaviorStacksCountMax;

    // Automatic Variable Declarations
    int auto039790CA_ae;
    int auto1D38EA89_ae;
    int autoEB3328E0_val;

    // Variable Initialization
    lv_itTooltip = c_invalidDialogControlId;
    lv_hotkeyFrame = c_invalidDialogControlId;

    // Implementation
    lv_triggeringPlayerGroup = libCore_gv_playerGroupFromPlayer[lp_triggeringPlayer];
    lv_heroIndex = libCore_gf_CommandersGetHeroIndexOfPlayerHero(lp_targetPlayer);
    auto039790CA_ae = libCore_gv_dataHeroesMaxTalentsTiers;
    lv_itTalentTier = 1;
    for ( ; lv_itTalentTier <= auto039790CA_ae ; lv_itTalentTier += 1 ) {
        auto1D38EA89_ae = libCore_gv_dataHeroesMaxTalentsperTier;
        lv_itTalentColumn = 1;
        for ( ; lv_itTalentColumn <= auto1D38EA89_ae ; lv_itTalentColumn += 1 ) {
            if ((libCore_gv_heroData[lv_heroIndex].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_talentLink != null)) {
                libNtve_gf_SetDialogItemImage(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentButtonImage[lv_itTalentTier][lv_itTalentColumn], libCore_gv_heroData[lv_heroIndex].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_talentIcon, lv_triggeringPlayerGroup);
                libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentTooltipLabelName[lv_itTalentTier][lv_itTalentColumn], libCore_gv_heroData[libGame_gv_players[lp_targetPlayer].lv_heroIndex].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_talentName, lv_triggeringPlayerGroup);
                libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentTooltipLabelInfo[lv_itTalentTier][lv_itTalentColumn], libCore_gv_heroData[libGame_gv_players[lp_targetPlayer].lv_heroIndex].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_talentInfoText, lv_triggeringPlayerGroup);
                libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentTooltipLabelDescription[lv_itTalentTier][lv_itTalentColumn], libCore_gv_heroData[libGame_gv_players[lp_targetPlayer].lv_heroIndex].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_talentTooltipText[lp_targetPlayer], lv_triggeringPlayerGroup);
                libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentTooltipHotkeyLabel[lv_itTalentTier][lv_itTalentColumn], libCore_gv_heroData[libGame_gv_players[lp_targetPlayer].lv_heroIndex].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_talentTooltipText[lp_targetPlayer], lv_triggeringPlayerGroup);
                lv_hotkeyFrame = libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentTooltipHotkeyFrame[lv_itTalentTier][lv_itTalentColumn];
                libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentTooltipHotkeyLabel[lv_itTalentTier][lv_itTalentColumn], libCore_gv_heroData[lv_heroIndex].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_talentHotkey, lv_triggeringPlayerGroup);
                autoEB3328E0_val = libCore_gv_heroData[lv_heroIndex].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_talentType;
                if (autoEB3328E0_val == libCore_ge_HeroTalentType_Active) {
                    libUIUI_gf_TalentsSetDialogItemTalentHotkeyColorTypeForPlayer(lv_hotkeyFrame, libCore_ge_HeroTalentType_Active, lp_triggeringPlayer);
                    libUIUI_gf_TalentsSetDialogItemTalentHotkeyTypeForPlayer(libUIUI_ge_TalentsHotkeyType_HotkeyNormal, lv_hotkeyFrame, lp_triggeringPlayer);
                }
                else if (autoEB3328E0_val == libCore_ge_HeroTalentType_Passive) {
                    libUIUI_gf_TalentsSetDialogItemTalentHotkeyColorTypeForPlayer(lv_hotkeyFrame, libCore_ge_HeroTalentType_Passive, lp_triggeringPlayer);
                    libUIUI_gf_TalentsSetDialogItemTalentHotkeyTypeForPlayer(libUIUI_ge_TalentsHotkeyType_HotkeyNormal, lv_hotkeyFrame, lp_triggeringPlayer);
                }
                else if (autoEB3328E0_val == libCore_ge_HeroTalentType_Heroic) {
                    libUIUI_gf_TalentsSetDialogItemTalentHotkeyColorTypeForPlayer(lv_hotkeyFrame, libCore_ge_HeroTalentType_Heroic, lp_triggeringPlayer);
                    libUIUI_gf_TalentsSetDialogItemTalentHotkeyTypeForPlayer(libUIUI_ge_TalentsHotkeyType_HotkeyUpgrade, lv_hotkeyFrame, lp_triggeringPlayer);
                }
                else {
                    libUIUI_gf_TalentsSetDialogItemTalentHotkeyColorTypeForPlayer(lv_hotkeyFrame, libCore_ge_HeroTalentType_Basic, lp_triggeringPlayer);
                    libUIUI_gf_TalentsSetDialogItemTalentHotkeyTypeForPlayer(libUIUI_ge_TalentsHotkeyType_HotkeyUpgrade, lv_hotkeyFrame, lp_triggeringPlayer);
                }
                DialogControlSetVisible(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentFrame[lv_itTalentTier][lv_itTalentColumn], lv_triggeringPlayerGroup, true);
            }
            else {
                DialogControlSetVisible(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentFrame[lv_itTalentTier][lv_itTalentColumn], lv_triggeringPlayerGroup, false);
            }
        }
    }
}

void libUIUI_gf_UIMuCustomLeaderBoardPrestigeAbilitiesInitialize (int lp_parentDialogItem) {
    int init_i;

    // Variable Declarations
    int[11] lv_panels;
    int lv_currentPanelLayer;
    int lv_itPrestigeAbilityIndex;

    // Automatic Variable Declarations
    int autoB2DE9482_ae;

    // Variable Initialization
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Implementation
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = lp_parentDialogItem;
    autoB2DE9482_ae = libCore_gv_dataHeroesMaxPrestigeAbilities;
    lv_itPrestigeAbilityIndex = 1;
    for ( ; lv_itPrestigeAbilityIndex <= autoB2DE9482_ae ; lv_itPrestigeAbilityIndex += 1 ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("PrestigeAbilitiesPanel/PrestigeButton" + IntToString(lv_itPrestigeAbilityIndex))));
        libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[lv_itPrestigeAbilityIndex].lv_button = DialogControlLastCreated();
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "IconImage");
        libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[lv_itPrestigeAbilityIndex].lv_image = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeProgressBar, "CooldownBar");
        libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[lv_itPrestigeAbilityIndex].lv_cooldownProgressBar = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "CooldownLabel");
        libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[lv_itPrestigeAbilityIndex].lv_cooldownLabel = DialogControlLastCreated();
        DialogControlCreateInPanelFromTemplate(libUIUI_gv_uIMyCustomLeaderBoard.lv_mainDialog, c_triggerControlTypeTooltip, "MyStandardTooltip/HeroSelectionTooltipTemplate");
        libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[lv_itPrestigeAbilityIndex].lv_tooltipDialogItem = DialogControlLastCreated();
        libNtve_gf_SetDialogItemCustomTooltip(libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[lv_itPrestigeAbilityIndex].lv_button, libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[lv_itPrestigeAbilityIndex].lv_tooltipDialogItem, PlayerGroupAll());
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[lv_itPrestigeAbilityIndex].lv_button, c_anchorBottom, 0, 0);
        DialogControlHookup(libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[lv_itPrestigeAbilityIndex].lv_tooltipDialogItem, c_triggerControlTypeLabel, "NameLabel");
        libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[lv_itPrestigeAbilityIndex].lv_tooltipName = DialogControlLastCreated();
        DialogControlHookup(libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[lv_itPrestigeAbilityIndex].lv_tooltipDialogItem, c_triggerControlTypeLabel, "InfoLabel");
        libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[lv_itPrestigeAbilityIndex].lv_tooltipInfo = DialogControlLastCreated();
        DialogControlHookup(libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[lv_itPrestigeAbilityIndex].lv_tooltipDialogItem, c_triggerControlTypeLabel, "DescriptionLabel");
        libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[lv_itPrestigeAbilityIndex].lv_tooltipDescription = DialogControlLastCreated();
        lv_currentPanelLayer -= 1;
    }
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "PrestigeAbilitiesPanel/PrestigeButtonsHelp");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_UIUI_6CE54BE2"), PlayerGroupAll());
    lv_currentPanelLayer -= 1;
}

void libUIUI_gf_UIMyCustomLeaderBoardPrestigeAbilitiesSetButtonSelectedUnselectedForPlayer (int lp_prestigeButtonIndex, int lp_selectedButtonSlotType, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_selectedButtonSlotType != libUIUI_ge_UIMyCustomLeaderBoardPrestigeAbilitiesSlot_Unselected)) {
        libCore_gf_SetDialogItemAnimationState(libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[lp_prestigeButtonIndex].lv_button, libCore_gv_playerGroupFromPlayer[lp_player], "SelectedGroup", ("SelectedPrestige" + IntToString((lp_selectedButtonSlotType))));
    }
    else {
        libCore_gf_SetDialogItemAnimationState(libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[lp_prestigeButtonIndex].lv_button, libCore_gv_playerGroupFromPlayer[lp_player], "SelectedGroup", "Unselected");
    }
}

void libUIUI_gf_UIMyCustomLeaderBoardPrestigeAbilitiesSetCooldownForButtonForPlayer (int lp_player, int lp_buttonIndex, fixed lp_cooldown) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_cooldown > 0.0)) {
        DialogControlSetEnabled(libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[lp_buttonIndex].lv_image, libCore_gv_playerGroupFromPlayer[lp_player], false);
        DialogControlSetVisible(libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[lp_buttonIndex].lv_cooldownLabel, libCore_gv_playerGroupFromPlayer[lp_player], true);
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[lp_buttonIndex].lv_cooldownLabel, FixedToText(lp_cooldown, 0), libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else {
        DialogControlSetEnabled(libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[lp_buttonIndex].lv_image, libCore_gv_playerGroupFromPlayer[lp_player], true);
        DialogControlSetVisible(libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[lp_buttonIndex].lv_cooldownLabel, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
}

void libUIUI_gf_UIMyCustomLeaderBoardPrestigeAbilitiesChangeAbilityForPlayer (int lp_player, int lp_pressedButtonIndex, int lp_pressedButtonAssignToSlot) {
    // Variable Declarations
    string lv_presetSlot1;
    string lv_presetSlot2;
    string lv_pressedButtonPreset;
    int lv_indexSlot1;
    int lv_indexSlot2;

    // Automatic Variable Declarations
    string auto4AFF5272_val;
    string auto9535A1A3_val;

    // Variable Initialization

    // Implementation
    lv_presetSlot1 = libCore_gf_PrestigeAbilitiesAbilityPreset(libCore_gf_PrestigeAbilitiesAbilityLinkOfPlayerFromSlot(lp_player, 1));
    lv_presetSlot2 = libCore_gf_PrestigeAbilitiesAbilityPreset(libCore_gf_PrestigeAbilitiesAbilityLinkOfPlayerFromSlot(lp_player, 2));
    lv_indexSlot1 = libCore_gf_PrestigeAbilitiesIndexOfAbility(lv_presetSlot1);
    lv_indexSlot2 = libCore_gf_PrestigeAbilitiesIndexOfAbility(lv_presetSlot2);
    lv_pressedButtonPreset = libCore_gf_PrestigeAbilitiesPrestigeFromIndex(lp_pressedButtonIndex);
    if ((lp_pressedButtonAssignToSlot == libUIUI_ge_UIMyCustomLeaderBoardPrestigeAbilitiesSlot_SelectedSlot1)) {
        auto4AFF5272_val = lv_pressedButtonPreset;
        if (auto4AFF5272_val == lv_presetSlot1) {
            return ;
        }
        else if (auto4AFF5272_val == lv_presetSlot2) {
            libUIUI_gf_UIMyCustomLeaderBoardPrestigeAbilitiesSetButtonSelectedUnselectedForPlayer(lv_indexSlot1, libUIUI_ge_UIMyCustomLeaderBoardPrestigeAbilitiesSlot_SelectedSlot2, lp_player);
            libUIUI_gf_UIMyCustomLeaderBoardPrestigeAbilitiesSetButtonSelectedUnselectedForPlayer(lv_indexSlot2, libUIUI_ge_UIMyCustomLeaderBoardPrestigeAbilitiesSlot_SelectedSlot1, lp_player);
            libCore_gf_PrestigeAbilitiesAddAbilityForPlayerToSlot(lv_presetSlot1, lp_player, 2);
            libCore_gf_PrestigeAbilitiesAddAbilityForPlayerToSlot(lv_presetSlot2, lp_player, 1);
            return ;
        }
        else {
            libUIUI_gf_UIMyCustomLeaderBoardPrestigeAbilitiesSetButtonSelectedUnselectedForPlayer(lv_indexSlot1, libUIUI_ge_UIMyCustomLeaderBoardPrestigeAbilitiesSlot_Unselected, lp_player);
            libUIUI_gf_UIMyCustomLeaderBoardPrestigeAbilitiesSetButtonSelectedUnselectedForPlayer(lp_pressedButtonIndex, libUIUI_ge_UIMyCustomLeaderBoardPrestigeAbilitiesSlot_SelectedSlot1, lp_player);
            libCore_gf_PrestigeAbilitiesAddAbilityForPlayerToSlot(lv_pressedButtonPreset, lp_player, (lp_pressedButtonAssignToSlot));
        }
    }
    else if ((lp_pressedButtonAssignToSlot == libUIUI_ge_UIMyCustomLeaderBoardPrestigeAbilitiesSlot_SelectedSlot2)) {
        auto9535A1A3_val = lv_pressedButtonPreset;
        if (auto9535A1A3_val == lv_presetSlot1) {
            libUIUI_gf_UIMyCustomLeaderBoardPrestigeAbilitiesSetButtonSelectedUnselectedForPlayer(lv_indexSlot1, libUIUI_ge_UIMyCustomLeaderBoardPrestigeAbilitiesSlot_SelectedSlot2, lp_player);
            libUIUI_gf_UIMyCustomLeaderBoardPrestigeAbilitiesSetButtonSelectedUnselectedForPlayer(lv_indexSlot2, libUIUI_ge_UIMyCustomLeaderBoardPrestigeAbilitiesSlot_SelectedSlot1, lp_player);
            libCore_gf_PrestigeAbilitiesAddAbilityForPlayerToSlot(lv_presetSlot1, lp_player, 2);
            libCore_gf_PrestigeAbilitiesAddAbilityForPlayerToSlot(lv_presetSlot2, lp_player, 1);
            return ;
        }
        else if (auto9535A1A3_val == lv_presetSlot2) {
            return ;
        }
        else {
            libUIUI_gf_UIMyCustomLeaderBoardPrestigeAbilitiesSetButtonSelectedUnselectedForPlayer(lv_indexSlot2, libUIUI_ge_UIMyCustomLeaderBoardPrestigeAbilitiesSlot_Unselected, lp_player);
            libUIUI_gf_UIMyCustomLeaderBoardPrestigeAbilitiesSetButtonSelectedUnselectedForPlayer(lp_pressedButtonIndex, libUIUI_ge_UIMyCustomLeaderBoardPrestigeAbilitiesSlot_SelectedSlot2, lp_player);
            libCore_gf_PrestigeAbilitiesAddAbilityForPlayerToSlot(lv_pressedButtonPreset, lp_player, (lp_pressedButtonAssignToSlot));
        }
    }
}

void libUIUI_gf_UIKillLogSetPortraitsBorderColors (int lp_player, int lp_logNumber, int lp_type) {
    // Variable Declarations
    int lv_team;
    int lv_enemyTeam;

    // Automatic Variable Declarations
    const int autoC5DC4D8D_ae = libUIUI_gv_uIKillLogDeathPlayersMax;
    int autoC5DC4D8D_var;

    // Variable Initialization

    // Implementation
    if (((PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, lp_player) == true) || (PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, lp_player) == true))) {
        lv_team = libGame_gf_PlayerGetPlayerTeam(lp_player);
        lv_enemyTeam = (3-lv_team);
        DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_killingPlayerFrame[lp_logNumber], libGame_gv_teams[lv_team].lv_teamPlayerGroupNoNPCPlayers, "BlueColor");
        DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_killingPlayerFrame[lp_logNumber], libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, "RedColor");
        DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_killingPlayerCutsceneFrame[lp_logNumber], libGame_gv_teams[lv_team].lv_teamPlayerGroupNoNPCPlayers, "SetAllyColor");
        DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_killingPlayerCutsceneFrame[lp_logNumber], libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, "SetEnemyColor");
        if ((lv_team == libGame_gv_teamOrderIndex_C)) {
            DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_killingPlayerFrame[lp_logNumber], libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "BlueColor");
            DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_killingPlayerCutsceneFrame[lp_logNumber], libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "SetAllyColor");
        }
        else {
            DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_killingPlayerFrame[lp_logNumber], libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "RedColor");
            DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_killingPlayerCutsceneFrame[lp_logNumber], libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "SetEnemyColor");
        }
        if ((lp_type == libUIUI_ge_UIKillLogLogType_Kill)) {
            DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_killingPlayerFrame[lp_logNumber], libGame_gv_teams[lv_team].lv_teamPlayerGroupNoNPCPlayers, "VsBlueColor");
            DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_killingPlayerFrame[lp_logNumber], libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, "VsRedColor");
            if ((lv_team == libGame_gv_teamOrderIndex_C)) {
                DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_killingPlayerFrame[lp_logNumber], libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "VsBlueColor");
                DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_killingPlayerFrame[lp_logNumber], libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "RedColor");
            }
            else {
                DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_killingPlayerFrame[lp_logNumber], libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "VsRedColor");
                DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_killingPlayerFrame[lp_logNumber], libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "BlueColor");
            }
            autoC5DC4D8D_var = 1;
            for ( ; autoC5DC4D8D_var <= autoC5DC4D8D_ae; autoC5DC4D8D_var += 1 ) {
                DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_deadPlayerFrame[lp_logNumber][autoC5DC4D8D_var], libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, "BlueColor");
                DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_deadPlayerFrame[lp_logNumber][autoC5DC4D8D_var], libGame_gv_teams[lv_team].lv_teamPlayerGroupNoNPCPlayers, "RedColor");
            }
        }

    }
    else {
        DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_killingPlayerFrame[lp_logNumber], PlayerGroupAll(), "PurpleColor");
        DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_killingPlayerCutsceneFrame[lp_logNumber], PlayerGroupAll(), "SetEnemyColor");
        DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_killingPlayerFrame[lp_logNumber], PlayerGroupAll(), "VsPurpleColor");
    }
}

trigger auto_libUIUI_gf_UIKillLogQuestComplete_Trigger = null;
int auto_libUIUI_gf_UIKillLogQuestComplete_lp_questPlayer;
text auto_libUIUI_gf_UIKillLogQuestComplete_lp_timeLabel;
string auto_libUIUI_gf_UIKillLogQuestComplete_lp_talentImage;

void libUIUI_gf_UIKillLogQuestComplete (int lp_questPlayer, text lp_timeLabel, string lp_talentImage) {
    auto_libUIUI_gf_UIKillLogQuestComplete_lp_questPlayer = lp_questPlayer;
    auto_libUIUI_gf_UIKillLogQuestComplete_lp_timeLabel = lp_timeLabel;
    auto_libUIUI_gf_UIKillLogQuestComplete_lp_talentImage = lp_talentImage;

    if (auto_libUIUI_gf_UIKillLogQuestComplete_Trigger == null) {
        auto_libUIUI_gf_UIKillLogQuestComplete_Trigger = TriggerCreate("auto_libUIUI_gf_UIKillLogQuestComplete_TriggerFunc");
    }

    TriggerExecute(auto_libUIUI_gf_UIKillLogQuestComplete_Trigger, false, false);
}

bool auto_libUIUI_gf_UIKillLogQuestComplete_TriggerFunc (bool testConds, bool runActions) {
    int lp_questPlayer = auto_libUIUI_gf_UIKillLogQuestComplete_lp_questPlayer;
    text lp_timeLabel = auto_libUIUI_gf_UIKillLogQuestComplete_lp_timeLabel;
    string lp_talentImage = auto_libUIUI_gf_UIKillLogQuestComplete_lp_talentImage;

    // Variable Declarations
    int lv_itKillLogNumber;
    int lv_itLogPlace;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libUIUI_gv_uIKillLogLogInfo[lv_itKillLogNumber].lv_logType = libUIUI_ge_UIKillLogLogType_Quest;
    libUIUI_gv_uIKillLogLogInfo[lv_itKillLogNumber].lv_player = lp_questPlayer;
    TimerStart(libUIUI_gv_uIKillLogLogInfo[lv_itKillLogNumber].lv_logTimer, libUIUI_gv_uIKillLogDurationTimer, false, c_timeGame);
    if ((lv_itLogPlace > 1)) {
    }
    else {
        DialogControlSetPositionRelative(libUIUI_gv_uIKillLog.lv_killLogPanel[lv_itKillLogNumber], PlayerGroupAll(), c_anchorLeft, libUIUI_gv_uIKillLog.lv_mainPanel, c_anchorTopLeft, 0, 188);
    }
    libNtve_gf_SetDialogItemImage(libUIUI_gv_uIKillLog.lv_killingPlayerPortraitImage[lv_itKillLogNumber], libCore_gv_heroData[libCore_gf_CommandersGetHeroIndexOfPlayerHero(lp_questPlayer)].lv_portrait, PlayerGroupAll());
    libUIUI_gf_UIKillLogSetPortraitsBorderColors(lp_questPlayer, lv_itKillLogNumber, libUIUI_ge_UIKillLogLogType_Quest);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_uIKillLog.lv_questTalentIconImage[lv_itKillLogNumber], lp_talentImage, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIKillLog.lv_questTimeLabel[lv_itKillLogNumber], IntToText(lv_itKillLogNumber), PlayerGroupAll());
    DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_killLogPanel[lv_itKillLogNumber], PlayerGroupAll(), "FadeIn");
    DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_killingPlayerFrame[lv_itKillLogNumber], PlayerGroupAll(), "FadeIn");
    DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_questFrame[lv_itKillLogNumber], PlayerGroupAll(), "FadeIn");
    SoundPlayForPlayer(SoundLink("TalentQuestLogCompleteAlly", c_soundIndexAny), c_maxPlayers, libGame_gv_teams[libGame_gf_PlayerGetPlayerTeam(lp_questPlayer)].lv_teamPlayerGroupNoNPCPlayers, 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("TalentQuestLogCompleteEnemy", c_soundIndexAny), c_maxPlayers, libGame_gv_teams[libGame_gf_EnemyTeamNumberOfPlayer(lp_questPlayer)].lv_teamPlayerGroupNoNPCPlayers, 100.0, 0.0);
    return true;
}

void libUIUI_gf_addkill (int lp_killingPlayer, unit lp_deadUnit) {
    // Variable Declarations
    int lv_itemFrame;
    int lv_itKillLog;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_itemFrame = c_invalidDialogControlId;

    // Implementation
    if ((libUIUI_gf_UIKillLogPlayerHasLogbyType(lp_killingPlayer, libUIUI_ge_UIKillLogLogType_Kill) == true)) {
        lv_itKillLog = libUIUI_gf_UIKillLogGetKilllogofPlayer(lp_killingPlayer, libUIUI_ge_UIKillLogLogType_Kill);
        TimerRestart(libUIUI_gv_uIKillLogLogInfo[lv_itKillLog].lv_logTimer);
        libUIUI_gv_uIKillLogLogInfo[lv_itKillLog].lv_combo += 1;
        libUIUI_gf_UIKillLogSetPortraitsBorderColors(lp_killingPlayer, lv_itKillLog, libUIUI_ge_UIKillLogLogType_Kill);
        libNtve_gf_SetDialogItemImage(libUIUI_gv_uIKillLog.lv_deadPlayerPortraitImage[lv_itKillLog][libUIUI_gv_uIKillLogLogInfo[lv_itKillLog].lv_combo], libUIUI_gf_UIKillLogGetPortraitOfPlayer(UnitGetOwner(lp_deadUnit)), PlayerGroupAll());
        DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_deadPlayerFrame[lv_itKillLog][libUIUI_gv_uIKillLogLogInfo[lv_itKillLog].lv_combo], PlayerGroupAll(), "FadeIn");
        DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_deadPlayerStrikethroughFrame[lv_itKillLog][libUIUI_gv_uIKillLogLogInfo[lv_itKillLog].lv_combo], PlayerGroupAll(), "StrikeAnim");
    }
    else {
        lv_itKillLog = libUIUI_gf_UIKillLogGetFreeKilllogforPlayer(lp_killingPlayer);
        TimerStart(libUIUI_gv_uIKillLogLogInfo[lv_itKillLog].lv_logTimer, libUIUI_gv_uIKillLogDurationTimer, false, c_timeGame);
        libUIUI_gv_uIKillLogLogInfo[lv_itKillLog].lv_player = lp_killingPlayer;
        libUIUI_gv_uIKillLogLogInfo[lv_itKillLog].lv_logType = libUIUI_ge_UIKillLogLogType_Kill;
        libNtve_gf_SetDialogItemImage(libUIUI_gv_uIKillLog.lv_killingPlayerPortraitImage[lv_itKillLog], libUIUI_gf_UIKillLogGetPortraitOfPlayer(lp_killingPlayer), PlayerGroupAll());
        if ((lv_itKillLog > 1)) {
            DialogControlSetPositionRelative(libUIUI_gv_uIKillLog.lv_killLogPanel[lv_itKillLog], PlayerGroupAll(), c_anchorLeft, libUIUI_gv_uIKillLog.lv_killLogPanel[(lv_itKillLog - 1)], c_anchorLeft, 0, 94);
        }
        else {
            DialogControlSetPositionRelative(libUIUI_gv_uIKillLog.lv_killLogPanel[lv_itKillLog], PlayerGroupAll(), c_anchorLeft, libUIUI_gv_uIKillLog.lv_mainPanel, c_anchorTopLeft, 0, 188);
        }
        DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_killLogPanel[lv_itKillLog], PlayerGroupAll(), "FadeIn");
        DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_killingPlayerFrame[lv_itKillLog], PlayerGroupAll(), "FadeIn");
        DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_vSImageFrame[lv_itKillLog], PlayerGroupAll(), "FadeIn");
        libUIUI_gv_uIKillLogLogInfo[lv_itKillLog].lv_combo += 1;
        libNtve_gf_SetDialogItemImage(libUIUI_gv_uIKillLog.lv_deadPlayerPortraitImage[lv_itKillLog][libUIUI_gv_uIKillLogLogInfo[lv_itKillLog].lv_combo], libUIUI_gf_UIKillLogGetPortraitOfPlayer(UnitGetOwner(lp_deadUnit)), PlayerGroupAll());
        DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_deadPlayerFrame[lv_itKillLog][libUIUI_gv_uIKillLogLogInfo[lv_itKillLog].lv_combo], PlayerGroupAll(), "FadeIn");
        DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_deadPlayerStrikethroughFrame[lv_itKillLog][libUIUI_gv_uIKillLogLogInfo[lv_itKillLog].lv_combo], PlayerGroupAll(), "StrikeAnim");
        libUIUI_gf_UIKillLogSetPortraitsBorderColors(lp_killingPlayer, lv_itKillLog, libUIUI_ge_UIKillLogLogType_Kill);
        if ((lv_itKillLog > libUIUI_gv_uIKillLogMaxVisibleLogs)) {
            libUIUI_gf_UIKillLogFreeKillLog3D182D0BED187D182D0BED18FD185D0BED187D183D181D0B4D0B5D0BBD0B0D182D18CD0BAD0B0D0BAD183D0B1D0BBD0B8D0B7D0B7D0BED0B2(libUIUI_gf_ReturnKilllogwithlowtimer(), false);
        }

    }
}

void libUIUI_gf_addquest (int lp_sourcePlayer, string lp_questbehavior) {
    // Variable Declarations
    int lv_itKillLog;
    string lv_image;
    text lv_time;
    playergroup lv_soundPlayerGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_image = (CatalogFieldValueGet(c_gameCatalogBehavior, lp_questbehavior, "InfoIcon", c_playerAny));
    lv_soundPlayerGroup = PlayerGroupEmpty();

    // Implementation
    lv_time = TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetElapsed(libCore_gv_gameTimer)));
    lv_itKillLog = libUIUI_gf_UIKillLogGetFreeKilllogforPlayer(lp_sourcePlayer);
    TimerStart(libUIUI_gv_uIKillLogLogInfo[lv_itKillLog].lv_logTimer, libUIUI_gv_uIKillLogDurationTimer, false, c_timeGame);
    libUIUI_gv_uIKillLogLogInfo[lv_itKillLog].lv_player = lp_sourcePlayer;
    libUIUI_gv_uIKillLogLogInfo[lv_itKillLog].lv_logType = libUIUI_ge_UIKillLogLogType_Quest;
    libNtve_gf_AddPlayerGroupToPlayerGroup(PlayerGroupAll(), lv_soundPlayerGroup);
    SoundPlayForPlayer(SoundLink("TalentQuestLogCompleteAlly", c_soundIndexAny), c_maxPlayers, lv_soundPlayerGroup, 100.0, 0.0);
    if ((lv_itKillLog > 1)) {
        DialogControlSetPositionRelative(libUIUI_gv_uIKillLog.lv_killLogPanel[lv_itKillLog], PlayerGroupAll(), c_anchorLeft, libUIUI_gv_uIKillLog.lv_killLogPanel[(lv_itKillLog - 1)], c_anchorLeft, 0, 94);
    }
    else {
        DialogControlSetPositionRelative(libUIUI_gv_uIKillLog.lv_killLogPanel[lv_itKillLog], PlayerGroupAll(), c_anchorLeft, libUIUI_gv_uIKillLog.lv_mainPanel, c_anchorTopLeft, 0, 188);
    }
    libNtve_gf_SetDialogItemImage(libUIUI_gv_uIKillLog.lv_killingPlayerPortraitImage[lv_itKillLog], libUIUI_gf_UIKillLogGetPortraitOfPlayer(lp_sourcePlayer), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(libUIUI_gv_uIKillLog.lv_questTalentIconImage[lv_itKillLog], lv_image, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIKillLog.lv_questTimeLabel[lv_itKillLog], lv_time, PlayerGroupAll());
    DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_killLogPanel[lv_itKillLog], PlayerGroupAll(), "FadeIn");
    DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_killingPlayerFrame[lv_itKillLog], PlayerGroupAll(), "FadeIn");
    DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_questFrame[lv_itKillLog], PlayerGroupAll(), "FadeIn");
    libUIUI_gf_UIKillLogSetPortraitsBorderColors(lp_sourcePlayer, lv_itKillLog, libUIUI_ge_UIKillLogLogType_Quest);
    if ((lv_itKillLog > libUIUI_gv_uIKillLogMaxVisibleLogs)) {
        libUIUI_gf_UIKillLogFreeKillLog3D182D0BED187D182D0BED18FD185D0BED187D183D181D0B4D0B5D0BBD0B0D182D18CD0BAD0B0D0BAD183D0B1D0BBD0B8D0B7D0B7D0BED0B2(libUIUI_gf_ReturnKilllogwithlowtimer(), false);
    }

}

int libUIUI_gf_getfreeorexistkilllog (int lp_player) {
    // Variable Declarations
    int lv_existKilllog;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_existKilllog = libUIUI_gf_UIKillLogGetKilllogofPlayer(lp_player, libUIUI_ge_UIKillLogLogType_Kill);

    // Implementation
    if ((lv_existKilllog < 1)) {
        lv_existKilllog = libUIUI_gf_UIKillLogGetFreeKilllogforPlayer(lp_player);
    }

    return lv_existKilllog;
}

int libUIUI_gf_UIKillLogGetKilllogofPlayer (int lp_player, int lp_type) {
    // Automatic Variable Declarations
    const int autoC332C942_ae = libUIUI_gv_uIKillLogMaxLogs;
    int autoC332C942_var;

    // Implementation
    autoC332C942_var = 1;
    for ( ; autoC332C942_var <= autoC332C942_ae; autoC332C942_var += 1 ) {
        if ((libUIUI_gv_uIKillLogLogInfo[autoC332C942_var].lv_player == lp_player) && (libUIUI_gv_uIKillLogLogInfo[autoC332C942_var].lv_logType == lp_type)) {
            return autoC332C942_var;
        }

    }
    return -1;
}

int libUIUI_gf_UIKillLogGetFreeKilllogforPlayer (int lp_player) {
    // Variable Declarations
    int lv_itLog;

    // Automatic Variable Declarations
    const int auto98365116_ae = libUIUI_gv_uIKillLogMaxLogs;
    int auto98365116_var;

    // Variable Initialization

    // Implementation
    auto98365116_var = 1;
    for ( ; auto98365116_var <= auto98365116_ae; auto98365116_var += 1 ) {
        if ((libUIUI_gv_uIKillLogLogInfo[auto98365116_var].lv_player == 0)) {
            libUIUI_gv_uIKillLogLogInfo[auto98365116_var].lv_player = lp_player;
            return auto98365116_var;
        }

    }
    return -1;
}

bool libUIUI_gf_UIKillLogPlayerHasLogbyType (int lp_player, int lp_type) {
    // Automatic Variable Declarations
    const int auto7E1D21FA_ae = libUIUI_gv_uIKillLogMaxLogs;
    int auto7E1D21FA_var;

    // Implementation
    auto7E1D21FA_var = 1;
    for ( ; auto7E1D21FA_var <= auto7E1D21FA_ae; auto7E1D21FA_var += 1 ) {
        if ((libUIUI_gv_uIKillLogLogInfo[auto7E1D21FA_var].lv_player == lp_player) && (libUIUI_gv_uIKillLogLogInfo[auto7E1D21FA_var].lv_logType == lp_type)) {
            return true;
        }

    }
    return false;
}

void libUIUI_gf_UIKillLogFreeKillLog3D182D0BED187D182D0BED18FD185D0BED187D183D181D0B4D0B5D0BBD0B0D182D18CD0BAD0B0D0BAD183D0B1D0BBD0B8D0B7D0B7D0BED0B2 (int lp_killLogNumbertoRemove, bool lp_removeByTimeexp) {
    int init_i;

    // Variable Declarations
    int lv_itInt;
    timer lv_temp_Timer;
    int lv_temp_Frame;
    int[libUIUI_gv_uIKillLogDeathPlayersMax + 1] lv_temp_DeadPlayerFrame;
    int[libUIUI_gv_uIKillLogDeathPlayersMax + 1] lv_temp_DeadPlayerPortraitImage;
    int[libUIUI_gv_uIKillLogDeathPlayersMax + 1] lv_temp_DeadPlayerStrikethroughFrame;
    int lv_temp_KillingPlayerCutsceneFrame;
    int lv_temp_KillingPlayerFrame;
    int lv_temp_KillingPlayerPortraitImage;
    int lv_temp_KilllogPanel;
    int lv_temp_QuestCompleteFrame;
    int lv_temp_QuestFrame;
    int lv_temp_QuestTalentIconImage;
    int lv_temp_QuestTimeLabel;
    int lv_temp_VsImage;
    int lv_temp_VsImageFrame;
    fixed[libUIUI_gv_uIKillLogMaxLogs + 1] lv_temp_Time;

    // Automatic Variable Declarations
    const int auto65A34B3B_ae = libUIUI_gv_uIKillLogDeathPlayersMax;
    int auto65A34B3B_var;
    int autoA99ED06A_ae;
    const int autoA99ED06A_ai = 1;
    const int auto6D9D9FBA_ae = libUIUI_gv_uIKillLogDeathPlayersMax;
    int auto6D9D9FBA_var;
    const int autoC1FB91F4_ae = libUIUI_gv_uIKillLogDeathPlayersMax;
    int autoC1FB91F4_var;

    // Variable Initialization
    lv_temp_Timer = TimerCreate();
    lv_temp_Frame = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libUIUI_gv_uIKillLogDeathPlayersMax; init_i += 1) {
        lv_temp_DeadPlayerFrame[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libUIUI_gv_uIKillLogDeathPlayersMax; init_i += 1) {
        lv_temp_DeadPlayerPortraitImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libUIUI_gv_uIKillLogDeathPlayersMax; init_i += 1) {
        lv_temp_DeadPlayerStrikethroughFrame[init_i] = c_invalidDialogControlId;
    }
    lv_temp_KillingPlayerCutsceneFrame = c_invalidDialogControlId;
    lv_temp_KillingPlayerFrame = c_invalidDialogControlId;
    lv_temp_KillingPlayerPortraitImage = c_invalidDialogControlId;
    lv_temp_KilllogPanel = c_invalidDialogControlId;
    lv_temp_QuestCompleteFrame = c_invalidDialogControlId;
    lv_temp_QuestFrame = c_invalidDialogControlId;
    lv_temp_QuestTalentIconImage = c_invalidDialogControlId;
    lv_temp_QuestTimeLabel = c_invalidDialogControlId;
    lv_temp_VsImage = c_invalidDialogControlId;
    lv_temp_VsImageFrame = c_invalidDialogControlId;

    // Implementation
    if ((lp_removeByTimeexp == false)) {
        TimerStart(libUIUI_gv_uIKillLogLogInfo[lp_killLogNumbertoRemove].lv_logTimer, 0.0, false, c_timeGame);
    }

    auto65A34B3B_var = 1;
    for ( ; auto65A34B3B_var <= auto65A34B3B_ae; auto65A34B3B_var += 1 ) {
        libUIUI_gv_uIKillLog.lv_deadPlayerFrame[lv_itInt][auto65A34B3B_var] = libUIUI_gv_uIKillLog.lv_deadPlayerFrame[lp_killLogNumbertoRemove][auto65A34B3B_var];
        lv_temp_DeadPlayerFrame[auto65A34B3B_var] = libUIUI_gv_uIKillLog.lv_deadPlayerFrame[lp_killLogNumbertoRemove][auto65A34B3B_var];
        lv_temp_DeadPlayerPortraitImage[auto65A34B3B_var] = libUIUI_gv_uIKillLog.lv_deadPlayerPortraitImage[lp_killLogNumbertoRemove][auto65A34B3B_var];
        lv_temp_DeadPlayerStrikethroughFrame[auto65A34B3B_var] = libUIUI_gv_uIKillLog.lv_deadPlayerStrikethroughFrame[lp_killLogNumbertoRemove][auto65A34B3B_var];
    }
    lv_temp_Timer = libUIUI_gv_uIKillLogLogInfo[lp_killLogNumbertoRemove].lv_logTimer;
    lv_temp_KillingPlayerCutsceneFrame = libUIUI_gv_uIKillLog.lv_killingPlayerCutsceneFrame[lp_killLogNumbertoRemove];
    lv_temp_KillingPlayerFrame = libUIUI_gv_uIKillLog.lv_killingPlayerFrame[lp_killLogNumbertoRemove];
    lv_temp_KillingPlayerPortraitImage = libUIUI_gv_uIKillLog.lv_killingPlayerPortraitImage[lp_killLogNumbertoRemove];
    lv_temp_KilllogPanel = libUIUI_gv_uIKillLog.lv_killLogPanel[lp_killLogNumbertoRemove];
    libUIUI_gv_uIKillLog.lv_questCompleteFrame[lv_itInt] = libUIUI_gv_uIKillLog.lv_questCompleteFrame[lp_killLogNumbertoRemove];
    lv_temp_QuestCompleteFrame = libUIUI_gv_uIKillLog.lv_questCompleteFrame[lp_killLogNumbertoRemove];
    lv_temp_QuestFrame = libUIUI_gv_uIKillLog.lv_questFrame[lp_killLogNumbertoRemove];
    lv_temp_QuestTalentIconImage = libUIUI_gv_uIKillLog.lv_questTalentIconImage[lp_killLogNumbertoRemove];
    lv_temp_QuestTimeLabel = libUIUI_gv_uIKillLog.lv_questTimeLabel[lp_killLogNumbertoRemove];
    lv_temp_VsImage = libUIUI_gv_uIKillLog.lv_vSImageFrame[lp_killLogNumbertoRemove];
    lv_temp_VsImageFrame = libUIUI_gv_uIKillLog.lv_vSImageIMAGEFrame[lp_killLogNumbertoRemove];
    DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_killLogPanel[lp_killLogNumbertoRemove], PlayerGroupAll(), "FadeOut");
    DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_killingPlayerFrame[lp_killLogNumbertoRemove], PlayerGroupAll(), "FadeOut");
    DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_questFrame[lp_killLogNumbertoRemove], PlayerGroupAll(), "FadeOut");
    DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_killingPlayerCutsceneFrame[lp_killLogNumbertoRemove], PlayerGroupAll(), "SetNoneColor");
    if ((libUIUI_gv_uIKillLogLogInfo[(lp_killLogNumbertoRemove + 1)].lv_player > 0)) {
        if ((lp_killLogNumbertoRemove > 1)) {
            DialogControlSetPositionRelative(libUIUI_gv_uIKillLog.lv_killLogPanel[(lp_killLogNumbertoRemove + 1)], PlayerGroupAll(), c_anchorLeft, libUIUI_gv_uIKillLog.lv_killLogPanel[(lp_killLogNumbertoRemove - 1)], c_anchorLeft, 0, 16);
        }
        else {
            DialogControlSetPositionRelative(libUIUI_gv_uIKillLog.lv_killLogPanel[(lp_killLogNumbertoRemove + 1)], PlayerGroupAll(), c_anchorLeft, libUIUI_gv_uIKillLog.lv_mainPanel, c_anchorTopLeft, 0, 94);
        }
        DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_killLogPanel[(lp_killLogNumbertoRemove + 1)], PlayerGroupAll(), "SlideUp");
    }

    autoA99ED06A_ae = (libUIUI_gv_uIKillLogMaxLogs - 1);
    lv_itInt = lp_killLogNumbertoRemove;
    for ( ; ( (autoA99ED06A_ai >= 0 && lv_itInt <= autoA99ED06A_ae) || (autoA99ED06A_ai < 0 && lv_itInt >= autoA99ED06A_ae) ) ; lv_itInt += autoA99ED06A_ai ) {
        libUIUI_gv_uIKillLogLogInfo[lv_itInt].lv_player = libUIUI_gv_uIKillLogLogInfo[(lv_itInt + 1)].lv_player;
        libUIUI_gv_uIKillLogLogInfo[lv_itInt].lv_logTimer = libUIUI_gv_uIKillLogLogInfo[(lv_itInt + 1)].lv_logTimer;
        libUIUI_gv_uIKillLogLogInfo[lv_itInt].lv_combo = libUIUI_gv_uIKillLogLogInfo[(lv_itInt + 1)].lv_combo;
        auto6D9D9FBA_var = 1;
        for ( ; auto6D9D9FBA_var <= auto6D9D9FBA_ae; auto6D9D9FBA_var += 1 ) {
            libUIUI_gv_uIKillLog.lv_deadPlayerFrame[lv_itInt][auto6D9D9FBA_var] = libUIUI_gv_uIKillLog.lv_deadPlayerFrame[(lv_itInt + 1)][auto6D9D9FBA_var];
            libUIUI_gv_uIKillLog.lv_deadPlayerPortraitImage[lv_itInt][auto6D9D9FBA_var] = libUIUI_gv_uIKillLog.lv_deadPlayerPortraitImage[(lv_itInt + 1)][auto6D9D9FBA_var];
            libUIUI_gv_uIKillLog.lv_deadPlayerStrikethroughFrame[lv_itInt][auto6D9D9FBA_var] = libUIUI_gv_uIKillLog.lv_deadPlayerStrikethroughFrame[(lv_itInt + 1)][auto6D9D9FBA_var];
        }
        libUIUI_gv_uIKillLog.lv_killingPlayerCutsceneFrame[lv_itInt] = libUIUI_gv_uIKillLog.lv_killingPlayerCutsceneFrame[(lv_itInt + 1)];
        libUIUI_gv_uIKillLog.lv_killingPlayerFrame[lv_itInt] = libUIUI_gv_uIKillLog.lv_killingPlayerFrame[(lv_itInt + 1)];
        libUIUI_gv_uIKillLog.lv_killingPlayerPortraitBorder[lv_itInt] = libUIUI_gv_uIKillLog.lv_killingPlayerPortraitBorder[(lv_itInt + 1)];
        libUIUI_gv_uIKillLog.lv_killingPlayerPortraitImage[lv_itInt] = libUIUI_gv_uIKillLog.lv_killingPlayerPortraitImage[(lv_itInt + 1)];
        libUIUI_gv_uIKillLog.lv_killLogPanel[lv_itInt] = libUIUI_gv_uIKillLog.lv_killLogPanel[(lv_itInt + 1)];
        libUIUI_gv_uIKillLog.lv_questCompleteFrame[lv_itInt] = libUIUI_gv_uIKillLog.lv_questCompleteFrame[(lv_itInt + 1)];
        libUIUI_gv_uIKillLog.lv_questFrame[lv_itInt] = libUIUI_gv_uIKillLog.lv_questFrame[(lv_itInt + 1)];
        libUIUI_gv_uIKillLog.lv_questTalentIconImage[lv_itInt] = libUIUI_gv_uIKillLog.lv_questTalentIconImage[(lv_itInt + 1)];
        libUIUI_gv_uIKillLog.lv_questTimeLabel[lv_itInt] = libUIUI_gv_uIKillLog.lv_questTimeLabel[(lv_itInt + 1)];
        libUIUI_gv_uIKillLog.lv_vSImageFrame[lv_itInt] = libUIUI_gv_uIKillLog.lv_vSImageFrame[(lv_itInt + 1)];
        libUIUI_gv_uIKillLog.lv_vSImageIMAGEFrame[lv_itInt] = libUIUI_gv_uIKillLog.lv_vSImageIMAGEFrame[(lv_itInt + 1)];
    }
    libUIUI_gv_uIKillLogLogInfo[libUIUI_gv_uIKillLogMaxLogs].lv_player = 0;
    libUIUI_gv_uIKillLogLogInfo[libUIUI_gv_uIKillLogMaxLogs].lv_logTimer = lv_temp_Timer;
    libUIUI_gv_uIKillLogLogInfo[libUIUI_gv_uIKillLogMaxLogs].lv_combo = 0;
    autoC1FB91F4_var = 1;
    for ( ; autoC1FB91F4_var <= autoC1FB91F4_ae; autoC1FB91F4_var += 1 ) {
        libUIUI_gv_uIKillLog.lv_deadPlayerFrame[libUIUI_gv_uIKillLogMaxLogs][autoC1FB91F4_var] = lv_temp_DeadPlayerFrame[autoC1FB91F4_var];
        libUIUI_gv_uIKillLog.lv_deadPlayerPortraitImage[libUIUI_gv_uIKillLogMaxLogs][autoC1FB91F4_var] = lv_temp_DeadPlayerPortraitImage[autoC1FB91F4_var];
        libUIUI_gv_uIKillLog.lv_deadPlayerStrikethroughFrame[libUIUI_gv_uIKillLogMaxLogs][autoC1FB91F4_var] = lv_temp_DeadPlayerStrikethroughFrame[autoC1FB91F4_var];
    }
    libUIUI_gv_uIKillLog.lv_killingPlayerCutsceneFrame[libUIUI_gv_uIKillLogMaxLogs] = lv_temp_KillingPlayerCutsceneFrame;
    libUIUI_gv_uIKillLog.lv_killingPlayerFrame[libUIUI_gv_uIKillLogMaxLogs] = lv_temp_KillingPlayerFrame;
    libUIUI_gv_uIKillLog.lv_killingPlayerPortraitImage[libUIUI_gv_uIKillLogMaxLogs] = lv_temp_KillingPlayerPortraitImage;
    libUIUI_gv_uIKillLog.lv_killLogPanel[libUIUI_gv_uIKillLogMaxLogs] = lv_temp_KilllogPanel;
    libUIUI_gv_uIKillLog.lv_questCompleteFrame[libUIUI_gv_uIKillLogMaxLogs] = lv_temp_QuestCompleteFrame;
    libUIUI_gv_uIKillLog.lv_questFrame[libUIUI_gv_uIKillLogMaxLogs] = lv_temp_QuestFrame;
    libUIUI_gv_uIKillLog.lv_questTalentIconImage[libUIUI_gv_uIKillLogMaxLogs] = lv_temp_QuestTalentIconImage;
    libUIUI_gv_uIKillLog.lv_questTimeLabel[libUIUI_gv_uIKillLogMaxLogs] = lv_temp_QuestTimeLabel;
    libUIUI_gv_uIKillLog.lv_vSImageFrame[libUIUI_gv_uIKillLogMaxLogs] = lv_temp_VsImage;
    libUIUI_gv_uIKillLog.lv_vSImageIMAGEFrame[libUIUI_gv_uIKillLogMaxLogs] = lv_temp_VsImageFrame;
    DialogControlSendAnimationEvent(libUIUI_gv_uIKillLog.lv_killLogPanel[libUIUI_gv_uIKillLogMaxLogs], PlayerGroupAll(), "FadeOut");
}

int libUIUI_gf_ReturnKilllogwithlowtimer () {
    // Variable Declarations
    int lv_lowTimeLog;

    // Automatic Variable Declarations
    const int autoB169EAE7_ae = libUIUI_gv_uIKillLogMaxLogs;
    int autoB169EAE7_var;

    // Variable Initialization
    lv_lowTimeLog = 1;

    // Implementation
    autoB169EAE7_var = 2;
    for ( ; autoB169EAE7_var <= autoB169EAE7_ae; autoB169EAE7_var += 1 ) {
        if ((TimerGetRemaining(libUIUI_gv_uIKillLogLogInfo[autoB169EAE7_var].lv_logTimer) < TimerGetRemaining(libUIUI_gv_uIKillLogLogInfo[lv_lowTimeLog].lv_logTimer))) {
            lv_lowTimeLog = autoB169EAE7_var;
        }

    }
    return lv_lowTimeLog;
}

string libUIUI_gf_UIKillLogGetPortraitOfPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_player > 0) && (lp_player <= libCore_gv_bALMaxPlayers)) {
        return libCore_gv_heroData[libGame_gv_players[lp_player].lv_heroIndex].lv_portrait;
    }
    else {
        return "assets\\Icons\\Common_General\\Icon_General_NPC_Unit.dds";
    }
}

void libUIUI_gf_UICombatFloatingElementsApplyDirection (int lp_frame, int lp_direction) {
    // Variable Declarations
    int lv_indexH;
    int lv_indexV;
    string lv_directionH;
    string lv_directionV;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_directionH = "";
    lv_directionV = "";

    // Implementation
    if ((lp_direction == libUIUI_ge_UIFCTDirection_Right)) {
        lv_indexH = RandomInt(0, 3);
        lv_indexV = RandomInt(0, 3);
    }
    else if ((lp_direction == libUIUI_ge_UIFCTDirection_Left)) {
        lv_indexH = RandomInt(4, 7);
        lv_indexV = RandomInt(0, 3);
    }
    else if ((lp_direction == libUIUI_ge_UIFCTDirection_Middle)) {
        lv_indexH = RandomInt(8, 11);
        lv_indexV = RandomInt(1, 3);
    }
    else if ((lp_direction == libUIUI_ge_UIFCTDirection_Vertical)) {
        lv_indexH = 12;
        lv_indexV = 4;
    }
    else if ((lp_direction == libUIUI_ge_UIFCTDirection_Random)) {
        lv_indexH = RandomInt(0, 11);
        lv_indexV = RandomInt(0, 3);
    }
    lv_directionH = ("PiratedFloatingTextTemplates/H" + libCore_gf_ConvertIntegerToStringDoubleDigit(lv_indexH));
    lv_directionV = ("PiratedFloatingTextTemplates/V" + libCore_gf_ConvertIntegerToStringDoubleDigit(lv_indexV));
    DialogControlCreateInPanelFromTemplate(lp_frame, c_triggerControlTypePanel, lv_directionH);
    DialogControlCreateInPanelFromTemplate(lp_frame, c_triggerControlTypePanel, lv_directionV);
}

void libUIUI_gf_UICombatFloatingElementsApplyAnimation (int lp_textFrame, string lp_style, playergroup lp_displayPlayers, string lp_animationSpeed) {
    // Variable Declarations
    string lv_animateMessage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_animateMessage = "";

    // Implementation
    lv_animateMessage = (lp_animationSpeed);
    if ((lp_style == "FCT_Kinetic_Crit")) {
        DialogControlSetAnimationState(lp_textFrame, lp_displayPlayers, "TextIconState", "IconBasic");
    }
    else if ((lp_style == "FCT_Energetic_Crit")) {
        DialogControlSetAnimationState(lp_textFrame, lp_displayPlayers, "TextIconState", "IconAbility");
    }
    else if ((lp_style == "FCT_Heal_Crit")) {
        DialogControlSetAnimationState(lp_textFrame, lp_displayPlayers, "TextIconState", "IconAbility");
    }
    DialogControlSendAnimationEvent(lp_textFrame, lp_displayPlayers, lv_animateMessage);
}

int libUIUI_gf_UICombatFloatingElementsCreateTagAndReturnDialogItemForPlayer (unit lp_displayUnit, text lp_displayText, string lp_style, int lp_direction, int lp_displayPlayer, int lp_yOffset, string lp_animationSpeed) {
    // Variable Declarations
    int lv_frame;
    int lv_textFrame;
    int lv_xOffsetActual;
    int lv_yOffsetActual;
    string lv_directionH;
    string lv_directionV;
    string lv_animateMessage;
    string lv_iconState;
    int lv_locDialogItem;
    int lv_locAnchorPointDialogItem;
    int lv_locAnchorDialog;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_frame = c_invalidDialogControlId;
    lv_textFrame = c_invalidDialogControlId;
    lv_directionH = "";
    lv_directionV = "";
    lv_animateMessage = "";
    lv_iconState = "";
    lv_locDialogItem = c_invalidDialogControlId;
    lv_locAnchorPointDialogItem = c_invalidDialogControlId;
    lv_locAnchorDialog = c_invalidDialogId;

    // Implementation
    lv_yOffsetActual = (-200 - lp_yOffset);
    lv_xOffsetActual = -200;
    DialogCreate(400, 400, c_anchorCenter, 0, 0, true);
    lv_locAnchorDialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libCore_gf_DialogSetPositionRelativeToUnitWithAnchor(lv_locAnchorDialog, lp_displayUnit, "Ref_Origin", c_anchorCenter, 0, 0);
    DialogSetPositionRelativeToUnit(lv_locAnchorDialog, lp_displayUnit, "Ref_Origin", lv_xOffsetActual, lv_yOffsetActual);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
    DialogControlSetSize(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[lp_displayPlayer], 1, 1);
    DialogControlSetPosition(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[lp_displayPlayer], c_anchorCenter, 0, 0);
    lv_locAnchorPointDialogItem = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenLowerContainer");
    DialogControlCreateInPanelFromTemplate(DialogControlLastCreated(), c_triggerControlTypePanel, "PiratedFloatingText/FloatingTextFrame");
    lv_frame = DialogControlLastCreated();
    DialogControlSetPositionRelative(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[lp_displayPlayer], c_anchorCenter, lv_locAnchorPointDialogItem, c_anchorCenter, 0, 0);
    DialogControlHookup(lv_frame, c_triggerControlTypeLabel, "Text");
    lv_textFrame = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lv_textFrame, lp_displayText, libCore_gv_playerGroupFromPlayer[lp_displayPlayer]);
    libNtve_gf_SetDialogItemStyle(lv_textFrame, lp_style, libCore_gv_playerGroupFromPlayer[lp_displayPlayer]);
    libUIUI_gf_UICombatFloatingElementsApplyDirection(lv_frame, lp_direction);
    libUIUI_gf_UICombatFloatingElementsApplyAnimation(lv_textFrame, lp_style, libCore_gv_playerGroupFromPlayer[lp_displayPlayer], lp_animationSpeed);
    return lv_textFrame;
}

int libUIUI_gf_UICombatFloatingElementsCreateTagAndReturnDialogItemForPlayerGroup (unit lp_displayUnit, text lp_displayText, string lp_style, int lp_direction, playergroup lp_displayPlayerGroup, int lp_yOffset, string lp_animationSpeed) {
    // Variable Declarations
    int lv_frame;
    int lv_textFrame;
    int lv_xOffsetActual;
    int lv_yOffsetActual;
    string lv_directionH;
    string lv_directionV;
    string lv_animateMessage;
    string lv_iconState;
    int lv_locDialogItem;
    int lv_locAnchorPointDialogItem;
    int lv_locAnchorDialog;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_frame = c_invalidDialogControlId;
    lv_textFrame = c_invalidDialogControlId;
    lv_directionH = "";
    lv_directionV = "";
    lv_animateMessage = "";
    lv_iconState = "";
    lv_locDialogItem = c_invalidDialogControlId;
    lv_locAnchorPointDialogItem = c_invalidDialogControlId;
    lv_locAnchorDialog = c_invalidDialogId;

    // Implementation
    lv_yOffsetActual = (-200 - lp_yOffset);
    lv_xOffsetActual = -200;
    DialogCreate(400, 400, c_anchorCenter, 0, 0, true);
    lv_locAnchorDialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libCore_gf_DialogSetPositionRelativeToUnitWithAnchor(lv_locAnchorDialog, lp_displayUnit, "Ref_Origin", c_anchorCenter, 0, 0);
    DialogSetPositionRelativeToUnit(lv_locAnchorDialog, lp_displayUnit, "Ref_Origin", lv_xOffsetActual, lv_yOffsetActual);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
    DialogControlSetSize(DialogControlLastCreated(), lp_displayPlayerGroup, 1, 1);
    DialogControlSetPosition(DialogControlLastCreated(), lp_displayPlayerGroup, c_anchorCenter, 0, 0);
    lv_locAnchorPointDialogItem = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenLowerContainer");
    DialogControlCreateInPanelFromTemplate(DialogControlLastCreated(), c_triggerControlTypePanel, "PiratedFloatingText/FloatingTextFrame");
    lv_frame = DialogControlLastCreated();
    DialogControlSetPositionRelative(DialogControlLastCreated(), lp_displayPlayerGroup, c_anchorCenter, lv_locAnchorPointDialogItem, c_anchorCenter, 0, 0);
    DialogControlHookup(lv_frame, c_triggerControlTypeLabel, "Text");
    lv_textFrame = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lv_textFrame, lp_displayText, lp_displayPlayerGroup);
    libNtve_gf_SetDialogItemStyle(lv_textFrame, lp_style, lp_displayPlayerGroup);
    libUIUI_gf_UICombatFloatingElementsApplyDirection(lv_frame, lp_direction);
    libUIUI_gf_UICombatFloatingElementsApplyAnimation(lv_textFrame, lp_style, lp_displayPlayerGroup, lp_animationSpeed);
    return lv_textFrame;
}

trigger auto_libUIUI_gf_UICombatFloatingElementsCreateTextatUnitForPlayerGroupThread_Trigger = null;
unit auto_libUIUI_gf_UICombatFloatingElementsCreateTextatUnitForPlayerGroupThread_lp_displayUnit;
text auto_libUIUI_gf_UICombatFloatingElementsCreateTextatUnitForPlayerGroupThread_lp_displayText;
string auto_libUIUI_gf_UICombatFloatingElementsCreateTextatUnitForPlayerGroupThread_lp_style;
int auto_libUIUI_gf_UICombatFloatingElementsCreateTextatUnitForPlayerGroupThread_lp_direction;
playergroup auto_libUIUI_gf_UICombatFloatingElementsCreateTextatUnitForPlayerGroupThread_lp_displayPlayers;
int auto_libUIUI_gf_UICombatFloatingElementsCreateTextatUnitForPlayerGroupThread_lp_yOffset;
string auto_libUIUI_gf_UICombatFloatingElementsCreateTextatUnitForPlayerGroupThread_lp_animationSpeed;

void libUIUI_gf_UICombatFloatingElementsCreateTextatUnitForPlayerGroupThread (unit lp_displayUnit, text lp_displayText, string lp_style, int lp_direction, playergroup lp_displayPlayers, int lp_yOffset, string lp_animationSpeed) {
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextatUnitForPlayerGroupThread_lp_displayUnit = lp_displayUnit;
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextatUnitForPlayerGroupThread_lp_displayText = lp_displayText;
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextatUnitForPlayerGroupThread_lp_style = lp_style;
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextatUnitForPlayerGroupThread_lp_direction = lp_direction;
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextatUnitForPlayerGroupThread_lp_displayPlayers = lp_displayPlayers;
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextatUnitForPlayerGroupThread_lp_yOffset = lp_yOffset;
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextatUnitForPlayerGroupThread_lp_animationSpeed = lp_animationSpeed;

    if (auto_libUIUI_gf_UICombatFloatingElementsCreateTextatUnitForPlayerGroupThread_Trigger == null) {
        auto_libUIUI_gf_UICombatFloatingElementsCreateTextatUnitForPlayerGroupThread_Trigger = TriggerCreate("auto_libUIUI_gf_UICombatFloatingElementsCreateTextatUnitForPlayerGroupThread_TriggerFunc");
    }

    TriggerExecute(auto_libUIUI_gf_UICombatFloatingElementsCreateTextatUnitForPlayerGroupThread_Trigger, false, false);
}

bool auto_libUIUI_gf_UICombatFloatingElementsCreateTextatUnitForPlayerGroupThread_TriggerFunc (bool testConds, bool runActions) {
    unit lp_displayUnit = auto_libUIUI_gf_UICombatFloatingElementsCreateTextatUnitForPlayerGroupThread_lp_displayUnit;
    text lp_displayText = auto_libUIUI_gf_UICombatFloatingElementsCreateTextatUnitForPlayerGroupThread_lp_displayText;
    string lp_style = auto_libUIUI_gf_UICombatFloatingElementsCreateTextatUnitForPlayerGroupThread_lp_style;
    int lp_direction = auto_libUIUI_gf_UICombatFloatingElementsCreateTextatUnitForPlayerGroupThread_lp_direction;
    playergroup lp_displayPlayers = auto_libUIUI_gf_UICombatFloatingElementsCreateTextatUnitForPlayerGroupThread_lp_displayPlayers;
    int lp_yOffset = auto_libUIUI_gf_UICombatFloatingElementsCreateTextatUnitForPlayerGroupThread_lp_yOffset;
    string lp_animationSpeed = auto_libUIUI_gf_UICombatFloatingElementsCreateTextatUnitForPlayerGroupThread_lp_animationSpeed;

    // Variable Declarations
    int lv_frame;
    int lv_textFrame;
    int lv_xOffsetActual;
    int lv_yOffsetActual;
    string lv_directionH;
    string lv_directionV;
    string lv_animateMessage;
    string lv_iconState;
    int lv_locDialogItem;
    int lv_locAnchorPointDialogItem;
    int lv_locAnchorDialog;

    // Automatic Variable Declarations
    fixed auto6B720CB5_at;

    // Variable Initialization
    lv_frame = c_invalidDialogControlId;
    lv_textFrame = c_invalidDialogControlId;
    lv_directionH = "";
    lv_directionV = "";
    lv_animateMessage = "";
    lv_iconState = "";
    lv_locDialogItem = c_invalidDialogControlId;
    lv_locAnchorPointDialogItem = c_invalidDialogControlId;
    lv_locAnchorDialog = c_invalidDialogId;

    // Implementation
    lv_yOffsetActual = (-200 - lp_yOffset);
    lv_xOffsetActual = -200;
    DialogCreate(400, 400, c_anchorCenter, 0, 0, true);
    lv_locAnchorDialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libCore_gf_DialogSetPositionRelativeToUnitWithAnchor(lv_locAnchorDialog, lp_displayUnit, "Ref_Origin", c_anchorCenter, 0, 0);
    DialogSetPositionRelativeToUnit(lv_locAnchorDialog, lp_displayUnit, "Ref_Origin", lv_xOffsetActual, lv_yOffsetActual);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
    DialogControlSetSize(DialogControlLastCreated(), lp_displayPlayers, 1, 1);
    DialogControlSetPosition(DialogControlLastCreated(), lp_displayPlayers, c_anchorCenter, 0, 0);
    lv_locAnchorPointDialogItem = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenLowerContainer");
    DialogControlCreateInPanelFromTemplate(DialogControlLastCreated(), c_triggerControlTypePanel, "PiratedFloatingText/FloatingTextFrame");
    lv_frame = DialogControlLastCreated();
    DialogControlSetPositionRelative(DialogControlLastCreated(), lp_displayPlayers, c_anchorCenter, lv_locAnchorPointDialogItem, c_anchorCenter, 0, 0);
    DialogControlHookup(lv_frame, c_triggerControlTypeLabel, "Text");
    lv_textFrame = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lv_textFrame, lp_displayText, lp_displayPlayers);
    if ((lp_style != "")) {
        libNtve_gf_SetDialogItemStyle(lv_textFrame, lp_style, lp_displayPlayers);
    }

    libUIUI_gf_UICombatFloatingElementsApplyDirection(lv_frame, lp_direction);
    libUIUI_gf_UICombatFloatingElementsApplyAnimation(lv_textFrame, lp_style, lp_displayPlayers, lp_animationSpeed);
    auto6B720CB5_at = 0;
    while (!((UnitIsAlive(lp_displayUnit) == false)) && auto6B720CB5_at <= 2.0) {
        Wait(0.0625, c_timeGame);
        auto6B720CB5_at = auto6B720CB5_at + 0.0625;
    }
    DialogDestroy(lv_locAnchorDialog);
    return true;
}

void libUIUI_gf_UICombatFloatingElementsCreateTextatPointForPlayerGroup (point lp_displayPoint, text lp_displayText, string lp_style, int lp_direction, playergroup lp_displayPlayers, int lp_yOffset, string lp_animationSpeed) {
    // Variable Declarations
    int lv_frame;
    int lv_textFrame;
    int lv_xOffsetActual;
    int lv_yOffsetActual;
    string lv_directionH;
    string lv_directionV;
    string lv_animateMessage;
    string lv_iconState;
    int lv_locDialogItem;
    int lv_locAnchorPointDialogItem;
    int lv_locAnchorDialog;
    unit lv_locUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_frame = c_invalidDialogControlId;
    lv_textFrame = c_invalidDialogControlId;
    lv_directionH = "";
    lv_directionV = "";
    lv_animateMessage = "";
    lv_iconState = "";
    lv_locDialogItem = c_invalidDialogControlId;
    lv_locAnchorPointDialogItem = c_invalidDialogControlId;
    lv_locAnchorDialog = c_invalidDialogId;

    // Implementation
    lv_yOffsetActual = (-200 - lp_yOffset);
    lv_xOffsetActual = -200;
    DialogCreate(400, 400, c_anchorCenter, 0, 0, true);
    lv_locAnchorDialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Common_InvisibleUnit", c_unitCreateIgnorePlacement, PlayerGroupPlayer(lp_displayPlayers, 1), lp_displayPoint);
    lv_locUnit = UnitLastCreated();
    libCore_gf_DialogSetPositionRelativeToUnitWithAnchor(lv_locAnchorDialog, lv_locUnit, "Ref_Origin", c_anchorCenter, 0, 0);
    DialogSetPositionRelativeToUnit(lv_locAnchorDialog, lv_locUnit, "Ref_Origin", lv_xOffsetActual, lv_yOffsetActual);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
    DialogControlSetSize(DialogControlLastCreated(), lp_displayPlayers, 1, 1);
    DialogControlSetPosition(DialogControlLastCreated(), lp_displayPlayers, c_anchorCenter, 0, 0);
    lv_locAnchorPointDialogItem = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenLowerContainer");
    DialogControlCreateInPanelFromTemplate(DialogControlLastCreated(), c_triggerControlTypePanel, "PiratedFloatingText/FloatingTextFrame");
    lv_frame = DialogControlLastCreated();
    DialogControlSetPositionRelative(DialogControlLastCreated(), lp_displayPlayers, c_anchorCenter, lv_locAnchorPointDialogItem, c_anchorCenter, 0, 0);
    DialogControlHookup(lv_frame, c_triggerControlTypeLabel, "Text");
    lv_textFrame = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lv_textFrame, lp_displayText, lp_displayPlayers);
    if ((lp_style != "")) {
        libNtve_gf_SetDialogItemStyle(lv_textFrame, lp_style, lp_displayPlayers);
    }

    libUIUI_gf_UICombatFloatingElementsApplyDirection(lv_frame, lp_direction);
    libUIUI_gf_UICombatFloatingElementsApplyAnimation(lv_textFrame, lp_style, lp_displayPlayers, lp_animationSpeed);
    Wait(2.0, c_timeGame);
    DialogDestroy(lv_locAnchorDialog);
    UnitRemove(lv_locUnit);
}

trigger auto_libUIUI_gf_UICombatFloatingElementsCreateTextatPointForPlayerGroupThread_Trigger = null;
point auto_libUIUI_gf_UICombatFloatingElementsCreateTextatPointForPlayerGroupThread_lp_displayPoint;
text auto_libUIUI_gf_UICombatFloatingElementsCreateTextatPointForPlayerGroupThread_lp_displayText;
string auto_libUIUI_gf_UICombatFloatingElementsCreateTextatPointForPlayerGroupThread_lp_style;
int auto_libUIUI_gf_UICombatFloatingElementsCreateTextatPointForPlayerGroupThread_lp_direction;
playergroup auto_libUIUI_gf_UICombatFloatingElementsCreateTextatPointForPlayerGroupThread_lp_displayPlayers;
int auto_libUIUI_gf_UICombatFloatingElementsCreateTextatPointForPlayerGroupThread_lp_yOffset;
string auto_libUIUI_gf_UICombatFloatingElementsCreateTextatPointForPlayerGroupThread_lp_animationSpeed;

void libUIUI_gf_UICombatFloatingElementsCreateTextatPointForPlayerGroupThread (point lp_displayPoint, text lp_displayText, string lp_style, int lp_direction, playergroup lp_displayPlayers, int lp_yOffset, string lp_animationSpeed) {
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextatPointForPlayerGroupThread_lp_displayPoint = lp_displayPoint;
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextatPointForPlayerGroupThread_lp_displayText = lp_displayText;
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextatPointForPlayerGroupThread_lp_style = lp_style;
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextatPointForPlayerGroupThread_lp_direction = lp_direction;
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextatPointForPlayerGroupThread_lp_displayPlayers = lp_displayPlayers;
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextatPointForPlayerGroupThread_lp_yOffset = lp_yOffset;
    auto_libUIUI_gf_UICombatFloatingElementsCreateTextatPointForPlayerGroupThread_lp_animationSpeed = lp_animationSpeed;

    if (auto_libUIUI_gf_UICombatFloatingElementsCreateTextatPointForPlayerGroupThread_Trigger == null) {
        auto_libUIUI_gf_UICombatFloatingElementsCreateTextatPointForPlayerGroupThread_Trigger = TriggerCreate("auto_libUIUI_gf_UICombatFloatingElementsCreateTextatPointForPlayerGroupThread_TriggerFunc");
    }

    TriggerExecute(auto_libUIUI_gf_UICombatFloatingElementsCreateTextatPointForPlayerGroupThread_Trigger, false, false);
}

bool auto_libUIUI_gf_UICombatFloatingElementsCreateTextatPointForPlayerGroupThread_TriggerFunc (bool testConds, bool runActions) {
    point lp_displayPoint = auto_libUIUI_gf_UICombatFloatingElementsCreateTextatPointForPlayerGroupThread_lp_displayPoint;
    text lp_displayText = auto_libUIUI_gf_UICombatFloatingElementsCreateTextatPointForPlayerGroupThread_lp_displayText;
    string lp_style = auto_libUIUI_gf_UICombatFloatingElementsCreateTextatPointForPlayerGroupThread_lp_style;
    int lp_direction = auto_libUIUI_gf_UICombatFloatingElementsCreateTextatPointForPlayerGroupThread_lp_direction;
    playergroup lp_displayPlayers = auto_libUIUI_gf_UICombatFloatingElementsCreateTextatPointForPlayerGroupThread_lp_displayPlayers;
    int lp_yOffset = auto_libUIUI_gf_UICombatFloatingElementsCreateTextatPointForPlayerGroupThread_lp_yOffset;
    string lp_animationSpeed = auto_libUIUI_gf_UICombatFloatingElementsCreateTextatPointForPlayerGroupThread_lp_animationSpeed;

    // Variable Declarations
    int lv_frame;
    int lv_textFrame;
    int lv_xOffsetActual;
    int lv_yOffsetActual;
    string lv_directionH;
    string lv_directionV;
    string lv_animateMessage;
    string lv_iconState;
    int lv_locDialogItem;
    int lv_locAnchorPointDialogItem;
    int lv_locAnchorDialog;
    unit lv_locUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_frame = c_invalidDialogControlId;
    lv_textFrame = c_invalidDialogControlId;
    lv_directionH = "";
    lv_directionV = "";
    lv_animateMessage = "";
    lv_iconState = "";
    lv_locDialogItem = c_invalidDialogControlId;
    lv_locAnchorPointDialogItem = c_invalidDialogControlId;
    lv_locAnchorDialog = c_invalidDialogId;

    // Implementation
    lv_yOffsetActual = (-200 - lp_yOffset);
    lv_xOffsetActual = -200;
    DialogCreate(400, 400, c_anchorCenter, 0, 0, true);
    lv_locAnchorDialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Common_InvisibleUnit", c_unitCreateIgnorePlacement, PlayerGroupPlayer(lp_displayPlayers, 1), lp_displayPoint);
    lv_locUnit = UnitLastCreated();
    libCore_gf_DialogSetPositionRelativeToUnitWithAnchor(lv_locAnchorDialog, lv_locUnit, "Ref_Origin", c_anchorCenter, 0, 0);
    DialogSetPositionRelativeToUnit(lv_locAnchorDialog, lv_locUnit, "Ref_Origin", lv_xOffsetActual, lv_yOffsetActual);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
    DialogControlSetSize(DialogControlLastCreated(), lp_displayPlayers, 1, 1);
    DialogControlSetPosition(DialogControlLastCreated(), lp_displayPlayers, c_anchorCenter, 0, 0);
    lv_locAnchorPointDialogItem = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenLowerContainer");
    DialogControlCreateInPanelFromTemplate(DialogControlLastCreated(), c_triggerControlTypePanel, "PiratedFloatingText/FloatingTextFrame");
    lv_frame = DialogControlLastCreated();
    DialogControlSetPositionRelative(DialogControlLastCreated(), lp_displayPlayers, c_anchorCenter, lv_locAnchorPointDialogItem, c_anchorCenter, 0, 0);
    DialogControlHookup(lv_frame, c_triggerControlTypeLabel, "Text");
    lv_textFrame = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lv_textFrame, lp_displayText, lp_displayPlayers);
    libNtve_gf_SetDialogItemStyle(lv_textFrame, lp_style, lp_displayPlayers);
    libUIUI_gf_UICombatFloatingElementsApplyDirection(lv_frame, lp_direction);
    libUIUI_gf_UICombatFloatingElementsApplyAnimation(lv_textFrame, lp_style, lp_displayPlayers, lp_animationSpeed);
    Wait(2.0, c_timeGame);
    DialogDestroy(lv_locAnchorDialog);
    UnitRemove(lv_locUnit);
    return true;
}

void libUIUI_gf_UISetDialogItemToSelectedOrObserved (int lp_dialogItem) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetObservedType(lp_dialogItem, c_triggerObservedTypeSelectedOrObservedPlayerId);
    DialogControlSetVisible(lp_dialogItem, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    DialogControlSetVisible(lp_dialogItem, libCore_gv_nPCPlayers, false);
}

void libUIUI_gf_UIShowHideStormGameUIAndWorldForPlayer2 (bool lp_showHide, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gf_UIHeroConsoleShowHideForPlayer(lp_showHide, lp_player);
    UISetFrameVisible(libCore_gv_playerGroupFromPlayer[lp_player], c_syncFrameTypeMinimapPanel, lp_showHide);
}

void libUIUI_gf_UIShowHideStormGameUIAndWorldForPlayer (bool lp_showHide, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_showHide == true)) {
        CameraLockInput(lp_player, false);
    }
    else {
        CameraLockInput(lp_player, true);
    }
    libUIUI_gf_UIHeroConsoleShowHideForPlayer(lp_showHide, lp_player);
    UISetFrameVisible(libCore_gv_playerGroupFromPlayer[lp_player], c_syncFrameTypeMinimapPanel, lp_showHide);
    UISetWorldVisible(libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
}

void libUIUI_gf_UIDamageFlashStartLowHPSoundAndScreenEffects (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_players[lp_player].lv_lowHPSoundPlaying == false)) {
        DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_lowHealthPersistentImage, libCore_gv_playerGroupFromPlayer[lp_player], 0.0, 50.0);
        libGame_gv_players[lp_player].lv_lowHPSoundPlaying = true;
        TriggerEnable(libUIUI_gt_UIDamageFlashLowHPSoundsLooper, true);
        if ((libGame_gv_players[lp_player].lv_lowHPStartSound == null)) {
            SoundPlayForPlayer(SoundLink("UI_LowHealth_Warning_Start", -1), lp_player, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
            libGame_gv_players[lp_player].lv_lowHPStartSound = SoundLastPlayed();
        }

        if ((libGame_gv_players[lp_player].lv_lowHPBreathLoop == null)) {
            SoundPlayForPlayer(SoundLink("UI_LowHealthWarning_Breath_Loop", -1), lp_player, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
            libGame_gv_players[lp_player].lv_lowHPBreathLoop = SoundLastPlayed();
        }

        if ((libGame_gv_players[lp_player].lv_lowHPHeartBeatLoop == null)) {
            SoundPlayForPlayer(SoundLink("UI_LowHealthWarning_HeartBeat_Loop", -1), lp_player, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
            libGame_gv_players[lp_player].lv_lowHPHeartBeatLoop = SoundLastPlayed();
        }

    }

}

void libUIUI_gf_UIDamageFlashStopLowHPSoundAndScreenEffects (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libGame_gv_players[lp_player].lv_lowHPSoundPlaying = false;
    DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_lowHealthPersistentImage, libCore_gv_playerGroupFromPlayer[lp_player], 0.625, 100.0);
    if ((libGame_gv_players[lp_player].lv_lowHPStartSound != null)) {
        SoundStop(libGame_gv_players[lp_player].lv_lowHPStartSound, true);
        libGame_gv_players[lp_player].lv_lowHPStartSound = null;
    }

    if ((libGame_gv_players[lp_player].lv_lowHPBreathLoop != null)) {
        SoundStop(libGame_gv_players[lp_player].lv_lowHPBreathLoop, true);
        libGame_gv_players[lp_player].lv_lowHPBreathLoop = null;
    }

    if ((libGame_gv_players[lp_player].lv_lowHPHeartBeatLoop != null)) {
        SoundStop(libGame_gv_players[lp_player].lv_lowHPHeartBeatLoop, true);
        libGame_gv_players[lp_player].lv_lowHPHeartBeatLoop = null;
    }

}

void libUIUI_gf_UILowHPSetSoundChannelsForLowHealth (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryAlert, 0.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryAmbient, 25.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryBuild, 25.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryCombat, 60.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryDeath, 100.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryDialogue, 100.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryDoodad, 25.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryFlames, 25.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryFoley, 100.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryGather, 25.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryME, 100.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryMission, 100.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryMovement, 35.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryMovie, 100.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryMusic, 80.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryOther, 100.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryReady, 25.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySAmbient, 70.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySEmitters, 100.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySPieces, 70.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySpell, 60.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryTV, 100.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryUI, 70.0, 2.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryVoice, 100.0, 2.0);
}

void libUIUI_gf_UILowHPSetSoundChannelsForSilence (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryAlert, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryAmbient, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryBuild, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryCombat, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryDeath, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryDialogue, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryDoodad, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryFlames, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryFoley, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryGather, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryME, 100.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryMission, 100.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryMovement, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryMovie, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryMusic, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryOther, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryReady, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySAmbient, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySEmitters, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySPieces, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategorySpell, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryTV, 30.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryUI, 100.0, 1.0);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryVoice, 30.0, 1.0);
}

void libUIUI_gf_UILowHPSetSoundChannelsForNormal (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, libCore_gv_playerGroupFromPlayer[lp_player], 1.5);
    SoundChannelSetVolume(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryVoice, 100.0, 1.0);
}

int libUIUI_gf_DeathAnnouncementPanelGetNextFreeSlotForTeam (int lp_team) {
    // Variable Declarations
    int lv_itSlot;

    // Automatic Variable Declarations
    const int autoC9F3EB41_ae = libCore_gv_bALMaxPlayersOnATeam;
    const int autoC9F3EB41_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itSlot = 1;
    for ( ; ( (autoC9F3EB41_ai >= 0 && lv_itSlot <= autoC9F3EB41_ae) || (autoC9F3EB41_ai < 0 && lv_itSlot >= autoC9F3EB41_ae) ) ; lv_itSlot += autoC9F3EB41_ai ) {
        if ((libUIUI_gv_deathAnnouncement_DeadHeroData[lp_team][lv_itSlot].lv_player == 0)) {
            return lv_itSlot;
        }

    }
    return (libCore_gv_bALMaxPlayersOnATeam + 1);
}

void libUIUI_gf_DeathAnnouncementPanelRegisterPlayer (int lp_player) {
    // Variable Declarations
    int lv_team;
    int lv_slot;
    int lv_heroIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_player < 1) || (lp_player > libCore_gv_bALMaxPlayers))) {
        return ;
    }

    lv_team = libGame_gf_PlayerGetPlayerTeam(lp_player);
    lv_slot = libUIUI_gf_DeathAnnouncementPanelGetNextFreeSlotForTeam(lv_team);
    if (((lv_team > libCore_gv_bALMaxTeams) || (lv_slot > libCore_gv_bALMaxPlayersOnATeam))) {
        return ;
    }

    libUIUI_gv_deathAnnouncement_DeadHeroData[lv_team][lv_slot].lv_player = lp_player;
    libUIUI_gv_deathAnnouncement_DeadHeroData[lv_team][lv_slot].lv_portraitImage = libCore_gv_heroData[libCore_gf_CommandersGetHeroIndexOfPlayerHero(lp_player)].lv_portrait;
    libUIUI_gv_deathAnnouncement_DeadHeroData[lv_team][lv_slot].lv_heroName = libGame_gv_players[lp_player].lv_heroName;
    libUIUI_gv_deathAnnouncement_DeadHeroData[lv_team][lv_slot].lv_playerName = libGame_gv_players[lp_player].lv_playerName;
    libNtve_gf_SetDialogItemImage(libUIUI_gv_deathAnnouncement_Panel.lv_heroPortraitImages[lv_team][lv_slot], libUIUI_gv_deathAnnouncement_DeadHeroData[lv_team][lv_slot].lv_portraitImage, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libUIUI_gv_deathAnnouncement_Panel.lv_heroNameLabels[lv_team][lv_slot], libUIUI_gv_deathAnnouncement_DeadHeroData[lv_team][lv_slot].lv_heroName, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libUIUI_gv_deathAnnouncement_Panel.lv_playerNameLabels[lv_team][lv_slot], libUIUI_gv_deathAnnouncement_DeadHeroData[lv_team][lv_slot].lv_playerName, PlayerGroupAll());
    DialogControlSetVisible(libUIUI_gv_deathAnnouncement_Panel.lv_heroPanels[lv_team][lv_slot], PlayerGroupAll(), true);
    TimerStart(libUIUI_gv_deathAnnouncement_AnnouncementVisibleTimers[lp_player], libUIUI_gv_deathAnnouncement_VisibleDuration_C, false, c_timeGame);
}

void libUIUI_gf_DeathAnnouncementPanelUnregisterPlayer (int lp_player) {
    // Variable Declarations
    int lv_itSlot;
    int lv_team;
    int lv_numberOfPlayersDeadOnTeam;

    // Automatic Variable Declarations
    int autoD8013F09_ae;
    const int autoD8013F09_ai = 1;

    // Variable Initialization

    // Implementation
    lv_team = libGame_gf_PlayerGetPlayerTeam(lp_player);
    lv_numberOfPlayersDeadOnTeam = (libUIUI_gf_DeathAnnouncementPanelGetNextFreeSlotForTeam(lv_team) - 1);
    autoD8013F09_ae = (lv_numberOfPlayersDeadOnTeam - 1);
    lv_itSlot = 1;
    for ( ; ( (autoD8013F09_ai >= 0 && lv_itSlot <= autoD8013F09_ae) || (autoD8013F09_ai < 0 && lv_itSlot >= autoD8013F09_ae) ) ; lv_itSlot += autoD8013F09_ai ) {
        libUIUI_gv_deathAnnouncement_DeadHeroData[lv_team][lv_itSlot].lv_player = libUIUI_gv_deathAnnouncement_DeadHeroData[lv_team][lv_itSlot].lv_player;
        libUIUI_gv_deathAnnouncement_DeadHeroData[lv_team][lv_itSlot].lv_portraitImage = libUIUI_gv_deathAnnouncement_DeadHeroData[lv_team][lv_itSlot].lv_portraitImage;
        libUIUI_gv_deathAnnouncement_DeadHeroData[lv_team][lv_itSlot].lv_heroName = libUIUI_gv_deathAnnouncement_DeadHeroData[lv_team][lv_itSlot].lv_heroName;
        libUIUI_gv_deathAnnouncement_DeadHeroData[lv_team][lv_itSlot].lv_playerName = libUIUI_gv_deathAnnouncement_DeadHeroData[lv_team][lv_itSlot].lv_playerName;
        libNtve_gf_SetDialogItemImage(libUIUI_gv_deathAnnouncement_Panel.lv_heroPortraitImages[lv_team][lv_itSlot], libUIUI_gv_deathAnnouncement_DeadHeroData[lv_team][lv_itSlot].lv_portraitImage, PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libUIUI_gv_deathAnnouncement_Panel.lv_heroNameLabels[lv_team][lv_itSlot], libUIUI_gv_deathAnnouncement_DeadHeroData[lv_team][lv_itSlot].lv_heroName, PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libUIUI_gv_deathAnnouncement_Panel.lv_playerNameLabels[lv_team][lv_itSlot], libUIUI_gv_deathAnnouncement_DeadHeroData[lv_team][lv_itSlot].lv_playerName, PlayerGroupAll());
    }
    libUIUI_gv_deathAnnouncement_DeadHeroData[lv_team][lv_itSlot].lv_player = lv_itSlot;
    DialogControlSetVisible(libUIUI_gv_deathAnnouncement_Panel.lv_heroPanels[lv_team][lv_itSlot], PlayerGroupAll(), false);
}

void libUIUI_gf_EncouragementShowHidePanelForPlayer (bool lp_showHide, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_showHide == true)) {
        DialogControlSetVisible(libUIUI_gv_encouragement_Panel.lv_mainDialog, libCore_gv_playerGroupFromPlayer[lp_player], true);
    }
    else {
        DialogControlSetVisible(libUIUI_gv_encouragement_Panel.lv_mainDialog, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
}

void libUIUI_gf_UIFloatingCombatTextCreateTextTag (int lp_displayPlayer, fixed lp_duration, text lp_text, unit lp_targetUnit, fixed lp_heightOffset, fixed lp_horizontalOffset, int lp_numberType) {
    // Variable Declarations
    int lv_i;
    text lv_numberTypeAsText;
    text lv_sizeTypeAsText;
    text lv_stormFontStyle;

    // Automatic Variable Declarations
    int auto5FB2B220_val;
    int auto62A1BFB2_val;

    // Variable Initialization
    lv_i = 1;

    // Implementation
    auto5FB2B220_val = lp_numberType;
    if (auto5FB2B220_val == libCore_ge_FloatingTextType_NormalDamage) {
        lv_numberTypeAsText = StringExternal("Param/Value/lib_UIUI_CBECE5B8");
        lv_i = 1;
    }
    else if (auto5FB2B220_val == libCore_ge_FloatingTextType_MediumDamage) {
        lv_numberTypeAsText = StringExternal("Param/Value/lib_UIUI_4FA538EB");
        lv_i = 2;
    }
    else if (auto5FB2B220_val == libCore_ge_FloatingTextType_HighDamage) {
        lv_numberTypeAsText = StringExternal("Param/Value/lib_UIUI_03E5D7BB");
        lv_i = 3;
    }
    else if (auto5FB2B220_val == libCore_ge_FloatingTextType_InsaneDamage) {
        lv_numberTypeAsText = StringExternal("Param/Value/lib_UIUI_2F5A41EF");
        lv_i = 4;
    }
    else if (auto5FB2B220_val == libCore_ge_FloatingTextType_BonusDamage) {
        lv_numberTypeAsText = StringExternal("Param/Value/lib_UIUI_919CAFB8");
        lv_i = 5;
    }
    else if (auto5FB2B220_val == libCore_ge_FloatingTextType_Healing) {
        lv_numberTypeAsText = StringExternal("Param/Value/lib_UIUI_45F48E34");
    }
    else if (auto5FB2B220_val == libCore_ge_FloatingTextType_Mana) {
        lv_numberTypeAsText = StringExternal("Param/Value/lib_UIUI_ABD96327");
    }
    else if (auto5FB2B220_val == libCore_ge_FloatingTextType_NegativeStatus) {
        lv_numberTypeAsText = StringExternal("Param/Value/lib_UIUI_4F79D749");
    }
    else if (auto5FB2B220_val == libCore_ge_FloatingTextType_PositiveStatus) {
        lv_numberTypeAsText = StringExternal("Param/Value/lib_UIUI_826BFE9A");
    }
    else if (auto5FB2B220_val == libCore_ge_FloatingTextType_XP) {
        lv_numberTypeAsText = StringExternal("Param/Value/lib_UIUI_E00FEC5E");
    }
    else if (auto5FB2B220_val == libCore_ge_FloatingTextType_GlobalXP) {
        lv_numberTypeAsText = StringExternal("Param/Value/lib_UIUI_52CF5A40");
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/lib_UIUI_F341C5EE", "A", lv_numberTypeAsText);
    TextExpressionSetToken("Param/Expression/lib_UIUI_F341C5EE", "B", IntToText(lv_i));
    lv_stormFontStyle = TextExpressionAssemble("Param/Expression/lib_UIUI_F341C5EE");
    auto62A1BFB2_val = lp_numberType;
    if (auto62A1BFB2_val == libCore_ge_FloatingTextType_NormalDamage) {
        if ((lp_displayPlayer == 0)) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_D4763978", "A", lv_stormFontStyle);
            TextExpressionSetToken("Param/Expression/lib_UIUI_D4763978", "B", lp_text);
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_D4763978"), 15, UnitGetPosition(lp_targetUnit), lp_heightOffset, true, false, PlayerGroupAll());
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_UIUI_50152C9C", "A", lv_stormFontStyle);
            TextExpressionSetToken("Param/Expression/lib_UIUI_50152C9C", "B", lp_text);
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_50152C9C"), 15, UnitGetPosition(lp_targetUnit), lp_heightOffset, true, false, libCore_gv_playerGroupFromPlayer[lp_displayPlayer]);
        }
        TextTagSetVelocity(TextTagLastCreated(), 0.75, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, libUIUI_gv_floatingCombatTextFadeDuration);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, lp_duration);
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    }
    else if (auto62A1BFB2_val == libCore_ge_FloatingTextType_BonusDamage) {
        if ((lp_displayPlayer == 0)) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_009A5391", "A", lv_stormFontStyle);
            TextExpressionSetToken("Param/Expression/lib_UIUI_009A5391", "B", lp_text);
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_009A5391"), 7, UnitGetPosition(lp_targetUnit), lp_heightOffset, true, false, PlayerGroupAll());
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_UIUI_4DE4BC11", "A", lv_stormFontStyle);
            TextExpressionSetToken("Param/Expression/lib_UIUI_4DE4BC11", "B", lp_text);
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_4DE4BC11"), 7, PointWithOffset(UnitGetPosition(lp_targetUnit), 0.35, 0.0), lp_heightOffset, true, false, libCore_gv_playerGroupFromPlayer[lp_displayPlayer]);
        }
        TextTagSetVelocity(TextTagLastCreated(), 0.75, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, libUIUI_gv_floatingCombatTextFadeDuration);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, lp_duration);
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    }
    else if (auto62A1BFB2_val == libCore_ge_FloatingTextType_MediumDamage) {
        if ((lp_displayPlayer == 0)) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_27B63BA3", "A", lv_stormFontStyle);
            TextExpressionSetToken("Param/Expression/lib_UIUI_27B63BA3", "B", lp_text);
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_27B63BA3"), 15, UnitGetPosition(lp_targetUnit), lp_heightOffset, true, false, PlayerGroupAll());
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_UIUI_9330F763", "A", lv_stormFontStyle);
            TextExpressionSetToken("Param/Expression/lib_UIUI_9330F763", "B", lp_text);
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_9330F763"), 15, UnitGetPosition(lp_targetUnit), lp_heightOffset, true, false, libCore_gv_playerGroupFromPlayer[lp_displayPlayer]);
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
        }
        TextTagSetVelocity(TextTagLastCreated(), 1.5, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, libUIUI_gv_floatingCombatTextFadeDuration);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, lp_duration);
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    }
    else if (auto62A1BFB2_val == libCore_ge_FloatingTextType_HighDamage) {
        if ((lp_displayPlayer == 0)) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_C02F8E31", "A", lv_stormFontStyle);
            TextExpressionSetToken("Param/Expression/lib_UIUI_C02F8E31", "B", lp_text);
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_C02F8E31"), 15, UnitGetPosition(lp_targetUnit), lp_heightOffset, true, false, PlayerGroupAll());
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 50.20, 25.10));
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_UIUI_21D52E41", "A", lv_stormFontStyle);
            TextExpressionSetToken("Param/Expression/lib_UIUI_21D52E41", "B", lp_text);
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_21D52E41"), 15, UnitGetPosition(lp_targetUnit), lp_heightOffset, true, false, libCore_gv_playerGroupFromPlayer[lp_displayPlayer]);
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 50.20, 25.10));
        }
        TextTagSetVelocity(TextTagLastCreated(), 2.5, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, libUIUI_gv_floatingCombatTextFadeDuration);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, lp_duration);
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    }
    else if (auto62A1BFB2_val == libCore_ge_FloatingTextType_InsaneDamage) {
        if ((lp_displayPlayer == 0)) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_334EF1A6", "A", lv_stormFontStyle);
            TextExpressionSetToken("Param/Expression/lib_UIUI_334EF1A6", "B", lp_text);
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_334EF1A6"), 15, UnitGetPosition(lp_targetUnit), lp_heightOffset, true, false, PlayerGroupAll());
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_UIUI_08DCB230", "A", lv_stormFontStyle);
            TextExpressionSetToken("Param/Expression/lib_UIUI_08DCB230", "B", lp_text);
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_08DCB230"), 15, UnitGetPosition(lp_targetUnit), lp_heightOffset, true, false, libCore_gv_playerGroupFromPlayer[lp_displayPlayer]);
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
        }
        TextTagSetVelocity(TextTagLastCreated(), 3.0, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, libUIUI_gv_floatingCombatTextFadeDuration);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, lp_duration);
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    }
    else {
        if ((lp_displayPlayer == 0)) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_E462D8D4", "A", lv_stormFontStyle);
            TextExpressionSetToken("Param/Expression/lib_UIUI_E462D8D4", "B", lp_text);
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_E462D8D4"), 15, UnitGetPosition(lp_targetUnit), lp_heightOffset, true, false, PlayerGroupAll());
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_UIUI_9E7C59E4", "A", lv_stormFontStyle);
            TextExpressionSetToken("Param/Expression/lib_UIUI_9E7C59E4", "B", lp_text);
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_9E7C59E4"), 15, UnitGetPosition(lp_targetUnit), lp_heightOffset, true, false, libCore_gv_playerGroupFromPlayer[lp_displayPlayer]);
        }
        TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, libUIUI_gv_floatingCombatTextFadeDuration);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, lp_duration);
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    }
}

void libUIUI_gf_UIFloatingCombatTextCreateTextTag2 (int lp_displayPlayer, fixed lp_duration, text lp_text, unit lp_targetUnit, fixed lp_heightOffset, fixed lp_horizontalOffset, string lp_numberType) {
    // Variable Declarations
    text lv_stormFontStyle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCore_gv_dEBUGCombatTextEnabled == false)) {
        return ;
    }
    TextExpressionSetToken("Param/Expression/lib_UIUI_055DC516", "A", StringToText((lp_numberType)));
    lv_stormFontStyle = TextExpressionAssemble("Param/Expression/lib_UIUI_055DC516");
    if ((lp_displayPlayer == 0)) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_3A966542", "A", lv_stormFontStyle);
        TextExpressionSetToken("Param/Expression/lib_UIUI_3A966542", "B", lp_text);
        TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_3A966542"), 15, UnitGetPosition(lp_targetUnit), lp_heightOffset, true, false, PlayerGroupAll());
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_UIUI_3CFDD064", "A", lv_stormFontStyle);
        TextExpressionSetToken("Param/Expression/lib_UIUI_3CFDD064", "B", lp_text);
        TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_3CFDD064"), 15, UnitGetPosition(lp_targetUnit), lp_heightOffset, true, false, libCore_gv_playerGroupFromPlayer[lp_displayPlayer]);
    }
    TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, libUIUI_gv_floatingCombatTextFadeDuration);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, lp_duration);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
}

void libUIUI_gf_UIFloatingCombatTextXP (int lp_displayPlayer, unit lp_target, text lp_amount) {
    // Variable Declarations
    int lv_i;
    fixed lv_duration;
    fixed lv_vertOffset;
    fixed lv_horizOffset;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCore_gv_dEBUGCombatTextEnabled == true)) {
        lv_duration = 1.25;
        lv_vertOffset = 1.5;
        lv_horizOffset = RandomFixed(0.4, 0.6);
        if (((PointGetX(UnitGetPosition(libGame_gv_players[lp_displayPlayer].lv_heroUnit)) - PointGetX(UnitGetPosition(lp_target))) > 0)) {
            lv_horizOffset *= -1.0;
        }

        libUIUI_gf_UIFloatingCombatTextCreateTextTag(lp_displayPlayer, lv_duration, lp_amount, lp_target, lv_vertOffset, lv_horizOffset, libCore_ge_FloatingTextType_XP);
    }

}

void libUIUI_gf_UIFloatingCombatTextGlobalXP (int lp_displayPlayer, text lp_amount) {
    // Variable Declarations
    int lv_i;
    fixed lv_duration;
    fixed lv_vertOffset;
    fixed lv_horizOffset;
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_duration = 3.5;
    lv_vertOffset = 1.5;
    lv_horizOffset = 0.0;
    if ((libGame_gv_players[lp_displayPlayer].lv_activeVehicle == null)) {
        lv_target = libGame_gv_players[lp_displayPlayer].lv_heroUnit;
    }
    else {
        lv_target = libGame_gv_players[lp_displayPlayer].lv_activeVehicle;
    }
    libUIUI_gf_UIFloatingCombatTextCreateTextTag(lp_displayPlayer, lv_duration, lp_amount, lv_target, lv_vertOffset, lv_horizOffset, libCore_ge_FloatingTextType_GlobalXP);
}

void libUIUI_gf_FullscreenOverlaysShowHideDeathOverlay (bool lp_showHide, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitHasBehavior2(libGame_gv_players[lp_player].lv_heroUnit, "HeroHasCustomDeathDisableDeathCutscene") == true)) {
        return ;
    }
    else {
        if ((lp_showHide == true)) {
            DialogControlSetVisible(libUIUI_gv_fullscreenOverlaysPanel.lv_deathOverlay, libCore_gv_playerGroupFromPlayer[lp_player], false);
            DialogControlSetVisible(libUIUI_gv_fullscreenOverlaysPanel.lv_deathOverlay, libCore_gv_playerGroupFromPlayer[lp_player], true);
            TimerPause(libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[lp_player], true);
        }
        else {
            DialogControlSendAnimationEvent(libUIUI_gv_fullscreenOverlaysPanel.lv_deathOverlay, libCore_gv_playerGroupFromPlayer[lp_player], "Stop");
            TimerStart(libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[lp_player], libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimerDuration_C, false, c_timeGame);
        }
    }
}

void libUIUI_gf_FullscreenOverlaysStopSpecialOverlay (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_player < 1) || (lp_player > libCore_gv_bALMaxPlayers))) {
        return ;
    }

    DialogControlSendAnimationEvent(libUIUI_gv_fullscreenOverlaysPanel.lv_specialOverlay, libCore_gv_playerGroupFromPlayer[lp_player], "Stop");
    TimerStart(libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[lp_player], libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimerDuration_C, false, c_timeGame);
}

void libUIUI_gf_FullscreenOverlaysShowSpecialOverlay (string lp_cutscene, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_player < 1) || (lp_player > libCore_gv_bALMaxPlayers))) {
        return ;
    }

    libNtve_gf_SetDialogItemCutscene(libUIUI_gv_fullscreenOverlaysPanel.lv_specialOverlay, lp_cutscene, libCore_gv_playerGroupFromPlayer[lp_player]);
    DialogControlSetVisible(libUIUI_gv_fullscreenOverlaysPanel.lv_specialOverlay, libCore_gv_playerGroupFromPlayer[lp_player], true);
    TimerPause(libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[lp_player], true);
}

void libUIUI_gf_FullscreenOverlaysCreateCCEffectFlashForPlayer (int lp_player, fixed lp_cCDuration) {
    // Variable Declarations
    fixed lv_fadeTime;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fadeTime = 0.25;

    // Implementation
    libNtve_gf_SetDialogItemColor(libUIUI_gv_fullscreenOverlaysPanel.lv_cCSplashImage, Color(0.00, 0.00, 100.00), libCore_gv_playerGroupFromPlayer[lp_player]);
    DialogControlFadeTransparency(libUIUI_gv_fullscreenOverlaysPanel.lv_cCSplashImage, libCore_gv_playerGroupFromPlayer[lp_player], 0.0, 0.0);
    if ((lp_cCDuration > lv_fadeTime) && (lp_cCDuration < 32765.0)) {
        Wait((lp_cCDuration - lv_fadeTime), c_timeGame);
        DialogControlFadeTransparency(libUIUI_gv_fullscreenOverlaysPanel.lv_cCSplashImage, libCore_gv_playerGroupFromPlayer[lp_player], lv_fadeTime, 100.0);
    }
    else {
        while (((UnitBehaviorCount(libGame_gv_players[lp_player].lv_heroUnit, "Hooked") > 0) || (UnitBehaviorCount(libGame_gv_players[lp_player].lv_heroUnit, "VoidPrisonDisplay") > 0))) {
            Wait(0.0625, c_timeGame);
        }
        DialogControlFadeTransparency(libUIUI_gv_fullscreenOverlaysPanel.lv_cCSplashImage, libCore_gv_playerGroupFromPlayer[lp_player], (lv_fadeTime / 2.0), 100.0);
    }
}

void libUIUI_gf_FullscreenOverlayAddItemForPlayer (int lp_player, int lp_priority, string lp_cutscene, string lp_behavior) {
    // Variable Declarations
    int lv_itQueuePosition;
    int lv_priorityInt;
    int lv_desiredPosition;

    // Automatic Variable Declarations
    playergroup autoE06D250F_g;
    int autoE06D250F_var;
    int auto20E11348_ae;
    const int auto20E11348_ai = 1;
    int autoCF65A1FC_ae;
    const int autoCF65A1FC_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_player > libCore_gv_bALMaxPlayers)) {
        return ;
    }

    if ((UnitHasBehavior2(libGame_gv_players[lp_player].lv_heroUnit, "HeroSharesCutsceneOverlaysSource") == true)) {
        autoE06D250F_g = PlayerGroupAlliance(c_playerGroupAlly, lp_player);
        autoE06D250F_var = -1;
        while (true) {
            autoE06D250F_var = PlayerGroupNextPlayer(autoE06D250F_g, autoE06D250F_var);
            if (autoE06D250F_var < 0) { break; }
            if ((UnitHasBehavior2(libGame_gv_players[autoE06D250F_var].lv_heroUnit, "HeroSharesCutsceneOverlaysDestination") == true)) {
                libUIUI_gf_FullscreenOverlayAddItemForPlayer(autoE06D250F_var, lp_priority, lp_cutscene, lp_behavior);
            }

        }
    }

    if ((libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue >= libUIUI_gv_fullscreenOverlayMaxQueueSize_C)) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_285F47E8", "A", IntToText(lp_player));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_UIUI_285F47E8"), true);
        return ;
    }

    auto20E11348_ae = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue;
    lv_itQueuePosition = 1;
    for ( ; ( (auto20E11348_ai >= 0 && lv_itQueuePosition <= auto20E11348_ae) || (auto20E11348_ai < 0 && lv_itQueuePosition >= auto20E11348_ae) ) ; lv_itQueuePosition += auto20E11348_ai ) {
        if ((lp_behavior == libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_behavior[lv_itQueuePosition])) {
            return ;
        }

    }
    lv_priorityInt = (lp_priority);
    lv_desiredPosition = 0;
    if ((libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue == 0)) {
        lv_desiredPosition = 1;
    }
    else {
        autoCF65A1FC_ae = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue;
        lv_itQueuePosition = 1;
        for ( ; ( (autoCF65A1FC_ai >= 0 && lv_itQueuePosition <= autoCF65A1FC_ae) || (autoCF65A1FC_ai < 0 && lv_itQueuePosition >= autoCF65A1FC_ae) ) ; lv_itQueuePosition += autoCF65A1FC_ai ) {
            if ((libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_priority[lv_itQueuePosition] > lv_priorityInt)) {
                lv_desiredPosition = lv_itQueuePosition;
                break;
            }

        }
        if ((lv_desiredPosition == 0)) {
            lv_desiredPosition = (libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue + 1);
        }

    }
    libUIUI_gf_FullscreenOverlayInsertItemIntoQueueForPlayer(lp_player, lp_priority, lv_desiredPosition, lp_cutscene, lp_behavior);
    if ((lp_behavior == libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_behavior[1])) {
        libUIUI_gf_FullscreenOverlayPlayCutscene(lp_player, lp_cutscene);
    }

}

void libUIUI_gf_FullscreenOverlayInsertItemIntoQueueForPlayer (int lp_player, int lp_priority, int lp_desiredInsertPosition, string lp_cutscene, string lp_behavior) {
    // Variable Declarations
    int lv_itQueuePosition;
    int lv_insertPosition;

    // Automatic Variable Declarations
    int auto5A3380DE_ae;
    const int auto5A3380DE_ai = -1;

    // Variable Initialization

    // Implementation
    if ((lp_desiredInsertPosition > libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue)) {
        libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue += 1;
        lv_insertPosition = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue;
    }
    else {
        auto5A3380DE_ae = lp_desiredInsertPosition;
        lv_itQueuePosition = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue;
        for ( ; ( (auto5A3380DE_ai >= 0 && lv_itQueuePosition <= auto5A3380DE_ae) || (auto5A3380DE_ai < 0 && lv_itQueuePosition >= auto5A3380DE_ae) ) ; lv_itQueuePosition += auto5A3380DE_ai ) {
            libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_priority[(lv_itQueuePosition + 1)] = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_priority[lv_itQueuePosition];
            libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_cutscene[(lv_itQueuePosition + 1)] = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_cutscene[lv_itQueuePosition];
            libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_behavior[(lv_itQueuePosition + 1)] = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_behavior[lv_itQueuePosition];
        }
        libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue += 1;
        lv_insertPosition = lp_desiredInsertPosition;
    }
    libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_priority[lv_insertPosition] = (lp_priority);
    libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_cutscene[lv_insertPosition] = lp_cutscene;
    libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_behavior[lv_insertPosition] = lp_behavior;
}

void libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer (int lp_player, string lp_cutscene, string lp_behavior) {
    // Variable Declarations
    int lv_numberOfItemsInQueue;
    int lv_positionInQueue;
    int lv_itQueuePosition;

    // Automatic Variable Declarations
    playergroup autoA9B7F6D7_g;
    int autoA9B7F6D7_var;
    int autoFDECC8C7_ae;
    const int autoFDECC8C7_ai = 1;
    int autoB306ACFD_ae;
    const int autoB306ACFD_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_player > libCore_gv_bALMaxPlayers)) {
        return ;
    }

    if ((UnitHasBehavior2(libGame_gv_players[lp_player].lv_heroUnit, "HeroSharesCutsceneOverlaysSource") == true)) {
        autoA9B7F6D7_g = PlayerGroupAlliance(c_playerGroupAlly, lp_player);
        autoA9B7F6D7_var = -1;
        while (true) {
            autoA9B7F6D7_var = PlayerGroupNextPlayer(autoA9B7F6D7_g, autoA9B7F6D7_var);
            if (autoA9B7F6D7_var < 0) { break; }
            if ((UnitHasBehavior2(libGame_gv_players[autoA9B7F6D7_var].lv_heroUnit, "HeroSharesCutsceneOverlaysDestination") == true)) {
                libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer(autoA9B7F6D7_var, lp_cutscene, lp_behavior);
            }

        }
    }

    lv_numberOfItemsInQueue = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue;
    autoFDECC8C7_ae = lv_numberOfItemsInQueue;
    lv_itQueuePosition = 1;
    for ( ; ( (autoFDECC8C7_ai >= 0 && lv_itQueuePosition <= autoFDECC8C7_ae) || (autoFDECC8C7_ai < 0 && lv_itQueuePosition >= autoFDECC8C7_ae) ) ; lv_itQueuePosition += autoFDECC8C7_ai ) {
        if ((libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_behavior[lv_itQueuePosition] == lp_behavior)) {
            lv_positionInQueue = lv_itQueuePosition;
            break;
        }

    }
    if ((lv_positionInQueue == 0)) {
        return ;
    }

    if ((lv_numberOfItemsInQueue == 1)) {
        DialogControlSendAnimationEvent(libUIUI_gv_fullscreenOverlaysPanelRework.lv_overlayCutscene, libCore_gv_playerGroupFromPlayer[lp_player], "Stop");
        libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue -= 1;
        return ;
    }

    autoB306ACFD_ae = lv_numberOfItemsInQueue;
    lv_itQueuePosition = (lv_positionInQueue+1);
    for ( ; ( (autoB306ACFD_ai >= 0 && lv_itQueuePosition <= autoB306ACFD_ae) || (autoB306ACFD_ai < 0 && lv_itQueuePosition >= autoB306ACFD_ae) ) ; lv_itQueuePosition += autoB306ACFD_ai ) {
        libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_priority[(lv_itQueuePosition - 1)] = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_priority[lv_itQueuePosition];
        libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_cutscene[(lv_itQueuePosition - 1)] = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_cutscene[lv_itQueuePosition];
        libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_behavior[(lv_itQueuePosition - 1)] = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_behavior[lv_itQueuePosition];
    }
    libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue -= 1;
    if ((lv_positionInQueue == 1)) {
        libUIUI_gf_FullscreenOverlayPlayCutscene(lp_player, libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_cutscene[1]);
        return ;
    }

}

void libUIUI_gf_FullscreenOverlayStopandClearCutsceneQueueForPlayer (int lp_player) {
    // Variable Declarations
    int lv_numberOfItemsInQueue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue > 0)) {
        DialogControlSendAnimationEvent(libUIUI_gv_fullscreenOverlaysPanelRework.lv_overlayCutscene, libCore_gv_playerGroupFromPlayer[lp_player], "Stop");
        libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue = 0;
    }

}

void libUIUI_gf_FullscreenOverlayPlayCutscene (int lp_player, string lp_cutscene) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemCutscene(libUIUI_gv_fullscreenOverlaysPanelRework.lv_overlayCutscene, lp_cutscene, libCore_gv_playerGroupFromPlayer[lp_player]);
    DialogControlSendAnimationEvent(libUIUI_gv_fullscreenOverlaysPanelRework.lv_overlayCutscene, libCore_gv_playerGroupFromPlayer[lp_player], "Start");
}

void libUIUI_gf_GameOverSplashDisplayForAllPlayers (int lp_winningTeam) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gf_GameOverSplashShowHideForAllPlayers(true, lp_winningTeam);
}

void libUIUI_gf_GameOverSplashShowHideForAllPlayers (bool lp_showHide, int lp_winningTeam) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int auto4360BE41_ae = libCore_gv_bALMaxPlayers;
    const int auto4360BE41_ai = 1;
    int autoC2ED41CE_val;
    int auto4AD4343C_val;

    // Variable Initialization

    // Implementation
    lv_itPlayer = 1;
    for ( ; ( (auto4360BE41_ai >= 0 && lv_itPlayer <= auto4360BE41_ae) || (auto4360BE41_ai < 0 && lv_itPlayer >= auto4360BE41_ae) ) ; lv_itPlayer += auto4360BE41_ai ) {
        autoC2ED41CE_val = libGame_gv_players[lv_itPlayer].lv_victoryDefeat;
        if (autoC2ED41CE_val == c_gameOverVictory) {
            DialogControlSetVisible(libUIUI_gv_gameOverSplash.lv_victoryFrame, libCore_gv_playerGroupFromPlayer[lv_itPlayer], lp_showHide);
        }
        else if (autoC2ED41CE_val == c_gameOverDefeat) {
            DialogControlSetVisible(libUIUI_gv_gameOverSplash.lv_defeatFrame, libCore_gv_playerGroupFromPlayer[lv_itPlayer], lp_showHide);
        }
        else {
        }
        DialogControlSetVisible(libUIUI_gv_gameOverSplash.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lv_itPlayer], lp_showHide);
        if ((lp_showHide == true)) {
            UnitStatusBarOverride(libGame_gv_players[lv_itPlayer].lv_heroUnit, -1);
        }
        else {
            UnitStatusBarOverride(libGame_gv_players[lv_itPlayer].lv_heroUnit, c_unitStatusGroupAll);
        }
    }
    auto4AD4343C_val = lp_winningTeam;
    if (auto4AD4343C_val == libGame_gv_teamOrderIndex_C) {
        DialogControlSetVisible(libUIUI_gv_gameOverSplash.lv_victoryFrame, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
    }
    else if (auto4AD4343C_val == libGame_gv_teamChaosIndex_C) {
        DialogControlSetVisible(libUIUI_gv_gameOverSplash.lv_defeatFrame, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
    }
    else if (auto4AD4343C_val == 0) {
        if ((lp_showHide == true)) {
            libNtve_gf_SetDialogItemText(libUIUI_gv_gameOverSplash.lv_defeatLabel, StringExternal("Param/Value/lib_UIUI_8708F157"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        }

        DialogControlSetVisible(libUIUI_gv_gameOverSplash.lv_defeatFrame, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
    }
    else {
    }
    DialogControlSetVisible(libUIUI_gv_gameOverSplash.lv_mainPanel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
}

void libUIUI_gf_UIGameUIToggleMinimapCommandsForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gf_UIGameUIChangeModeMinimapCommandsForPlayer(lp_player);
}

void libUIUI_gf_UIGameUIChangeModeMinimapCommandsForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (true) {
    }

}

void libUIUI_gf_UIHealingFountainsHelpTextCreateTextTagsForTeam (int lp_team) {
    // Variable Declarations
    unitgroup lv_healingFountainsGroup;
    int lv_itTextTag;
    unit lv_itU;
    text lv_helpLabel;

    // Automatic Variable Declarations
    unitgroup auto9D4B9789_g;
    int auto9D4B9789_u;

    // Variable Initialization
    lv_healingFountainsGroup = UnitGroupEmpty();

    // Implementation
    UnitGroupAddUnitGroup(lv_healingFountainsGroup, UnitGroup("Building_Moonwell", libGame_gv_teams[lp_team].lv_nPCPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    lv_helpLabel = StringExternal("Param/Value/lib_UIUI_CC40B72C");
    auto9D4B9789_g = lv_healingFountainsGroup;
    auto9D4B9789_u = UnitGroupCount(auto9D4B9789_g, c_unitCountAll);
    for (;; auto9D4B9789_u -= 1) {
        lv_itU = UnitGroupUnitFromEnd(auto9D4B9789_g, auto9D4B9789_u);
        if (lv_itU == null) { break; }
        lv_itTextTag += 1;
        TextTagCreate(lv_helpLabel, 24, UnitGetPosition(lv_itU), libUIUI_gv_uI_HealingFountainsHelpText_HeightOffset_C, false, false, libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
        libUIUI_gv_uIHealingFountainsHelpText[lp_team][lv_itTextTag].lv_textTag = TextTagLastCreated();
        libUIUI_gv_uIHealingFountainsHelpText[lp_team][lv_itTextTag].lv_healingFountain = lv_itU;
    }
}

void libUIUI_gf_UIHealingFountainsHelpTextShowHideForPlayer (int lp_player, bool lp_showHide) {
    // Variable Declarations
    int lv_itTextTag;
    int lv_arrayToUse;

    // Automatic Variable Declarations
    const int autoC8570ACF_ae = libUIUI_gv_uI_HealingFountainsHelpText_ArraySize_C;
    const int autoC8570ACF_ai = 1;

    // Variable Initialization
    lv_arrayToUse = libGame_gf_PlayerGetPlayerTeam(lp_player);

    // Implementation
    if ((lp_showHide == true)) {
        libUIUI_gv_uIHealingFountainsHelpTextTextShowing[lp_player] = true;
    }
    else {
        libUIUI_gv_uIHealingFountainsHelpTextTextShowing[lp_player] = false;
    }
    lv_itTextTag = 1;
    for ( ; ( (autoC8570ACF_ai >= 0 && lv_itTextTag <= autoC8570ACF_ae) || (autoC8570ACF_ai < 0 && lv_itTextTag >= autoC8570ACF_ae) ) ; lv_itTextTag += autoC8570ACF_ai ) {
        if ((libUIUI_gv_uIHealingFountainsHelpText[lv_arrayToUse][lv_itTextTag].lv_textTag == c_textTagNone)) {
            break;
        }
        else {
            if (((lp_showHide == false) || (UnitIsAlive(libUIUI_gv_uIHealingFountainsHelpText[lv_arrayToUse][lv_itTextTag].lv_healingFountain) == true))) {
                TextTagShow(libUIUI_gv_uIHealingFountainsHelpText[lv_arrayToUse][lv_itTextTag].lv_textTag, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
            }

        }
    }
}

void libUIUI_gf_UIHeroConsoleShowHideForPlayer (bool lp_showHide, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroConsolePanel, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
    DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_buffDebuffPanel, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
    DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_gameUIPortrait, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
    UISetFrameVisible(libCore_gv_playerGroupFromPlayer[lp_player], c_syncFrameTypeCommandPanel, lp_showHide);
    UISetFrameVisible(libCore_gv_playerGroupFromPlayer[lp_player], c_syncFrameTypeInventoryPanel, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_uIMyPropertyPanel.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
    DialogControlSetVisible(libUIUI_gv_uIMyTalentsPanel.lv_tierSelectionPanel, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
}

void libUIUI_gf_UIHeroConsoleShowHideUnitStatusFrameForPlayer (bool lp_showHide, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame[0], libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
}

void libUIUI_gf_UIHeroConsoleShowHideUnitStatusFrameForPlayer2 (bool lp_showHide, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_buffDebuffPanel, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
}

void libUIUI_gf_UIHeroConsoleSetUpForPlayer (int lp_player, unit lp_unit) {
    // Variable Declarations
    int lv_heroIndex;

    // Automatic Variable Declarations
    int autoD1B7D4B5_ae;
    string autoC0C3FEB0_val;

    // Variable Initialization

    // Implementation
    autoD1B7D4B5_ae = libUIUI_gv_uIHeroConsoleUnitStatusMaximum;
    lv_heroIndex = 1;
    for ( ; lv_heroIndex <= autoD1B7D4B5_ae ; lv_heroIndex += 1 ) {
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame[lv_heroIndex], lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    autoC0C3FEB0_val = UnitGetType(lp_unit);
    if (autoC0C3FEB0_val == "HeroKatarina") {
        libUIUI_gf_UIHeroConsoleSetUnitStatusForPlayer(libUIUI_ge_UIHeroConsoleUnitStatus_Orange, lp_player);
    }
    else {
        if ((UnitGetPropertyFixed(lp_unit, c_unitPropEnergyMax, c_unitPropNormal) > 0.0)) {
            libUIUI_gf_UIHeroConsoleSetUnitStatusForPlayer(libUIUI_ge_UIHeroConsoleUnitStatus_Default, lp_player);
        }
        else {
            libUIUI_gf_UIHeroConsoleSetUnitStatusForPlayer(libUIUI_ge_UIHeroConsoleUnitStatus_NoEnergy, lp_player);
        }
    }
}

void libUIUI_gf_UIHeroConsoleSetUnitStatusForPlayer (int lp_unitStatus, int lp_player) {
    // Variable Declarations
    int lv_itUnitStatusFrame;

    // Automatic Variable Declarations
    int auto7C8999BC_ae;

    // Variable Initialization

    // Implementation
    auto7C8999BC_ae = libUIUI_gv_uIHeroConsoleUnitStatusMaximum;
    lv_itUnitStatusFrame = 1;
    for ( ; lv_itUnitStatusFrame <= auto7C8999BC_ae ; lv_itUnitStatusFrame += 1 ) {
        if (((lp_unitStatus) == lv_itUnitStatusFrame)) {
            DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame[lv_itUnitStatusFrame], libCore_gv_playerGroupFromPlayer[lp_player], true);
        }
        else {
            DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame[lv_itUnitStatusFrame], libCore_gv_playerGroupFromPlayer[lp_player], false);
        }
    }
}

void libUIUI_gf_HeroConsoleUnitStatusBarsUpdateStunDeathBar (string lp_newBehavior, unit lp_heroUnit) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_player = UnitGetOwner(lp_heroUnit);
    if ((lv_player > libCore_gv_bALMaxPlayers)) {
        return ;
    }

    if ((lp_heroUnit != libUIUI_gv_heroConsoleUnitStatusBars_CurrentUnitForPlayer[lv_player])) {
        return ;
    }

    if ((lp_newBehavior == "Dead")) {
        libUIUI_gv_heroConsoleUnitStatusBars_StunDeathBarCurrentBehaviorForPlayer[lv_player] = lp_newBehavior;
        libNtve_gf_SetDialogItemBehavior(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarLeftBar, lp_newBehavior, libCore_gv_playerGroupFromPlayer[lv_player]);
        libNtve_gf_SetDialogItemBehavior(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarRightBar, lp_newBehavior, libCore_gv_playerGroupFromPlayer[lv_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarDescriptionLabel, StringExternal("Param/Value/lib_UIUI_A9FAF5F2"), libCore_gv_playerGroupFromPlayer[lv_player]);
        libNtve_gf_SetDialogItemImage(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarIcon, "@UI/HUD_Bar_DeathStun_Icon_Stun", libCore_gv_playerGroupFromPlayer[lv_player]);
    }
    else {
        if ((UnitBehaviorDuration(lp_heroUnit, lp_newBehavior) >= UnitBehaviorDuration(lp_heroUnit, libUIUI_gv_heroConsoleUnitStatusBars_StunDeathBarCurrentBehaviorForPlayer[lv_player]))) {
            libUIUI_gv_heroConsoleUnitStatusBars_StunDeathBarCurrentBehaviorForPlayer[lv_player] = lp_newBehavior;
            libNtve_gf_SetDialogItemBehavior(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarLeftBar, lp_newBehavior, libCore_gv_playerGroupFromPlayer[lv_player]);
            libNtve_gf_SetDialogItemBehavior(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarRightBar, lp_newBehavior, libCore_gv_playerGroupFromPlayer[lv_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarDescriptionLabel, StringExternal("Param/Value/lib_UIUI_DBC1DCF2"), libCore_gv_playerGroupFromPlayer[lv_player]);
            libNtve_gf_SetDialogItemImage(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarIcon, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_newBehavior, "InfoIcon", c_playerAny)), libCore_gv_playerGroupFromPlayer[lv_player]);
        }

    }
    DialogControlSetVisible(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarParentFrame, libCore_gv_playerGroupFromPlayer[lv_player], true);
}

void libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars (unit lp_unit, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gv_heroConsoleUnitStatusBars_CurrentUnitForPlayer[lp_player] = lp_unit;
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarParentFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_heroConsoleUnitStatusBars.lv_castChannelBarParentFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
}

void libUIUI_gf_HeroConsoleUnitStatusBarsUpdateForPlayer (int lp_player) {
    // Variable Declarations
    fixed lv_behaviorDurationRemaining;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_behaviorDurationRemaining = UnitBehaviorDuration(libUIUI_gv_heroConsoleUnitStatusBars_CurrentUnitForPlayer[lp_player], libUIUI_gv_heroConsoleUnitStatusBars_StunDeathBarCurrentBehaviorForPlayer[lp_player]);
    if ((lv_behaviorDurationRemaining > 0.0)) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarTimeLabel, FixedToText(lv_behaviorDurationRemaining, 1), libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else {
        DialogControlSetVisible(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarParentFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
    lv_behaviorDurationRemaining = UnitBehaviorDuration(libUIUI_gv_heroConsoleUnitStatusBars_CurrentUnitForPlayer[lp_player], libUIUI_gv_heroConsoleUnitStatusBars_BehaviorChannelBarCurrentBehaviorForPlayer[lp_player]);
    if ((lv_behaviorDurationRemaining <= 0.0)) {
        DialogControlSetVisible(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }

}

void libUIUI_gf_HSEnableDisableHeroButtonForPlayerGroup (bool lp_enableDisable, int lp_row, int lp_column, playergroup lp_playerGroup, bool lp_desaturated) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetEnabled(libUIUI_gv_heroSelection.lv_heroButtons[lp_row][lp_column], lp_playerGroup, lp_enableDisable);
    if ((lp_enableDisable == true)) {
        libNtve_gf_SetDialogItemDesaturated(libUIUI_gv_heroSelection.lv_heroButtonImage[lp_row][lp_column], false, lp_playerGroup);
    }
    else {
        if ((lp_desaturated == true)) {
            libNtve_gf_SetDialogItemDesaturated(libUIUI_gv_heroSelection.lv_heroButtonImage[lp_row][lp_column], true, lp_playerGroup);
            libNtve_gf_SetDialogItemDesaturationColor(libUIUI_gv_heroSelection.lv_heroButtonImage[lp_row][lp_column], Color(78.43, 78.43, 78.43), lp_playerGroup);
        }
        else {
            libNtve_gf_SetDialogItemDesaturated(libUIUI_gv_heroSelection.lv_heroButtonImage[lp_row][lp_column], false, lp_playerGroup);
        }
    }
}

void libUIUI_gf_HeroSelectionSelectHeroForPlayer (int lp_player, int lp_heroRow, int lp_heroCol) {
    // Variable Declarations
    string lv_selectedHero;
    int lv_itPlayer;
    int lv_index;

    // Automatic Variable Declarations
    playergroup auto350E073E_g;

    // Variable Initialization

    // Implementation
    if ((lp_heroCol == libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lp_player]) && (lp_heroRow == libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lp_player])) {
        return ;
    }

    lv_selectedHero = libUIUI_gv_heroSelectionCurateHeroSelections[lp_heroRow][lp_heroCol];
    if ((lv_selectedHero == null)) {
        return ;
    }

    lv_index = libCore_gf_CommandersGetHeroIndexOfHeroLink(lv_selectedHero);
    if ((libUIUI_gv_heroSelectionSetting.lv_lockedIn[lp_player] == true)) {
        return ;
    }

    auto350E073E_g = libGame_gv_teams[libGame_gf_PlayerGetPlayerTeam(lp_player)].lv_teamPlayerGroupNoNPCPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto350E073E_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itPlayer] == lp_heroRow) && (libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itPlayer] == lp_heroCol) && (lv_itPlayer != lp_player)) {
            return ;
        }

    }
    SoundPlayForPlayer(SoundLink("UI_BNet_HeroChoose", c_soundIndexAny), c_maxPlayers, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
    libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lp_player] = lp_heroRow;
    libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lp_player] = lp_heroCol;
    libGame_gv_players[lp_player].lv_heroIndex = lv_index;
    libUIUI_gf_HSUIUpdateHeroButtons();
    libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_selectedHeroName, StringExternal(CatalogFieldValueGet(c_gameCatalogHero, lv_selectedHero, "Name", c_playerAny)), libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_selectedHeroRole, libCore_gf_RoleGetHeroRoleofHeroText(lv_selectedHero), libCore_gv_playerGroupFromPlayer[lp_player]);
    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_selectedHeroPanel, libCore_gv_playerGroupFromPlayer[lp_player], true);
    if ((lp_heroCol > 0) && (lp_heroRow > 0)) {
        DialogControlSetEnabled(libUIUI_gv_heroSelection.lv_abilitiesButton, libCore_gv_playerGroupFromPlayer[lp_player], true);
        DialogControlSetEnabled(libUIUI_gv_heroSelection.lv_talentsButton, libCore_gv_playerGroupFromPlayer[lp_player], true);
    }

    if ((libUIUI_gf_HSUIGoodToLockIn(lp_player) == true)) {
        DialogControlSetEnabled(libUIUI_gv_heroSelection.lv_lockButton, libCore_gv_playerGroupFromPlayer[lp_player], true);
    }
    else {
        DialogControlSetEnabled(libUIUI_gv_heroSelection.lv_lockButton, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
    libUIUI_gf_HSUIUpdateTalentsTierForPlayer(lp_player, 1);
    libUIUI_gf_HSUIUpdateAbilitiesPanelforPlayer(lp_player);
}

int libUIUI_gf_HeroSelectionSelectRandomHeroForPlayer (int lp_player) {
    // Variable Declarations
    int lv_team;
    int lv_itColumn;
    int lv_itRow;
    int[libCore_gv_dataHeroesMaxHeroCount + 1] lv_allowedHeroesArray;
    int lv_itDummyPlayerIndex;
    int[5] lv_lockedHeroes;
    int lv_itHeroIndex;
    int lv_itHeroDummyIndex;
    int lv_playerHeroIndex;

    // Automatic Variable Declarations
    playergroup autoD9B1B884_g;
    int autoD9B1B884_var;
    int autoF5553D29_ae;
    int auto3F9A9BE7_ae;
    int auto890507B8_ae;

    // Variable Initialization

    // Implementation
    lv_team = libGame_gf_PlayerGetPlayerTeam(lp_player);
    autoD9B1B884_g = libCore_gf_PlayerGroupExceptOfPlayer(libGame_gv_teams[lv_team].lv_teamPlayerGroupNoNPCPlayers, lp_player);
    autoD9B1B884_var = -1;
    while (true) {
        autoD9B1B884_var = PlayerGroupNextPlayer(autoD9B1B884_g, autoD9B1B884_var);
        if (autoD9B1B884_var < 0) { break; }
        if ((libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[autoD9B1B884_var] > 0) && (libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[autoD9B1B884_var] > 0)) {
            lv_itDummyPlayerIndex += 1;
            lv_lockedHeroes[lv_itDummyPlayerIndex] = libCore_gf_CommandersGetHeroIndexOfHeroLink(libUIUI_gv_heroSelectionCurateHeroSelections[libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[autoD9B1B884_var]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[autoD9B1B884_var]]);
        }
    }
    autoF5553D29_ae = libCore_gv_dataHeroesNumberOfHeroes;
    lv_itHeroIndex = 1;
    for ( ; lv_itHeroIndex <= autoF5553D29_ae ; lv_itHeroIndex += 1 ) {
        if ((lv_itHeroIndex > 0) && (lv_itHeroIndex != lv_lockedHeroes[1]) && (lv_itHeroIndex != lv_lockedHeroes[2]) && (lv_itHeroIndex != lv_lockedHeroes[3]) && (lv_itHeroIndex != lv_lockedHeroes[4])) {
            lv_itHeroDummyIndex += 1;
            lv_allowedHeroesArray[lv_itHeroDummyIndex] = lv_itHeroIndex;
        }
    }
    lv_playerHeroIndex = lv_allowedHeroesArray[RandomInt(1, lv_itHeroDummyIndex)];
    auto3F9A9BE7_ae = libUIUI_gv_heroSelectionNumberofRows;
    lv_itRow = 1;
    for ( ; lv_itRow <= auto3F9A9BE7_ae ; lv_itRow += 1 ) {
        auto890507B8_ae = libUIUI_gv_heroSelectionNumberofCols;
        lv_itColumn = 1;
        for ( ; lv_itColumn <= auto890507B8_ae ; lv_itColumn += 1 ) {
            if ((libUIUI_gv_heroSelectionCurateHeroSelections[lv_itRow][lv_itColumn] == libCore_gv_heroData[lv_playerHeroIndex].lv_heroCatalogLink)) {
                libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lp_player] = lv_itRow;
                libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lp_player] = lv_itColumn;
                libUIUI_gf_HSUIUpdateHeroButtons();
                DialogControlSetEnabled(libUIUI_gv_heroSelection.lv_lockButton, libCore_gv_playerGroupFromPlayer[lp_player], false);
                libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_selectedHeroName, StringExternal(CatalogFieldValueGet(c_gameCatalogHero, libCore_gv_heroData[lv_playerHeroIndex].lv_heroCatalogLink, "Name", c_playerAny)), libCore_gv_playerGroupFromPlayer[lp_player]);
                libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_selectedHeroRole, libCore_gf_RoleGetHeroRoleofHeroText(libCore_gv_heroData[lv_playerHeroIndex].lv_heroCatalogLink), libCore_gv_playerGroupFromPlayer[lp_player]);
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_selectedHeroPanel, libCore_gv_playerGroupFromPlayer[lp_player], true);
                libUIUI_gv_heroSelectionSetting.lv_lockedHeroRow[lp_player] = lv_itRow;
                libUIUI_gv_heroSelectionSetting.lv_lockedHeroCol[lp_player] = lv_itColumn;
                libUIUI_gv_heroSelectionSetting.lv_lockedIn[lp_player] = true;
                break;
            }

        }
    }
    return lv_playerHeroIndex;
}

bool libUIUI_gf_HeroSelectionHeroSelectedByTeam (int lp_heroIndex, int lp_team) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itRow;
    int lv_itCol;

    // Automatic Variable Declarations
    playergroup auto617A54BA_g;

    // Variable Initialization

    // Implementation
    auto617A54BA_g = libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto617A54BA_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        lv_itRow = libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itPlayer];
        lv_itCol = libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itPlayer];
        if ((libCore_gf_CommandersGetHeroIndexOfHeroLink(libUIUI_gv_heroSelectionCurateHeroSelections[lv_itRow][lv_itCol]) == lp_heroIndex)) {
            return true;
        }
    }
    return false;
}

bool libUIUI_gf_HSUIGoodToLockIn (int lp_player) {
    // Automatic Variable Declarations
    playergroup autoDC2C247D_g;
    int autoDC2C247D_var;

    // Implementation
    if ((libUIUI_gv_heroSelectionSetting.lv_lockedIn[lp_player] == true)) {
        return false;
    }

    if (((libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lp_player] <= 0) || (libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lp_player] <= 0))) {
        return false;
    }

    autoDC2C247D_g = libGame_gv_teams[libGame_gf_PlayerGetPlayerTeam(lp_player)].lv_teamPlayerGroupNoNPCPlayers;
    autoDC2C247D_var = -1;
    while (true) {
        autoDC2C247D_var = PlayerGroupNextPlayer(autoDC2C247D_g, autoDC2C247D_var);
        if (autoDC2C247D_var < 0) { break; }
        if ((autoDC2C247D_var != lp_player) && (libUIUI_gv_heroSelectionSetting.lv_lockedIn[autoDC2C247D_var] == true) && (libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lp_player] == libUIUI_gv_heroSelectionSetting.lv_lockedHeroCol[autoDC2C247D_var]) && (libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lp_player] == libUIUI_gv_heroSelectionSetting.lv_lockedHeroRow[autoDC2C247D_var])) {
            return false;
        }

    }
    return true;
}

void libUIUI_gf_lockunlockherochoise (int lp_player, bool lp_lockUnlock) {
    // Automatic Variable Declarations
    // Implementation
    if ((libUIUI_gv_heroSelectionSetting.lv_finalCountDownStarted == true)) {
        return ;
    }

    if ((lp_lockUnlock == true) && (libUIUI_gf_HSUIGoodToLockIn(lp_player) == false)) {
        return ;
    }

    libUIUI_gv_heroSelectionSetting.lv_lockedIn[lp_player] = lp_lockUnlock;
    if ((lp_lockUnlock == true)) {
        libUIUI_gv_heroSelectionSetting.lv_lockedHeroRow[lp_player] = libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lp_player];
        libUIUI_gv_heroSelectionSetting.lv_lockedHeroCol[lp_player] = libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lp_player];
    }

    libUIUI_gf_HSUIUpdateHeroButtons();
    if ((lp_lockUnlock == true)) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_lockButton, StringExternal("UI/HeroSelection/LockButtonUnlock"), libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else {
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_lockButton, StringExternal("UI/HeroSelection/LockButtonLock"), libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    if ((TimerIsPaused(libUIUI_gv_heroSelectionSetting.lv_countdownTimer) == false) && (libUIUI_gf_HSUIAllPlayersLockedIn() == true)) {
        TriggerExecute(libUIUI_gt_HSUICountdownTimerExpires, true, false);
    }

}

bool libUIUI_gf_HSUIAllPlayersLockedIn () {
    // Automatic Variable Declarations
    const int autoED63157B_ae = libCore_gv_bALMaxPlayers;
    int autoED63157B_var;

    // Implementation
    autoED63157B_var = 1;
    for ( ; autoED63157B_var <= autoED63157B_ae; autoED63157B_var += 1 ) {
        if ((PlayerStatus(autoED63157B_var) != c_playerStatusUnused) && (libUIUI_gv_heroSelectionSetting.lv_lockedIn[autoED63157B_var] == false)) {
            if ((PlayerType(autoED63157B_var) == c_playerTypeUser)) {
                return false;
            }

        }

    }
    return true;
}

void libUIUI_gf_HSUIUpdateHeroButtons () {
    // Variable Declarations
    int lv_itTeam;
    int lv_itPlayer;
    int lv_itRow;
    int lv_itCol;
    int lv_itViewer;

    // Automatic Variable Declarations
    int auto766AF023_ae;
    playergroup auto0DEE2741_g;
    int auto8E981979_ae;
    int auto97123400_ae;
    playergroup autoD6F59D4C_g;
    playergroup auto468F19C5_g;
    int auto11C81FB7_ae;
    int auto64A62863_ae;
    int auto252CB916_val;

    // Variable Initialization

    // Implementation
    auto766AF023_ae = libCore_gv_bALMaxTeams;
    lv_itTeam = 1;
    for ( ; lv_itTeam <= auto766AF023_ae ; lv_itTeam += 1 ) {
        auto0DEE2741_g = libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers;
        lv_itViewer = -1;
        while (true) {
            lv_itViewer = PlayerGroupNextPlayer(auto0DEE2741_g, lv_itViewer);
            if (lv_itViewer < 0) { break; }
            auto8E981979_ae = libUIUI_gv_heroSelectionNumberofRows;
            lv_itRow = 1;
            for ( ; lv_itRow <= auto8E981979_ae ; lv_itRow += 1 ) {
                auto97123400_ae = libUIUI_gv_heroSelectionNumberofCols;
                lv_itCol = 1;
                for ( ; lv_itCol <= auto97123400_ae ; lv_itCol += 1 ) {
                    if ((libUIUI_gv_heroSelectionCurateHeroSelections[lv_itRow][lv_itCol] == null)) {
                        continue;
                    }

                    if ((libUIUI_gv_heroSelection.lv_heroButtonBordersLockedByAllyVisible[lv_itViewer][lv_itRow][lv_itCol] == true)) {
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersLockedByAlly1[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersLockedByAlly2[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                        libUIUI_gv_heroSelection.lv_heroButtonBordersLockedByAllyVisible[lv_itViewer][lv_itRow][lv_itCol] = false;
                    }

                    if ((libUIUI_gv_heroSelection.lv_heroButtonBordersLockedByMeVisible[lv_itViewer][lv_itRow][lv_itCol] == true)) {
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersLockedbyMe1[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersLockedbyMe2[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                        libUIUI_gv_heroSelection.lv_heroButtonBordersLockedByMeVisible[lv_itViewer][lv_itRow][lv_itCol] = false;
                    }

                    if ((libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByAllyVisible[lv_itViewer][lv_itRow][lv_itCol] == true)) {
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByAlly1[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByAlly2[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                        libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByAllyVisible[lv_itViewer][lv_itRow][lv_itCol] = false;
                    }

                    if ((libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByMeVisible[lv_itViewer][lv_itRow][lv_itCol] == true)) {
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByMe1[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByMe2[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByMe3[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                        libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByMeVisible[lv_itViewer][lv_itRow][lv_itCol] = false;
                    }

                    if ((libUIUI_gv_heroSelection.lv_heroButtonBordersThinkingVisible[lv_itViewer][lv_itRow][lv_itCol] == true)) {
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersThinking[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                        libUIUI_gv_heroSelection.lv_heroButtonBordersThinkingVisible[lv_itViewer][lv_itRow][lv_itCol] = false;
                    }

                }
            }
            autoD6F59D4C_g = libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers;
            lv_itPlayer = -1;
            while (true) {
                lv_itPlayer = PlayerGroupNextPlayer(autoD6F59D4C_g, lv_itPlayer);
                if (lv_itPlayer < 0) { break; }
                if ((lv_itViewer != lv_itPlayer)) {
                    if ((libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itPlayer] > 0) && (libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itPlayer] > 0)) {
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByAlly1[libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itPlayer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByAlly2[libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itPlayer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                        libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByAllyVisible[lv_itViewer][libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itPlayer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]] = true;
                        if ((libUIUI_gv_heroSelectionSetting.lv_lockedIn[lv_itPlayer] == false)) {
                            DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersThinking[libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itPlayer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                            libUIUI_gv_heroSelection.lv_heroButtonBordersThinkingVisible[lv_itViewer][libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itPlayer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]] = true;
                        }

                    }

                }

            }
            auto468F19C5_g = libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers;
            lv_itPlayer = -1;
            while (true) {
                lv_itPlayer = PlayerGroupNextPlayer(auto468F19C5_g, lv_itPlayer);
                if (lv_itPlayer < 0) { break; }
                if ((lv_itPlayer != lv_itViewer) && (libUIUI_gv_heroSelectionSetting.lv_lockedIn[lv_itPlayer] == true)) {
                    if ((libUIUI_gv_heroSelectionSetting.lv_lockedHeroRow[lv_itPlayer] > 0) && (libUIUI_gv_heroSelectionSetting.lv_lockedHeroCol[lv_itPlayer] > 0)) {
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersLockedByAlly1[libUIUI_gv_heroSelectionSetting.lv_lockedHeroRow[lv_itPlayer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersLockedByAlly2[libUIUI_gv_heroSelectionSetting.lv_lockedHeroRow[lv_itPlayer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                        libUIUI_gv_heroSelection.lv_heroButtonBordersLockedByAllyVisible[lv_itViewer][libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itPlayer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]] = true;
                    }

                }

            }
            if ((PlayerGroupHasPlayer(libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, lv_itViewer) == true) && (libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itViewer] > 0) && (libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itViewer] > 0)) {
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByMe1[libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itViewer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itViewer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByMe2[libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itViewer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itViewer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByMe3[libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itViewer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itViewer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByMeVisible[lv_itViewer][libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itViewer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itViewer]] = true;
            }

            if ((libUIUI_gv_heroSelectionSetting.lv_lockedIn[lv_itViewer] == true) && (libUIUI_gv_heroSelectionSetting.lv_lockedHeroRow[lv_itViewer] > 0) && (libUIUI_gv_heroSelectionSetting.lv_lockedHeroCol[lv_itViewer] > 0)) {
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersLockedbyMe1[libUIUI_gv_heroSelectionSetting.lv_lockedHeroRow[lv_itViewer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itViewer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersLockedbyMe2[libUIUI_gv_heroSelectionSetting.lv_lockedHeroRow[lv_itViewer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itViewer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                libUIUI_gv_heroSelection.lv_heroButtonBordersLockedByMeVisible[lv_itViewer][libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itViewer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itViewer]] = true;
            }

            auto11C81FB7_ae = libUIUI_gv_heroSelectionNumberofRows;
            lv_itRow = 1;
            for ( ; lv_itRow <= auto11C81FB7_ae ; lv_itRow += 1 ) {
                auto64A62863_ae = libUIUI_gv_heroSelectionNumberofCols;
                lv_itCol = 1;
                for ( ; lv_itCol <= auto64A62863_ae ; lv_itCol += 1 ) {
                    if ((libUIUI_gv_heroSelectionCurateHeroSelections[lv_itRow][lv_itCol] == null)) {
                        continue;
                    }

                    auto252CB916_val = libUIUI_gf_HSUIGetCellState(lv_itViewer, lv_itRow, lv_itCol, lv_itTeam);
                    if (auto252CB916_val == libUIUI_ge_HSUICellState_LockedByMe) {
                        libUIUI_gf_HSEnableDisableHeroButtonForPlayerGroup(true, lv_itRow, lv_itCol, libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                    }
                    else if (auto252CB916_val == libUIUI_ge_HSUICellState_LockedByOther) {
                        libUIUI_gf_HSEnableDisableHeroButtonForPlayerGroup(false, lv_itRow, lv_itCol, libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                    }
                    else if (auto252CB916_val == libUIUI_ge_HSUICellState_SelectedByMe) {
                        libUIUI_gf_HSEnableDisableHeroButtonForPlayerGroup(true, lv_itRow, lv_itCol, libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                    }
                    else if (auto252CB916_val == libUIUI_ge_HSUICellState_SelectedByOther) {
                        libUIUI_gf_HSEnableDisableHeroButtonForPlayerGroup(false, lv_itRow, lv_itCol, libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                    }
                    else if (auto252CB916_val == libUIUI_ge_HSUICellState_Normal) {
                        if ((libUIUI_gv_heroSelectionSetting.lv_lockedIn[lv_itViewer] == true)) {
                            libUIUI_gf_HSEnableDisableHeroButtonForPlayerGroup(false, lv_itRow, lv_itCol, libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                        }
                        else {
                            libUIUI_gf_HSEnableDisableHeroButtonForPlayerGroup(true, lv_itRow, lv_itCol, libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                        }
                    }
                    else {
                    }
                }
            }
        }
    }
    libUIUI_gf_HSUIUpdateTeamPanel();
}

int libUIUI_gf_HSUIGetCellState (int lp_viewer, int lp_row, int lp_col, int lp_team) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto58EAE834_g;

    // Variable Initialization

    // Implementation
    if ((libUIUI_gv_heroSelectionCurateHeroSelections[lp_row][lp_col] == null)) {
        return libUIUI_ge_HSUICellState_Empty;
    }

    auto58EAE834_g = libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto58EAE834_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((lv_itPlayer == lp_viewer)) {
            if ((libUIUI_gv_heroSelectionSetting.lv_lockedIn[lv_itPlayer] == true) && (libUIUI_gv_heroSelectionSetting.lv_lockedHeroRow[lv_itPlayer] == lp_row) && (libUIUI_gv_heroSelectionSetting.lv_lockedHeroCol[lv_itPlayer] == lp_col)) {
                return libUIUI_ge_HSUICellState_LockedByMe;
            }

            if ((libUIUI_gv_heroSelectionSetting.lv_lockedIn[lv_itPlayer] == false) && (libUIUI_gv_heroSelectionSetting.lv_lockedHeroRow[lv_itPlayer] == lp_row) && (libUIUI_gv_heroSelectionSetting.lv_lockedHeroCol[lv_itPlayer] == lp_col)) {
                return libUIUI_ge_HSUICellState_SelectedByMe;
            }

        }
        else {
            if ((libUIUI_gv_heroSelectionSetting.lv_lockedIn[lv_itPlayer] == true) && (libUIUI_gv_heroSelectionSetting.lv_lockedHeroRow[lv_itPlayer] == lp_row) && (libUIUI_gv_heroSelectionSetting.lv_lockedHeroCol[lv_itPlayer] == lp_col)) {
                return libUIUI_ge_HSUICellState_LockedByOther;
            }

            if ((libUIUI_gv_heroSelectionSetting.lv_lockedIn[lv_itPlayer] == false) && (libUIUI_gv_heroSelectionSetting.lv_lockedHeroRow[lv_itPlayer] == lp_row) && (libUIUI_gv_heroSelectionSetting.lv_lockedHeroCol[lv_itPlayer] == lp_col)) {
                return libUIUI_ge_HSUICellState_SelectedByOther;
            }

        }
    }
    return libUIUI_ge_HSUICellState_Normal;
}

void libUIUI_gf_HSUIUpdateTeamPanel () {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itViewer;
    int lv_itRow;
    int lv_playerSlot;
    int lv_itTeam;
    int lv_index;
    playergroup lv_teamGroup;

    // Automatic Variable Declarations
    int auto188B639B_ae;
    playergroup autoB0D899CA_g;

    // Variable Initialization
    lv_teamGroup = PlayerGroupEmpty();

    // Implementation
    auto188B639B_ae = libCore_gv_bALMaxTeams;
    lv_itTeam = 1;
    for ( ; lv_itTeam <= auto188B639B_ae ; lv_itTeam += 1 ) {
        lv_teamGroup = libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false);
        autoB0D899CA_g = lv_teamGroup;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(autoB0D899CA_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((libGame_gv_players[lv_itPlayer].lv_playerisJoinedatStart == false)) {
                continue;
            }
            lv_playerSlot = libGame_gv_players[lv_itPlayer].lv_playerAllySlot;
            lv_index = libCore_gf_CommandersGetHeroIndexOfHeroLink(libUIUI_gv_heroSelectionCurateHeroSelections[libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itPlayer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]]);
            if ((libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itPlayer] > 0) && (libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itPlayer] > 0)) {
                libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_teamHeroImage[lv_playerSlot], libCore_gv_heroData[lv_index].lv_heroSelectScreenButtonPortrait, lv_teamGroup);
                libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_teamHeroHeroName[lv_playerSlot], StringExternal(CatalogFieldValueGet(c_gameCatalogHero, libUIUI_gv_heroSelectionCurateHeroSelections[libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itPlayer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]], "Name", c_playerAny)), lv_teamGroup);
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_teamHeroHeroName[lv_playerSlot], lv_teamGroup, true);
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_teamHeroEmpty[lv_playerSlot], lv_teamGroup, false);
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_teamHeroImage[lv_playerSlot], lv_teamGroup, true);
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_teamHeroBorder[lv_playerSlot], lv_teamGroup, true);
                if ((libUIUI_gv_heroSelectionSetting.lv_lockedIn[lv_itPlayer] == false)) {
                    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_teamHeroThinking[lv_playerSlot], lv_teamGroup, true);
                }
                else {
                    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_teamHeroThinking[lv_playerSlot], lv_teamGroup, false);
                }
                if ((libUIUI_gv_heroSelectionSetting.lv_lockedIn[lv_itPlayer] == true)) {
                    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_teamHeroSelectedAlly[lv_playerSlot], lv_teamGroup, true);
                }
                else {
                    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_teamHeroSelectedAlly[lv_playerSlot], lv_teamGroup, false);
                }
                if ((libUIUI_gv_heroSelectionSetting.lv_lockedIn[lv_itPlayer] == true)) {
                    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_teamHeroLocked[lv_playerSlot], lv_teamGroup, true);
                    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_teamHeroLockedAnimation[lv_playerSlot], lv_teamGroup, true);
                }
                else {
                    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_teamHeroLocked[lv_playerSlot], lv_teamGroup, false);
                    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_teamHeroLockedAnimation[lv_playerSlot], lv_teamGroup, false);
                }
                libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_teamHeroRole[lv_playerSlot], libUIUI_gf_HSUIGetHeroRoleIcon(libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itPlayer], libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]), lv_teamGroup);
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_teamHeroRole[lv_playerSlot], lv_teamGroup, true);
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_teamHeroRoleBG[lv_playerSlot], lv_teamGroup, true);
            }

        }
    }
}

string libUIUI_gf_HSUIGetHeroRoleIcon (int lp_row, int lp_col) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto91A5AC13_val;

    // Variable Initialization

    // Implementation
    lv_index = libCore_gf_CommandersGetHeroIndexOfHeroLink(libUIUI_gv_heroSelectionCurateHeroSelections[lp_row][lp_col]);
    auto91A5AC13_val = libCore_gv_heroData[lv_index].lv_class;
    if (auto91A5AC13_val == libCore_ge_HeroDataHeroRole_Warrior) {
        return "assets\\Textures\\storm_ui_play_randomhero_button_icon_active_warrior.dds";
    }
    else if (auto91A5AC13_val == libCore_ge_HeroDataHeroRole_Support) {
        return "assets\\Textures\\storm_ui_play_randomhero_button_icon_active_support.dds";
    }
    else if (auto91A5AC13_val == libCore_ge_HeroDataHeroRole_Specialist) {
        return "assets\\Textures\\storm_ui_play_randomhero_button_icon_active_specialist.dds";
    }
    else if (auto91A5AC13_val == libCore_ge_HeroDataHeroRole_Assasin1) {
        return "assets\\Textures\\storm_ui_play_randomhero_button_icon_active_assassin.dds";
    }
    else if (auto91A5AC13_val == libCore_ge_HeroDataHeroRole_Assasin2) {
        return "assets\\Textures\\storm_ui_play_randomhero_button_icon_active_assassin.dds";
    }
    else {
    }
    return null;
}

void libUIUI_gf_HSUIUpdateAbilitiesPanelforPlayer (int lp_player) {
    // Variable Declarations
    int lv_itHeroIndex;
    string lv_itHeroLink;
    int lv_itBasicAbil;
    int lv_itHeroicAbil;
    int lv_itInt;

    // Automatic Variable Declarations
    int autoB279FE70_ae;
    int autoB279FE70_var;
    int autoA75CCBDA_val;
    int auto2A7B8F04_ae;
    const int auto2A7B8F04_ai = -1;
    int auto8A9B30CD_ae;
    const int auto8A9B30CD_ai = -1;

    // Variable Initialization
    lv_itHeroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_itHeroLink = libCore_gv_heroData[libGame_gv_players[lp_player].lv_heroIndex].lv_heroCatalogLink;

    // Implementation
    libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_abilitiesPanelUniverseIconImage, libCore_gv_heroData[lv_itHeroIndex].lv_universeIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelNameLabel, libCore_gv_heroData[lv_itHeroIndex].lv_name, libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelInfoLabel, libCore_gf_RoleGetHeroRoleofHeroText(lv_itHeroLink), libCore_gv_playerGroupFromPlayer[lp_player]);
    autoB279FE70_ae = libCore_gv_heroData[lv_itHeroIndex].lv_abilitiesCount;
    autoB279FE70_var = 1;
    for ( ; autoB279FE70_var <= autoB279FE70_ae; autoB279FE70_var += 1 ) {
        if ((libCore_gv_heroData[lv_itHeroIndex].lv_abilitiesData[autoB279FE70_var].lv_isHeroSelectionVisibility == false)) {
            continue;
        }

        autoA75CCBDA_val = libCore_gv_heroData[lv_itHeroIndex].lv_abilitiesData[autoB279FE70_var].lv_abilityType;
        if (autoA75CCBDA_val == libCore_ge_HeroAbilityType_Basic) {
            DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItem[lv_itBasicAbil], libCore_gv_playerGroupFromPlayer[lp_player], true);
            libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemIconImage[lv_itBasicAbil], libCore_gv_heroData[lv_itHeroIndex].lv_abilitiesData[autoB279FE70_var].lv_abilityIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemNameLabel[lv_itBasicAbil], libCore_gv_heroData[lv_itHeroIndex].lv_abilitiesData[autoB279FE70_var].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemDescriptionSimpleLabel[lv_itBasicAbil], libCore_gv_heroData[lv_itHeroIndex].lv_abilitiesData[autoB279FE70_var].lv_abilitySimpleText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemHotkeyLabel[lv_itBasicAbil], libCore_gv_heroData[lv_itHeroIndex].lv_abilitiesData[autoB279FE70_var].lv_abilityHotkey, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipNameLabel[lv_itBasicAbil], libCore_gv_heroData[lv_itHeroIndex].lv_abilitiesData[autoB279FE70_var].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipInfoLabel[lv_itBasicAbil], libCore_gv_heroData[lv_itHeroIndex].lv_abilitiesData[autoB279FE70_var].lv_abilityInfo, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipDescriptionLabel[lv_itBasicAbil], libCore_gv_heroData[lv_itHeroIndex].lv_abilitiesData[autoB279FE70_var].lv_abilityTooltipText, libCore_gv_playerGroupFromPlayer[lp_player]);
            lv_itBasicAbil += 1;
        }
        else if (autoA75CCBDA_val == libCore_ge_HeroAbilityType_Trait) {
            DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItem, libCore_gv_playerGroupFromPlayer[lp_player], true);
            libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemIconImage, libCore_gv_heroData[lv_itHeroIndex].lv_abilitiesData[autoB279FE70_var].lv_abilityIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemNameLabel, libCore_gv_heroData[lv_itHeroIndex].lv_abilitiesData[autoB279FE70_var].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemDescriptionSimpleLabel, libCore_gv_heroData[lv_itHeroIndex].lv_abilitiesData[autoB279FE70_var].lv_abilitySimpleText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemHotkeyLabel, libCore_gv_heroData[lv_itHeroIndex].lv_abilitiesData[autoB279FE70_var].lv_abilityHotkey, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemTooltipNameLabel, libCore_gv_heroData[lv_itHeroIndex].lv_abilitiesData[autoB279FE70_var].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemTooltipInfoLabel, libCore_gv_heroData[lv_itHeroIndex].lv_abilitiesData[autoB279FE70_var].lv_abilityInfo, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemTooltipDescriptionLabel, libCore_gv_heroData[lv_itHeroIndex].lv_abilitiesData[autoB279FE70_var].lv_abilityTooltipText, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else if (autoA75CCBDA_val == libCore_ge_HeroAbilityType_Heroic) {
            DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItem[lv_itHeroicAbil], libCore_gv_playerGroupFromPlayer[lp_player], true);
            libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemIconImage[lv_itHeroicAbil], libCore_gv_heroData[lv_itHeroIndex].lv_abilitiesData[autoB279FE70_var].lv_abilityIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemNameLabel[lv_itHeroicAbil], libCore_gv_heroData[lv_itHeroIndex].lv_abilitiesData[autoB279FE70_var].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemDescriptionSimpleLabel[lv_itHeroicAbil], libCore_gv_heroData[lv_itHeroIndex].lv_abilitiesData[autoB279FE70_var].lv_abilitySimpleText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemHotkeyLabel[lv_itHeroicAbil], libCore_gv_heroData[lv_itHeroIndex].lv_abilitiesData[autoB279FE70_var].lv_abilityHotkey, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemTooltipNameLabel[lv_itHeroicAbil], libCore_gv_heroData[lv_itHeroIndex].lv_abilitiesData[autoB279FE70_var].lv_abilityName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemTooltipInfoLabel[lv_itHeroicAbil], libCore_gv_heroData[lv_itHeroIndex].lv_abilitiesData[autoB279FE70_var].lv_abilityInfo, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemTooltipDescriptionLabel[lv_itHeroicAbil], libCore_gv_heroData[lv_itHeroIndex].lv_abilitiesData[autoB279FE70_var].lv_abilityTooltipText, libCore_gv_playerGroupFromPlayer[lp_player]);
            lv_itHeroicAbil += 1;
        }
        else {
        }
    }
    auto2A7B8F04_ae = lv_itBasicAbil;
    lv_itInt = libCore_gv_dataHeroesNumberOfPassiveAbilitiesPerHero2;
    for ( ; ( (auto2A7B8F04_ai >= 0 && lv_itInt <= auto2A7B8F04_ae) || (auto2A7B8F04_ai < 0 && lv_itInt >= auto2A7B8F04_ae) ) ; lv_itInt += auto2A7B8F04_ai ) {
        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItem[lv_itInt], libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
    auto8A9B30CD_ae = lv_itHeroicAbil;
    lv_itInt = libCore_gv_dataHeroesNumberOfPassiveAbilitiesPerHero3;
    for ( ; ( (auto8A9B30CD_ai >= 0 && lv_itInt <= auto8A9B30CD_ae) || (auto8A9B30CD_ai < 0 && lv_itInt >= auto8A9B30CD_ae) ) ; lv_itInt += auto8A9B30CD_ai ) {
        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItem[lv_itInt], libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
}

void libUIUI_gf_HSUIUpdateTalentsTierForPlayer (int lp_player, int lp_tier) {
    // Variable Declarations
    int lv_itHeroIndex;
    string lv_itHeroLink;

    // Automatic Variable Declarations
    const int autoE9E5046D_ae = libCore_gv_dataHeroesMaxTalentsperTier;
    int autoE9E5046D_var;
    int autoA8982FDF_val;

    // Variable Initialization
    lv_itHeroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_itHeroLink = libCore_gv_heroData[libGame_gv_players[lp_player].lv_heroIndex].lv_heroCatalogLink;

    // Implementation
    libUIUI_gv_heroSelectionSetting.lv_talentTierPressedButton[lp_player] = lp_tier;
    libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_talentsPanelNameLabel, libCore_gv_heroData[lv_itHeroIndex].lv_name, libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_talentsPanelUniverseIconImage, libCore_gv_heroData[lv_itHeroIndex].lv_universeIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_talentsPanelInfoLabel, libCore_gf_RoleGetHeroRoleofHeroText(lv_itHeroLink), libCore_gv_playerGroupFromPlayer[lp_player]);
    autoE9E5046D_var = 1;
    for ( ; autoE9E5046D_var <= autoE9E5046D_ae; autoE9E5046D_var += 1 ) {
        libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_heroSelection.lv_talentsPanelTierButton[autoE9E5046D_var], true, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_talentsPanelTierButton[autoE9E5046D_var], false, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_talentsPanelTierButton[autoE9E5046D_var], IntToText(autoE9E5046D_var), libCore_gv_playerGroupFromPlayer[lp_player]);
        if ((libCore_gv_heroData[lv_itHeroIndex].lv_talentsData[lp_tier][autoE9E5046D_var].lv_talentLink != null)) {
            DialogControlSetVisible(libUIUI_gv_heroSelection.lv_talentsPanelTalentButton[autoE9E5046D_var], libCore_gv_playerGroupFromPlayer[lp_player], false);
            DialogControlSetVisible(libUIUI_gv_heroSelection.lv_talentsPanelTalentButton[autoE9E5046D_var], libCore_gv_playerGroupFromPlayer[lp_player], true);
            libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonIconImage[autoE9E5046D_var], libCore_gv_heroData[lv_itHeroIndex].lv_talentsData[lp_tier][autoE9E5046D_var].lv_talentIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonNameLabel[autoE9E5046D_var], libCore_gv_heroData[lv_itHeroIndex].lv_talentsData[lp_tier][autoE9E5046D_var].lv_talentName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonDescriptionSimpleLabel[autoE9E5046D_var], libCore_gv_heroData[lv_itHeroIndex].lv_talentsData[lp_tier][autoE9E5046D_var].lv_talentSimpleText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyLabel[autoE9E5046D_var], libCore_gv_heroData[lv_itHeroIndex].lv_talentsData[lp_tier][autoE9E5046D_var].lv_talentHotkey, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_talentsPanelTooltipNameLabel[autoE9E5046D_var], libCore_gv_heroData[lv_itHeroIndex].lv_talentsData[lp_tier][autoE9E5046D_var].lv_talentName, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_talentsPanelTooltipInfoLabel[autoE9E5046D_var], libCore_gv_heroData[lv_itHeroIndex].lv_talentsData[lp_tier][autoE9E5046D_var].lv_talentInfoText, libCore_gv_playerGroupFromPlayer[lp_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_talentsPanelTooltipDescriptionLabel[autoE9E5046D_var], libCore_gv_heroData[lv_itHeroIndex].lv_talentsData[lp_tier][autoE9E5046D_var].lv_talentTooltipText[0], libCore_gv_playerGroupFromPlayer[lp_player]);
            autoA8982FDF_val = libCore_gv_heroData[lv_itHeroIndex].lv_talentsData[lp_tier][autoE9E5046D_var].lv_talentType;
            if (autoA8982FDF_val == libCore_ge_HeroTalentType_Active) {
                libUIUI_gf_TalentsSetDialogItemTalentHotkeyColorTypeForPlayer(libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[autoE9E5046D_var], libCore_ge_HeroTalentType_Active, lp_player);
                if ((libCore_gv_heroData[lv_itHeroIndex].lv_talentsData[lp_tier][autoE9E5046D_var].lv_isQuest == true)) {
                    libUIUI_gf_TalentsSetDialogItemTalentHotkeyTypeForPlayer(libUIUI_ge_TalentsHotkeyType_HotkeyQuesting, libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[autoE9E5046D_var], lp_player);
                }
                else {
                    libUIUI_gf_TalentsSetDialogItemTalentHotkeyTypeForPlayer(libUIUI_ge_TalentsHotkeyType_HotkeyNormal, libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[autoE9E5046D_var], lp_player);
                }
            }
            else if (autoA8982FDF_val == libCore_ge_HeroTalentType_Passive) {
                libUIUI_gf_TalentsSetDialogItemTalentHotkeyColorTypeForPlayer(libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[autoE9E5046D_var], libCore_ge_HeroTalentType_Passive, lp_player);
                if ((libCore_gv_heroData[lv_itHeroIndex].lv_talentsData[lp_tier][autoE9E5046D_var].lv_isQuest == true)) {
                    libUIUI_gf_TalentsSetDialogItemTalentHotkeyTypeForPlayer(libUIUI_ge_TalentsHotkeyType_HotkeyQuesting, libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[autoE9E5046D_var], lp_player);
                }
                else {
                    libUIUI_gf_TalentsSetDialogItemTalentHotkeyTypeForPlayer(libUIUI_ge_TalentsHotkeyType_HotkeyNormal, libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[autoE9E5046D_var], lp_player);
                }
            }
            else if (autoA8982FDF_val == libCore_ge_HeroTalentType_Heroic) {
                libUIUI_gf_TalentsSetDialogItemTalentHotkeyColorTypeForPlayer(libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[autoE9E5046D_var], libCore_ge_HeroTalentType_Heroic, lp_player);
                if ((libCore_gv_heroData[lv_itHeroIndex].lv_talentsData[lp_tier][autoE9E5046D_var].lv_isQuest == true)) {
                    libUIUI_gf_TalentsSetDialogItemTalentHotkeyTypeForPlayer(libUIUI_ge_TalentsHotkeyType_HotkeyQuesting, libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[autoE9E5046D_var], lp_player);
                }
                else {
                    libUIUI_gf_TalentsSetDialogItemTalentHotkeyTypeForPlayer(libUIUI_ge_TalentsHotkeyType_HotkeyUpgrade, libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[autoE9E5046D_var], lp_player);
                }
            }
            else {
                libUIUI_gf_TalentsSetDialogItemTalentHotkeyColorTypeForPlayer(libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[autoE9E5046D_var], libCore_ge_HeroTalentType_Basic, lp_player);
                if ((libCore_gv_heroData[lv_itHeroIndex].lv_talentsData[lp_tier][autoE9E5046D_var].lv_isQuest == true)) {
                    libUIUI_gf_TalentsSetDialogItemTalentHotkeyTypeForPlayer(libUIUI_ge_TalentsHotkeyType_HotkeyQuesting, libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[autoE9E5046D_var], lp_player);
                }
                else {
                    libUIUI_gf_TalentsSetDialogItemTalentHotkeyTypeForPlayer(libUIUI_ge_TalentsHotkeyType_HotkeyUpgrade, libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[autoE9E5046D_var], lp_player);
                }
            }
        }
        else {
            DialogControlSetVisible(libUIUI_gv_heroSelection.lv_talentsPanelTalentButton[autoE9E5046D_var], libCore_gv_playerGroupFromPlayer[lp_player], false);
        }
    }
    libNtve_gf_SetDialogItemAcceptMouse(libUIUI_gv_heroSelection.lv_talentsPanelTierButton[lp_tier], false, libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_talentsPanelTierButton[lp_tier], true, libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_abilitiesPanelUniverseIconImage, libCore_gv_heroData[lv_itHeroIndex].lv_universeIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelNameLabel, libCore_gv_heroData[lv_itHeroIndex].lv_name, libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_abilitiesPanelInfoLabel, libCore_gf_RoleGetHeroRoleofHeroText(lv_itHeroLink), libCore_gv_playerGroupFromPlayer[lp_player]);
}

void libUIUI_gf_HSUIShowHeroSelectionUI () {
    // Variable Declarations
    int lv_itTeam;
    int lv_itPlayer;

    // Automatic Variable Declarations
    int auto1011F998_ae;
    playergroup auto769A1BCF_g;

    // Variable Initialization

    // Implementation
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    UISetWorldVisible(PlayerGroupAll(), false);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    DialogSetVisible(libUIUI_gv_heroSelection.lv_dialog, PlayerGroupAll(), true);
    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_countdownLabel, PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_countdownLabel, IntToText(libCore_gv_defaultHeroSeleciotionTime), PlayerGroupAll());
    auto1011F998_ae = libCore_gv_bALMaxTeams;
    lv_itTeam = 1;
    for ( ; lv_itTeam <= auto1011F998_ae ; lv_itTeam += 1 ) {
        auto769A1BCF_g = libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto769A1BCF_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((PlayerStatus(lv_itPlayer) != c_playerStatusUnused) && (PlayerType(lv_itPlayer) == c_playerTypeUser) && (lv_itPlayer > 0) && (lv_itPlayer <= libCore_gv_bALMaxPlayers)) {
                libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_teamHeroPlayerName[libGame_gv_players[lv_itPlayer].lv_playerAllySlot], PlayerName(lv_itPlayer), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers);
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_teamHeroPlayerName[libGame_gv_players[lv_itPlayer].lv_playerAllySlot], libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, true);
            }

        }
    }
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Storm_Music_Symphony", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerEnable(libUIUI_gt_HSButtonUsed, true);
    TimerStart(libUIUI_gv_heroSelectionSetting.lv_countdownTimer, IntToFixed(libCore_gv_defaultHeroSeleciotionTime), false, c_timeGame);
    libUIUI_gf_HSUIShowCalloutsDuringHeroSelectionCountdown(libUIUI_gv_heroSelectionSetting.lv_countdownTimer);
}

trigger auto_libUIUI_gf_HSUIShowCalloutsDuringHeroSelectionCountdown_Trigger = null;
timer auto_libUIUI_gf_HSUIShowCalloutsDuringHeroSelectionCountdown_lp_timer;

void libUIUI_gf_HSUIShowCalloutsDuringHeroSelectionCountdown (timer lp_timer) {
    auto_libUIUI_gf_HSUIShowCalloutsDuringHeroSelectionCountdown_lp_timer = lp_timer;

    if (auto_libUIUI_gf_HSUIShowCalloutsDuringHeroSelectionCountdown_Trigger == null) {
        auto_libUIUI_gf_HSUIShowCalloutsDuringHeroSelectionCountdown_Trigger = TriggerCreate("auto_libUIUI_gf_HSUIShowCalloutsDuringHeroSelectionCountdown_TriggerFunc");
    }

    TriggerExecute(auto_libUIUI_gf_HSUIShowCalloutsDuringHeroSelectionCountdown_Trigger, false, false);
}

bool auto_libUIUI_gf_HSUIShowCalloutsDuringHeroSelectionCountdown_TriggerFunc (bool testConds, bool runActions) {
    timer lp_timer = auto_libUIUI_gf_HSUIShowCalloutsDuringHeroSelectionCountdown_lp_timer;

    // Variable Declarations
    bool lv__10SecondReminderPlayed;
    bool lv__5SecondReminderPlayed;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while (true) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroSelection.lv_countdownLabel, FixedToText(TimerGetRemaining(lp_timer), 0), PlayerGroupAll());
        if ((TimerGetRemaining(lp_timer) < 11.0) && (TimerGetRemaining(lp_timer) > 1.0) && (lv__10SecondReminderPlayed == false)) {
            lv__10SecondReminderPlayed = true;
            SoundPlayForPlayer(SoundLink("UI_BNet_Draft_Countdown_10Sec", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        }
        if ((TimerGetRemaining(lp_timer) < 6.0) && (lv__5SecondReminderPlayed == false)) {
            lv__5SecondReminderPlayed = true;
        }
        if ((TimerGetRemaining(lp_timer) <= 0.0)) {
            break;
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

void libUIUI_gf_UIUnitStatusFramesShowUnitNameLabelForUnit (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "HeroUnitStatusParentFrame/UnitNameLabel/Label", lp_unit);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
}

void libUIUI_gf_UIUnitStatusFramesHookupUnitStatusFramesForPlayer (int lp_player) {
    // Variable Declarations
    unit lv_hero;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_player > libCore_gv_bALMaxPlayers) || (lp_player < 1))) {
        return ;
    }

    lv_hero = libGame_gv_players[lp_player].lv_heroUnit;
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "HeroUnitStatusParentFrame/UnitNameLabel/Label", lv_hero);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libUIUI_gv_uIHeroStatusFrames[lp_player].lv_playerNameLabel = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "HeroUnitStatusParentFrame/HeroNameLabel", lv_hero);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), UnitTypeGetName(UnitGetType(lv_hero)), PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_uIHeroStatusFrames[lp_player].lv_heroNameLabel = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "HeroUnitStatusParentFrame/BotDifficultyLabel", lv_hero);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_uIHeroStatusFrames[lp_player].lv_botDifficultyLabel = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "HeroUnitStatusParentFrame/BotStatusLabel", lv_hero);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_uIHeroStatusFrames[lp_player].lv_botStatusLabel = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypePanel, "HeroUnitStatusParentFrame/HeroMapMechanic", lv_hero);
    libUIUI_gv_uIHeroStatusFrames[lp_player].lv_mapMechanicFrame = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "HeroUnitStatusParentFrame/HeroMapMechanic/MapMechanicIcon", lv_hero);
    libUIUI_gv_uIHeroStatusFrames[lp_player].lv_mapMechanicIcon = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "HeroUnitStatusParentFrame/HeroMapMechanic/MapMechanicCount", lv_hero);
    libUIUI_gv_uIHeroStatusFrames[lp_player].lv_mapMechanicCount = DialogControlLastCreated();
}

void libUIUI_gf_UIUnitStatusFramesShowHideBotLabel (int lp_player, bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_showHide == true)) {
        DialogControlSetVisible(libUIUI_gv_uIHeroStatusFrames[lp_player].lv_playerNameLabel, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_uIHeroStatusFrames[lp_player].lv_heroNameLabel, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(libUIUI_gv_uIHeroStatusFrames[lp_player].lv_heroNameLabel, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_uIHeroStatusFrames[lp_player].lv_playerNameLabel, PlayerGroupAll(), true);
    }
}

void libUIUI_gf_UIHeroTrackerArrowShowHideForPlayer (bool lp_showHide, int lp_player) {
    // Variable Declarations
    unit lv_itHero;
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogControlSetVisible(libUIUI_gv_uIHeroTrackerArrows.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
}

void libUIUI_gf_UIHeroTrackerArrowShowHideHeroUnitForPlayer (bool lp_showHide, int lp_player, unit lp_unit) {
    // Variable Declarations
    unit lv_itHero;
    int lv_index;

    // Automatic Variable Declarations
    const int autoEC4F848C_ae = libUIUI_gv_uI_MaxHeroGroupStatusFrames;
    const int autoEC4F848C_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (autoEC4F848C_ai >= 0 && lv_index <= autoEC4F848C_ae) || (autoEC4F848C_ai < 0 && lv_index >= autoEC4F848C_ae) ) ; lv_index += autoEC4F848C_ai ) {
        if ((libUIUI_gv_uIHeroTrackerArrows.lv_unit[lv_index] == lp_unit)) {
            DialogControlSetVisible(libUIUI_gv_uIHeroTrackerArrows.lv_arrow[lv_index], libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
            DialogControlSetVisible(libUIUI_gv_uIHeroTrackerArrows.lv_portraitImage[lv_index], libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
            return ;
        }

    }
}

void libUIUI_gf_UIHeroTrackerArrowHookupTrackerArrowsForPlayer (int lp_player) {
    // Variable Declarations
    unit lv_itHero;
    int lv_heroCount;
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_player > libCore_gv_bALMaxPlayers) || (lp_player < 1))) {
        return ;
    }

    libUIUI_gv_uIHeroTrackerArrows.lv_unitCount = 0;
    libUIUI_gf_UIHeroTrackerArrowShowHideForPlayer(true, lp_player);
}

text libUIUI_gf_JCICampDiff (int lp_campNumber) {
    // Variable Declarations
    text lv_text;

    // Automatic Variable Declarations
    int auto2AFDD28D_val;

    // Variable Initialization

    // Implementation
    auto2AFDD28D_val = libAIAI_gv_defenderGroupInfo[lp_campNumber].lv_campDiff;
    if (auto2AFDD28D_val == libAIAI_ge_JungleDefendersDifficulty_Medium) {
        lv_text = StringExternal("Param/Value/lib_UIUI_F68E975C");
    }
    else if (auto2AFDD28D_val == libAIAI_ge_JungleDefendersDifficulty_Elite) {
        lv_text = StringExternal("Param/Value/lib_UIUI_9C1AD587");
    }
    else if (auto2AFDD28D_val == libAIAI_ge_JungleDefendersDifficulty_Boss) {
        lv_text = StringExternal("Param/Value/lib_UIUI_5E9A9D36");
    }
    else {
    }
    return lv_text;
}

void libUIUI_gf_JCIInit (int lp_campNumber) {
    // Variable Declarations
    int lv_itFrameLayer;
    int lv_itDialog;
    int lv_defaultOffset;
    int lv_itDialogItem;
    int lv_anchorPointDialogItem;
    int lv_itAnchorDialog;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_itFrameLayer = c_invalidDialogControlId;
    lv_itDialog = c_invalidDialogId;
    lv_defaultOffset = -300;
    lv_itDialogItem = c_invalidDialogControlId;
    lv_anchorPointDialogItem = c_invalidDialogControlId;
    lv_itAnchorDialog = c_invalidDialogId;

    // Implementation
    libNtve_gf_CreateUnitsAtPoint2(1, "BannerUnit", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, PointFromName(("Merc Camp - " + IntToString(lp_campNumber) + " - Banner Point")));
    libUIUI_gv_jCIInfo[lp_campNumber].lv_bannerUnit = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "BannerUnitJCI", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, PointFromName(("Merc Camp - " + IntToString(lp_campNumber) + " - Banner Point")));
    libUIUI_gv_jCIInfo[lp_campNumber].lv_bannerHolder = UnitLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatus, "$this", libUIUI_gv_jCIInfo[lp_campNumber].lv_bannerHolder);
    libUIUI_gv_jCIInfo[lp_campNumber].lv_mainPanel = DialogControlLastCreated();
    lv_itFrameLayer = DialogControlLastCreated();
    DialogControlSetVisible(lv_itFrameLayer, PlayerGroupAll(), false);
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "CampTimerLabel", libUIUI_gv_jCIInfo[lp_campNumber].lv_bannerHolder);
    libUIUI_gv_jCIInfo[lp_campNumber].lv_campTimerLabel = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "CampEliteLabel", libUIUI_gv_jCIInfo[lp_campNumber].lv_bannerHolder);
    libUIUI_gv_jCIInfo[lp_campNumber].lv_campEliteLabel = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "CampTitleLabel", libUIUI_gv_jCIInfo[lp_campNumber].lv_bannerHolder);
    libUIUI_gv_jCIInfo[lp_campNumber].lv_campTitleLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), libUIUI_gf_JCICampDiff(lp_campNumber), PlayerGroupAll());
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "PlayerNameLabel", libUIUI_gv_jCIInfo[lp_campNumber].lv_bannerHolder);
    libUIUI_gv_jCIInfo[lp_campNumber].lv_playerNameLabel = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "CampDescriptionLabel", libUIUI_gv_jCIInfo[lp_campNumber].lv_bannerHolder);
    libUIUI_gv_jCIInfo[lp_campNumber].lv_campDescriptionLabel = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "DebugLabel", libUIUI_gv_jCIInfo[lp_campNumber].lv_bannerHolder);
    libUIUI_gv_jCIInfo[lp_campNumber].lv_debugLabel = DialogControlLastCreated();
    libCore_gf_SetDialogItemAnimationState(libUIUI_gv_jCIInfo[lp_campNumber].lv_mainPanel, PlayerGroupAll(), "TeamCapturedStatus", "NoTeamCaptured");
}

void libUIUI_gf_JCIChangeOwner (int lp_player, int lp_campNumber) {
    // Variable Declarations
    int lv_team;
    int lv_unitStatusPanel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitStatusPanel = c_invalidDialogControlId;

    // Implementation
    DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatus, "$this", libUIUI_gv_jCIInfo[lp_campNumber].lv_bannerHolder);
    lv_unitStatusPanel = DialogControlLastCreated();
    DialogControlSetVisible(lv_unitStatusPanel, PlayerGroupAll(), true);
    if ((lp_player >= 1) && (lp_player <= libCore_gv_bALMaxPlayers)) {
        lv_team = libGame_gf_PlayerGetPlayerTeam(lp_player);
        libCore_gf_SetDialogItemAnimationState(lv_unitStatusPanel, libGame_gv_teams[lv_team].lv_teamPlayerGroupNoNPCPlayers, "TeamCapturedStatus", "BlueTeamCaptured");
        libCore_gf_SetDialogItemAnimationState(lv_unitStatusPanel, libGame_gv_teams[libGame_gf_EnemyTeamNumberOfTeam(lv_team)].lv_teamPlayerGroupNoNPCPlayers, "TeamCapturedStatus", "RedTeamCaptured");
        libNtve_gf_SetDialogItemText(libUIUI_gv_jCIInfo[lp_campNumber].lv_playerNameLabel, PlayerName(lp_player), PlayerGroupAll());
        if ((lv_team == libGame_gv_teamOrderIndex_C)) {
            libCore_gf_SetDialogItemAnimationState(lv_unitStatusPanel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "TeamCapturedStatus", "BlueTeamCaptured");
        }
        else {
            libCore_gf_SetDialogItemAnimationState(lv_unitStatusPanel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "TeamCapturedStatus", "RedTeamCaptured");
        }
    }
    else {
        libCore_gf_SetDialogItemAnimationState(lv_unitStatusPanel, PlayerGroupAll(), "TeamCapturedStatus", "NoTeamCaptured");
    }
}

void libUIUI_gf_MapMechanicsRavenCourtShowHidePanel (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtPanel, libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtPanel, libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtPanel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
}

void libUIUI_gf_MapMechanicsRavenCourtSetModeForTeam (int lp_mode, int lp_teamThatWonTheCurse) {
    // Variable Declarations
    int lv_cursedTeam;

    // Automatic Variable Declarations
    int autoE00D42C1_val;
    int autoCDFC2B0D_val;

    // Variable Initialization

    // Implementation
    autoE00D42C1_val = lp_mode;
    if (autoE00D42C1_val == libUIUI_ge_MapMechanicsRavenCourtModes_NoActivity) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTeamTributeFrame[libGame_gv_teamOrderIndex_C], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTeamTributeFrame[libGame_gv_teamChaosIndex_C], PlayerGroupAll(), true);
    }
    else if (autoE00D42C1_val == libUIUI_ge_MapMechanicsRavenCourtModes_TributeSpawning) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnInfoLabel, StringExternal("Param/Value/lib_UIUI_1A50227B"), PlayerGroupAll());
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnTimerLabel, PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnFrame, PlayerGroupAll(), true);
    }
    else if (autoE00D42C1_val == libUIUI_ge_MapMechanicsRavenCourtModes_TributeSpawned) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnInfoLabel, StringExternal("Param/Value/lib_UIUI_3A5592D2"), PlayerGroupAll());
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnTimerLabel, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnFrame, PlayerGroupAll(), true);
    }
    else if (autoE00D42C1_val == libUIUI_ge_MapMechanicsRavenCourtModes_Curse) {
        lv_cursedTeam = (3 - lp_teamThatWonTheCurse);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseInfoLabel, "Storm_MapMechanic_MechanicTimerCentered_Blue", libGame_gv_teams[lp_teamThatWonTheCurse].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseInfoLabel, "Storm_MapMechanic_MechanicTimerCentered_Red", libGame_gv_teams[lv_cursedTeam].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseInfoLabel, StringExternal("UI/MapMechanics/CursedHollow/TeamCursed"), libGame_gv_teams[lv_cursedTeam].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseInfoLabel, StringExternal("UI/MapMechanics/CursedHollow/EnemyTeamCursed"), libGame_gv_teams[lp_teamThatWonTheCurse].lv_teamPlayerGroupNoNPCPlayers);
        autoCDFC2B0D_val = lv_cursedTeam;
        if (autoCDFC2B0D_val == libGame_gv_teamOrderIndex_C) {
            libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseInfoLabel, StringExternal("Param/Value/lib_UIUI_7994692E"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        }
        else if (autoCDFC2B0D_val == libGame_gv_teamChaosIndex_C) {
            libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseInfoLabel, StringExternal("Param/Value/lib_UIUI_893889C3"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        }
        else {
        }
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseFrame, PlayerGroupAll(), true);
    }
    else {
    }
}

void libUIUI_gf_MapMechanicsRavenCourtSetTributeCountForTeam (int lp_count, int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_UIUI_ED07EAE7", "A", IntToText(lp_count));
    TextExpressionSetToken("Param/Expression/lib_UIUI_ED07EAE7", "B", IntToText(libMapM_gv_mMRavenTributeThreshold_C));
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTeamTributeCounterLabel[lp_team], TextExpressionAssemble("Param/Expression/lib_UIUI_ED07EAE7"), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsRavenCourtSetRemainingCurseTimeForTeam (int lp_remainingSeconds, int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingSeconds), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsRavenCourtSetRemainingTributeSpawnTime (int lp_remainingSeconds) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingSeconds), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsBlackheartsBayShowHidePanel (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayPanel, libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayPanel, libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayPanel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
}

void libUIUI_gf_MapMechanicsBlackheartsBaySetMode (int lp_mode) {
    // Automatic Variable Declarations
    int auto7F6DAF98_val;

    // Implementation
    auto7F6DAF98_val = lp_mode;
    if (auto7F6DAF98_val == libUIUI_ge_MapMechanicsBlackheartsBayModes_Doubloons) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayDoubloonModeFrame, PlayerGroupAll(), true);
        libUIUI_gv_mapMechanicsBlackheartsBayCurrentMode = libUIUI_ge_MapMechanicsBlackheartsBayModes_Doubloons;
    }
    else if (auto7F6DAF98_val == libUIUI_ge_MapMechanicsBlackheartsBayModes_Cannon) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayChestSpawnFrame, PlayerGroupAll(), false);
        TimerPause(libUIUI_gv_mapMechanicsBlackheartsBayChestsSpawnedFrameTimer, true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayDoubloonModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonModeFrame, PlayerGroupAll(), true);
        libUIUI_gv_mapMechanicsBlackheartsBayCurrentMode = libUIUI_ge_MapMechanicsBlackheartsBayModes_Cannon;
    }
    else {
    }
}

void libUIUI_gf_MapMechanicsBlackheartsBayShowChestsSpawnedFrame () {
    // Automatic Variable Declarations
    // Implementation
    if ((libUIUI_gv_mapMechanicsBlackheartsBayCurrentMode != libUIUI_ge_MapMechanicsBlackheartsBayModes_Cannon)) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayChestSpawnFrame, PlayerGroupAll(), true);
        TimerStart(libUIUI_gv_mapMechanicsBlackheartsBayChestsSpawnedFrameTimer, libUIUI_gv_mapMechanicsBlackheartsBayChestsSpawnedFrameTimerDuration_C, false, c_timeGame);
    }

}

void libUIUI_gf_MapMechanicsBlackheartsBayShowCannonballForTeam (int lp_team) {
    // Variable Declarations
    int lv_itCannonball;
    int lv_enemyTeam;

    // Automatic Variable Declarations
    const int auto504D77C3_ae = libUIUI_gv_mapMechanicsBlackheartsBayCannonballCount_C;
    const int auto504D77C3_ai = 1;

    // Variable Initialization

    // Implementation
    if (((lp_team <= 0) || (lp_team > libCore_gv_bALMaxTeams))) {
        return ;
    }

    lv_enemyTeam = (3 - lp_team);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonShotCounterLabel[lv_enemyTeam], PlayerGroupAll(), false);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonShotCounterLabel[lp_team], PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonRemainingCannonballsLabel, "Storm_MapMechanic_MechanicCounterSmallRight_Blue", libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonRemainingCannonballsLabel, "Storm_MapMechanic_MechanicCounterSmallRight_Red", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    lv_itCannonball = 1;
    for ( ; ( (auto504D77C3_ai >= 0 && lv_itCannonball <= auto504D77C3_ae) || (auto504D77C3_ai < 0 && lv_itCannonball >= auto504D77C3_ae) ) ; lv_itCannonball += auto504D77C3_ai ) {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonCannonballImages[lv_itCannonball], "@UI/HUD_MapMechanic_BlackheartsBay_CannonBallBlue", libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonCannonballImages[lv_itCannonball], "@UI/HUD_MapMechanic_BlackheartsBay_CannonBallRed", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
        if ((lp_team == libGame_gv_teamOrderIndex_C)) {
            libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonCannonballImages[lv_itCannonball], "@UI/HUD_MapMechanic_BlackheartsBay_CannonBallBlue", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        }
        else {
            libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonCannonballImages[lv_itCannonball], "@UI/HUD_MapMechanic_BlackheartsBay_CannonBallRed", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        }
    }
}

void libUIUI_gf_MapMechanicsBlackheartsBaySetDoubloonCountForTeam (int lp_count, int lp_maxCount, int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_UIUI_A34101EA", "A", IntToText(lp_count));
    TextExpressionSetToken("Param/Expression/lib_UIUI_A34101EA", "B", IntToText(lp_maxCount));
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayDoubloonCounterLabel[lp_team], TextExpressionAssemble("Param/Expression/lib_UIUI_A34101EA"), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsBlackheartsBaySetShotCountForTeam (int lp_count, int lp_team) {
    // Variable Declarations
    int lv_itCannonball;

    // Automatic Variable Declarations
    const int autoDE847449_ae = libUIUI_gv_mapMechanicsBlackheartsBayCannonballCount_C;
    const int autoDE847449_ai = 1;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_UIUI_DD5F74BB", "A", IntToText(lp_count));
    TextExpressionSetToken("Param/Expression/lib_UIUI_DD5F74BB", "B", IntToText(libUIUI_gv_mapMechanicsBlackheartsBayCannonballCount_C));
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonShotCounterLabel[lp_team], TextExpressionAssemble("Param/Expression/lib_UIUI_DD5F74BB"), PlayerGroupAll());
    lv_itCannonball = 1;
    for ( ; ( (autoDE847449_ai >= 0 && lv_itCannonball <= autoDE847449_ae) || (autoDE847449_ai < 0 && lv_itCannonball >= autoDE847449_ae) ) ; lv_itCannonball += autoDE847449_ai ) {
        if ((lp_count >= lv_itCannonball)) {
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonCannonballImages[lv_itCannonball], PlayerGroupAll(), true);
        }
        else {
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonCannonballImages[lv_itCannonball], PlayerGroupAll(), false);
        }
    }
}

void libUIUI_gf_MapMechanicsHauntedMinesShowHidePanel (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesPanel, libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesPanel, libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesPanel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
}

void libUIUI_gf_MapMechanicsHauntedMinesSetMode (int lp_mode) {
    // Automatic Variable Declarations
    int auto88BA1DCC_val;

    // Implementation
    auto88BA1DCC_val = lp_mode;
    if (auto88BA1DCC_val == libUIUI_ge_MapMechanicsHauntedMinesModes_MinesTimer) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesGolemModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesMineTimerModeFrame, PlayerGroupAll(), true);
    }
    else if (auto88BA1DCC_val == libUIUI_ge_MapMechanicsHauntedMinesModes_Skulls) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesGolemModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesMineTimerModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeFrame, PlayerGroupAll(), true);
    }
    else if (auto88BA1DCC_val == libUIUI_ge_MapMechanicsHauntedMinesModes_Golem) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesMineTimerModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesGolemModeFrame, PlayerGroupAll(), true);
    }
    else {
    }
}

void libUIUI_gf_MapMechanicsHauntedMinesSetRemainingMinesWarningTime (int lp_remainingSeconds) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesMineTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingSeconds), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsHauntedMinesSetSkullCountForTeam (int lp_count, int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeSkullCounterLabel[lp_team], IntToText(lp_count), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsHauntedMinesSetSkullsRemaining (int lp_count) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_UIUI_820DF91D", "A", IntToText(lp_count));
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeRemainingSkullsLabel, TextExpressionAssemble("Param/Expression/lib_UIUI_820DF91D"), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsHauntedMinesSetUpGolemForTeam (unit lp_golemUnit, int lp_skullCount, int lp_team) {
    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_enemyTeam = (3 - lp_team);
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesAllyGolemHealthUnitStatus, lp_golemUnit, libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesEnemyGolemHealthUnitStatus, lp_golemUnit, libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesAllyGolemModeSkullCounterLabel, IntToText(lp_skullCount), libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesEnemyGolemModeSkullCounterLabel, IntToText(lp_skullCount), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
}

void libUIUI_gf_MapMechanicsHauntedMinesSetUpGolemForObserver (unit lp_golemUnitTeamBlue, unit lp_golemUnitTeamRed, int lp_skullCountTeamBlue, int lp_skullCountTeamRed) {
    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesAllyGolemHealthUnitStatus, lp_golemUnitTeamBlue, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesEnemyGolemHealthUnitStatus, lp_golemUnitTeamRed, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesAllyGolemModeSkullCounterLabel, IntToText(lp_skullCountTeamBlue), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesEnemyGolemModeSkullCounterLabel, IntToText(lp_skullCountTeamRed), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
}

void libUIUI_gf_MapMechanicsDragonShireShowHidePanel (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShirePanel, libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShirePanel, libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShirePanel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
}

void libUIUI_gf_MapMechanicsDragonShireSetMode (int lp_mode) {
    // Automatic Variable Declarations
    int auto61B79793_val;

    // Implementation
    auto61B79793_val = lp_mode;
    if (auto61B79793_val == libUIUI_ge_MapMechanicsDragonShireModes_ShrineTimer) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineTimerModeFrame, PlayerGroupAll(), true);
    }
    else if (auto61B79793_val == libUIUI_ge_MapMechanicsDragonShireModes_Shrines) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineTimerModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineModeFrame, PlayerGroupAll(), true);
    }
    else if (auto61B79793_val == libUIUI_ge_MapMechanicsDragonShireModes_Dragon) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineTimerModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonModeFrame, PlayerGroupAll(), true);
    }
    else {
    }
}

void libUIUI_gf_MapMechanicsDragonShireSetRemainingShrineWarningTime (int lp_remainingSeconds) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingSeconds), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsDragonShireSetStarShrineOwner (int lp_team) {
    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_team == 0)) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineEnabledImage[libGame_gv_teamOrderIndex_C], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineEnabledImage[libGame_gv_teamChaosIndex_C], PlayerGroupAll(), false);
    }
    else {
        lv_enemyTeam = (3 - lp_team);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineEnabledImage[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineEnabledImage[lv_enemyTeam], PlayerGroupAll(), false);
    }
}

void libUIUI_gf_MapMechanicsDragonShireSetMoonShrineOwner (int lp_team) {
    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_team == 0)) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineEnabledImage[libGame_gv_teamOrderIndex_C], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineEnabledImage[libGame_gv_teamChaosIndex_C], PlayerGroupAll(), false);
    }
    else {
        lv_enemyTeam = (3 - lp_team);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineEnabledImage[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineEnabledImage[lv_enemyTeam], PlayerGroupAll(), false);
    }
}

void libUIUI_gf_MapMechanicsDragonShireSetRemainingDragonTime (int lp_remainingSeconds) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingSeconds), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsDragonShireSetUpDragonForTeam (unit lp_dragonUnit, int lp_team) {
    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_enemyTeam = (3 - lp_team);
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonHealthUnitStatus, lp_dragonUnit, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonHealthLabel, "Storm_MapMechanic_MechanicCounterSmallRight_Blue", libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonHealthLabel, "Storm_MapMechanic_MechanicCounterSmallRight_Red", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonInfoLabel, "Storm_MapMechanic_MechanicCounterSmallLeft_Blue", libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonInfoLabel, "Storm_MapMechanic_MechanicCounterSmallLeft_Red", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonInfoLabel, StringExternal("UI/MapMechanics/Dragonshire/DragonKnight"), libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonInfoLabel, StringExternal("UI/MapMechanics/Dragonshire/EnemyDragonKnight"), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
}

void libUIUI_gf_MapMechanicsGardenOfTerrorInit (int lp_parentPanel) {
    int init_i;

    // Variable Declarations
    int lv_itTeam;
    int[6] lv_panels;
    int lv_currentPanelLayer;
    int lv_enemyTeam;

    // Automatic Variable Declarations
    const int auto2F14A2A1_ae = libCore_gv_bALMaxTeams;
    const int auto2F14A2A1_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Implementation
    DialogControlHookup(lp_parentPanel, c_triggerControlTypePanel, "GardenOfTerrorPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "SeedsFrame");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrame = DialogControlLastCreated();
    lv_itTeam = 1;
    for ( ; ( (auto2F14A2A1_ai >= 0 && lv_itTeam <= auto2F14A2A1_ae) || (auto2F14A2A1_ai < 0 && lv_itTeam >= auto2F14A2A1_ae) ) ; lv_itTeam += auto2F14A2A1_ai ) {
        lv_enemyTeam = (3 - lv_itTeam);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "BackgroundBlue");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamChaosIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "BackgroundRed");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "SeedBlue");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamChaosIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameBlueSeedImage[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "SeedRed");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameRedSeedImage[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "SeedCounter");
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "StatusLabel");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "StatusLabelFlashGold");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "StatusLabelFlashRed");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "CountdownLabel");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "CountdownLabelFlashGold");
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelGold[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "CountdownLabelFlashRed");
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelRed[lv_itTeam] = DialogControlLastCreated();
    }
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[libGame_gv_teamOrderIndex_C], "Storm_MapMechanic_MechanicCounterLeft_Red", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[libGame_gv_teamChaosIndex_C], "Storm_MapMechanic_MechanicCounterRight_Blue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[libGame_gv_teamOrderIndex_C], "Storm_MapMechanic_MechanicCounterMediumLeft_Red", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[libGame_gv_teamChaosIndex_C], "Storm_MapMechanic_MechanicCounterMediumRight_Blue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[libGame_gv_teamOrderIndex_C], "Storm_MapMechanic_MechanicCounterSmallLeft_Red", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[libGame_gv_teamChaosIndex_C], "Storm_MapMechanic_MechanicCounterSmallRight_Blue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "TimeOfDayFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorTimeOfDayFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "CountdownLabel");
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorTimeOfDayCountdownLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "GolemFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "AllyGolemHealthBar");
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemHealthUnitStatus = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "EnemyGolemHealthBar");
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemHealthUnitStatus = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AllyGolemStatusLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_UIUI_ED1EDD0E"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemStatusLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "EnemyGolemStatusLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_UIUI_7D113FCF"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemStatusLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AllyGolemTimerLabel");
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemTimerLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "EnemyGolemTimerLabel");
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemTimerLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
}

void libUIUI_gf_MapMechanicsGardenOfTerrorShowHidePanel (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorPanel, PlayerGroupAll(), lp_showHide);
}

void libUIUI_gf_MapMechanicsGardenOfTerrorShowHideNightWarning (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorTimeOfDayFrame, PlayerGroupAll(), lp_showHide);
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetNightWarningTime (int lp_remainingSeconds) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorTimeOfDayCountdownLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingSeconds), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetGolemSummonPossibleForTeam (int lp_team, bool lp_summonPossible) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gv_mapMechanicsGardenOfTerrorGolemSummonPossible[lp_team] = lp_summonPossible;
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetSeedCountForTeam (text lp_countText, int lp_team, bool lp_golemSummonPossible) {
    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_enemyTeam = (3 - lp_team);
    if ((lp_golemSummonPossible == true)) {
        if ((lp_team == libGame_gv_teamOrderIndex_C)) {
            libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], "Storm_MapMechanic_MechanicCounterLeft_Blue", libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
            libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], "Storm_MapMechanic_MechanicCounterLeft_Red", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
        }
        else {
            libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], "Storm_MapMechanic_MechanicCounterRight_Blue", libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
            libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], "Storm_MapMechanic_MechanicCounterRight_Red", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
        }
    }
    else {
        if ((lp_team == libGame_gv_teamOrderIndex_C)) {
            libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], "Storm_MapMechanic_MechanicCounterLeft_Disabled", PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], "Storm_MapMechanic_MechanicCounterRight_Disabled", PlayerGroupAll());
        }
    }
    libUIUI_gf_MapMechanicsGardenOfTerrorSetSeedFrameImageForTeam(lp_team, lp_golemSummonPossible);
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], lp_countText, PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetSeedFrameImageForTeam (int lp_team, bool lp_golemSummonPossible) {
    // Automatic Variable Declarations
    int auto7BB64B15_val;

    // Implementation
    auto7BB64B15_val = libUIUI_gv_mapMechanicsGardenOfTerrorLastSeedFrameStatus[lp_team];
    if (auto7BB64B15_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_Growing) {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameBlueSeedImage[lp_team], "@UI/hud_minimap_garden_Team1_Golem_Growing", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameRedSeedImage[lp_team], "@UI/hud_minimap_garden_Team2_Golem_Growing", PlayerGroupAll());
        return ;
    }
    else if (auto7BB64B15_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_ReadyToSummon) {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameBlueSeedImage[lp_team], "@UI/hud_minimap_garden_Team1_Golem_Ready", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameRedSeedImage[lp_team], "@UI/hud_minimap_garden_Team2_Golem_Ready", PlayerGroupAll());
        return ;
    }
    else {
    }
    if ((lp_golemSummonPossible == true)) {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameBlueSeedImage[lp_team], "@UI/hud_minimap_garden_Team1_Seed_Open", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameRedSeedImage[lp_team], "@UI/hud_minimap_garden_Team2_Seed_Open", PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameBlueSeedImage[lp_team], "@UI/hud_minimap_garden_Team1_Seed_Closed", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameRedSeedImage[lp_team], "@UI/hud_minimap_garden_Team2_Seed_Closed", PlayerGroupAll());
    }
}

void libUIUI_gf_MapMechanicsGardenOfTerrorShowHideGolemFrame (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrame, PlayerGroupAll(), lp_showHide);
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetUpGolemStatusBarForTeam (unit lp_golemUnit, int lp_team) {
    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    int auto341CE353_val;
    int autoCB91FB17_val;

    // Variable Initialization

    // Implementation
    lv_enemyTeam = (3 - lp_team);
    if ((UnitIsAlive(lp_golemUnit) == true)) {
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemHealthUnitStatus, lp_golemUnit, libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemHealthUnitStatus, lp_golemUnit, libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemHealthUnitStatus, libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers, true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemHealthUnitStatus, libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, true);
        autoCB91FB17_val = lp_team;
        if (autoCB91FB17_val == libGame_gv_teamOrderIndex_C) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemHealthUnitStatus, lp_golemUnit, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemHealthUnitStatus, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
        }
        else if (autoCB91FB17_val == libGame_gv_teamChaosIndex_C) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemHealthUnitStatus, lp_golemUnit, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemHealthUnitStatus, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
        }
        else {
        }
    }
    else {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemHealthUnitStatus, libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers, false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemHealthUnitStatus, libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        auto341CE353_val = lp_team;
        if (auto341CE353_val == libGame_gv_teamOrderIndex_C) {
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemHealthUnitStatus, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }
        else if (auto341CE353_val == libGame_gv_teamChaosIndex_C) {
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemHealthUnitStatus, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }
        else {
        }
    }
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetGolemRemainingTimeForTeam (int lp_team, int lp_remainingTime) {
    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    int auto7583335C_val;
    int autoADF0E974_val;

    // Variable Initialization

    // Implementation
    lv_enemyTeam = (3 - lp_team);
    if ((lp_remainingTime > 0)) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingTime), libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingTime), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemTimerLabel, libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers, true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemTimerLabel, libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, true);
        autoADF0E974_val = lp_team;
        if (autoADF0E974_val == libGame_gv_teamOrderIndex_C) {
            libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingTime), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemTimerLabel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
        }
        else if (autoADF0E974_val == libGame_gv_teamChaosIndex_C) {
            libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingTime), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemTimerLabel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
        }
        else {
        }
    }
    else {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemTimerLabel, libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers, false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemTimerLabel, libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        auto7583335C_val = lp_team;
        if (auto7583335C_val == libGame_gv_teamOrderIndex_C) {
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemTimerLabel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }
        else if (auto7583335C_val == libGame_gv_teamChaosIndex_C) {
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemTimerLabel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }
        else {
        }
    }
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetGolemGrowTimeForTeam (int lp_team, int lp_remainingTime) {
    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_enemyTeam = (3 - lp_team);
    if ((lp_remainingTime > 0)) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[lp_team], TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingTime), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelGold[lp_team], TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingTime), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelRed[lp_team], TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingTime), PlayerGroupAll());
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelGold[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelRed[lp_team], PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[lp_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelGold[lp_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelRed[lp_team], PlayerGroupAll(), false);
    }
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetGolemStatusTextForTeam (int lp_team, int lp_status) {
    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    int autoDDBF81C0_val;

    // Variable Initialization

    // Implementation
    lv_enemyTeam = (3 - lp_team);
    autoDDBF81C0_val = lp_status;
    if (autoDDBF81C0_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_Null) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemStatusLabel, StringToText(""), libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemStatusLabel, StringToText(""), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    }
    else if (autoDDBF81C0_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_Growing) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemStatusLabel, StringExternal("Param/Value/lib_UIUI_15F600E1"), libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemStatusLabel, StringExternal("Param/Value/lib_UIUI_5C0AA065"), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    }
    else if (autoDDBF81C0_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_Active) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemStatusLabel, StringExternal("Param/Value/lib_UIUI_224BB1DA"), libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemStatusLabel, StringExternal("Param/Value/lib_UIUI_85A746C8"), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    }
    else if (autoDDBF81C0_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_ReadyToSummon) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemStatusLabel, StringExternal("Param/Value/lib_UIUI_DF8A73F2"), libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemStatusLabel, StringExternal("Param/Value/lib_UIUI_2CFBAC22"), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    }
    else if (autoDDBF81C0_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_WaitToSummon) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemStatusLabel, StringExternal("Param/Value/lib_UIUI_68E79991"), libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemStatusLabel, StringExternal("Param/Value/lib_UIUI_4F70E363"), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    }
    else {
    }
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetSeedFrameStatusTextForTeam (int lp_team, int lp_status) {
    // Automatic Variable Declarations
    int auto62734E53_val;

    // Implementation
    libUIUI_gv_mapMechanicsGardenOfTerrorLastSeedFrameStatus[lp_team] = lp_status;
    auto62734E53_val = lp_status;
    if (auto62734E53_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_Null) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], PlayerGroupAll(), false);
    }
    else if (auto62734E53_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_Growing) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], StringExternal("Param/Value/lib_UIUI_8E8B516A"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], StringExternal("Param/Value/lib_UIUI_1F207391"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], StringExternal("Param/Value/lib_UIUI_A4731006"), PlayerGroupAll());
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], PlayerGroupAll(), true);
    }
    else if (auto62734E53_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_Active) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], PlayerGroupAll(), false);
    }
    else if (auto62734E53_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_ReadyToSummon) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], StringExternal("Param/Value/lib_UIUI_66D64EAA"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], StringExternal("Param/Value/lib_UIUI_1D28BE3A"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], StringExternal("Param/Value/lib_UIUI_F8344D7A"), PlayerGroupAll());
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], PlayerGroupAll(), true);
    }
    else if (auto62734E53_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_WaitToSummon) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], PlayerGroupAll(), false);
    }
    else {
    }
    libUIUI_gf_MapMechanicsGardenOfTerrorSetSeedFrameImageForTeam(lp_team, libUIUI_gv_mapMechanicsGardenOfTerrorGolemSummonPossible[lp_team]);
}

trigger auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_Trigger = null;
int auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_team;
bool auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_flash;
int auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_level;

void libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText (int lp_team, bool lp_flash, int lp_level) {
    auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_team = lp_team;
    auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_flash = lp_flash;
    auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_level = lp_level;

    if (auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_Trigger == null) {
        auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_Trigger = TriggerCreate("auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_TriggerFunc");
    }

    TriggerExecute(auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_Trigger, false, false);
}

bool auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_team;
    bool lp_flash = auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_flash;
    int lp_level = auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_level;

    // Variable Declarations
    int lv_localFlashLevel;

    // Automatic Variable Declarations
    int autoE6F84108_val;
    int auto4215CB88_val;

    // Variable Initialization

    // Implementation
    if ((lp_flash == false)) {
        if ((libUIUI_gv_mapMechanicsGardenOfTerrorSeedStatusTextFlashLevel[lp_team] == 0)) {
            return true;
        }

        libUIUI_gv_mapMechanicsGardenOfTerrorSeedStatusTextFlashLevel[lp_team] = 0;
    }
    else {
        if ((libUIUI_gv_mapMechanicsGardenOfTerrorSeedStatusTextFlashLevel[lp_team] == lp_level)) {
            return true;
        }

        libUIUI_gv_mapMechanicsGardenOfTerrorSeedStatusTextFlashLevel[lp_team] = lp_level;
    }
    if ((libUIUI_gv_mapMechanicsGardenOfTerrorSeedStatusTextFlashLevel[lp_team] > 0)) {
        lv_localFlashLevel = libUIUI_gv_mapMechanicsGardenOfTerrorSeedStatusTextFlashLevel[lp_team];
        DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
        autoE6F84108_val = lv_localFlashLevel;
        if (autoE6F84108_val == 1) {
            DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelGold[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 0.0);
            DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelRed[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
        }
        else if (autoE6F84108_val == 2) {
            DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelGold[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
            DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelRed[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 0.0);
        }
        else {
        }
        while (true) {
            DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
            auto4215CB88_val = lv_localFlashLevel;
            if (auto4215CB88_val == 1) {
                DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 0.0);
                DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
            }
            else if (auto4215CB88_val == 2) {
                DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
                DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 0.0);
            }
            else {
            }
            Wait(0.5, c_timeGame);
            DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 0.0);
            DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
            DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
            Wait(0.6, c_timeGame);
            if ((libUIUI_gv_mapMechanicsGardenOfTerrorSeedStatusTextFlashLevel[lp_team] != lv_localFlashLevel)) {
                return true;
            }

        }
    }
    else {
        DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 0.0);
        DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
        DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
        DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 0.0);
        DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelGold[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
        DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelRed[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
    }
    return true;
}

void libUIUI_gf_MapMechanicsBattleForSlaynInit (int lp_parentPanel) {
    int init_i;

    // Variable Declarations
    int lv_itTeam;
    int[6] lv_panels;
    int lv_currentPanelLayer;
    int lv_enemyTeam;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Implementation
    DialogControlHookup(lp_parentPanel, c_triggerControlTypePanel, "BattleForSlaynPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_battleForSlaynPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "SpawnTimerModeFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_battleForSlaynSpawnTimerModeFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "SpawnTimer");
    libUIUI_gv_mapMechanicsPanel.lv_battleForSlaynSpawnTimerLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "GolemModeFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_battleForSlaynGolemModeFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "AllyGolemHealthBar");
    libUIUI_gv_mapMechanicsPanel.lv_battleForSlaynAllyGolemHealthUnitStatus = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AllyGolemHealthBar/HealthLabel/StatusLabel");
    libUIUI_gv_mapMechanicsPanel.lv_battleForSlaynAllyGolemHealthUnitStatusHealthLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "EnemyGolemHealthBar");
    libUIUI_gv_mapMechanicsPanel.lv_battleForSlaynEnemyGolemHealthUnitStatus = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "EnemyGolemHealthBar/HealthLabel/StatusLabel");
    libUIUI_gv_mapMechanicsPanel.lv_battleForSlaynEnemyGolemHealthUnitStatusHealthLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AllyGolemLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_UIUI_BAB5D61C"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "EnemyGolemLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_UIUI_95D19A5C"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    lv_currentPanelLayer -= 1;
    lv_currentPanelLayer -= 1;
}

void libUIUI_gf_MapMechanicsBattleForSlaynShowHidePanel (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_battleForSlaynPanel, libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_battleForSlaynPanel, libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_battleForSlaynPanel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
}

void libUIUI_gf_MapMechanicsBattleForSlaynSetMode (int lp_mode) {
    // Automatic Variable Declarations
    int auto1D6B3FD6_val;

    // Implementation
    auto1D6B3FD6_val = lp_mode;
    if (auto1D6B3FD6_val == libUIUI_ge_MapMechanicsBattleForSlaynModes_Timer) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_battleForSlaynGolemModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_battleForSlaynSpawnTimerModeFrame, PlayerGroupAll(), true);
    }
    else if (auto1D6B3FD6_val == libUIUI_ge_MapMechanicsBattleForSlaynModes_VoidThrashers) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_battleForSlaynSpawnTimerModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_battleForSlaynGolemModeFrame, PlayerGroupAll(), true);
    }
    else {
    }
}

void libUIUI_gf_MapMechanicsBattleForSlaynSetRemainingMinesWarningTime (int lp_remainingSeconds) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_battleForSlaynSpawnTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingSeconds), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsBattleForSlaynSetUpThrasherForTeam (unit lp_golemUnit, int lp_team) {
    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_enemyTeam = (3 - lp_team);
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_battleForSlaynAllyGolemHealthUnitStatus, lp_golemUnit, libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_battleForSlaynEnemyGolemHealthUnitStatus, lp_golemUnit, libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_battleForSlaynAllyGolemHealthUnitStatus, libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers, true);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_battleForSlaynEnemyGolemHealthUnitStatus, libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, true);
}

void libUIUI_gf_MapMechanicsBattleForSlaynSetUpThrasherForObserver (unit lp_golemUnitTeamBlue, unit lp_golemUnitTeamRed) {
    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_battleForSlaynAllyGolemHealthUnitStatus, lp_golemUnitTeamBlue, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_battleForSlaynEnemyGolemHealthUnitStatus, lp_golemUnitTeamRed, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
}

void libUIUI_gf_MapMechanicsBattleForSlaynHideVoidThrasherStatusBar (int lp_ownerofVoidThrasher) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_ownerofVoidThrasher == libCore_gv_cOMPUTER_Blue)) {
        DialogControlHookup(libUIUI_gv_mapMechanicsPanel.lv_battleForSlaynAllyGolemHealthUnitStatus, c_triggerControlTypeLabel, "HealthLabel/StatusLabel");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText("0"), libGame_gv_teams[1].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText("0"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        DialogControlHookup(libUIUI_gv_mapMechanicsPanel.lv_battleForSlaynEnemyGolemHealthUnitStatus, c_triggerControlTypeLabel, "HealthLabel/StatusLabel");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText("0"), libGame_gv_teams[2].lv_teamPlayerGroupNoNPCPlayers);
    }
    else {
        DialogControlHookup(libUIUI_gv_mapMechanicsPanel.lv_battleForSlaynAllyGolemHealthUnitStatus, c_triggerControlTypeLabel, "HealthLabel/StatusLabel");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText("0"), libGame_gv_teams[2].lv_teamPlayerGroupNoNPCPlayers);
        DialogControlHookup(libUIUI_gv_mapMechanicsPanel.lv_battleForSlaynEnemyGolemHealthUnitStatus, c_triggerControlTypeLabel, "HealthLabel/StatusLabel");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText("0"), libGame_gv_teams[1].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText("0"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    }
}

int libUIUI_gf_UIPingDeterminePingTargetType (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitTypeTestAttribute(UnitGetType(lp_unit), c_unitAttributeHeroic) == true)) {
        return libUIUI_ge_UIPingPingTargetTypes_Hero;
    }

    if ((UnitGetType(lp_unit) == "Building_Core")) {
        return libUIUI_ge_UIPingPingTargetTypes_Core;
    }

    if ((UnitGetType(lp_unit) == "Building_Fort") && (UnitGetType(lp_unit) == "Building_Keep")) {
        return libUIUI_ge_UIPingPingTargetTypes_Town;
    }

    if (((UnitGetType(lp_unit) == "MercDefenderMeleeOgre") || (UnitGetType(lp_unit) == "MercDefenderRangedOgre"))) {
        return libUIUI_ge_UIPingPingTargetTypes_OgreCamp;
    }

    if (((UnitGetType(lp_unit) == "MercDefenderRangedBandit") || (UnitGetType(lp_unit) == "MercDefenderMeleeBandit"))) {
        return libUIUI_ge_UIPingPingTargetTypes_Lighthouse;
    }

    if ((UnitGetType(lp_unit) == "XelNagaWatchTower")) {
        return libUIUI_ge_UIPingPingTargetTypes_WatchTower;
    }

    if ((UnitGetType(lp_unit) == "MercDefenderSiegeGiant")) {
        return libUIUI_ge_UIPingPingTargetTypes_SiegeGiantCamp;
    }

    if (((UnitGetType(lp_unit) == "MercenaryHybridMeleeDefender") || (UnitGetType(lp_unit) == "MercenaryHybridPsionicDefender") || (UnitGetType(lp_unit) == "MercHybridRangedDefender"))) {
        return libUIUI_ge_UIPingPingTargetTypes_CampHybridCamp;
    }

    if ((UnitGetType(lp_unit) == "SkeletalPirate")) {
        return libUIUI_ge_UIPingPingTargetTypes_DocksDoubloonCamp;
    }

    if ((UnitGetType(lp_unit) == "RavenLordTribute")) {
        return libUIUI_ge_UIPingPingTargetTypes_RavenTribute;
    }

    if ((UnitGetType(lp_unit) == "RavenLordTributeWarning")) {
        return libUIUI_ge_UIPingPingTargetTypes_RavenTributeWarning;
    }

    if (((UnitGetType(lp_unit) == "HoleLadderDown") || (UnitGetType(lp_unit) == "GroundHole"))) {
        return libUIUI_ge_UIPingPingTargetTypes_UnderworldEntrance;
    }

    if ((UnitGetType(lp_unit) == "HoleLadderUp")) {
        return libUIUI_ge_UIPingPingTargetTypes_UnderworldExit;
    }

    return libUIUI_ge_UIPingPingTargetTypes_None;
}

unit libUIUI_gf_UIPingGetSpecialPingTargetInRangeOfPoint (point lp_point, bool lp_pingFromMinimap, int lp_pingingPlayer) {
    // Variable Declarations
    const fixed lv_worldSearchRange = 1.75;
    const fixed lv_minimapSearchRange = 4.0;
    fixed lv_searchRange;
    unit lv_u;
    unitgroup lv_unitGroup;
    int lv_pingTargetType;

    // Automatic Variable Declarations
    unitgroup auto073004AE_g;
    int auto073004AE_u;
    unitgroup auto88B33712_g;
    int auto88B33712_u;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Implementation
    if ((lp_pingFromMinimap == true)) {
        lv_searchRange = lv_minimapSearchRange;
    }
    else {
        lv_searchRange = lv_worldSearchRange;
    }
    lv_unitGroup = UnitGroup(null, c_playerAny, RegionCircle(lp_point, lv_searchRange), UnitFilter(0, 0, (1 << c_targetFilterBiological) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto073004AE_g = lv_unitGroup;
    auto073004AE_u = UnitGroupCount(auto073004AE_g, c_unitCountAll);
    for (;; auto073004AE_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto073004AE_g, auto073004AE_u);
        if (lv_u == null) { break; }
        if ((libUIUI_gf_UIPingDeterminePingTargetType(lv_u) == libUIUI_ge_UIPingPingTargetTypes_Hero) && (libNtve_gf_UnitIsVisibleToPlayer(lv_u, lp_pingingPlayer) == true)) {
            return lv_u;
        }

    }
    auto88B33712_g = lv_unitGroup;
    auto88B33712_u = UnitGroupCount(auto88B33712_g, c_unitCountAll);
    for (;; auto88B33712_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto88B33712_g, auto88B33712_u);
        if (lv_u == null) { break; }
        lv_pingTargetType = libUIUI_gf_UIPingDeterminePingTargetType(lv_u);
        if ((lv_pingTargetType != libUIUI_ge_UIPingPingTargetTypes_Hero) && (lv_pingTargetType != libUIUI_ge_UIPingPingTargetTypes_None)) {
            return lv_u;
        }

    }
    return null;
}

void libUIUI_gf_UIPingPlayerPingsUnit (int lp_pingingPlayer, unit lp_targetUnit, playergroup lp_pingPlayerGroup) {
    // Variable Declarations
    text lv_nameOfPingingHero;
    text lv_nameOfTarget;
    bool lv_targetIsAllied;
    int lv_targetType;
    text lv_pingMessage;
    string lv_pingModel;
    soundlink lv_pingSound;

    // Automatic Variable Declarations
    int autoE7903A7D_val;

    // Variable Initialization

    // Implementation
    lv_pingModel = "UI_Ping_General";
    lv_pingSound = SoundLink("UI_Game_Ping_General", -1);
    lv_targetType = libUIUI_gf_UIPingDeterminePingTargetType(lp_targetUnit);
    if ((lv_targetType == libUIUI_ge_UIPingPingTargetTypes_None)) {
        libNtve_gf_CreatePingFacingAngle(lp_pingPlayerGroup, lv_pingModel, EventPingPoint(), Color(100.00, 100.00, 100.00), 3.0, 270.0);
        SoundPlayForPlayer(lv_pingSound, lp_pingingPlayer, lp_pingPlayerGroup, 100.0, 0.0);
        return ;
    }

    lv_targetIsAllied = PlayerGetAlliance(lp_pingingPlayer, c_allianceIdChat, UnitGetOwner(lp_targetUnit));
    if ((lv_targetIsAllied == true)) {
        PlayerCreateEffectUnit(lp_pingingPlayer, "HelpPing", lp_targetUnit);
        TextExpressionSetToken("Param/Expression/lib_UIUI_9C3D3BD8", "A", UnitTypeGetName(UnitGetType(lp_targetUnit)));
        lv_nameOfTarget = TextExpressionAssemble("Param/Expression/lib_UIUI_9C3D3BD8");
    }
    else {
        PlayerCreateEffectUnit(lp_pingingPlayer, "AttackPing", lp_targetUnit);
        TextExpressionSetToken("Param/Expression/lib_UIUI_DE259685", "A", UnitTypeGetName(UnitGetType(lp_targetUnit)));
        lv_nameOfTarget = TextExpressionAssemble("Param/Expression/lib_UIUI_DE259685");
    }
    TextExpressionSetToken("Param/Expression/lib_UIUI_5B7C2CA9", "A", UnitTypeGetName(UnitGetType(libGame_gv_players[lp_pingingPlayer].lv_heroUnit)));
    lv_nameOfPingingHero = TextExpressionAssemble("Param/Expression/lib_UIUI_5B7C2CA9");
    autoE7903A7D_val = lv_targetType;
    if (autoE7903A7D_val == libUIUI_ge_UIPingPingTargetTypes_Hero) {
        if ((lp_targetUnit == libGame_gv_players[lp_pingingPlayer].lv_heroUnit)) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_3BA04F0F", "A", lv_nameOfPingingHero);
            lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_3BA04F0F");
            lv_pingSound = SoundLink("UI_Game_Ping_Help", -1);
        }
        else {
            if ((lv_targetIsAllied == true)) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_61780735", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_61780735", "B", lv_nameOfTarget);
                lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_61780735");
                lv_pingSound = SoundLink("UI_Game_Ping_Help", -1);
            }
            else {
                TextExpressionSetToken("Param/Expression/lib_UIUI_666F044E", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_666F044E", "B", lv_nameOfTarget);
                lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_666F044E");
                lv_pingSound = SoundLink("UI_Game_Ping_Attack", -1);
            }
        }
    }
    else if (autoE7903A7D_val == libUIUI_ge_UIPingPingTargetTypes_Town) {
        if ((lv_targetIsAllied == true)) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_09654A4E", "A", lv_nameOfPingingHero);
            TextExpressionSetToken("Param/Expression/lib_UIUI_09654A4E", "B", lv_nameOfTarget);
            lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_09654A4E");
            lv_pingSound = SoundLink("UI_Game_Ping_Defend", -1);
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_UIUI_7166C2C8", "A", lv_nameOfPingingHero);
            TextExpressionSetToken("Param/Expression/lib_UIUI_7166C2C8", "B", lv_nameOfTarget);
            lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_7166C2C8");
            lv_pingSound = SoundLink("UI_Game_Ping_Attack", -1);
        }
    }
    else if (autoE7903A7D_val == libUIUI_ge_UIPingPingTargetTypes_Core) {
        if ((lv_targetIsAllied == true)) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_4EEC2E51", "A", lv_nameOfPingingHero);
            TextExpressionSetToken("Param/Expression/lib_UIUI_4EEC2E51", "B", lv_nameOfTarget);
            lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_4EEC2E51");
            lv_pingSound = SoundLink("UI_Game_Ping_Defend", -1);
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_UIUI_7931F4F3", "A", lv_nameOfPingingHero);
            TextExpressionSetToken("Param/Expression/lib_UIUI_7931F4F3", "B", lv_nameOfTarget);
            lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_7931F4F3");
            lv_pingSound = SoundLink("UI_Game_Ping_Attack", -1);
        }
    }
    else if (autoE7903A7D_val == libUIUI_ge_UIPingPingTargetTypes_OgreCamp) {
        lv_nameOfTarget = StringExternal("Param/Value/lib_UIUI_E3F17D25");
        TextExpressionSetToken("Param/Expression/lib_UIUI_94D034FD", "A", lv_nameOfPingingHero);
        TextExpressionSetToken("Param/Expression/lib_UIUI_94D034FD", "B", lv_nameOfTarget);
        lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_94D034FD");
        lv_pingSound = SoundLink("UI_Game_Ping_Attack", -1);
    }
    else if (autoE7903A7D_val == libUIUI_ge_UIPingPingTargetTypes_SuperCreep) {
        if ((lv_targetIsAllied == true)) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_EFA61515", "A", lv_nameOfPingingHero);
            TextExpressionSetToken("Param/Expression/lib_UIUI_EFA61515", "B", lv_nameOfTarget);
            lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_EFA61515");
            lv_pingSound = SoundLink("UI_Game_Ping_Defend", -1);
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_UIUI_38A29803", "A", lv_nameOfPingingHero);
            TextExpressionSetToken("Param/Expression/lib_UIUI_38A29803", "B", lv_nameOfTarget);
            lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_38A29803");
            lv_pingSound = SoundLink("UI_Game_Ping_Attack", -1);
        }
    }
    else if (autoE7903A7D_val == libUIUI_ge_UIPingPingTargetTypes_WatchTower) {
        lv_nameOfTarget = StringExternal("Param/Value/lib_UIUI_2A0D8831");
        lv_pingSound = SoundLink("UI_Game_Ping_General", -1);
        if ((lv_targetIsAllied == true)) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_D3CD21BD", "A", lv_nameOfPingingHero);
            TextExpressionSetToken("Param/Expression/lib_UIUI_D3CD21BD", "B", lv_nameOfTarget);
            lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_D3CD21BD");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_UIUI_8A1D7329", "A", lv_nameOfPingingHero);
            TextExpressionSetToken("Param/Expression/lib_UIUI_8A1D7329", "B", lv_nameOfTarget);
            lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_8A1D7329");
        }
    }
    else if (autoE7903A7D_val == libUIUI_ge_UIPingPingTargetTypes_SiegeGiantCamp) {
        lv_nameOfTarget = StringExternal("Param/Value/lib_UIUI_D8B13104");
        TextExpressionSetToken("Param/Expression/lib_UIUI_7B375981", "A", lv_nameOfPingingHero);
        TextExpressionSetToken("Param/Expression/lib_UIUI_7B375981", "B", lv_nameOfTarget);
        lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_7B375981");
        lv_pingSound = SoundLink("UI_Game_Ping_Attack", -1);
    }
    else if (autoE7903A7D_val == libUIUI_ge_UIPingPingTargetTypes_CampHybridCamp) {
        lv_nameOfTarget = StringExternal("Param/Value/lib_UIUI_50A76024");
        TextExpressionSetToken("Param/Expression/lib_UIUI_63EF6A27", "A", lv_nameOfPingingHero);
        TextExpressionSetToken("Param/Expression/lib_UIUI_63EF6A27", "B", lv_nameOfTarget);
        lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_63EF6A27");
        lv_pingSound = SoundLink("UI_Game_Ping_Attack", -1);
    }
    else if (autoE7903A7D_val == libUIUI_ge_UIPingPingTargetTypes_RavenTribute) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_A65F56A9", "A", lv_nameOfPingingHero);
        lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_A65F56A9");
        lv_pingSound = SoundLink("UI_Game_Ping_General", -1);
    }
    else if (autoE7903A7D_val == libUIUI_ge_UIPingPingTargetTypes_RavenTributeWarning) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_617EF6B8", "A", lv_nameOfPingingHero);
        lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_617EF6B8");
        lv_pingSound = SoundLink("UI_Game_Ping_General", -1);
    }
    else {
    }
    UIDisplayMessage(lp_pingPlayerGroup, c_messageAreaChat, lv_pingMessage);
    libNtve_gf_CreatePingFacingAngle(lp_pingPlayerGroup, lv_pingModel, UnitGetPosition(lp_targetUnit), Color(100.00, 100.00, 100.00), 3.0, 270.0);
    SoundPlayForPlayer(lv_pingSound, lp_pingingPlayer, lp_pingPlayerGroup, 100.0, 0.0);
}

void libUIUI_gf_UIPingPlayerUsesAssistMePing (int lp_player, point lp_location) {
    // Variable Declarations
    unit lv_pingingPlayerHero;
    playergroup lv_pingPlayerGroup;
    string lv_pingModel;
    soundlink lv_pingSound;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pingPlayerGroup = PlayerGroupEmpty();

    // Implementation
    lv_pingingPlayerHero = libGame_gv_players[lp_player].lv_heroUnit;
    lv_pingPlayerGroup = libGame_gf_PlayersOnTeamHeroes(libGame_gf_PlayerGetPlayerTeam(lp_player), false);
    lv_pingSound = SoundLink("UI_Game_Ping_Help", -1);
    lv_pingModel = "AssistMePingMinimap";
    libNtve_gf_CreatePingFacingAngle(lv_pingPlayerGroup, lv_pingModel, lp_location, Color(100.00, 100.00, 100.00), 3.0, 270.0);
    PingSetScale(PingLastCreated(), 0.6);
    SoundPlayForPlayer(lv_pingSound, lp_player, lv_pingPlayerGroup, 100.0, 0.0);
    PlayerCreateEffectPoint(lp_player, "AssistMePing", lp_location);
    TextExpressionSetToken("Param/Expression/lib_UIUI_034FD791", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_034FD791"));
}

void libUIUI_gf_PingPlayerUsesDefendPing (unit lp_pingedUnit, int lp_player, point lp_location) {
    // Variable Declarations
    unit lv_pingingPlayerHero;
    text lv_pingingHeroName;
    playergroup lv_pingPlayerGroup;
    string lv_pingModel;
    soundlink lv_pingSound;
    text lv_pingedTargetName;
    int lv_targetType;

    // Automatic Variable Declarations
    string autoD1249EE6_val;

    // Variable Initialization
    lv_pingPlayerGroup = PlayerGroupEmpty();

    // Implementation
    lv_pingingPlayerHero = libGame_gv_players[lp_player].lv_heroUnit;
    lv_pingingHeroName = UnitTypeGetName(UnitGetType(lv_pingingPlayerHero));
    lv_pingPlayerGroup = libGame_gf_PlayersOnTeamHeroes(libGame_gf_PlayerGetPlayerTeam(lp_player), false);
    lv_pingSound = SoundLink("UI_Game_Ping_Defend", -1);
    lv_pingModel = "DefendPingMinimap";
    lv_targetType = libUIUI_gf_UIPingDeterminePingTargetType(lp_pingedUnit);
    lv_pingedTargetName = UnitGetName(lp_pingedUnit);
    libNtve_gf_CreatePingFacingAngle(lv_pingPlayerGroup, lv_pingModel, lp_location, Color(100.00, 100.00, 100.00), 3.0, 270.0);
    PingSetScale(PingLastCreated(), 0.6);
    SoundPlayForPlayer(lv_pingSound, lp_player, lv_pingPlayerGroup, 100.0, 0.0);
    PlayerCreateEffectPoint(lp_player, "DefendPing", lp_location);
    if (((lp_pingedUnit == null) || (UnitFilterMatch(lp_pingedUnit, UnitGetOwner(lv_pingingPlayerHero), UnitFilter((1 << c_targetFilterUser1), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_FCA8BA0C", "A", lv_pingingHeroName);
        UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_FCA8BA0C"));
    }
    else {
        if ((libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lp_pingedUnit)) == libGame_gf_EnemyTeamNumberOfPlayer(lp_player))) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_BF9F1726", "A", lv_pingingHeroName);
            UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_BF9F1726"));
        }
        else {
            if ((UnitFilterMatch(lp_pingedUnit, lp_player, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_048F384C", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_048F384C", "B", lv_pingedTargetName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_048F384C"));
            }
            else if ((UnitFilterMatch(lp_pingedUnit, lp_player, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_D865FA61", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_D865FA61", "B", UnitGetName(lp_pingedUnit));
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_D865FA61"));
            }
            else if ((UnitFilterMatch(lp_pingedUnit, lp_player, UnitFilter(0, 0, (1 << c_targetFilterBiological) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32)))) == true)) {
                autoD1249EE6_val = UnitGetType(lp_pingedUnit);
                if (autoD1249EE6_val == "XelNagaWatchTower") {
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_5ABB6AB8"));
                }
                else {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_D393E3DB", "A", lv_pingingHeroName);
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_D393E3DB"));
                }
            }
            else if (true) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_F4FFAF30", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_F4FFAF30"));
            }
        }
    }
}

void libUIUI_gf_UIPingPlayerUsesDangerPing (int lp_player, point lp_location, unit lp_targetUnit) {
    // Variable Declarations
    unit lv_pingingPlayerHero;
    playergroup lv_pingPlayerGroup;
    string lv_pingModel;
    soundlink lv_pingSound;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pingPlayerGroup = PlayerGroupEmpty();

    // Implementation
    lv_pingingPlayerHero = libGame_gv_players[lp_player].lv_heroUnit;
    lv_pingPlayerGroup = libGame_gf_PlayersOnTeamHeroes(libGame_gf_PlayerGetPlayerTeam(lp_player), false);
    lv_pingSound = SoundLink("UI_Game_Ping_Careful", -1);
    lv_pingModel = "DangerPingMinimap";
    libNtve_gf_CreatePingFacingAngle(lv_pingPlayerGroup, lv_pingModel, lp_location, Color(100.00, 100.00, 100.00), 3.0, 270.0);
    PingSetScale(PingLastCreated(), 0.6);
    SoundPlayForPlayer(lv_pingSound, lp_player, lv_pingPlayerGroup, 100.0, 0.0);
    if ((lp_targetUnit != null) && (UnitFilterMatch(lp_targetUnit, lp_player, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
        PlayerCreateEffectUnit(lp_player, "DangerPingUnit", lp_targetUnit);
        TextExpressionSetToken("Param/Expression/lib_UIUI_81F0DFCD", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
        TextExpressionSetToken("Param/Expression/lib_UIUI_81F0DFCD", "B", UnitTypeGetName(UnitGetType(lp_targetUnit)));
        UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_81F0DFCD"));
    }
    else {
        PlayerCreateEffectPoint(lp_player, "DangerPingPoint", lp_location);
        TextExpressionSetToken("Param/Expression/lib_UIUI_D5C271EA", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
        UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_D5C271EA"));
    }
}

void libUIUI_gf_UIPingPlayerUsesOnMyWayPing (int lp_player, point lp_location) {
    // Variable Declarations
    unit lv_pingingPlayerHero;
    playergroup lv_pingPlayerGroup;
    string lv_pingModel;
    soundlink lv_pingSound;
    int lv_team;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pingPlayerGroup = PlayerGroupEmpty();

    // Implementation
    lv_team = libGame_gf_PlayerGetPlayerTeam(lp_player);
    lv_pingingPlayerHero = libGame_gv_players[lp_player].lv_heroUnit;
    lv_pingPlayerGroup = libGame_gf_PlayersOnTeamHeroes(lv_team, false);
    lv_pingSound = SoundLink("UI_Game_Ping_OMW", -1);
    lv_pingModel = "OnMyWayPingMinimap";
    libNtve_gf_CreatePingFacingAngle(lv_pingPlayerGroup, lv_pingModel, lp_location, Color(100.00, 100.00, 100.00), 3.0, 270.0);
    PingSetScale(PingLastCreated(), 0.6);
    SoundPlayForPlayer(lv_pingSound, lp_player, lv_pingPlayerGroup, 100.0, 0.0);
    UnitCreateEffectPoint(lv_pingingPlayerHero, "OnMyWayPing", lp_location);
    TextExpressionSetToken("Param/Expression/lib_UIUI_2E622F46", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_2E622F46"));
    PathCreateForUnit(libGame_gv_teams[lv_team].lv_teamPlayerGroupNoNPCPlayers, lv_pingingPlayerHero);
    PathSetDestinationPoint(PathLastCreated(), lp_location);
    PathSetVisible(PathLastCreated(), c_pathLocationWorld, false);
    PathSetColor(PathLastCreated(), c_pathLocationAll, ColorWithAlpha(0.00, 50.20, 100.00, 89.41));
    Wait(3.0, c_timeGame);
    PathDestroy(PathLastCreated());
}

void libUIUI_gf_UIPingPlayerUsesRetreatPing (int lp_player, point lp_location) {
    // Variable Declarations
    unit lv_pingingPlayerHero;
    playergroup lv_pingPlayerGroup;
    string lv_pingModel;
    soundlink lv_pingSound;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pingPlayerGroup = PlayerGroupEmpty();

    // Implementation
    lv_pingingPlayerHero = libGame_gv_players[lp_player].lv_heroUnit;
    lv_pingPlayerGroup = libGame_gf_PlayersOnTeamHeroes(libGame_gf_PlayerGetPlayerTeam(lp_player), false);
    lv_pingSound = SoundLink("UI_Game_Ping_Retreat", -1);
    lv_pingModel = "RetreatPingMinimap";
    libNtve_gf_CreatePingFacingAngle(lv_pingPlayerGroup, lv_pingModel, lp_location, Color(100.00, 100.00, 100.00), 3.0, 270.0);
    PingSetScale(PingLastCreated(), 0.6);
    SoundPlayForPlayer(lv_pingSound, lp_player, lv_pingPlayerGroup, 100.0, 0.0);
    PlayerCreateEffectPoint(lp_player, "RetreatPing", lp_location);
    TextExpressionSetToken("Param/Expression/lib_UIUI_2BCF1489", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_2BCF1489"));
}

void libUIUI_gf_UITargetInfoPanelSetUpMapMechanicInfo (string lp_icon, text lp_tooltip) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemImage(libUIUI_gv_uITargetInfoPanel.lv_mapMechanicIcon, lp_icon, PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(libUIUI_gv_uITargetInfoPanel.lv_mapMechanicIcon, lp_tooltip, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libUIUI_gv_uITargetInfoPanel.lv_mapMechanicLabel, StringToText(""), PlayerGroupAll());
}

void libUIUI_gf_UITargetInfoPanelUpdateMapMechanicTextForPlayer (text lp_text, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_uITargetInfoPanel.lv_mapMechanicLabel, lp_text, libCore_gv_playerGroupFromPlayer[lp_player]);
}

void libUIUI_gf_UITargetInfoPanelSetTargetForPlayer (unit lp_target, int lp_player) {
    // Variable Declarations
    string lv_groupOrWireframe;
    int lv_numberofIndexes;
    string lv_imagePath;
    fixed lv_weaponDamage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupOrWireframe = "";
    lv_imagePath = "";

    // Implementation
    if (((libUIUI_gv_uITargetInfoPanelEnabled == false) || (libCore_gv_gameStarted == false))) {
        return ;
    }

    if ((libUIUI_gv_uITargetInfoPanelCurrentTargetForPlayer[lp_player] != null)) {
        DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_healthAndManaUnitStatusStatusFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
        DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_healthOnlyUnitStatusStatusFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
        DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_towerWithAmmoUnitStatusStatusFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }

    libUIUI_gv_uITargetInfoPanelCurrentTargetForPlayer[lp_player] = lp_target;
    libNtve_gf_SetDialogItemText(libUIUI_gv_uITargetInfoPanel.lv_unitName, UnitTypeGetName(UnitGetType(lp_target)), libCore_gv_playerGroupFromPlayer[lp_player]);
    if ((UnitTypeTestAttribute(UnitGetType(lp_target), c_unitAttributeHeroic) == true)) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_uITargetInfoPanel.lv_level, IntToText(UnitLevel(lp_target)), libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_level, libCore_gv_playerGroupFromPlayer[lp_player], true);
        libNtve_gf_SetDialogItemText(libUIUI_gv_uITargetInfoPanel.lv_playerName, libGame_gv_players[UnitGetOwner(lp_target)].lv_playerName, libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_playerName, libCore_gv_playerGroupFromPlayer[lp_player], true);
    }
    else {
        DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_level, libCore_gv_playerGroupFromPlayer[lp_player], false);
        DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_playerName, libCore_gv_playerGroupFromPlayer[lp_player], false);
        DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_mapMechanicIcon, libCore_gv_playerGroupFromPlayer[lp_player], false);
        DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_mapMechanicLabel, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
    if ((UnitHasBehavior2(lp_target, "ShowDescriptionTextInTargetPanel") == true)) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_uITargetInfoPanel.lv_descriptionLabel, StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lp_target), "Description", c_playerAny)), libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_descriptionLabel, libCore_gv_playerGroupFromPlayer[lp_player], true);
    }
    else {
        DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_descriptionLabel, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
    if ((CatalogEntryIsValid(c_gameCatalogActor, (UnitGetType(lp_target))) == true)) {
        if ((libNtve_gf_PlayerIsEnemy(lp_player, UnitGetOwner(lp_target), libNtve_ge_PlayerRelation_Ally) == true)) {
            lv_groupOrWireframe = "GroupIcon";
        }
        else {
            lv_groupOrWireframe = "Wireframe";
        }
        lv_numberofIndexes = CatalogFieldValueCount(c_gameCatalogActor, ((UnitGetType(lp_target))), ((lv_groupOrWireframe + ".Image")), lp_player);
        if ((lv_numberofIndexes > 0)) {
            lv_imagePath = CatalogFieldValueGet(c_gameCatalogActor, ((UnitGetType(lp_target))), ((lv_groupOrWireframe + ".Image[0]")), lp_player);
            libNtve_gf_SetDialogItemImage(libUIUI_gv_uITargetInfoPanel.lv_portraitImage, lv_imagePath, libCore_gv_playerGroupFromPlayer[lp_player]);
            DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_portraitImage, libCore_gv_playerGroupFromPlayer[lp_player], true);
        }
        else {
            DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_portraitImage, libCore_gv_playerGroupFromPlayer[lp_player], false);
        }
    }
    else {
        DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_portraitImage, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_uITargetInfoPanel.lv_unitTargetFrame, lp_target, libCore_gv_playerGroupFromPlayer[lp_player]);
    if (((UnitGetType(lp_target) == "TownCannonTowerL2") || (UnitGetType(lp_target) == "TownCannonTowerL3") || (UnitGetType(lp_target) == "TownCannonTowerL2Standalone") || (UnitGetType(lp_target) == "TownCannonTowerL3Standalone") || (UnitGetType(lp_target) == "TownTownHallL2") || (UnitGetType(lp_target) == "TownTownHallL3"))) {
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uITargetInfoPanel.lv_towerWithAmmoUnitStatusStatusFrame, lp_target, libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_towerWithAmmoUnitStatusStatusFrame, libCore_gv_playerGroupFromPlayer[lp_player], true);
        libUIUI_gv_uITargetInfoPanelCurretTargetStatusBarType[lp_player] = libUIUI_ge_UITargetInfoPanelStatusBarTypes_TowerWithAmmo;
    }
    else if ((UnitGetPropertyFixed(lp_target, c_unitPropEnergyMax, c_unitPropCurrent) > 0.0) && (UnitGetType(lp_target) != "TownTownHallL2") && (UnitGetType(lp_target) != "TownTownHallL3")) {
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uITargetInfoPanel.lv_healthAndManaUnitStatusStatusFrame, lp_target, libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_healthAndManaUnitStatusStatusFrame, libCore_gv_playerGroupFromPlayer[lp_player], true);
        libUIUI_gv_uITargetInfoPanelCurretTargetStatusBarType[lp_player] = libUIUI_ge_UITargetInfoPanelStatusBarTypes_HealthAndMana;
    }
    else if ((UnitGetPropertyFixed(lp_target, c_unitPropLifeMax, c_unitPropCurrent) > 1.0)) {
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uITargetInfoPanel.lv_healthOnlyUnitStatusStatusFrame, lp_target, libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_healthOnlyUnitStatusStatusFrame, libCore_gv_playerGroupFromPlayer[lp_player], true);
        libUIUI_gv_uITargetInfoPanelCurretTargetStatusBarType[lp_player] = libUIUI_ge_UITargetInfoPanelStatusBarTypes_HealthOnly;
    }
    DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_player], true);
}

void libUIUI_gf_UITargetInfoPanelClearTargetForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_player], false);
    DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_healthAndManaUnitStatusStatusFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
    DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_healthOnlyUnitStatusStatusFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
    DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_towerWithAmmoUnitStatusStatusFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
    libUIUI_gv_uITargetInfoPanelCurrentTargetForPlayer[lp_player] = null;
}

void libUIUI_gf_UITargetInfoPanelUpdateForPlayer (int lp_player) {
    // Variable Declarations
    int lv_buff;
    int lv_numberOfBuffs;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libUIUI_gv_uITargetInfoPanelCurrentTargetForPlayer[lp_player] != null)) {
        if ((UnitIsAlive(libUIUI_gv_uITargetInfoPanelCurrentTargetForPlayer[lp_player]) == false)) {
            libUIUI_gf_UITargetInfoPanelClearTargetForPlayer(lp_player);
            return ;
        }

        if ((UnitTypeTestAttribute(UnitGetType(libUIUI_gv_uITargetInfoPanelCurrentTargetForPlayer[lp_player]), c_unitAttributeStructure) == false) && (libNtve_gf_UnitIsVisibleToPlayer(libUIUI_gv_uITargetInfoPanelCurrentTargetForPlayer[lp_player], lp_player) == false)) {
            libUIUI_gf_UITargetInfoPanelClearTargetForPlayer(lp_player);
            return ;
        }

        if (((UnitHasBehavior2(libUIUI_gv_uITargetInfoPanelCurrentTargetForPlayer[lp_player], "RavenLordsCurseStructures") == true) || (UnitHasBehavior2(libUIUI_gv_uITargetInfoPanelCurrentTargetForPlayer[lp_player], "RavenLordsCurseUnits") == true))) {
            DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_cursedBuildingIcon, libCore_gv_playerGroupFromPlayer[lp_player], true);
        }
        else {
            DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_cursedBuildingIcon, libCore_gv_playerGroupFromPlayer[lp_player], false);
        }
    }

}

void libUIUI_gf_UITargetInfoPanelEnableDisable (bool lp_enableDisable) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_enableDisable == true)) {
        libUIUI_gv_uITargetInfoPanelEnabled = true;
        TriggerEnable(libUIUI_gt_UITargetInfoPanelUpdate, true);
    }
    else {
        libUIUI_gv_uITargetInfoPanelEnabled = false;
        TriggerEnable(libUIUI_gt_UITargetInfoPanelUpdate, false);
    }
}

void libUIUI_gf_TeamLevelHookUpXPBarUnitForTeam (int lp_team, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_teamLevel_Panel.lv_xPBarUnitStatusFrames[lp_team], lp_unit, PlayerGroupAll());
}

void libUIUI_gf_TeamLevelUpdateTeamsLevelLabel (int lp_team, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_teamLevel_Panel.lv_levelLabels[lp_team], IntToText(lp_level), PlayerGroupAll());
}

void libUIUI_gf_TeamLevelPanelShowHideForPlayer (bool lp_showHide, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_teamLevel_Panel.lv_mainDialog, PlayerGroupSingle(lp_player), lp_showHide);
}

void libUIUI_gf_InitObjectiveUI (text lp_title, text lp_tip, string lp_image) {
    // Variable Declarations
    int lv_indexTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libUIUI_gf_SetObjectiveUIImage(lp_image, PlayerGroupAll());
    libUIUI_gf_SetObjectiveUITip(lp_title, lp_tip, PlayerGroupAll());
}

void libUIUI_gf_ShowHideObjectiveUI (bool lp_showHide, playergroup lp_forPlayers) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto7A190B8C_g;

    // Variable Initialization

    // Implementation
    DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicMainPanel, lp_forPlayers, lp_showHide);
    auto7A190B8C_g = lp_forPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto7A190B8C_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if (((DialogControlIsVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicMainPanel, lv_itPlayer) == true) || (DialogControlIsVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicActivePanel, lv_itPlayer) == true))) {
            libUIUI_gf_ActivateDeactivateTopChevron(true, libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        }
        else {
            libUIUI_gf_ActivateDeactivateTopChevron(false, libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        }
    }
}

void libUIUI_gf_ShowHideObjectiveUIImage (bool lp_showHide, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicImage, lp_forPlayers, lp_showHide);
}

void libUIUI_gf_ShowHideObjectiveUILabel (bool lp_showHide, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicLabel, lp_forPlayers, lp_showHide);
}

void libUIUI_gf_ShowHideObjectiveUITeamPanel (bool lp_showHide, int lp_team, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamPanel[lp_team], lp_forPlayers, lp_showHide);
}

void libUIUI_gf_ShowHideObjectiveUITeamLabel (bool lp_showHide, int lp_team, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamLabel[lp_team], lp_forPlayers, lp_showHide);
}

void libUIUI_gf_ShowHideObjectiveUITeamImage (bool lp_showHide, int lp_team, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamImages[lp_team][1], lp_forPlayers, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamImages[lp_team][2], lp_forPlayers, lp_showHide);
}

void libUIUI_gf_ActivateDeactivateTopChevron (bool lp_activateDeactivate, playergroup lp_forPlayers) {
    // Variable Declarations
    int lv_itTeam;

    // Automatic Variable Declarations
    const int autoDCB927B3_ae = libCore_gv_bALMaxTeams;
    const int autoDCB927B3_ai = 1;
    const int auto2C93D14F_ae = libCore_gv_bALMaxTeams;
    const int auto2C93D14F_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_activateDeactivate == true)) {
        DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_topChevron, lp_forPlayers, true);
        DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_topChevronEmpty, lp_forPlayers, false);
        lv_itTeam = 1;
        for ( ; ( (auto2C93D14F_ai >= 0 && lv_itTeam <= auto2C93D14F_ae) || (auto2C93D14F_ai < 0 && lv_itTeam >= auto2C93D14F_ae) ) ; lv_itTeam += auto2C93D14F_ai ) {
            DialogControlSetSize(libUIUI_gv_teamStatusPanel.lv_teamColorBar[lv_itTeam], lp_forPlayers, 133, 12);
        }
    }
    else {
        DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_topChevron, lp_forPlayers, false);
        DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_topChevronEmpty, lp_forPlayers, true);
        lv_itTeam = 1;
        for ( ; ( (autoDCB927B3_ai >= 0 && lv_itTeam <= autoDCB927B3_ae) || (autoDCB927B3_ai < 0 && lv_itTeam >= autoDCB927B3_ae) ) ; lv_itTeam += autoDCB927B3_ai ) {
            DialogControlSetSize(libUIUI_gv_teamStatusPanel.lv_teamColorBar[lv_itTeam], lp_forPlayers, 193, 12);
        }
    }
}

void libUIUI_gf_SetObjectiveUITip (text lp_title, text lp_tip, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_UIUI_C57E02C8", "A", lp_title);
    TextExpressionSetToken("Param/Expression/lib_UIUI_C57E02C8", "B", lp_tip);
    libNtve_gf_SetDialogItemTooltip(libUIUI_gv_teamStatusPanel.lv_mapMechanicImageTooltipFrame, TextExpressionAssemble("Param/Expression/lib_UIUI_C57E02C8"), lp_forPlayers);
    TextExpressionSetToken("Param/Expression/lib_UIUI_4284E130", "A", lp_title);
    TextExpressionSetToken("Param/Expression/lib_UIUI_4284E130", "B", lp_tip);
    libNtve_gf_SetDialogItemTooltip(libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveImageTooltipFrame, TextExpressionAssemble("Param/Expression/lib_UIUI_4284E130"), lp_forPlayers);
}

void libUIUI_gf_SetObjectiveUIImage (string lp_image, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemImage(libUIUI_gv_teamStatusPanel.lv_mapMechanicImage, lp_image, lp_forPlayers);
}

void libUIUI_gf_SetObjectiveUILabel (text lp_value) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_teamStatusPanel.lv_mapMechanicLabel, lp_value, PlayerGroupAll());
}

void libUIUI_gf_SetObjectiveUITeamLabels (text lp_team1Value, text lp_team2Value) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamLabel[1], lp_team1Value, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamLabel[2], lp_team2Value, PlayerGroupAll());
}

void libUIUI_gf_SetObjectiveUITeamImages (int lp_team, int lp_index, string lp_image, playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemImage(libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamImages[lp_team][lp_index], lp_image, lp_players);
}

void libUIUI_gf_SetObjectiveUITeamTooltips (text lp_allyTooltip, text lp_enemyTooltip, text lp_team1ObserverTooltip, text lp_team2ObserverTooltip) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemTooltip(libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamLabelTooltipFrame[1], lp_allyTooltip, libGame_gf_PlayersOnTeamHeroes(1, false));
    libNtve_gf_SetDialogItemTooltip(libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamLabelTooltipFrame[2], lp_enemyTooltip, libGame_gf_PlayersOnTeamHeroes(1, false));
    libNtve_gf_SetDialogItemTooltip(libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamLabelTooltipFrame[1], lp_enemyTooltip, libGame_gf_PlayersOnTeamHeroes(2, false));
    libNtve_gf_SetDialogItemTooltip(libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamLabelTooltipFrame[2], lp_allyTooltip, libGame_gf_PlayersOnTeamHeroes(2, false));
    libNtve_gf_SetDialogItemTooltip(libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamLabelTooltipFrame[1], lp_team1ObserverTooltip, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libNtve_gf_SetDialogItemTooltip(libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamLabelTooltipFrame[2], lp_team2ObserverTooltip, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
}

void libUIUI_gf_ShowHideObjectiveActiveUI (bool lp_showHide, playergroup lp_forPlayers) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoE0D58D0C_g;

    // Variable Initialization

    // Implementation
    DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicActivePanel, lp_forPlayers, lp_showHide);
    autoE0D58D0C_g = lp_forPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoE0D58D0C_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if (((DialogControlIsVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicMainPanel, lv_itPlayer) == true) || (DialogControlIsVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicActivePanel, lv_itPlayer) == true))) {
            libUIUI_gf_ActivateDeactivateTopChevron(true, libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        }
        else {
            libUIUI_gf_ActivateDeactivateTopChevron(false, libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        }
    }
}

void libUIUI_gf_ShowHideObjectiveActiveUILabel (bool lp_showHide, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveLabel, lp_forPlayers, lp_showHide);
}

void libUIUI_gf_ShowHideObjectiveActiveUIImage (bool lp_showHide, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveImage, lp_forPlayers, lp_showHide);
}

void libUIUI_gf_ShowHideObjectiveActiveUITeamPanel (bool lp_showHide, int lp_team, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamPanel[lp_team], lp_forPlayers, lp_showHide);
}

void libUIUI_gf_ShowHideObjectiveActiveUITeamImage (bool lp_showHide, int lp_team, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamImage[lp_team], lp_forPlayers, lp_showHide);
}

void libUIUI_gf_ShowHideObjectiveActiveUITeamLabel (bool lp_showHide, int lp_team, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamLabel[lp_team], lp_forPlayers, lp_showHide);
}

void libUIUI_gf_ShowHideObjectiveActiveUITeamSubLabel (bool lp_showHide, int lp_team, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamSubLabel[lp_team], lp_forPlayers, lp_showHide);
}

void libUIUI_gf_ShowHideObjectiveActiveUITeamHPBar (bool lp_showHide, int lp_team, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamHPBar[lp_team], lp_forPlayers, lp_showHide);
}

void libUIUI_gf_SetObjectiveActiveUIImage (string lp_image, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemImage(libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveImage, lp_image, lp_forPlayers);
}

void libUIUI_gf_SetObjectiveActiveUILabel (text lp_label, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveLabel, lp_label, lp_forPlayers);
}

void libUIUI_gf_SetObjectiveActiveUITip (text lp_title, text lp_tip, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_UIUI_161DD942", "A", lp_title);
    TextExpressionSetToken("Param/Expression/lib_UIUI_161DD942", "B", lp_tip);
    libNtve_gf_SetDialogItemTooltip(libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveImageTooltipFrame, TextExpressionAssemble("Param/Expression/lib_UIUI_161DD942"), lp_forPlayers);
}

void libUIUI_gf_SetObjectiveActiveUITeamImage (int lp_team, string lp_image, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemImage(libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamImage[lp_team], lp_image, lp_forPlayers);
}

void libUIUI_gf_SetObjectiveActiveUITeamLabel (int lp_team, text lp_value, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamLabel[lp_team], lp_value, lp_forPlayers);
}

void libUIUI_gf_SetObjectiveActiveUITeamSubLabel (int lp_team, text lp_value, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamSubLabel[lp_team], lp_value, lp_forPlayers);
}

void libUIUI_gf_SetObjectiveActiveUITeamHPBarUnit (int lp_team, unit lp_unit, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamHPBar[lp_team], lp_unit, lp_forPlayers);
}

void libUIUI_gf_SetObjectiveActiveUITeamHPBarText (int lp_team, text lp_value, playergroup lp_forPlayers) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamHPBarLabel[lp_team], lp_value, lp_forPlayers);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: UI - Top Panel Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UITopPanelInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_itPortrait;
    int lv_itTeam;
    int[11] lv_panels;
    int lv_currentPanelLayer;
    int lv_player;
    timer lv_timer;
    int lv_int;

    // Automatic Variable Declarations
    const int autoF112A4DA_ae = libCore_gv_bALMaxTeams;
    const int autoF112A4DA_ai = 1;
    const int auto949E90A4_ae = libCore_gv_bALMaxPlayersOnATeam;
    const int auto949E90A4_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }
    lv_timer = TimerCreate();
    lv_int = 10;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/PartyFramePanel");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_uITopPanel.lv_mainDialog = DialogControlLastCreated();
    lv_itTeam = 1;
    for ( ; ( (autoF112A4DA_ai >= 0 && lv_itTeam <= autoF112A4DA_ae) || (autoF112A4DA_ai < 0 && lv_itTeam >= autoF112A4DA_ae) ) ; lv_itTeam += autoF112A4DA_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "Team" + IntToString(lv_itTeam) + "HeroOverview");
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        libUIUI_gv_uITopPanel.lv_portraits_Panel[lv_itTeam] = DialogControlLastCreated();
        lv_itPortrait = 1;
        for ( ; ( (auto949E90A4_ai >= 0 && lv_itPortrait <= auto949E90A4_ae) || (auto949E90A4_ai < 0 && lv_itPortrait >= auto949E90A4_ae) ) ; lv_itPortrait += auto949E90A4_ai ) {
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HeroOverview" + IntToString(lv_itPortrait));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            lv_currentPanelLayer += 1;
            lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
            libUIUI_gv_uITopPanel.lv_portraits_Frame[lv_itPortrait][lv_itTeam] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HeroPortraitImage");
            libUIUI_gv_uITopPanel.lv_portraits_Image[lv_itPortrait][lv_itTeam] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrame");
            libUIUI_gv_uITopPanel.lv_statusFrameHealthAndMana[lv_itPortrait][lv_itTeam][libUIUI_ge_UITopPanelUnitStatusFrame_Default] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrameNoResource");
            libUIUI_gv_uITopPanel.lv_statusFrameHealthAndMana[lv_itPortrait][lv_itTeam][libUIUI_ge_UITopPanelUnitStatusFrame_NoResource] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrameSeparateShields");
            libUIUI_gv_uITopPanel.lv_statusFrameHealthAndMana[lv_itPortrait][lv_itTeam][libUIUI_ge_UITopPanelUnitStatusFrame_SeparateShields] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrameYellowEnergy");
            libUIUI_gv_uITopPanel.lv_statusFrameHealthAndMana[lv_itPortrait][lv_itTeam][libUIUI_ge_UITopPanelUnitStatusFrame_YellowEnergy] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrameOrangeEnergy");
            libUIUI_gv_uITopPanel.lv_statusFrameHealthAndMana[lv_itPortrait][lv_itTeam][libUIUI_ge_UITopPanelUnitStatusFrame_OrangeEnergy] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFramePinkEnergy");
            libUIUI_gv_uITopPanel.lv_statusFrameHealthAndMana[lv_itPortrait][lv_itTeam][libUIUI_ge_UITopPanelUnitStatusFrame_PinkEnergy] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HeroDeathOverlayFrame");
            libUIUI_gv_uITopPanel.lv_portraits_DeathImage[lv_itPortrait][lv_itTeam] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HeroDeathTimeLabel");
            libUIUI_gv_uITopPanel.lv_portraits_DeathTimeLabel[lv_itPortrait][lv_itTeam] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HeroicTalentPanel");
            lv_currentPanelLayer += 1;
            lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
            libUIUI_gv_uITopPanel.lv_heroic_Panel[lv_itPortrait][lv_itTeam] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HeroicTalentImage");
            libUIUI_gv_uITopPanel.lv_heroic_AbilityImage[lv_itPortrait][lv_itTeam] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HeroicTalentCooldownLabel");
            libUIUI_gv_uITopPanel.lv_heroic_CDLabel[lv_itPortrait][lv_itTeam] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HeroicTalentFrame_Ready");
            libUIUI_gv_uITopPanel.lv_heroic_ReadyImage[lv_itPortrait][lv_itTeam] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeProgressBar, "HeroicTalentChargeFillProgress");
            libUIUI_gv_uITopPanel.lv_heroic_ProgressBar[lv_itPortrait][lv_itTeam] = DialogControlLastCreated();
            lv_currentPanelLayer -= 1;
            lv_currentPanelLayer -= 1;
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HeroHearthAnim" + IntToString(lv_itPortrait));
            libUIUI_gv_uITopPanel.lv_portraits_HearthAnim[lv_itPortrait][lv_itTeam] = DialogControlLastCreated();
        }
        lv_currentPanelLayer -= 1;
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "Team" + IntToString(lv_itTeam) + "LevelInfo");
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        libUIUI_gv_uITopPanel.lv_team_LevelInfo[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TeamLevelLabel");
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "PartyFrame_TeamLevel_Blue", libGame_gv_teams[lv_itTeam].lv_teamPlayerGroup);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "PartyFrame_TeamLevel_Red", libGame_gv_teams[libGame_gf_EnemyTeamNumberOfTeam(lv_itTeam)].lv_teamPlayerGroup);
        libUIUI_gv_uITopPanel.lv_team_Level[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "TeamXPUnitStatusFrame");
        libUIUI_gv_uITopPanel.lv_team_ExpProgressBar[lv_itTeam] = DialogControlLastCreated();
        lv_currentPanelLayer -= 1;
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "Team" + IntToString(lv_itTeam) + "CoreUnitStatus");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        libUIUI_gv_uITopPanel.lv_statusFrameCore[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "CoreInvulnerableLabelFrame");
        libUIUI_gv_uITopPanel.lv_statusFrameCoreInvulnerable[lv_itTeam] = DialogControlLastCreated();
        lv_currentPanelLayer -= 1;
    }
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "GameTimerLabel");
    libUIUI_gv_uITopPanel.lv_timer = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UITopPanelInitialize_Init () {
    libUIUI_gt_UITopPanelInitialize = TriggerCreate("libUIUI_gt_UITopPanelInitialize_Func");
    TriggerAddEventMapInit(libUIUI_gt_UITopPanelInitialize);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Top Panel - BGS Timer
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UITopPanelBGSTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(libUIUI_gv_uITopPanel.lv_timer, (StringExternal("Param/Value/lib_UIUI_1B1842C5") + TextTimeFormat(StringToText("<min2/>:<sec2/>"), (FixedToInt(TimerGetRemaining(libCore_gv_timerBeforeGameStart)) + 1))), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UITopPanelBGSTimer_Init () {
    libUIUI_gt_UITopPanelBGSTimer = TriggerCreate("libUIUI_gt_UITopPanelBGSTimer_Func");
    TriggerEnable(libUIUI_gt_UITopPanelBGSTimer, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_UITopPanelBGSTimer, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Top Panel - Game Timer
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UITopPanelGameTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(libUIUI_gv_uITopPanel.lv_timer, TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetElapsed(libCore_gv_gameTimer))), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UITopPanelGameTimer_Init () {
    libUIUI_gt_UITopPanelGameTimer = TriggerCreate("libUIUI_gt_UITopPanelGameTimer_Func");
    TriggerEnable(libUIUI_gt_UITopPanelGameTimer, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_UITopPanelGameTimer, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Top Panel - Heroic Ability State Changed
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UITopPanelHeroicAbilityStateChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_team;
    int lv_playerSlot;
    int lv_itPlayer;
    int lv_heroIndex;
    int lv_heroicAbilityIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    lv_team = libGame_gf_PlayerGetPlayerTeam(lv_player);
    lv_playerSlot = libGame_gv_players[lv_player].lv_playerAllySlot;
    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
        lv_heroIndex = libCore_gf_CommandersGetHeroIndexOfPlayerHero(lv_player);
        lv_heroicAbilityIndex = libCore_gf_HeroicAbilityIndexOfHero(lv_heroIndex);
        libUIUI_gv_uITopPanelHeroicAbilityCooldownLink[lv_player] = CatalogFieldValueGet(c_gameCatalogAbil, libCore_gv_heroData[lv_heroIndex].lv_abilitiesData[lv_heroicAbilityIndex].lv_abilityLink, "Cost[" + IntToString(0) + "].Cooldown.Link", c_playerAny);
        DialogControlSetVisible(libUIUI_gv_uITopPanel.lv_heroic_Panel[lv_playerSlot][lv_team], PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemImage(libUIUI_gv_uITopPanel.lv_heroic_AbilityImage[lv_playerSlot][lv_team], libCore_gv_heroData[lv_heroIndex].lv_abilitiesData[lv_heroicAbilityIndex].lv_abilityIcon, PlayerGroupAll());
        if ((TriggerIsEnabled(libUIUI_gt_UITopPanelUpdateHeroicAbilityCDs) == false)) {
            TriggerEnable(libUIUI_gt_UITopPanelUpdateHeroicAbilityCDs, true);
        }
    }
    else {
        DialogControlSetVisible(libUIUI_gv_uITopPanel.lv_heroic_Panel[lv_playerSlot][lv_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_uITopPanel.lv_heroic_ReadyImage[lv_playerSlot][lv_team], PlayerGroupAll(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UITopPanelHeroicAbilityStateChanged_Init () {
    libUIUI_gt_UITopPanelHeroicAbilityStateChanged = TriggerCreate("libUIUI_gt_UITopPanelHeroicAbilityStateChanged_Func");
    TriggerAddEventUnitBehaviorChange(libUIUI_gt_UITopPanelHeroicAbilityStateChanged, null, "HeroicAbilityUnlocked", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(libUIUI_gt_UITopPanelHeroicAbilityStateChanged, null, "HeroicAbilityUnlocked", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Top Panel - Update Heroic Ability CDs
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UITopPanelUpdateHeroicAbilityCDs_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_heroIndex;
    int lv_heroicAbilityIndex;
    int lv_team;
    int lv_playerSlot;
    playergroup lv_bothTeams;

    // Automatic Variable Declarations
    playergroup auto2FF5F9CE_g;
    playergroup auto55C86091_g;

    // Variable Initialization
    lv_bothTeams = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_bothTeams = libNtve_gf_UnionOfPlayerGroups(libGame_gf_PlayersOnTeamHeroes(1, false), libGame_gf_PlayersOnTeamHeroes(2, false));
    auto2FF5F9CE_g = lv_bothTeams;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto2FF5F9CE_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((UnitHasBehavior2(libGame_gv_players[lv_itPlayer].lv_heroUnit, "HeroicAbilityUnlocked") == true)) {
            lv_heroIndex = libCore_gf_CommandersGetHeroIndexOfPlayerHero(lv_itPlayer);
            lv_heroicAbilityIndex = libCore_gf_HeroicAbilityIndexOfHero(lv_heroIndex);
            lv_team = libGame_gf_PlayerGetPlayerTeam(lv_itPlayer);
            lv_playerSlot = libGame_gv_players[lv_itPlayer].lv_playerAllySlot;
            if ((UnitGetCooldown(libGame_gv_players[lv_itPlayer].lv_heroUnit, libUIUI_gv_uITopPanelHeroicAbilityCooldownLink[lv_itPlayer]) > 0.0)) {
                DialogControlSetVisible(libUIUI_gv_uITopPanel.lv_heroic_ReadyImage[lv_playerSlot][lv_team], libGame_gf_PlayersOnTeamHeroes(lv_team, false), false);
                DialogControlSetVisible(libUIUI_gv_uITopPanel.lv_heroic_CDLabel[lv_playerSlot][lv_team], libGame_gf_PlayersOnTeamHeroes(lv_team, false), true);
                libNtve_gf_SetDialogItemText(libUIUI_gv_uITopPanel.lv_heroic_CDLabel[lv_playerSlot][lv_team], FixedToText(UnitGetCooldown(libGame_gf_PlayerHeroUnit(lv_itPlayer), libUIUI_gv_uITopPanelHeroicAbilityCooldownLink[lv_itPlayer]), 0), libGame_gf_PlayersOnTeamHeroes(lv_team, false));
            }
            else {
                DialogControlSetVisible(libUIUI_gv_uITopPanel.lv_heroic_CDLabel[lv_playerSlot][lv_team], libGame_gf_PlayersOnTeamHeroes(lv_team, false), false);
                DialogControlSetVisible(libUIUI_gv_uITopPanel.lv_heroic_ReadyImage[lv_playerSlot][lv_team], libGame_gf_PlayersOnTeamHeroes(lv_team, false), true);
            }
        }
    }
    auto55C86091_g = lv_bothTeams;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto55C86091_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((UnitHasBehavior2(libGame_gv_players[lv_itPlayer].lv_heroUnit, "HeroicAbilityUnlocked") == true)) {
            TriggerEnable(TriggerGetCurrent(), true);
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UITopPanelUpdateHeroicAbilityCDs_Init () {
    libUIUI_gt_UITopPanelUpdateHeroicAbilityCDs = TriggerCreate("libUIUI_gt_UITopPanelUpdateHeroicAbilityCDs_Func");
    TriggerEnable(libUIUI_gt_UITopPanelUpdateHeroicAbilityCDs, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_UITopPanelUpdateHeroicAbilityCDs, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - MyTalentsPanel - Highlight Tiers
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIMyTalentsPanelHighlightTiers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itTier;

    // Automatic Variable Declarations
    int auto5FD169C7_ae;
    const int auto67B39D2A_ae = 1;
    const int auto67B39D2A_ai = -1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto5FD169C7_ae = libCore_gv_bALMaxPlayers;
    lv_itPlayer = 1;
    for ( ; lv_itPlayer <= auto5FD169C7_ae ; lv_itPlayer += 1 ) {
        if ((PlayerStatus(lv_itPlayer) != c_playerStatusActive) && (PlayerType(lv_itPlayer) != c_playerTypeUser)) {
            continue;
        }

        if (((GameGetMissionTime() - libUIUI_gv_uIMyTalentsPanelLastHighlightTiersTime[lv_itPlayer]) < 1.4)) {
            continue;
        }
        else {
            libUIUI_gv_uIMyTalentsPanelLastHighlightTiersTime[lv_itPlayer] = GameGetMissionTime();
        }
        lv_itTier = libGame_gv_players[lv_itPlayer].lv_talentsCurrentMaxTier;
        for ( ; ( (auto67B39D2A_ai >= 0 && lv_itTier <= auto67B39D2A_ae) || (auto67B39D2A_ai < 0 && lv_itTier >= auto67B39D2A_ae) ) ; lv_itTier += auto67B39D2A_ai ) {
            if ((libGame_gv_players[lv_itPlayer].lv_eXPPoints >= libCore_gv_talentsTierInfo[lv_itTier].lv_price) && (libGame_gv_players[lv_itPlayer].lv_talentsNumberofPickedTalentsPerTier[lv_itTier] < libCore_gv_heroData[libGame_gv_players[lv_itPlayer].lv_heroIndex].lv_talentsCountPerTier[lv_itTier])) {
                DialogControlAdvanceAnimation(libUIUI_gv_uIMyTalentsPanel.lv_tierSelectionButton[lv_itTier], libCore_gv_playerGroupFromPlayer[lv_itPlayer], "Glow", -1.4);
                DialogControlSendAnimationEvent(libUIUI_gv_uIMyTalentsPanel.lv_tierSelectionButton[lv_itTier], libCore_gv_playerGroupFromPlayer[lv_itPlayer], "ShowGlow");
                libGame_gf_SendEventPlayerCanChooseTalents(lv_itPlayer);
            }

        }
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIMyTalentsPanelHighlightTiers_Init () {
    libUIUI_gt_UIMyTalentsPanelHighlightTiers = TriggerCreate("libUIUI_gt_UIMyTalentsPanelHighlightTiers_Func");
    TriggerEnable(libUIUI_gt_UIMyTalentsPanelHighlightTiers, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_UIMyTalentsPanelHighlightTiers, 0.14, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - MyTalentsPanel Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIMyTalentsPanelInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_itTalentButton;
    int[11] lv_panels;
    int lv_currentPanelLayer;
    int lv_tooltip;

    // Automatic Variable Declarations
    const int autoB77535C2_ae = libCore_gv_dataHeroesMaxTalentsperTier;
    const int autoB77535C2_ai = 1;
    const int autoB635753F_ae = libCore_gv_dataHeroesMaxTalentsTiers;
    int autoB635753F_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }
    lv_tooltip = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/MyTalentsPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gf_UISetDialogItemToSelectedOrObserved(DialogControlLastCreated());
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_uIMyTalentsPanel.lv_talentsPanel = DialogControlLastCreated();
    lv_itTalentButton = 1;
    for ( ; ( (autoB77535C2_ai >= 0 && lv_itTalentButton <= autoB77535C2_ae) || (autoB77535C2_ai < 0 && lv_itTalentButton >= autoB77535C2_ae) ) ; lv_itTalentButton += autoB77535C2_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "TalentsFrame" + IntToString(lv_itTalentButton));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        libUIUI_gv_uIMyTalentsPanel.lv_talentFrames[lv_itTalentButton] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "Button");
        libUIUI_gv_uIMyTalentsPanel.lv_talentButtons[lv_itTalentButton] = DialogControlLastCreated();
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "TalentImage");
        libUIUI_gv_uIMyTalentsPanel.lv_talentIcons[lv_itTalentButton] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TalentName");
        libUIUI_gv_uIMyTalentsPanel.lv_talentName[lv_itTalentButton] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TalentDetails");
        libUIUI_gv_uIMyTalentsPanel.lv_talentDescriptionLabel[lv_itTalentButton] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HotkeyFrame");
        libUIUI_gv_uIMyTalentsPanel.lv_hotkeyFrame[lv_itTalentButton] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HotkeyFrame/HotkeyLabel");
        libUIUI_gv_uIMyTalentsPanel.lv_hotkeyLabel[lv_itTalentButton] = DialogControlLastCreated();
        lv_currentPanelLayer -= 1;
        DialogControlCreateInPanelFromTemplate(libUIUI_gv_uIMyTalentsPanel.lv_talentsPanel, c_triggerControlTypeTooltip, "MyStandardTooltip/HeroSelectionTooltipTemplate");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, lv_panels[lv_currentPanelLayer], c_anchorRight, 0, 0);
        lv_tooltip = DialogControlLastCreated();
        DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "NameLabel");
        libUIUI_gv_uIMyTalentsPanel.lv_tooltipNameLabel[lv_itTalentButton] = DialogControlLastCreated();
        DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "InfoLabel");
        libUIUI_gv_uIMyTalentsPanel.lv_tooltipInfoLabel[lv_itTalentButton] = DialogControlLastCreated();
        DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "DescriptionLabel");
        libUIUI_gv_uIMyTalentsPanel.lv_tooltipDescriptionLabel[lv_itTalentButton] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemCustomTooltip(libUIUI_gv_uIMyTalentsPanel.lv_talentButtons[lv_itTalentButton], lv_tooltip, PlayerGroupAll());
        lv_currentPanelLayer -= 1;
    }
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/TierSelectionPanel");
    lv_currentPanelLayer += 1;
    libUIUI_gv_uIMyTalentsPanel.lv_tierSelectionPanel = DialogControlLastCreated();
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    autoB635753F_var = 1;
    for ( ; autoB635753F_var <= autoB635753F_ae; autoB635753F_var += 1 ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("TierSelectionButton" + IntToString(autoB635753F_var))));
        libUIUI_gv_uIMyTalentsPanel.lv_tierSelectionButton[autoB635753F_var] = DialogControlLastCreated();
    }
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "EXPPointsFrame/EXPPointsLabel");
    libUIUI_gv_uIMyTalentsPanel.lv_talentPointsLabel = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIMyTalentsPanelInitialize_Init () {
    libUIUI_gt_UIMyTalentsPanelInitialize = TriggerCreate("libUIUI_gt_UIMyTalentsPanelInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - MyTalentsPanel - Player Viewing Quick Talents Update
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIMyTalentsPanelPlayerViewingQuickTalentsUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_talentTier;
    int lv_itTalentColumn;
    int lv_heroIndex;
    string lv_talentLink;
    int lv_talentsCounts;

    // Automatic Variable Declarations
    int auto2CBE2E82_ae;
    int auto4D7EA57C_ae;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libUIUI_gv_uIMyTalentsPanelNumberofViewingQuickTalentsPlayers >= 1)) {
        auto2CBE2E82_ae = libCore_gv_bALMaxPlayers;
        lv_itPlayer = 1;
        for ( ; lv_itPlayer <= auto2CBE2E82_ae ; lv_itPlayer += 1 ) {
            if ((PlayerStatus(lv_itPlayer) == c_playerStatusActive) && (PlayerType(lv_itPlayer) == c_playerTypeUser) && (libUIUI_gv_uIMyTalentsPanelPlayerViewingQuickTalents[lv_itPlayer] == true)) {
                lv_heroIndex = libCore_gf_CommandersGetHeroIndexOfPlayerHero(lv_itPlayer);
                lv_talentTier = libUIUI_gv_uIMyTalentsPanelPlayerViewingQuickTalentsTier[lv_itPlayer];
                lv_talentsCounts = libCore_gv_heroData[lv_heroIndex].lv_talentsCountPerTier[lv_talentTier];
                auto4D7EA57C_ae = libCore_gv_dataHeroesMaxTalentsperTier;
                lv_itTalentColumn = 1;
                for ( ; lv_itTalentColumn <= auto4D7EA57C_ae ; lv_itTalentColumn += 1 ) {
                    lv_talentLink = libCore_gv_heroData[lv_heroIndex].lv_talentsData[lv_talentTier][lv_itTalentColumn].lv_talentLink;
                    if ((lv_talentLink != null)) {
                        if (((PlayerHasTalent(lv_itPlayer, lv_talentLink) == true) || (libGame_gv_players[lv_itPlayer].lv_eXPPoints < libCore_gv_talentsTierInfo[lv_talentTier].lv_price) || (libGame_gv_players[lv_itPlayer].lv_talentsNumberofPickedTalentsPerTier[lv_talentTier] == libCore_gv_talentsTierInfo[lv_talentTier].lv_maximumAvailiableTalents) || (libGame_gv_players[lv_itPlayer].lv_talentsCurrentMaxTier < lv_talentTier))) {
                            DialogControlSetEnabled(libUIUI_gv_uIMyTalentsPanel.lv_talentButtons[lv_itTalentColumn], libCore_gv_playerGroupFromPlayer[lv_itPlayer], false);
                        }
                        else {
                            DialogControlSetEnabled(libUIUI_gv_uIMyTalentsPanel.lv_talentButtons[lv_itTalentColumn], libCore_gv_playerGroupFromPlayer[lv_itPlayer], true);
                        }
                    }
                }
            }

        }
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIMyTalentsPanelPlayerViewingQuickTalentsUpdate_Init () {
    libUIUI_gt_UIMyTalentsPanelPlayerViewingQuickTalentsUpdate = TriggerCreate("libUIUI_gt_UIMyTalentsPanelPlayerViewingQuickTalentsUpdate_Func");
    TriggerEnable(libUIUI_gt_UIMyTalentsPanelPlayerViewingQuickTalentsUpdate, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_UIMyTalentsPanelPlayerViewingQuickTalentsUpdate, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - PropertyFramePanel Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIPropertyFramePanelInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[3] lv_panels;
    int lv_currentPanelLayer;
    int lv_tooltip;
    int lv_itPropertyFrame;

    // Automatic Variable Declarations
    const int auto29526BED_ae = libUIUI_gv_uIMyPropertyPanelUnitProperty;
    const int auto29526BED_ai = 1;
    int auto6152CA43_val;

    // Variable Initialization
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }
    lv_tooltip = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/PropertyFramePanel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_uIMyPropertyPanel.lv_mainPanel = DialogControlLastCreated();
    lv_itPropertyFrame = 1;
    for ( ; ( (auto29526BED_ai >= 0 && lv_itPropertyFrame <= auto29526BED_ae) || (auto29526BED_ai < 0 && lv_itPropertyFrame >= auto29526BED_ae) ) ; lv_itPropertyFrame += auto29526BED_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "PropertyFrame" + IntToString(lv_itPropertyFrame));
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TextLabel");
        auto6152CA43_val = lv_itPropertyFrame;
        if (auto6152CA43_val == libUIUI_ge_UIMyPropertyPanelPropertyType_AttackDamage) {
            libUIUI_gv_uIMyPropertyPanel.lv_attackDamage = DialogControlLastCreated();
        }
        else if (auto6152CA43_val == libUIUI_ge_UIMyPropertyPanelPropertyType_AttackSpeed) {
            libUIUI_gv_uIMyPropertyPanel.lv_attackSpeed = DialogControlLastCreated();
        }
        else if (auto6152CA43_val == libUIUI_ge_UIMyPropertyPanelPropertyType_AttackRange) {
            libUIUI_gv_uIMyPropertyPanel.lv_attackRange = DialogControlLastCreated();
        }
        else if (auto6152CA43_val == libUIUI_ge_UIMyPropertyPanelPropertyType_MoveSpeed) {
            libUIUI_gv_uIMyPropertyPanel.lv_moveSpeed = DialogControlLastCreated();
        }
        else if (auto6152CA43_val == libUIUI_ge_UIMyPropertyPanelPropertyType_PowerKinetic) {
            libUIUI_gv_uIMyPropertyPanel.lv_powerKinetic = DialogControlLastCreated();
        }
        else if (auto6152CA43_val == libUIUI_ge_UIMyPropertyPanelPropertyType_PowerEnergetic) {
            libUIUI_gv_uIMyPropertyPanel.lv_powerEnergetic = DialogControlLastCreated();
        }
        else if (auto6152CA43_val == libUIUI_ge_UIMyPropertyPanelPropertyType_PowerStorm) {
            libUIUI_gv_uIMyPropertyPanel.lv_powerStorm = DialogControlLastCreated();
        }
        else if (auto6152CA43_val == libUIUI_ge_UIMyPropertyPanelPropertyType_Dummy8) {
        }
        else if (auto6152CA43_val == libUIUI_ge_UIMyPropertyPanelPropertyType_ArmorKinetic) {
            libUIUI_gv_uIMyPropertyPanel.lv_armorKinetic = DialogControlLastCreated();
        }
        else if (auto6152CA43_val == libUIUI_ge_UIMyPropertyPanelPropertyType_ArmorEnergetic) {
            libUIUI_gv_uIMyPropertyPanel.lv_armorEnergetic = DialogControlLastCreated();
        }
        else if (auto6152CA43_val == libUIUI_ge_UIMyPropertyPanelPropertyType_ArmorStorm) {
            libUIUI_gv_uIMyPropertyPanel.lv_armorStorm = DialogControlLastCreated();
        }
        else if (auto6152CA43_val == libUIUI_ge_UIMyPropertyPanelPropertyType_Dummy12) {
        }
        else {
        }
        DialogControlCreateInPanelFromTemplate(lv_panels[lv_currentPanelLayer], c_triggerControlTypeTooltip, "MyStandardTooltip/HeroSelectionAbilitiesTooltip");
        libNtve_gf_SetDialogItemCustomTooltip(lv_panels[lv_currentPanelLayer], DialogControlLastCreated(), PlayerGroupAll());
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, lv_panels[lv_currentPanelLayer], c_anchorTop, -27, 23);
        lv_tooltip = DialogControlLastCreated();
        DialogControlHookup(lv_tooltip, c_triggerControlTypeLabel, "ItemDescriptionLabel");
        libUIUI_gv_uIMyPropertyPanel.lv_property_Tooltip[lv_itPropertyFrame] = DialogControlLastCreated();
        lv_currentPanelLayer -= 1;
    }
    libUIUI_gf_UIPropertyFramePanelTooltipSetup();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIPropertyFramePanelInitialize_Init () {
    libUIUI_gt_UIPropertyFramePanelInitialize = TriggerCreate("libUIUI_gt_UIPropertyFramePanelInitialize_Func");
    TriggerAddEventMapInit(libUIUI_gt_UIPropertyFramePanelInitialize);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - MyPropertyPanel - Periodic Update
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIMyPropertyPanelPeriodicUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoB3D5A1FE_ae = libCore_gv_bALMaxPlayers;
    int autoB3D5A1FE_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoB3D5A1FE_var = 1;
    for ( ; autoB3D5A1FE_var <= autoB3D5A1FE_ae; autoB3D5A1FE_var += 1 ) {
        if ((libGame_gv_players[autoB3D5A1FE_var].lv_playerisJoinedatStart == true) && (PlayerType(autoB3D5A1FE_var) == c_playerTypeUser) && (PlayerStatus(autoB3D5A1FE_var) == c_playerStatusActive) && (PlayerStatus(autoB3D5A1FE_var) != c_playerStatusUnused)) {
            libUIUI_gf_UIMyPropertyPanelUpdateStatsofUnitforPlayer(libGame_gv_players[autoB3D5A1FE_var].lv_selectedUnit, autoB3D5A1FE_var);
        }

    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIMyPropertyPanelPeriodicUpdate_Init () {
    libUIUI_gt_UIMyPropertyPanelPeriodicUpdate = TriggerCreate("libUIUI_gt_UIMyPropertyPanelPeriodicUpdate_Func");
    TriggerEnable(libUIUI_gt_UIMyPropertyPanelPeriodicUpdate, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_UIMyPropertyPanelPeriodicUpdate, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - MyCustomLeaderBoard - Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIMyCustomLeaderBoardInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[11] lv_panels;
    int lv_currentPanelLayer;
    int lv_sortButtonNumber;
    const int lv_maxSortButtons = 7;
    int lv_playerFrame;
    int lv_currentPlayerFrame;
    int lv_currentTalent;
    int lv_itTalentTier;
    int lv_itTalentColumn;
    int lv_itPrestigeAbilityIndex;

    // Automatic Variable Declarations
    const int autoF3B2BBD3_ae = lv_maxSortButtons;
    const int autoF3B2BBD3_ai = 1;
    int auto97D3A473_val;
    int auto6E002B1B_ae;
    const int auto6E002B1B_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePanel, "Leaderboard");
    libUIUI_gf_UISetDialogItemToSelectedOrObserved(DialogControlLastCreated());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_uIMyCustomLeaderBoard.lv_mainDialog = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HeroLeaderPanelContainer");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "BlueTeamStats/TotalKill/TeamScoreValueLabel");
    libUIUI_gv_uIMyCustomLeaderBoard.lv_teamLabelKillsAlly = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "BlueTeamStats/TeamLevel/HeroLevelLabel");
    libUIUI_gv_uIMyCustomLeaderBoard.lv_teamLabelLevelAlly = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "RedTeamStats/TotalKill/TeamScoreValueLabel");
    libUIUI_gv_uIMyCustomLeaderBoard.lv_teamLabelKillsEnemy = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "RedTeamStats/TeamLevel/HeroLevelLabel");
    libUIUI_gv_uIMyCustomLeaderBoard.lv_teamLabelLevelEnemy = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "TabControl");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "ShowStatsButton");
    libNtve_gf_SetDialogItemToggled(DialogControlLastCreated(), true, PlayerGroupAll());
    libUIUI_gv_uIMyCustomLeaderBoard.lv_showStatsButton = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(DialogControlLastCreated(), c_triggerControlTypeTooltip, "MyStandardTooltip/CommandersStandardTooltip");
    libNtve_gf_SetDialogItemCustomTooltip(libUIUI_gv_uIMyCustomLeaderBoard.lv_showStatsButton, DialogControlLastCreated(), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "ShowTalentsButton");
    libNtve_gf_SetDialogItemToggled(DialogControlLastCreated(), false, PlayerGroupAll());
    libUIUI_gv_uIMyCustomLeaderBoard.lv_showTalentsButton = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "ShowDeathRecapButton");
    libNtve_gf_SetDialogItemToggled(DialogControlLastCreated(), false, PlayerGroupAll());
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_uIMyCustomLeaderBoard.lv_showDeathButton = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "StatsContainerFrame");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_uIMyCustomLeaderBoard.lv_statsContainerFrame = DialogControlLastCreated();
    lv_sortButtonNumber = 0;
    for ( ; ( (autoF3B2BBD3_ai >= 0 && lv_sortButtonNumber <= autoF3B2BBD3_ae) || (autoF3B2BBD3_ai < 0 && lv_sortButtonNumber >= autoF3B2BBD3_ae) ) ; lv_sortButtonNumber += autoF3B2BBD3_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "SortButton" + IntToString(lv_sortButtonNumber));
        auto97D3A473_val = lv_sortButtonNumber;
        if (auto97D3A473_val == libUIUI_ge_UIMyCustomLeaderBoardSortButton_Kills) {
            libUIUI_gv_uIMyCustomLeaderBoard.lv_sortKills = DialogControlLastCreated();
        }
        else if (auto97D3A473_val == libUIUI_ge_UIMyCustomLeaderBoardSortButton_Assists) {
            libUIUI_gv_uIMyCustomLeaderBoard.lv_sortAssists = DialogControlLastCreated();
        }
        else if (auto97D3A473_val == libUIUI_ge_UIMyCustomLeaderBoardSortButton_Deaths) {
            libUIUI_gv_uIMyCustomLeaderBoard.lv_sortDeaths = DialogControlLastCreated();
        }
        else if (auto97D3A473_val == libUIUI_ge_UIMyCustomLeaderBoardSortButton_SiegeDamage) {
            libUIUI_gv_uIMyCustomLeaderBoard.lv_sortSiegeDamage = DialogControlLastCreated();
        }
        else if (auto97D3A473_val == libUIUI_ge_UIMyCustomLeaderBoardSortButton_HeroDamage) {
            libUIUI_gv_uIMyCustomLeaderBoard.lv_sortHeroDamage = DialogControlLastCreated();
        }
        else if (auto97D3A473_val == libUIUI_ge_UIMyCustomLeaderBoardSortButton_HealedandAbsorbed) {
            libUIUI_gv_uIMyCustomLeaderBoard.lv_sortHealedAndAbsorbed = DialogControlLastCreated();
        }
        else if (auto97D3A473_val == libUIUI_ge_UIMyCustomLeaderBoardSortButton_DamageTaken) {
            libUIUI_gv_uIMyCustomLeaderBoard.lv_sortDamageTaken = DialogControlLastCreated();
        }
        else if (auto97D3A473_val == libUIUI_ge_UIMyCustomLeaderBoardSortButton_XPContribution) {
            libUIUI_gv_uIMyCustomLeaderBoard.lv_sortXPContribution = DialogControlLastCreated();
        }
        else {
        }
    }
    lv_currentPanelLayer -= 1;
    auto6E002B1B_ae = (libCore_gv_bALMaxPlayers-1);
    lv_playerFrame = 0;
    for ( ; ( (auto6E002B1B_ai >= 0 && lv_playerFrame <= auto6E002B1B_ae) || (auto6E002B1B_ai < 0 && lv_playerFrame >= auto6E002B1B_ae) ) ; lv_playerFrame += auto6E002B1B_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "PlayerFrame" + IntToString(lv_playerFrame));
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        lv_currentPlayerFrame += 1;
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameMainDialog[lv_currentPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "PlayerHeroIconFrame/HeroIconImage");
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameHeroIconImage[lv_currentPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "PlayerNameFrame/PlayerNameLabel");
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFramePlayerName[lv_currentPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HeroNameFrame/HeroNameLabel");
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameHeroName[lv_currentPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "CarriedMechanicScoreValueFrame/ScoreValueFrame0/Label");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(12345), PlayerGroupAll());
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsGoldLabel[lv_currentPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "CarriedMechanicScoreValueFrame/ScoreValueFrame1/Image");
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsGoldImage[lv_currentPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "StatsContainerFrame");
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        libUIUI_gv_uIMyCustomLeaderBoard.lv_statsContainerFramePlayer[lv_currentPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "SoloKillScoreValueFrame");
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsKillsFrame[lv_currentPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "SoloKillScoreValueFrame/ScoreValueFrame0/Label");
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsKillsLabel[lv_currentPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "AssistsScoreValueFrame");
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsAssistsFrame[lv_currentPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AssistsScoreValueFrame/ScoreValueFrame0/Label");
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsAssistsLabel[lv_currentPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "DeathsScoreValueFrame");
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsDeathsFrame[lv_currentPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DeathsScoreValueFrame/ScoreValueFrame0/Label");
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsDeathsLabel[lv_currentPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "SiegeDamageScoreValueFrame");
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsSiegeDamageFrame[lv_currentPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "SiegeDamageScoreValueFrame/ScoreValueFrame0/Label");
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsSiegeDamageLabel[lv_currentPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HeroDamageScoreValueFrame");
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsHeroDamageFrame[lv_currentPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HeroDamageScoreValueFrame/ScoreValueFrame0/Label");
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsHeroDamageLabel[lv_currentPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HealingScoreValueFrame");
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsHealedandAbsorbedFrame[lv_currentPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HealingScoreValueFrame/ScoreValueFrame0/Label");
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsHealedandAbsorbedLabel[lv_currentPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "DamageTakenScoreValueFrame");
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsDamageTakenFrame[lv_currentPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DamageTakenScoreValueFrame/ScoreValueFrame0/Label");
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsDamageTakenLabel[lv_currentPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "ExperienceScoreValueFrame");
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsXPContributionFrame[lv_currentPlayerFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "ExperienceScoreValueFrame/ScoreValueFrame0/Label");
        libUIUI_gv_uIMyCustomLeaderBoard.lv_playerFrameStatsXPContributionLabel[lv_currentPlayerFrame] = DialogControlLastCreated();
        lv_currentPanelLayer -= 1;
        lv_currentPanelLayer -= 1;
    }
    TriggerExecute(libUIUI_gt_UIMyCustomLeaderBoardTalentsInitializeTalentsFrame, true, true);
    libUIUI_gf_UIMuCustomLeaderBoardPrestigeAbilitiesInitialize(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentsContainerFrame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIMyCustomLeaderBoardInitialize_Init () {
    libUIUI_gt_UIMyCustomLeaderBoardInitialize = TriggerCreate("libUIUI_gt_UIMyCustomLeaderBoardInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - MyCustomLeaderBoard - Update Stats
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIMyCustomLeaderBoardUpdateStats_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_allyTeam;
    int lv_enemyTeam;

    // Automatic Variable Declarations
    int auto84CE8144_ae;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libGame_gf_ScoreValueTrackingTeamScoreValues();
    libUIUI_gf_UIMyCustomLeaderBoardSortingCalculateBestSortingPlayerForBothTeams();
    auto84CE8144_ae = libCore_gv_bALMaxPlayers;
    lv_itPlayer = 1;
    for ( ; lv_itPlayer <= auto84CE8144_ae ; lv_itPlayer += 1 ) {
        if ((libGame_gv_players[lv_itPlayer].lv_playerisJoinedatStart == true) && (PlayerStatus(lv_itPlayer) == c_playerStatusActive) && (PlayerType(lv_itPlayer) == c_playerTypeUser)) {
            libUIUI_gf_UIMyCustomLeaderBoardSortingDoSorting(lv_itPlayer);
            lv_allyTeam = libGame_gf_PlayerGetPlayerTeam(lv_itPlayer);
            lv_enemyTeam = libGame_gf_EnemyTeamNumberOfPlayer(lv_itPlayer);
            libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoard.lv_teamLabelKillsAlly, IntToText(libGame_gv_teams[lv_allyTeam].lv_kills), libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoard.lv_teamLabelKillsEnemy, IntToText(libGame_gv_teams[lv_enemyTeam].lv_kills), libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoard.lv_teamLabelLevelAlly, (StringExternal("UI/Scoreboard/Level") + IntToText(libGame_gv_teams[lv_allyTeam].lv_teamLevel)), libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoard.lv_teamLabelLevelEnemy, (StringExternal("UI/Scoreboard/Level") + IntToText(libGame_gv_teams[lv_enemyTeam].lv_teamLevel)), libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        }

    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIMyCustomLeaderBoardUpdateStats_Init () {
    libUIUI_gt_UIMyCustomLeaderBoardUpdateStats = TriggerCreate("libUIUI_gt_UIMyCustomLeaderBoardUpdateStats_Func");
    TriggerEnable(libUIUI_gt_UIMyCustomLeaderBoardUpdateStats, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_UIMyCustomLeaderBoardUpdateStats, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - MyCustomLeaderBoard - Talents - Initialize Talents Frame
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIMyCustomLeaderBoardTalentsInitializeTalentsFrame_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[11] lv_panels;
    int lv_currentPanelLayer;
    int lv_currentTalent;
    int lv_itTalentTier;
    int lv_itTalentColumn;
    int lv_itHeroSelectionButton;

    // Automatic Variable Declarations
    int autoB8681007_ae;
    int auto76D69700_ae;
    int auto3E7C2A3D_ae;
    int autoAB6AF2AA_ae;

    // Variable Initialization
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "LeaderBoard/HeroLeaderPanelContainer/TabControl/TalentsMagasineFrame");
    libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentsContainerFrame = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    autoB8681007_ae = libCore_gv_dataHeroesMaxTalentsTiers;
    lv_itTalentTier = 1;
    for ( ; lv_itTalentTier <= autoB8681007_ae ; lv_itTalentTier += 1 ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("TierLevelLabel" + IntToString(lv_itTalentTier))));
        libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_tierLabels[lv_itTalentTier] = DialogControlLastCreated();
    }
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HeroNameLabel");
    libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_heroNameLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TalentPointsValueLabel");
    libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentPointsValueLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HeroSelectsTalentsPanel");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    auto76D69700_ae = libCore_gv_bALMaxPlayersOnATeam;
    lv_itHeroSelectionButton = 1;
    for ( ; lv_itHeroSelectionButton <= auto76D69700_ae ; lv_itHeroSelectionButton += 1 ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("HeroSelectTalentsAllyTeam" + IntToString(lv_itHeroSelectionButton))));
        libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_heroSelectionButtonTeamAlly[lv_itHeroSelectionButton] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(("HeroSelectTalentsAllyTeam" + (IntToString(lv_itHeroSelectionButton) + "/HeroImage"))));
        libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_heroSelectionButtonTeamAllyHeroImage[lv_itHeroSelectionButton] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("HeroSelectTalentsEnemyTeam" + IntToString(lv_itHeroSelectionButton))));
        libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_heroSelectionButtonTeamEnemy[lv_itHeroSelectionButton] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(("HeroSelectTalentsEnemyTeam" + (IntToString(lv_itHeroSelectionButton) + "/HeroImage"))));
        libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_heroSelectionButtonTeamEnemyHeroImage[lv_itHeroSelectionButton] = DialogControlLastCreated();
    }
    lv_currentPanelLayer -= 1;
    auto3E7C2A3D_ae = libCore_gv_dataHeroesMaxTalentsTiers;
    lv_itTalentTier = 1;
    for ( ; lv_itTalentTier <= auto3E7C2A3D_ae ; lv_itTalentTier += 1 ) {
        autoAB6AF2AA_ae = libCore_gv_dataHeroesMaxTalentsperTier;
        lv_itTalentColumn = 1;
        for ( ; lv_itTalentColumn <= autoAB6AF2AA_ae ; lv_itTalentColumn += 1 ) {
            lv_currentTalent += 1;
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("TalentFrame" + IntToString(lv_currentTalent))));
            libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentFrame[lv_itTalentTier][lv_itTalentColumn] = DialogControlLastCreated();
            lv_currentPanelLayer += 1;
            lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeProgressBar, "QuestProgressBar");
            libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentQuestProgressBar[lv_itTalentTier][lv_itTalentColumn] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "Button");
            libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentButton[lv_itTalentTier][lv_itTalentColumn] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Button/IconImage");
            libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentButtonImage[lv_itTalentTier][lv_itTalentColumn] = DialogControlLastCreated();
            lv_currentPanelLayer -= 1;
            DialogControlCreateInPanelFromTemplate(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentsContainerFrame, c_triggerControlTypeTooltip, "MyStandardTooltip/HeroTalentsShopTooltipTemplate");
            if ((lv_itTalentTier <= 6)) {
                DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentButton[lv_itTalentTier][lv_itTalentColumn], c_anchorBottomLeft, 0, 0);
            }
            else {
                DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentButton[lv_itTalentTier][lv_itTalentColumn], c_anchorTopLeft, 0, 0);
            }
            libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentButtonTooltip[lv_itTalentTier][lv_itTalentColumn] = DialogControlLastCreated();
            lv_currentPanelLayer += 1;
            lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemCustomTooltip(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentButton[lv_itTalentTier][lv_itTalentColumn], lv_panels[lv_currentPanelLayer], PlayerGroupAll());
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HotkeyFrame");
            libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentTooltipHotkeyFrame[lv_itTalentTier][lv_itTalentColumn] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HotkeyFrame/HotkeyLabel");
            libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentTooltipHotkeyLabel[lv_itTalentTier][lv_itTalentColumn] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "NameLabel");
            libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentTooltipLabelName[lv_itTalentTier][lv_itTalentColumn] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "InfoLabel");
            libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentTooltipLabelInfo[lv_itTalentTier][lv_itTalentColumn] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DescriptionLabel");
            libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentTooltipLabelDescription[lv_itTalentTier][lv_itTalentColumn] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "QuestProgressionLabel");
            libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentTooltipLabelQuestProgression[lv_itTalentTier][lv_itTalentColumn] = DialogControlLastCreated();
            lv_currentPanelLayer -= 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIMyCustomLeaderBoardTalentsInitializeTalentsFrame_Init () {
    libUIUI_gt_UIMyCustomLeaderBoardTalentsInitializeTalentsFrame = TriggerCreate("libUIUI_gt_UIMyCustomLeaderBoardTalentsInitializeTalentsFrame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - MyCustomLeaderBoard - Talents - Update Talents
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIMyCustomLeaderBoardTalentsUpdateTalents_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    int auto40274CC5_ae;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto40274CC5_ae = libCore_gv_bALMaxPlayers;
    lv_itPlayer = 1;
    for ( ; lv_itPlayer <= auto40274CC5_ae ; lv_itPlayer += 1 ) {
        if ((PlayerStatus(lv_itPlayer) == c_playerStatusActive) && (PlayerType(lv_itPlayer) == c_playerTypeUser)) {
            libUIUI_gf_UIMyCustomLeaderBoardTalentsUpdateTalentsBoardforPlayer(lv_itPlayer);
        }

    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIMyCustomLeaderBoardTalentsUpdateTalents_Init () {
    libUIUI_gt_UIMyCustomLeaderBoardTalentsUpdateTalents = TriggerCreate("libUIUI_gt_UIMyCustomLeaderBoardTalentsUpdateTalents_Func");
    TriggerEnable(libUIUI_gt_UIMyCustomLeaderBoardTalentsUpdateTalents, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_UIMyCustomLeaderBoardTalentsUpdateTalents, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - MyCustomLeaderBoard - Prestige Abilities - Set Up Abilities
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIMyCustomLeaderBoardPrestigeAbilitiesSetUpAbilities_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPrestigeAbilityIndex;
    string lv_buttonLink;

    // Automatic Variable Declarations
    int autoE2B4FC7F_ae;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoE2B4FC7F_ae = libCore_gv_dataHeroesMaxPrestigeAbilities;
    lv_itPrestigeAbilityIndex = 1;
    for ( ; lv_itPrestigeAbilityIndex <= autoE2B4FC7F_ae ; lv_itPrestigeAbilityIndex += 1 ) {
        lv_buttonLink = (CatalogFieldValueGet(c_gameCatalogAbil, libCore_gv_heroPrestigeData[lv_itPrestigeAbilityIndex].lv_abilityLink[1], "CmdButtonArray[" + IntToString(0) + "].DefaultButtonFace", c_playerAny));
        libNtve_gf_SetDialogItemImage(libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[lv_itPrestigeAbilityIndex].lv_image, (CatalogFieldValueGet(c_gameCatalogButton, lv_buttonLink, "Icon", c_playerAny)), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[lv_itPrestigeAbilityIndex].lv_tooltipName, StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_buttonLink, "Name", c_playerAny)), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[lv_itPrestigeAbilityIndex].lv_tooltipInfo, StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_buttonLink, "TooltipCooldownOverrideText", c_playerAny)), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[lv_itPrestigeAbilityIndex].lv_tooltipDescription, StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_buttonLink, "Tooltip", c_playerAny)), PlayerGroupAll());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIMyCustomLeaderBoardPrestigeAbilitiesSetUpAbilities_Init () {
    libUIUI_gt_UIMyCustomLeaderBoardPrestigeAbilitiesSetUpAbilities = TriggerCreate("libUIUI_gt_UIMyCustomLeaderBoardPrestigeAbilitiesSetUpAbilities_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_Timer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto1662E47C_ae = libUIUI_gv_uIKillLogMaxLogs;
    int auto1662E47C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto1662E47C_var = 1;
    for ( ; auto1662E47C_var <= auto1662E47C_ae; auto1662E47C_var += 1 ) {
        if ((EventTimer() == libUIUI_gv_uIKillLogLogInfo[auto1662E47C_var].lv_logTimer)) {
            libUIUI_gf_UIKillLogFreeKillLog3D182D0BED187D182D0BED18FD185D0BED187D183D181D0B4D0B5D0BBD0B0D182D18CD0BAD0B0D0BAD183D0B1D0BBD0B8D0B7D0B7D0BED0B2(auto1662E47C_var, true);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_Timer_Init () {
    libUIUI_gt_Timer = TriggerCreate("libUIUI_gt_Timer_Func");
    TriggerAddEventTimer(libUIUI_gt_Timer, libUIUI_gv_uIKillLogLogInfo[1].lv_logTimer);
    TriggerAddEventTimer(libUIUI_gt_Timer, libUIUI_gv_uIKillLogLogInfo[2].lv_logTimer);
    TriggerAddEventTimer(libUIUI_gt_Timer, libUIUI_gv_uIKillLogLogInfo[3].lv_logTimer);
    TriggerAddEventTimer(libUIUI_gt_Timer, libUIUI_gv_uIKillLogLogInfo[4].lv_logTimer);
    TriggerAddEventTimer(libUIUI_gt_Timer, libUIUI_gv_uIKillLogLogInfo[5].lv_logTimer);
    TriggerAddEventTimer(libUIUI_gt_Timer, libUIUI_gv_uIKillLogLogInfo[6].lv_logTimer);
    TriggerAddEventTimer(libUIUI_gt_Timer, libUIUI_gv_uIKillLogLogInfo[7].lv_logTimer);
    TriggerAddEventTimer(libUIUI_gt_Timer, libUIUI_gv_uIKillLogLogInfo[8].lv_logTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - KillLog - Initialization
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIKillLogInitialization_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[4] lv_panels;
    int lv_currentPanelLayer;
    int lv_killLogFrame;
    int lv_deadPlayerFrames;

    // Automatic Variable Declarations
    const int auto9FD71CE4_ae = libUIUI_gv_uIKillLogMaxLogs;
    const int auto9FD71CE4_ai = 1;
    const int auto701D7EC6_ae = libUIUI_gv_uIKillLogDeathPlayersMax;
    const int auto701D7EC6_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePanel, "KillLogPanel");
    libUIUI_gv_uIKillLog.lv_mainPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    lv_killLogFrame = 1;
    for ( ; ( (auto9FD71CE4_ai >= 0 && lv_killLogFrame <= auto9FD71CE4_ae) || (auto9FD71CE4_ai < 0 && lv_killLogFrame >= auto9FD71CE4_ae) ) ; lv_killLogFrame += auto9FD71CE4_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "KillLogFramePanel" + IntToString(lv_killLogFrame));
        libUIUI_gv_uIKillLog.lv_killLogPanel[lv_killLogFrame] = DialogControlLastCreated();
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "KillingPlayer");
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        libUIUI_gv_uIKillLog.lv_killingPlayerFrame[lv_killLogFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "PortraitImage");
        libUIUI_gv_uIKillLog.lv_killingPlayerPortraitImage[lv_killLogFrame] = DialogControlLastCreated();
        lv_currentPanelLayer -= 1;
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "BackgroundCutscene");
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
        DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupAll(), "SetAllyColor");
        libUIUI_gv_uIKillLog.lv_killingPlayerCutsceneFrame[lv_killLogFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "VSImageFrame");
        DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupAll(), "FadeOut");
        libUIUI_gv_uIKillLog.lv_vSImageFrame[lv_killLogFrame] = DialogControlLastCreated();
        lv_deadPlayerFrames = 1;
        for ( ; ( (auto701D7EC6_ai >= 0 && lv_deadPlayerFrames <= auto701D7EC6_ae) || (auto701D7EC6_ai < 0 && lv_deadPlayerFrames >= auto701D7EC6_ae) ) ; lv_deadPlayerFrames += auto701D7EC6_ai ) {
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "DeadPlayer" + IntToString(lv_deadPlayerFrames));
            DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupAll(), "FadeOut");
            libUIUI_gv_uIKillLog.lv_deadPlayerFrame[lv_killLogFrame][lv_deadPlayerFrames] = DialogControlLastCreated();
            lv_currentPanelLayer += 1;
            lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "Strikethrough");
            libUIUI_gv_uIKillLog.lv_deadPlayerStrikethroughFrame[lv_killLogFrame][lv_deadPlayerFrames] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "PortraitImage");
            libUIUI_gv_uIKillLog.lv_deadPlayerPortraitImage[lv_killLogFrame][lv_deadPlayerFrames] = DialogControlLastCreated();
            lv_currentPanelLayer -= 1;
        }
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "QuestFrame");
        DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupAll(), "FadeOut");
        libUIUI_gv_uIKillLog.lv_questFrame[lv_killLogFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "QuestFrame/QuestCompleteIcon/TalentIconImage");
        libUIUI_gv_uIKillLog.lv_questTalentIconImage[lv_killLogFrame] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "QuestFrame/TimeFrame/Label");
        libUIUI_gv_uIKillLog.lv_questTimeLabel[lv_killLogFrame] = DialogControlLastCreated();
        lv_currentPanelLayer -= 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIKillLogInitialization_Init () {
    libUIUI_gt_UIKillLogInitialization = TriggerCreate("libUIUI_gt_UIKillLogInitialization_Func");
    TriggerAddEventMapInit(libUIUI_gt_UIKillLogInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI Initialization
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInitialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libUIUI_gt_HeroSelectionUIInit, true, false);
    TriggerExecute(libUIUI_gt_AnnUIInit, true, false);
    TriggerExecute(libUIUI_gt_UIInitializeHealingFountainsHelpText, true, false);
    TriggerExecute(libUIUI_gt_TeamStatusPanelInitialize, true, false);
    TriggerExecute(libUIUI_gt_UIInitializeGameUIHandles, true, false);
    TriggerExecute(libUIUI_gt_UIInitializeHeroConsole, true, false);
    TriggerExecute(libUIUI_gt_GameOverSplashInitialize, true, false);
    TriggerExecute(libUIUI_gt_HeroConsoleUnitStatusBarsInitialize, true, false);
    TriggerExecute(libUIUI_gt_FullscreenOverlaysInitialize, true, false);
    TriggerExecute(libUIUI_gt_FullscreenOverlaysInitializeRework, true, false);
    TriggerExecute(libUIUI_gt_MapMechanicsPanelInitialize, true, false);
    TriggerExecute(libUIUI_gt_UIMyCustomLeaderBoardPrestigeAbilitiesSetUpAbilities, true, false);
    TriggerExecute(libUIUI_gt_UIInitializeDamageFlashUI, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInitialization_Init () {
    libUIUI_gt_UIInitialization = TriggerCreate("libUIUI_gt_UIInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI Initizalization - Fast UI
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInitizalizationFastUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libUIUI_gt_UIInitializeTargetInfoPanel, true, false);
    TriggerExecute(libUIUI_gt_EncouragementPanelInitialize, true, false);
    TriggerExecute(libUIUI_gt_UIMyTalentsPanelInitialize, true, false);
    TriggerExecute(libUIUI_gt_UIMyCustomLeaderBoardInitialize, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInitizalizationFastUI_Init () {
    libUIUI_gt_UIInitizalizationFastUI = TriggerCreate("libUIUI_gt_UIInitizalizationFastUI_Func");
    TriggerAddEventMapInit(libUIUI_gt_UIInitizalizationFastUI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: [Ann] - UI Init
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_AnnUIInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_width;
    int lv_height;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_width = 1000;
    lv_height = 500;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(lv_width, lv_height, c_anchorTop, 0, -25, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libUIUI_gv_annUI.lv_mainDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_width, lv_height, c_anchorTop, 0, -25, StringExternal("Param/Value/lib_UIUI_7AC4F1BB"), ColorWithAlpha(0,0,0,0), false, 0.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "FCT_Event_General", PlayerGroupAll());
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    libUIUI_gv_annUI.lv_textLabel = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_AnnUIInit_Init () {
    libUIUI_gt_AnnUIInit = TriggerCreate("libUIUI_gt_AnnUIInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Initialize Damage Flash UI
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInitializeDamageFlashUI_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/DamageOverlayImagesPanel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_cOMPUTER_Blue], false);
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_cOMPUTER_Red], false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_uIDamageFlashUI.lv_mainDialog = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "LightDamageSplash");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libUIUI_gv_uIDamageFlashUI.lv_lightSplashImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "IntenseSplash");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libUIUI_gv_uIDamageFlashUI.lv_intenseSplashImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "PersistentLowHealthSplash");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libUIUI_gv_uIDamageFlashUI.lv_lowHealthPersistentImage = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInitializeDamageFlashUI_Init () {
    libUIUI_gt_UIInitializeDamageFlashUI = TriggerCreate("libUIUI_gt_UIInitializeDamageFlashUI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Damage Flash - Trigger Damage Flash
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDamageFlashTriggerDamageFlash_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_currentHP;
    fixed lv_damagePercentage;
    fixed lv_flashOpacity;
    fixed lv_fadeTime;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_flashOpacity = 100.0;
    lv_fadeTime = 0.625;

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameOver == false))) {
            return false;
        }

        if (!((EventUnitDamageAttempted() > 0))) {
            return false;
        }

        if (!((EventPlayer() > 0))) {
            return false;
        }

        if (!((EventPlayer() <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((libGame_gv_players[EventPlayer()].lv_activeVehicle == null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentHP = (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(EventUnit(), c_unitPropShields, c_unitPropCurrent));
    lv_currentHP += 1.0;
    lv_damagePercentage = (EventUnitDamageAmount() / lv_currentHP);
    if ((UnitHasBehavior2(EventUnit(), "SymbioteCasterDummyBehavior") == true)) {
        lv_flashOpacity -= 100.0;
        DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_intenseSplashImage, PlayerGroupSingle(EventPlayer()), 0.0, lv_flashOpacity);
        DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_intenseSplashImage, PlayerGroupSingle(EventPlayer()), lv_fadeTime, 100.0);
    }
    else {
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) > libUIUI_gv_uIDamageFlashLowHPThreshold)) {
            if ((lv_damagePercentage >= 0.1)) {
                lv_flashOpacity -= 30.0;
            }

            if ((lv_damagePercentage >= 0.25)) {
                lv_flashOpacity -= 40.0;
                lv_fadeTime += 0.125;
            }

            if ((lv_damagePercentage >= 0.35)) {
                lv_flashOpacity -= 30.0;
                lv_fadeTime += 0.25;
            }

            DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_lightSplashImage, PlayerGroupSingle(EventPlayer()), 0.0, lv_flashOpacity);
            DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_lightSplashImage, PlayerGroupSingle(EventPlayer()), lv_fadeTime, 100.0);
        }
        else {
            libUIUI_gf_UIDamageFlashStartLowHPSoundAndScreenEffects(EventPlayer());
            if ((lv_damagePercentage >= 0.05)) {
                lv_flashOpacity -= 30.0;
                if ((lv_damagePercentage >= 0.1)) {
                    lv_flashOpacity -= 40.0;
                    lv_fadeTime += 0.125;
                }

                if ((lv_damagePercentage >= 0.2)) {
                    lv_flashOpacity -= 30.0;
                    lv_fadeTime += 0.25;
                }

                DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_intenseSplashImage, PlayerGroupSingle(EventPlayer()), 0.0, lv_flashOpacity);
                DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_intenseSplashImage, PlayerGroupSingle(EventPlayer()), lv_fadeTime, 100.0);
            }
            else {
                lv_flashOpacity -= 60.0;
                DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_lightSplashImage, libCore_gv_playerGroupFromPlayer[EventPlayer()], 0.0, lv_flashOpacity);
                DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_lightSplashImage, libCore_gv_playerGroupFromPlayer[EventPlayer()], lv_fadeTime, 100.0);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDamageFlashTriggerDamageFlash_Init () {
    libUIUI_gt_UIDamageFlashTriggerDamageFlash = TriggerCreate("libUIUI_gt_UIDamageFlashTriggerDamageFlash_Func");
    TriggerAddEventUnitDamaged(libUIUI_gt_UIDamageFlashTriggerDamageFlash, UnitRefFromVariable("libGame_gv_players[1].lv_heroUnit"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libUIUI_gt_UIDamageFlashTriggerDamageFlash, UnitRefFromVariable("libGame_gv_players[2].lv_heroUnit"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libUIUI_gt_UIDamageFlashTriggerDamageFlash, UnitRefFromVariable("libGame_gv_players[3].lv_heroUnit"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libUIUI_gt_UIDamageFlashTriggerDamageFlash, UnitRefFromVariable("libGame_gv_players[4].lv_heroUnit"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libUIUI_gt_UIDamageFlashTriggerDamageFlash, UnitRefFromVariable("libGame_gv_players[5].lv_heroUnit"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libUIUI_gt_UIDamageFlashTriggerDamageFlash, UnitRefFromVariable("libGame_gv_players[6].lv_heroUnit"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libUIUI_gt_UIDamageFlashTriggerDamageFlash, UnitRefFromVariable("libGame_gv_players[7].lv_heroUnit"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libUIUI_gt_UIDamageFlashTriggerDamageFlash, UnitRefFromVariable("libGame_gv_players[8].lv_heroUnit"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libUIUI_gt_UIDamageFlashTriggerDamageFlash, UnitRefFromVariable("libGame_gv_players[9].lv_heroUnit"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libUIUI_gt_UIDamageFlashTriggerDamageFlash, UnitRefFromVariable("libGame_gv_players[10].lv_heroUnit"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Damage Flash - Low HP Sounds Looper
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDamageFlashLowHPSoundsLooper_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    bool lv_triggerInUse;

    // Automatic Variable Declarations
    const int autoC7EF92EB_ae = libCore_gv_bALMaxPlayers;
    const int autoC7EF92EB_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (autoC7EF92EB_ai >= 0 && lv_i <= autoC7EF92EB_ae) || (autoC7EF92EB_ai < 0 && lv_i >= autoC7EF92EB_ae) ) ; lv_i += autoC7EF92EB_ai ) {
        if ((libGame_gv_players[lv_i].lv_lowHPSoundPlaying == true)) {
            if (((libCore_gv_gameOver == true) || (UnitGetPropertyFixed(libGame_gf_PlayerHeroUnit(lv_i), c_unitPropLifePercent, c_unitPropCurrent) > libUIUI_gv_uIDamageFlashLowHPThreshold))) {
                libUIUI_gf_UIDamageFlashStopLowHPSoundAndScreenEffects(lv_i);
            }
            else {
                lv_triggerInUse = true;
            }
        }

    }
    if ((lv_triggerInUse == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDamageFlashLowHPSoundsLooper_Init () {
    libUIUI_gt_UIDamageFlashLowHPSoundsLooper = TriggerCreate("libUIUI_gt_UIDamageFlashLowHPSoundsLooper_Func");
    TriggerEnable(libUIUI_gt_UIDamageFlashLowHPSoundsLooper, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_UIDamageFlashLowHPSoundsLooper, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Death Announcement Panel Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_DeathAnnouncementPanelInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_itTeam;
    int lv_itSlot;
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_DeathAnnouncementPanelInitialize_Init () {
    libUIUI_gt_DeathAnnouncementPanelInitialize = TriggerCreate("libUIUI_gt_DeathAnnouncementPanelInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Encouragement Panel Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_EncouragementPanelInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_itLabel;
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    const int autoCDA65D79_ae = libUIUI_gv_encouragement_MaxNumberOfStatCalloutsDisplayed_C;
    const int autoCDA65D79_ai = 1;
    const int autoDA4B113E_ae = libUIUI_gv_encouragement_MaxNumberOfDeathTipsDisplayed_C;
    const int autoDA4B113E_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/EncouragementPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_encouragement_Panel.lv_mainDialog = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "CloseButton");
    libUIUI_gv_encouragement_Panel.lv_closeButton = DialogControlLastCreated();
    lv_itLabel = 1;
    for ( ; ( (autoCDA65D79_ai >= 0 && lv_itLabel <= autoCDA65D79_ae) || (autoCDA65D79_ai < 0 && lv_itLabel >= autoCDA65D79_ae) ) ; lv_itLabel += autoCDA65D79_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "StatCalloutLabel" + IntToString(lv_itLabel));
        libUIUI_gv_encouragement_Panel.lv_statCalloutLabels[lv_itLabel] = DialogControlLastCreated();
    }
    lv_itLabel = 1;
    for ( ; ( (autoDA4B113E_ai >= 0 && lv_itLabel <= autoDA4B113E_ae) || (autoDA4B113E_ai < 0 && lv_itLabel >= autoDA4B113E_ae) ) ; lv_itLabel += autoDA4B113E_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DeathTipLabel" + IntToString(lv_itLabel));
        libUIUI_gv_encouragement_Panel.lv_deathTipLabels[lv_itLabel] = DialogControlLastCreated();
    }
    if ((((libGame_ge_EncouragementDeathTipsNames_Count) - 1) != libGame_gv_encouragement_NumberOfDeathTips_C)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_UIUI_DA427642"), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_EncouragementPanelInitialize_Init () {
    libUIUI_gt_EncouragementPanelInitialize = TriggerCreate("libUIUI_gt_EncouragementPanelInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Encouragement Panel Close Button Clicked
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_EncouragementPanelCloseButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libUIUI_gv_encouragement_Panel.lv_closeButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_EncouragementShowHidePanelForPlayer(false, EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_EncouragementPanelCloseButtonClicked_Init () {
    libUIUI_gt_EncouragementPanelCloseButtonClicked = TriggerCreate("libUIUI_gt_EncouragementPanelCloseButtonClicked_Func");
    TriggerAddEventDialogControl(libUIUI_gt_EncouragementPanelCloseButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Floating Combat Text New - Kinetic Damage
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIFloatingCombatTextNewKineticDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damageDone;
    fixed lv_vertOffset;
    fixed lv_horizOffset;
    unit lv_damagingUnit;
    fixed lv_leeched;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_leeched = EventUnitDamageVitalsLeeched(c_unitVitalLife);

    // Conditions
    if (testConds) {
        if (!((libGame_gv_players[EventUnitDamageSourcePlayer()].lv_playerisJoinedatStart == true))) {
            return false;
        }

        if (!((EventUnitDamageAttempted() >= 1.0))) {
            return false;
        }

        if (!((EventUnitDamageSourcePlayer() > 0))) {
            return false;
        }

        if (!((EventUnitDamageSourcePlayer() != UnitGetOwner(EventUnit())))) {
            return false;
        }

        if (!((EventUnitDamageSourcePlayer() <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((libCore_gv_dEBUGCombatTextEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gv_players[EventUnitDamageSourcePlayer()].lv_activeVehicle == null)) {
        lv_damagingUnit = libGame_gv_players[EventUnitDamageSourcePlayer()].lv_heroUnit;
    }
    else {
        lv_damagingUnit = libGame_gv_players[EventUnitDamageSourcePlayer()].lv_activeVehicle;
    }
    lv_damageDone = (EventUnitDamageAttemptedVitals() + EventUnitDamageBehaviorShield());
    lv_vertOffset = 2.0;
    lv_horizOffset = RandomFixed(0.0001, 0.2);
    if (((PointGetX(UnitGetPosition(lv_damagingUnit)) - PointGetX(UnitGetPosition(EventUnit()))) > 0.0)) {
        lv_horizOffset *= -1.0;
    }

    libUIUI_gf_UIFloatingCombatTextCreateTextTag2(EventUnitDamageSourcePlayer(), libUIUI_gv_floatingCombatTextMediumDuration, IntToText(FixedToInt(lv_damageDone)), EventUnit(), lv_vertOffset, lv_horizOffset, "FCT_Kinetic_Normal");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIFloatingCombatTextNewKineticDamage_Init () {
    libUIUI_gt_UIFloatingCombatTextNewKineticDamage = TriggerCreate("libUIUI_gt_UIFloatingCombatTextNewKineticDamage_Func");
    TriggerAddEventUnitDamaged(libUIUI_gt_UIFloatingCombatTextNewKineticDamage, null, c_unitDamageTypeRanged, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Floating Combat Text New - Kinetic Damage Blocked
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIFloatingCombatTextNewKineticDamageBlocked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vertOffset;
    fixed lv_horizOffset;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGCombatTextEnabled == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vertOffset = 2.0;
    lv_horizOffset = RandomFixed(0.0001, 0.2);
    libUIUI_gf_UIFloatingCombatTextCreateTextTag2(UnitGetOwner(EventUnit()), libUIUI_gv_floatingCombatTextMediumDuration, StringExternal("Param/Value/lib_UIUI_33F7AC9C"), EventUnitDamageSourceUnit(), lv_vertOffset, lv_horizOffset, "FCT_Kinetic_Normal");
    libUIUI_gf_UIFloatingCombatTextCreateTextTag2(UnitGetOwner(EventUnitDamageSourceUnit()), libUIUI_gv_floatingCombatTextMediumDuration, StringExternal("Param/Value/lib_UIUI_63E49C7D"), EventUnitDamageSourceUnit(), lv_vertOffset, lv_horizOffset, "FCT_Kinetic_Normal");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIFloatingCombatTextNewKineticDamageBlocked_Init () {
    libUIUI_gt_UIFloatingCombatTextNewKineticDamageBlocked = TriggerCreate("libUIUI_gt_UIFloatingCombatTextNewKineticDamageBlocked_Func");
    TriggerAddEventUnitDamaged(libUIUI_gt_UIFloatingCombatTextNewKineticDamageBlocked, null, c_unitDamageTypeAny, c_unitDamageEither, "TalentBuckt_Block_DummyDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Floating Combat Text New - Energetic Damage
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIFloatingCombatTextNewEnergeticDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damageDone;
    fixed lv_vertOffset;
    fixed lv_horizOffset;
    unit lv_damagingUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_players[EventUnitDamageSourcePlayer()].lv_playerisJoinedatStart == true))) {
            return false;
        }

        if (!((EventUnitDamageAttempted() >= 1.0))) {
            return false;
        }

        if (!((EventUnitDamageSourcePlayer() > 0))) {
            return false;
        }

        if (!((EventUnitDamageSourcePlayer() != UnitGetOwner(EventUnit())))) {
            return false;
        }

        if (!((EventUnitDamageSourcePlayer() <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((libCore_gv_dEBUGCombatTextEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gv_players[EventUnitDamageSourcePlayer()].lv_activeVehicle == null)) {
        lv_damagingUnit = libGame_gv_players[EventUnitDamageSourcePlayer()].lv_heroUnit;
    }
    else {
        lv_damagingUnit = libGame_gv_players[EventUnitDamageSourcePlayer()].lv_activeVehicle;
    }
    lv_damageDone = (EventUnitDamageAttemptedVitals() + EventUnitDamageBehaviorShield());
    lv_vertOffset = 2.0;
    lv_horizOffset = RandomFixed(0.0001, 0.2);
    if (((PointGetX(UnitGetPosition(lv_damagingUnit)) - PointGetX(UnitGetPosition(EventUnit()))) > 0.0)) {
        lv_horizOffset *= -1.0;
    }

    libUIUI_gf_UIFloatingCombatTextCreateTextTag2(EventUnitDamageSourcePlayer(), libUIUI_gv_floatingCombatTextMediumDuration, IntToText(FixedToInt(lv_damageDone)), EventUnit(), lv_vertOffset, lv_horizOffset, "FCT_Energetic_Normal");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIFloatingCombatTextNewEnergeticDamage_Init () {
    libUIUI_gt_UIFloatingCombatTextNewEnergeticDamage = TriggerCreate("libUIUI_gt_UIFloatingCombatTextNewEnergeticDamage_Func");
    TriggerAddEventUnitDamaged(libUIUI_gt_UIFloatingCombatTextNewEnergeticDamage, null, c_unitDamageTypeSpell, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Floating Combat Text New - Energetic Damage Blocked
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIFloatingCombatTextNewEnergeticDamageBlocked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vertOffset;
    fixed lv_horizOffset;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGCombatTextEnabled == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vertOffset = 2.0;
    lv_horizOffset = RandomFixed(0.0001, 0.2);
    libUIUI_gf_UIFloatingCombatTextCreateTextTag2(UnitGetOwner(EventUnit()), libUIUI_gv_floatingCombatTextMediumDuration, StringExternal("Param/Value/lib_UIUI_D0FAF9A1"), EventUnitDamageSourceUnit(), lv_vertOffset, lv_horizOffset, "FCT_Energetic_Normal");
    libUIUI_gf_UIFloatingCombatTextCreateTextTag2(UnitGetOwner(EventUnitDamageSourceUnit()), libUIUI_gv_floatingCombatTextMediumDuration, StringExternal("Param/Value/lib_UIUI_6B3DA16A"), EventUnitDamageSourceUnit(), lv_vertOffset, lv_horizOffset, "FCT_Energetic_Normal");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIFloatingCombatTextNewEnergeticDamageBlocked_Init () {
    libUIUI_gt_UIFloatingCombatTextNewEnergeticDamageBlocked = TriggerCreate("libUIUI_gt_UIFloatingCombatTextNewEnergeticDamageBlocked_Func");
    TriggerAddEventUnitDamaged(libUIUI_gt_UIFloatingCombatTextNewEnergeticDamageBlocked, null, c_unitDamageTypeAny, c_unitDamageEither, "TalentBucket_EnergeticBlock_DummyDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Floating Combat Text New - Storm Damage
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIFloatingCombatTextNewStormDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damageDone;
    fixed lv_vertOffset;
    fixed lv_horizOffset;
    unit lv_damagingUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_players[EventUnitDamageSourcePlayer()].lv_playerisJoinedatStart == true))) {
            return false;
        }

        if (!((EventUnitDamageAttempted() >= 1.0))) {
            return false;
        }

        if (!((EventUnitDamageSourcePlayer() > 0))) {
            return false;
        }

        if (!((EventUnitDamageSourcePlayer() != UnitGetOwner(EventUnit())))) {
            return false;
        }

        if (!((EventUnitDamageSourcePlayer() <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((libCore_gv_dEBUGCombatTextEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gv_players[EventUnitDamageSourcePlayer()].lv_activeVehicle == null)) {
        lv_damagingUnit = libGame_gv_players[EventUnitDamageSourcePlayer()].lv_heroUnit;
    }
    else {
        lv_damagingUnit = libGame_gv_players[EventUnitDamageSourcePlayer()].lv_activeVehicle;
    }
    lv_damageDone = (EventUnitDamageAttemptedVitals() + EventUnitDamageBehaviorShield());
    lv_vertOffset = 2.0;
    lv_horizOffset = RandomFixed(0.0001, 0.2);
    if (((PointGetX(UnitGetPosition(lv_damagingUnit)) - PointGetX(UnitGetPosition(EventUnit()))) > 0.0)) {
        lv_horizOffset *= -1.0;
    }

    libUIUI_gf_UIFloatingCombatTextCreateTextTag2(EventUnitDamageSourcePlayer(), libUIUI_gv_floatingCombatTextMediumDuration, IntToText(FixedToInt(lv_damageDone)), EventUnit(), lv_vertOffset, lv_horizOffset, "FCT_Storm_Normal");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIFloatingCombatTextNewStormDamage_Init () {
    libUIUI_gt_UIFloatingCombatTextNewStormDamage = TriggerCreate("libUIUI_gt_UIFloatingCombatTextNewStormDamage_Func");
    TriggerAddEventUnitDamaged(libUIUI_gt_UIFloatingCombatTextNewStormDamage, null, c_unitDamageTypeSplash, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Floating Combat Text New - Heal
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIFloatingCombatTextNewHeal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_impactPlayer;
    unit lv_impactUnit;
    int lv_launchPlayer;
    unit lv_launchUnit;
    fixed lv_amount;
    fixed lv_vertOffset;
    fixed lv_horizOffset;
    playergroup lv_vOGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vOGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libGame_gv_players[EventPlayer()].lv_playerisJoinedatStart == true))) {
            return false;
        }

        if (!((libCore_gv_dEBUGCombatTextEnabled == true))) {
            return false;
        }

        if (!((EventUnitHealEffect() != "HeroGeneric_FountainDrink_CreateHealer_Health"))) {
            return false;
        }

        if (!((EventUnitHealEffect() != "HeroGeneric_RegenGlobePickup_HealthPercentModifier"))) {
            return false;
        }

        if (!((EventUnitHealEffect() != "SafeZone_Ally_RegenerateHealth"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_impactUnit = EventUnit();
    lv_impactPlayer = UnitGetOwner(lv_impactUnit);
    lv_launchUnit = EventUnitHealLaunchUnit();
    lv_launchPlayer = UnitGetOwner(lv_launchUnit);
    lv_amount = EventUnitHealAmount();
    lv_vertOffset = 2.0;
    lv_horizOffset = RandomFixed(-0.4, -0.6);
    if ((lv_amount >= 1.0)) {
        if ((lv_impactPlayer != libCore_gv_cOMPUTER_Blue) && (lv_impactPlayer != libCore_gv_cOMPUTER_Red)) {
            libUIUI_gf_UIFloatingCombatTextCreateTextTag2(lv_launchPlayer, libCore_gv_floatingCombatTextStandardDuration, FixedToText(lv_amount, 0), lv_impactUnit, lv_vertOffset, lv_horizOffset, "FCT_Heal_Normal");
        }

        if ((lv_impactPlayer != lv_launchPlayer) && (lv_launchPlayer != libCore_gv_cOMPUTER_Blue) && (lv_launchPlayer != libCore_gv_cOMPUTER_Red)) {
            libUIUI_gf_UIFloatingCombatTextCreateTextTag2(lv_impactPlayer, libCore_gv_floatingCombatTextStandardDuration, FixedToText(lv_amount, 0), lv_impactUnit, lv_vertOffset, lv_horizOffset, "FCT_Heal_Normal");
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIFloatingCombatTextNewHeal_Init () {
    libUIUI_gt_UIFloatingCombatTextNewHeal = TriggerCreate("libUIUI_gt_UIFloatingCombatTextNewHeal_Func");
    TriggerAddEventUnitHealed(libUIUI_gt_UIFloatingCombatTextNewHeal, null, c_unitVitalLife, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fullscreen Overlays Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_FullscreenOverlaysInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenLowerContainer/FullscreenOverlayImagesPanel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_nPCPlayers, false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_fullscreenOverlaysPanel.lv_mainDialog = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "AbathurSymbioteOverlay");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libUIUI_gv_fullscreenOverlaysPanel.lv_abathurSymbioteOverlay = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "CCOverlay");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libUIUI_gv_fullscreenOverlaysPanel.lv_cCSplashImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "FlashBangOverlay");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libUIUI_gv_fullscreenOverlaysPanel.lv_flashBangImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCutscene, "SpecialOverlayCutscene");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_fullscreenOverlaysPanel.lv_specialOverlay = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCutscene, "DeathOverlayCutscene");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_fullscreenOverlaysPanel.lv_deathOverlay = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_FullscreenOverlaysInitialize_Init () {
    libUIUI_gt_FullscreenOverlaysInitialize = TriggerCreate("libUIUI_gt_FullscreenOverlaysInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fullscreen Overlays Death Overlay Hide Time Expires
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int auto3F2270D2_ae = libCore_gv_bALMaxPlayers;
    const int auto3F2270D2_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 1;
    for ( ; ( (auto3F2270D2_ai >= 0 && lv_itPlayer <= auto3F2270D2_ae) || (auto3F2270D2_ai < 0 && lv_itPlayer >= auto3F2270D2_ae) ) ; lv_itPlayer += auto3F2270D2_ai ) {
        if ((EventTimer() == libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[lv_itPlayer])) {
            DialogControlSetVisible(libUIUI_gv_fullscreenOverlaysPanel.lv_deathOverlay, libCore_gv_playerGroupFromPlayer[lv_itPlayer], false);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires_Init () {
    libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires = TriggerCreate("libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires_Func");
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[1]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[2]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[3]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[4]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[5]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[6]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[7]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[8]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[9]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[10]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fullscreen Overlays Special Overlay Hide Time Expires
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int auto864AA9AA_ae = libCore_gv_bALMaxPlayers;
    const int auto864AA9AA_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 1;
    for ( ; ( (auto864AA9AA_ai >= 0 && lv_itPlayer <= auto864AA9AA_ae) || (auto864AA9AA_ai < 0 && lv_itPlayer >= auto864AA9AA_ae) ) ; lv_itPlayer += auto864AA9AA_ai ) {
        if ((EventTimer() == libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[lv_itPlayer])) {
            DialogControlSetVisible(libUIUI_gv_fullscreenOverlaysPanel.lv_specialOverlay, libCore_gv_playerGroupFromPlayer[lv_itPlayer], false);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires_Init () {
    libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires = TriggerCreate("libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires_Func");
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[1]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[2]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[3]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[4]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[5]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[6]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[7]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[8]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[9]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[10]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fullscreen Overlays Initialize Rework
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_FullscreenOverlaysInitializeRework_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenLowerContainer/FullscreenOverlayImagesPanelRework");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_fullscreenOverlaysPanelRework.lv_mainDialog = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCutscene, "SpecialOverlayCutscene");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_fullscreenOverlaysPanelRework.lv_overlayCutscene = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_FullscreenOverlaysInitializeRework_Init () {
    libUIUI_gt_FullscreenOverlaysInitializeRework = TriggerCreate("libUIUI_gt_FullscreenOverlaysInitializeRework_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Over Splash Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_GameOverSplashInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/GameOverSplash");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_gameOverSplash.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "VictoryBackground");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_gameOverSplash.lv_victoryFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "VictoryBackground/VictoryLabel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_UIUI_184306D1"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_VictoryLabel_Observer", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "DefeatBackground");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_gameOverSplash.lv_defeatFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DefeatBackground/DefeatLabel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_UIUI_51E2F601"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_DefeatLabel_Observer", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libUIUI_gv_gameOverSplash.lv_defeatLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "GameOverLeaveButton");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_gameOverSplash.lv_leaveButton = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_GameOverSplashInitialize_Init () {
    libUIUI_gt_GameOverSplashInitialize = TriggerCreate("libUIUI_gt_GameOverSplashInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Initialize Game UI Handles
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInitializeGameUIHandles_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer");
    libUIUI_gv_uIGameUIHandles.lv_fullscreenUpperContainer = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer");
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
    libUIUI_gv_uIGameUIHandles.lv_consoleUIContainer = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/MinimapPanel");
    libUIUI_gv_uIGameUIHandles.lv_minimapPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/MenuBar/HelpButton");
    libUIUI_gv_uIGameUIHandles.lv_helpButton = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/MenuBar/TalentsButton");
    libUIUI_gv_uIGameUIHandles.lv_talentsButton = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/MenuBar/MenuButton");
    libUIUI_gv_uIGameUIHandles.lv_gameMenuButton = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/MenuBar/PingButton");
    libUIUI_gv_uIGameUIHandles.lv_pingButton = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/MinimapPanel/DisableMinimapCommandsButton");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    libUIUI_gv_uIGameUIHandles.lv_disableMinimapCommandsButton = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/MinimapPanel/EnableMinimapCommandsButton");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_uIGameUIHandles.lv_enableMinimapCommandsButton = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInitializeGameUIHandles_Init () {
    libUIUI_gt_UIInitializeGameUIHandles = TriggerCreate("libUIUI_gt_UIInitializeGameUIHandles_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Game UI - Minimap Commands Button Clicked
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIGameUIMinimapCommandsButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libUIUI_gv_uIGameUIHandles.lv_enableMinimapCommandsButton) || (EventDialogControl() == libUIUI_gv_uIGameUIHandles.lv_disableMinimapCommandsButton)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_UIGameUIToggleMinimapCommandsForPlayer(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIGameUIMinimapCommandsButtonClicked_Init () {
    libUIUI_gt_UIGameUIMinimapCommandsButtonClicked = TriggerCreate("libUIUI_gt_UIGameUIMinimapCommandsButtonClicked_Func");
    TriggerAddEventDialogControl(libUIUI_gt_UIGameUIMinimapCommandsButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - God Ray - Create
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIGodRayCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gv_players[EventPlayer()].lv_heroUnit != null))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(EventPlayer()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libGame_gv_players[EventPlayer()].lv_heroUnit, "GodRayCreatePersistent", libGame_gv_players[EventPlayer()].lv_heroUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIGodRayCreate_Init () {
    libUIUI_gt_UIGodRayCreate = TriggerCreate("libUIUI_gt_UIGodRayCreate_Func");
    TriggerAddEventKeyPressed(libUIUI_gt_UIGodRayCreate, c_playerAny, c_keySpace, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - God Ray - Destroy
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIGodRayDestroy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gv_players[EventPlayer()].lv_heroUnit != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libGame_gv_players[EventPlayer()].lv_heroUnit, "GodRayDestroyPersistent", libGame_gv_players[EventPlayer()].lv_heroUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIGodRayDestroy_Init () {
    libUIUI_gt_UIGodRayDestroy = TriggerCreate("libUIUI_gt_UIGodRayDestroy_Func");
    TriggerAddEventKeyPressed(libUIUI_gt_UIGodRayDestroy, c_playerAny, c_keySpace, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - God Ray - Destroy On DC
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIGodRayDestroyOnDC_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gv_players[EventPlayer()].lv_heroUnit != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libGame_gv_players[EventPlayer()].lv_heroUnit, "GodRayDestroyPersistent", libGame_gv_players[EventPlayer()].lv_heroUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIGodRayDestroyOnDC_Init () {
    libUIUI_gt_UIGodRayDestroyOnDC = TriggerCreate("libUIUI_gt_UIGodRayDestroyOnDC_Func");
    TriggerAddEventPlayerLeft(libUIUI_gt_UIGodRayDestroyOnDC, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Initialize Healing Fountains Help Text
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInitializeHealingFountainsHelpText_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_UIHealingFountainsHelpTextCreateTextTagsForTeam(libGame_gv_teamOrderIndex_C);
    libUIUI_gf_UIHealingFountainsHelpTextCreateTextTagsForTeam(libGame_gv_teamChaosIndex_C);
    TriggerEnable(libUIUI_gt_UIHealingFountainsHelpTextPlayerUsesHealingFountain, true);
    TriggerEnable(libUIUI_gt_UIHealingFountainsHelpTextTextDisplayController, true);
    TriggerEnable(libUIUI_gt_UIHealingFountainsHelpTextHealingFountainDies, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInitializeHealingFountainsHelpText_Init () {
    libUIUI_gt_UIInitializeHealingFountainsHelpText = TriggerCreate("libUIUI_gt_UIInitializeHealingFountainsHelpText_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Healing Fountains Help Text - Player Uses Healing Fountain
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIHealingFountainsHelpTextPlayerUsesHealingFountain_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gv_uIHealingFountainsHelpTextHasFountainBeenUsed[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)] = true;
    libUIUI_gf_UIHealingFountainsHelpTextShowHideForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIHealingFountainsHelpTextPlayerUsesHealingFountain_Init () {
    libUIUI_gt_UIHealingFountainsHelpTextPlayerUsesHealingFountain = TriggerCreate("libUIUI_gt_UIHealingFountainsHelpTextPlayerUsesHealingFountain_Func");
    TriggerEnable(libUIUI_gt_UIHealingFountainsHelpTextPlayerUsesHealingFountain, false);
    TriggerAddEventPlayerEffectUsed(libUIUI_gt_UIHealingFountainsHelpTextPlayerUsesHealingFountain, c_playerAny, "HeroGeneric_FountainDrink_StartingSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Healing Fountains Help Text - Text Display Controller
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIHealingFountainsHelpTextTextDisplayController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_itTextTag;
    fixed lv_moonwellCooldown;

    // Automatic Variable Declarations
    int auto38B39C8E_ae;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto38B39C8E_ae = libCore_gv_bALMaxPlayers;
    lv_player = 1;
    for ( ; lv_player <= auto38B39C8E_ae ; lv_player += 1 ) {
        if (((UnitIsValid(libGame_gv_players[lv_player].lv_heroUnit) == false) || (libUIUI_gv_uIHealingFountainsHelpTextHasFountainBeenUsed[lv_player] == true))) {
            continue;
        }
        if ((UnitGetPropertyFixed(libGame_gv_players[lv_player].lv_heroUnit, c_unitPropLifePercent, c_unitPropCurrent) <= 50.0) && (UnitIsValid(libGame_gv_players[lv_player].lv_activeVehicle) == false)) {
            if ((libUIUI_gv_uIHealingFountainsHelpTextTextShowing[lv_player] == false)) {
                libUIUI_gf_UIHealingFountainsHelpTextShowHideForPlayer(lv_player, true);
            }
        }
        else {
            if ((libUIUI_gv_uIHealingFountainsHelpTextTextShowing[lv_player] == true)) {
                libUIUI_gf_UIHealingFountainsHelpTextShowHideForPlayer(lv_player, false);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIHealingFountainsHelpTextTextDisplayController_Init () {
    libUIUI_gt_UIHealingFountainsHelpTextTextDisplayController = TriggerCreate("libUIUI_gt_UIHealingFountainsHelpTextTextDisplayController_Func");
    TriggerEnable(libUIUI_gt_UIHealingFountainsHelpTextTextDisplayController, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_UIHealingFountainsHelpTextTextDisplayController, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Healing Fountains Help Text - Healing Fountain Dies
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIHealingFountainsHelpTextHealingFountainDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iter;
    int lv_team;
    int lv_player;

    // Automatic Variable Declarations
    int auto5FEB8BF9_ae;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Building_Moonwell"))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == libCore_gv_cOMPUTER_Blue) || (UnitGetOwner(EventUnit()) == libCore_gv_cOMPUTER_Red)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_team = libGame_gf_PlayerGetPlayerTeam(UnitGetOwner(EventUnit()));
    auto5FEB8BF9_ae = libUIUI_gv_uI_HealingFountainsHelpText_ArraySize_C;
    lv_iter = 1;
    for ( ; lv_iter <= auto5FEB8BF9_ae ; lv_iter += 1 ) {
        if ((libUIUI_gv_uIHealingFountainsHelpText[lv_team][lv_iter].lv_healingFountain == EventUnit())) {
            TextTagShow(libUIUI_gv_uIHealingFountainsHelpText[lv_team][lv_iter].lv_textTag, PlayerGroupAll(), false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIHealingFountainsHelpTextHealingFountainDies_Init () {
    libUIUI_gt_UIHealingFountainsHelpTextHealingFountainDies = TriggerCreate("libUIUI_gt_UIHealingFountainsHelpTextHealingFountainDies_Func");
    TriggerEnable(libUIUI_gt_UIHealingFountainsHelpTextHealingFountainDies, false);
    TriggerAddEventUnitDied(libUIUI_gt_UIHealingFountainsHelpTextHealingFountainDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Initialize Hero Console
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInitializeHeroConsole_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/HeroConsolePanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_uIHeroConsole.lv_heroConsolePanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HeroStatsFrame");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_uIHeroConsole.lv_heroStatsFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrame");
    libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame[libUIUI_ge_UIHeroConsoleUnitStatus_Default] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrameOrange");
    libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame[libUIUI_ge_UIHeroConsoleUnitStatus_Orange] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrameBlinking");
    libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame[libUIUI_ge_UIHeroConsoleUnitStatus_Blinking] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrameYellow");
    libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame[libUIUI_ge_UIHeroConsoleUnitStatus_Yellow] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFramePink");
    libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame[libUIUI_ge_UIHeroConsoleUnitStatus_Pink] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrameNoEnergy");
    libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame[libUIUI_ge_UIHeroConsoleUnitStatus_NoEnergy] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrameNoEnergyNoShield");
    libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame[libUIUI_ge_UIHeroConsoleUnitStatus_NoEnergyNoShield] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatusBar, "HeroUnitStatusFrame/HealthBar");
    libUIUI_gv_uIHeroConsole.lv_heroStatsHealthBar = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatusBar, "HeroUnitStatusFrame/EnergyBar");
    libUIUI_gv_uIHeroConsole.lv_heroStatsManaBar = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsolePanel/PortraitPanel");
    libUIUI_gv_uIHeroConsole.lv_gameUIPortrait = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/HeroCommandCardPanelFrame");
    libUIUI_gv_uIHeroConsole.lv_gameUICommandCardPanelFrame = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/InventoryPanel");
    libUIUI_gv_uIHeroConsole.lv_gameUIInventoryPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/HeroBuffDebuffPanel");
    libUIUI_gv_uIHeroConsole.lv_buffDebuffPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HeroBuffBar");
    libUIUI_gv_uIHeroConsole.lv_buffBar = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HeroDebuffBar");
    libUIUI_gv_uIHeroConsole.lv_debuffBar = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HeroNeutralBar");
    libUIUI_gv_uIHeroConsole.lv_neutralBar = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInitializeHeroConsole_Init () {
    libUIUI_gt_UIInitializeHeroConsole = TriggerCreate("libUIUI_gt_UIInitializeHeroConsole_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Console Unit Status Bars Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HeroConsoleUnitStatusBarsInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookup(libUIUI_gv_uIGameUIHandles.lv_consoleUIContainer, c_triggerControlTypeUnitStatus, "HeroDeathStunFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarParentFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatusDurationBar, "UnitStatusDurationBarLeft");
    libNtve_gf_SetDialogItemBehavior(DialogControlLastCreated(), "Dead", PlayerGroupAll());
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarLeftBar = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatusDurationBar, "UnitStatusDurationBarRight");
    libNtve_gf_SetDialogItemBehavior(DialogControlLastCreated(), "Dead", PlayerGroupAll());
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarRightBar = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "DeathStunIcon");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarIcon = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DeathStunLabel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarDescriptionLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DeathStunTimeLabel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarTimeLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(libUIUI_gv_uIGameUIHandles.lv_consoleUIContainer, c_triggerControlTypeUnitStatus, "HeroCastChannelBarFrame");
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_heroConsoleUnitStatusBars.lv_castChannelBarParentFrame = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(libUIUI_gv_uIGameUIHandles.lv_consoleUIContainer, c_triggerControlTypeUnitStatus, "HeroBehaviorChannelBarFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatusDurationBar, "HeroBehaviorChannelBar");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarDurationBar = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HeroBehaviorChannelBar/ChannelNameLabel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarBehaviorLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    TriggerEnable(libUIUI_gt_HeroConsoleUnitStatusBarsUpdate, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HeroConsoleUnitStatusBarsInitialize_Init () {
    libUIUI_gt_HeroConsoleUnitStatusBarsInitialize = TriggerCreate("libUIUI_gt_HeroConsoleUnitStatusBarsInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Console Unit Status Bars Channel Behavior Added
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HeroConsoleUnitStatusBarsChannelBehaviorAdded_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_heroUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    lv_heroUnit = libUIUI_gv_heroConsoleUnitStatusBars_CurrentUnitForPlayer[lv_player];
    if ((lv_heroUnit != EventUnit())) {
        return true;
    }

    if ((UnitBehaviorDuration(lv_heroUnit, EventUnitBehavior()) >= UnitBehaviorDuration(lv_heroUnit, libUIUI_gv_heroConsoleUnitStatusBars_BehaviorChannelBarCurrentBehaviorForPlayer[lv_player]))) {
        libUIUI_gv_heroConsoleUnitStatusBars_BehaviorChannelBarCurrentBehaviorForPlayer[lv_player] = EventUnitBehavior();
        libNtve_gf_SetDialogItemBehavior(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarDurationBar, EventUnitBehavior(), libCore_gv_playerGroupFromPlayer[lv_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarBehaviorLabel, StringExternal(CatalogFieldValueGet(c_gameCatalogBehavior, EventUnitBehavior(), "Name", c_playerAny)), libCore_gv_playerGroupFromPlayer[lv_player]);
    }

    DialogControlSetVisible(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrame, libCore_gv_playerGroupFromPlayer[lv_player], true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HeroConsoleUnitStatusBarsChannelBehaviorAdded_Init () {
    libUIUI_gt_HeroConsoleUnitStatusBarsChannelBehaviorAdded = TriggerCreate("libUIUI_gt_HeroConsoleUnitStatusBarsChannelBehaviorAdded_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libUIUI_gt_HeroConsoleUnitStatusBarsChannelBehaviorAdded, null, c_unitBehaviorFlagRestorable, c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Console Unit Status Bars Update
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HeroConsoleUnitStatusBarsUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int autoEC5C1263_ae = libCore_gv_bALMaxPlayers;
    const int autoEC5C1263_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 1;
    for ( ; ( (autoEC5C1263_ai >= 0 && lv_itPlayer <= autoEC5C1263_ae) || (autoEC5C1263_ai < 0 && lv_itPlayer >= autoEC5C1263_ae) ) ; lv_itPlayer += autoEC5C1263_ai ) {
        libUIUI_gf_HeroConsoleUnitStatusBarsUpdateForPlayer(lv_itPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HeroConsoleUnitStatusBarsUpdate_Init () {
    libUIUI_gt_HeroConsoleUnitStatusBarsUpdate = TriggerCreate("libUIUI_gt_HeroConsoleUnitStatusBarsUpdate_Func");
    TriggerEnable(libUIUI_gt_HeroConsoleUnitStatusBarsUpdate, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_HeroConsoleUnitStatusBarsUpdate, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Directive - Init
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_DirectiveInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_parent;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_parent = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer");
    lv_parent = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_parent, c_triggerControlTypePanel, "PvEUI/PVENotificationUITemplate");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_pvEUIDirectivePanel.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_pvEUIDirectivePanel.lv_mainPanel, c_triggerControlTypePanel, "TitleFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_pvEUIDirectivePanel.lv_directiveTextFrame = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_pvEUIDirectivePanel.lv_directiveTextFrame, c_triggerControlTypeLabel, "TitleLabel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_pvEUIDirectivePanel.lv_directiveTitleLabel = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_pvEUIDirectivePanel.lv_directiveTextFrame, c_triggerControlTypeLabel, "DescriptionLabel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_pvEUIDirectivePanel.lv_directiveDescriptionLabel = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_parent, c_triggerControlTypePanel, "PvEUI/PVENotificationUISmallTemplate");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_pvEUIDirectivePanel.lv_mainPanelSmall = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(libUIUI_gv_pvEUIDirectivePanel.lv_mainPanelSmall, c_triggerControlTypePanel, "TitleFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_pvEUIDirectivePanel.lv_directiveTextFrameSmall = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(libUIUI_gv_pvEUIDirectivePanel.lv_directiveTextFrameSmall, c_triggerControlTypeLabel, "TitleLabel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_pvEUIDirectivePanel.lv_directiveTitleLabelSmall = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_pvEUIDirectivePanel.lv_directiveTextFrameSmall, c_triggerControlTypeLabel, "DescriptionLabel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_pvEUIDirectivePanel.lv_directiveDescriptionLabelSmall = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_DirectiveInit_Init () {
    libUIUI_gt_DirectiveInit = TriggerCreate("libUIUI_gt_DirectiveInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Selection - UI Init
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HeroSelectionUIInit_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_init_i;
    int lv_itCurrentPanelLayer;
    int[11] lv_panels;
    int lv_itPlayerSlot;
    int lv_itPlayer;
    int lv_itHero;
    int lv_itRound;
    int lv_itTeam;
    int lv_itHeroRow;
    int lv_itHeroCol;
    int lv_itViewer;
    playergroup lv_viewerGroup;
    int lv_itPlayerCount;
    int lv_itTooltip;

    // Automatic Variable Declarations
    const int auto8A83C0A4_ae = libCore_gv_bALMaxTeams;
    int auto8A83C0A4_var;
    playergroup auto270E0A69_g;
    const int auto1863EC57_ae = libCore_gv_bALMaxPlayersOnATeam;
    const int auto1863EC57_ai = 1;
    const int autoC119126B_ae = libCore_gv_bALMaxTeams;
    int autoC119126B_var;
    playergroup auto7616B7B5_g;
    const int autoBD2F2F81_ae = libUIUI_gv_heroSelectionNumberofRows;
    const int autoBD2F2F81_ai = 1;
    const int autoBFB175AF_ae = libUIUI_gv_heroSelectionNumberofCols;
    const int autoBFB175AF_ai = 1;
    const int autoD6BB7917_ae = libCore_gv_dataHeroesNumberOfPassiveAbilitiesPerHero2;
    int autoD6BB7917_var;
    const int auto8A398910_ae = libCore_gv_dataHeroesNumberOfPassiveAbilitiesPerHero3;
    int auto8A398910_var;
    int autoB00129F6_ae;
    int autoB00129F6_var;
    const int autoD75DFE02_ae = libCore_gv_dataHeroesMaxTalentsTiers;
    int autoD75DFE02_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }
    lv_viewerGroup = PlayerGroupEmpty();
    lv_itTooltip = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    libUIUI_gv_heroSelection.lv_dialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "HeroSelection/CurateHeroSelectionPanelTemplate");
    libUIUI_gv_heroSelection.lv_mainPanel = DialogControlLastCreated();
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "MapNameLabel");
    libUIUI_gv_heroSelection.lv_titleLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "SelectedHeroInfo");
    libUIUI_gv_heroSelection.lv_selectedHeroPanel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "SelectedHeroName");
    libUIUI_gv_heroSelection.lv_selectedHeroName = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("HeroSelection/ChooseAHero"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "SelectedHeroRole");
    libUIUI_gv_heroSelection.lv_selectedHeroRole = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    lv_itCurrentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "CountdownLabel");
    libUIUI_gv_heroSelection.lv_countdownLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "RoundStartCountdownFrame");
    libUIUI_gv_heroSelection.lv_finalCountdownFrame = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, "AbilitiesButton");
    libUIUI_gv_heroSelection.lv_abilitiesButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, "TalentsButton");
    libUIUI_gv_heroSelection.lv_talentsButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, "InfoButton");
    libUIUI_gv_heroSelection.lv_brawlButton = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, "ReadyButton");
    libUIUI_gv_heroSelection.lv_lockButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    auto8A83C0A4_var = 1;
    for ( ; auto8A83C0A4_var <= auto8A83C0A4_ae; auto8A83C0A4_var += 1 ) {
        auto270E0A69_g = libGame_gv_teams[auto8A83C0A4_var].lv_teamPlayerGroupNoNPCPlayers;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto270E0A69_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeHeroCutscene, libNtve_gf_ConvertStringToUILayoutFrameName(("HeroCutsceneFrame" + IntToString((libGame_gv_players[lv_itPlayer].lv_playerAllySlot-1)))));
            libUIUI_gv_heroSelection.lv_heroCutsceneFrame[lv_itPlayer] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        }
    }
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "TeamPanel");
    libUIUI_gv_heroSelection.lv_pickHeroPanel = DialogControlLastCreated();
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    lv_itPlayerSlot = 1;
    for ( ; ( (auto1863EC57_ai >= 0 && lv_itPlayerSlot <= auto1863EC57_ae) || (auto1863EC57_ai < 0 && lv_itPlayerSlot >= auto1863EC57_ae) ) ; lv_itPlayerSlot += auto1863EC57_ai ) {
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("TeamPlayerName" + IntToString(lv_itPlayerSlot))));
        libUIUI_gv_heroSelection.lv_teamHeroPlayerName[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("TeamHeroName" + IntToString(lv_itPlayerSlot))));
        libUIUI_gv_heroSelection.lv_teamHeroHeroName[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("TeamPlayerHero" + IntToString(lv_itPlayerSlot))));
        libUIUI_gv_heroSelection.lv_teamHeroFrame[lv_itPlayerSlot] = DialogControlLastCreated();
        lv_itCurrentPanelLayer += 1;
        lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "EmptyImage");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        libUIUI_gv_heroSelection.lv_teamHeroEmpty[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "HeroImage");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_heroSelection.lv_teamHeroImage[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "NormalImage");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_heroSelection.lv_teamHeroBorder[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "LockedImage");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_heroSelection.lv_teamHeroLocked[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "LockedImageAnimation");
        libUIUI_gv_heroSelection.lv_teamHeroLockedAnimation[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "HeroRole");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_heroSelection.lv_teamHeroRole[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "HeroRoleBG");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_heroSelection.lv_teamHeroRoleBG[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "SelectedImageAlly");
        libUIUI_gv_heroSelection.lv_teamHeroSelectedAlly[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "ThinkingContainer");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_heroSelection.lv_teamHeroThinking[lv_itPlayerSlot] = DialogControlLastCreated();
        lv_itCurrentPanelLayer -= 1;
    }
    autoC119126B_var = 1;
    for ( ; autoC119126B_var <= autoC119126B_ae; autoC119126B_var += 1 ) {
        auto7616B7B5_g = libGame_gv_teams[autoC119126B_var].lv_teamPlayerGroupNoNPCPlayers;
        lv_itViewer = -1;
        while (true) {
            lv_itViewer = PlayerGroupNextPlayer(auto7616B7B5_g, lv_itViewer);
            if (lv_itViewer < 0) { break; }
            libUIUI_gv_heroSelection.lv_teamPanelRowPlayer[lv_itViewer][libGame_gv_players[lv_itViewer].lv_playerAllySlot] = lv_itViewer;
        }
    }
    lv_itCurrentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "PickHeroFrame");
    libUIUI_gv_heroSelection.lv_pickHeroPanel = DialogControlLastCreated();
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "Role1Label");
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "Role2Label");
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "Role3Label");
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "Role4Label");
    lv_itHeroRow = 1;
    for ( ; ( (autoBD2F2F81_ai >= 0 && lv_itHeroRow <= autoBD2F2F81_ae) || (autoBD2F2F81_ai < 0 && lv_itHeroRow >= autoBD2F2F81_ae) ) ; lv_itHeroRow += autoBD2F2F81_ai ) {
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("RoleHeroSelectionPanel" + IntToString(lv_itHeroRow))));
        lv_itCurrentPanelLayer += 1;
        lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
        lv_itHeroCol = 1;
        for ( ; ( (autoBFB175AF_ai >= 0 && lv_itHeroCol <= autoBFB175AF_ae) || (autoBFB175AF_ai < 0 && lv_itHeroCol >= autoBFB175AF_ae) ) ; lv_itHeroCol += autoBFB175AF_ai ) {
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("RoleHero" + IntToString(lv_itHeroCol))));
            libUIUI_gv_heroSelection.lv_heroButtons[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            lv_itCurrentPanelLayer += 1;
            lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "HeroImage");
            libUIUI_gv_heroSelection.lv_heroButtonImage[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "NormalImage");
            libUIUI_gv_heroSelection.lv_heroButtonBorder[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "EmptyImage");
            libUIUI_gv_heroSelection.lv_heroButtonBordersEmpty[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "SelectedImage1");
            libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByMe1[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "SelectedImage2");
            libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByMe2[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "SelectedImage3");
            libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByMe3[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "SelectedImageAlly1");
            libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByAlly1[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "SelectedImageAlly2");
            libUIUI_gv_heroSelection.lv_heroButtonBordersSelectedByAlly2[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "LockedImage1");
            libUIUI_gv_heroSelection.lv_heroButtonBordersLockedbyMe1[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "LockedImage2");
            libUIUI_gv_heroSelection.lv_heroButtonBordersLockedbyMe2[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "LockedImageAlly1");
            libUIUI_gv_heroSelection.lv_heroButtonBordersLockedByAlly1[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "LockedImageAlly2");
            libUIUI_gv_heroSelection.lv_heroButtonBordersLockedByAlly2[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "ThinkingContainer");
            libUIUI_gv_heroSelection.lv_heroButtonBordersThinking[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            if ((libUIUI_gv_heroSelectionCurateHeroSelections[lv_itHeroRow][lv_itHeroCol] != null)) {
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersEmpty[lv_itHeroRow][lv_itHeroCol], PlayerGroupAll(), false);
                libNtve_gf_SetDialogItemImage(libUIUI_gv_heroSelection.lv_heroButtonImage[lv_itHeroRow][lv_itHeroCol], (CatalogFieldValueGet(c_gameCatalogHero, libUIUI_gv_heroSelectionCurateHeroSelections[lv_itHeroRow][lv_itHeroCol], "SelectScreenButtonImage", c_playerAny)), PlayerGroupAll());
            }
            else {
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBorder[lv_itHeroRow][lv_itHeroCol], PlayerGroupAll(), false);
                DialogControlFadeTransparency(libUIUI_gv_heroSelection.lv_heroButtonBorder[lv_itHeroRow][lv_itHeroCol], PlayerGroupAll(), 0.0, 100.0);
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonImage[lv_itHeroRow][lv_itHeroCol], PlayerGroupAll(), false);
                DialogControlSetVisible(libUIUI_gv_heroSelection.lv_heroButtonBordersEmpty[lv_itHeroRow][lv_itHeroCol], PlayerGroupAll(), true);
                libUIUI_gf_HSEnableDisableHeroButtonForPlayerGroup(false, lv_itHeroRow, lv_itHeroCol, PlayerGroupAll(), false);
            }
            lv_itCurrentPanelLayer -= 1;
        }
        lv_itCurrentPanelLayer -= 1;
    }
    lv_itCurrentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "AbilitiesPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_heroSelection.lv_abilitiesPanel = DialogControlLastCreated();
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, "CloseButton");
    libUIUI_gv_heroSelection.lv_abilitiesPanelCloseButton = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "HeroContainerFrame");
    libUIUI_gv_heroSelection.lv_abilitiesPanelHeroContainerFrame = DialogControlLastCreated();
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "UniverseIconImage");
    libUIUI_gv_heroSelection.lv_abilitiesPanelUniverseIconImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "NameLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelNameLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "InfoLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelInfoLabel = DialogControlLastCreated();
    lv_itCurrentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "AbilTileList");
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    autoD6BB7917_var = 0;
    for ( ; autoD6BB7917_var <= autoD6BB7917_ae; autoD6BB7917_var += 1 ) {
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Item" + IntToString(autoD6BB7917_var))));
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItem[autoD6BB7917_var] = DialogControlLastCreated();
        lv_itCurrentPanelLayer += 1;
        lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
        DialogControlCreateInPanelFromTemplate(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeTooltip, "MyStandardTooltip/HeroSelectionTooltipTemplate");
        libNtve_gf_SetDialogItemCustomTooltip(lv_panels[lv_itCurrentPanelLayer], DialogControlLastCreated(), PlayerGroupAll());
        lv_itTooltip = DialogControlLastCreated();
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipFrame[autoD6BB7917_var] = DialogControlLastCreated();
        DialogControlHookup(lv_itTooltip, c_triggerControlTypeLabel, "NameLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipNameLabel[autoD6BB7917_var] = DialogControlLastCreated();
        DialogControlHookup(lv_itTooltip, c_triggerControlTypeLabel, "InfoLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipInfoLabel[autoD6BB7917_var] = DialogControlLastCreated();
        DialogControlHookup(lv_itTooltip, c_triggerControlTypeLabel, "DescriptionLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemTooltipDescriptionLabel[autoD6BB7917_var] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "IconImage");
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemIconImage[autoD6BB7917_var] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "NameLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemNameLabel[autoD6BB7917_var] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "DescriptionLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemDescriptionSimpleLabel[autoD6BB7917_var] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "HotkeyFrame");
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemHotkeyFrame[autoD6BB7917_var] = DialogControlLastCreated();
        libCore_gf_SetDialogItemAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "HeroAbilHotkeyFrame", "HotkeyAbility");
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "HotkeyFrame/HotkeyLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelBasicAbilItemHotkeyLabel[autoD6BB7917_var] = DialogControlLastCreated();
        lv_itCurrentPanelLayer -= 1;
    }
    lv_itCurrentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "PassiveTileList");
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "Item0");
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItem = DialogControlLastCreated();
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeTooltip, "MyStandardTooltip/HeroSelectionTooltipTemplate");
    libNtve_gf_SetDialogItemCustomTooltip(lv_panels[lv_itCurrentPanelLayer], DialogControlLastCreated(), PlayerGroupAll());
    lv_itTooltip = DialogControlLastCreated();
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemTooltipFrame = DialogControlLastCreated();
    DialogControlHookup(lv_itTooltip, c_triggerControlTypeLabel, "NameLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemTooltipNameLabel = DialogControlLastCreated();
    DialogControlHookup(lv_itTooltip, c_triggerControlTypeLabel, "InfoLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemTooltipInfoLabel = DialogControlLastCreated();
    DialogControlHookup(lv_itTooltip, c_triggerControlTypeLabel, "DescriptionLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemTooltipDescriptionLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "IconImage");
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemIconImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "NameLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemNameLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "DescriptionLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemDescriptionSimpleLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "HotkeyFrame");
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemHotkeyFrame = DialogControlLastCreated();
    libCore_gf_SetDialogItemAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "HeroAbilHotkeyFrame", "HotkeyAbility");
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "HotkeyFrame/HotkeyLabel");
    libUIUI_gv_heroSelection.lv_abilitiesPanelTraitAbilItemHotkeyLabel = DialogControlLastCreated();
    lv_itCurrentPanelLayer -= 1;
    lv_itCurrentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "HeroicTileList");
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    auto8A398910_var = 0;
    for ( ; auto8A398910_var <= auto8A398910_ae; auto8A398910_var += 1 ) {
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Item" + IntToString(auto8A398910_var))));
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItem[auto8A398910_var] = DialogControlLastCreated();
        lv_itCurrentPanelLayer += 1;
        lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
        DialogControlCreateInPanelFromTemplate(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeTooltip, "MyStandardTooltip/HeroSelectionTooltipTemplate");
        libNtve_gf_SetDialogItemCustomTooltip(lv_panels[lv_itCurrentPanelLayer], DialogControlLastCreated(), PlayerGroupAll());
        lv_itTooltip = DialogControlLastCreated();
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemTooltipFrame[auto8A398910_var] = DialogControlLastCreated();
        DialogControlHookup(lv_itTooltip, c_triggerControlTypeLabel, "NameLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemTooltipNameLabel[auto8A398910_var] = DialogControlLastCreated();
        DialogControlHookup(lv_itTooltip, c_triggerControlTypeLabel, "InfoLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemTooltipInfoLabel[auto8A398910_var] = DialogControlLastCreated();
        DialogControlHookup(lv_itTooltip, c_triggerControlTypeLabel, "DescriptionLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemTooltipDescriptionLabel[auto8A398910_var] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "IconImage");
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemIconImage[auto8A398910_var] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "NameLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemNameLabel[auto8A398910_var] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "DescriptionLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemDescriptionSimpleLabel[auto8A398910_var] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "HotkeyFrame");
        libCore_gf_SetDialogItemAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "HeroAbilHotkeyFrame", "HotkeyHeroic");
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemHotkeyFrame[auto8A398910_var] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "HotkeyFrame/HotkeyLabel");
        libUIUI_gv_heroSelection.lv_abilitiesPanelHeroicAbilItemHotkeyLabel[auto8A398910_var] = DialogControlLastCreated();
        lv_itCurrentPanelLayer -= 1;
    }
    lv_itCurrentPanelLayer -= 1;
    lv_itCurrentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "TalentsPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_heroSelection.lv_talentsPanel = DialogControlLastCreated();
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, "CloseButton");
    libUIUI_gv_heroSelection.lv_talentsPanelCloseButton = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "HeroContainerFrame");
    libUIUI_gv_heroSelection.lv_talentsPanelHeroContainerFrame = DialogControlLastCreated();
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "UniverseIconImage");
    libUIUI_gv_heroSelection.lv_talentsPanelUniverseIconImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "NameLabel");
    libUIUI_gv_heroSelection.lv_talentsPanelNameLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "InfoLabel");
    libUIUI_gv_heroSelection.lv_talentsPanelInfoLabel = DialogControlLastCreated();
    lv_itCurrentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "TalentTreePanel");
    lv_itCurrentPanelLayer += 1;
    lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
    autoB00129F6_ae = (libCore_gv_dataHeroesMaxTalentsperTier-1);
    autoB00129F6_var = 0;
    for ( ; autoB00129F6_var <= autoB00129F6_ae; autoB00129F6_var += 1 ) {
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("TalentTreeButton" + IntToString(autoB00129F6_var))));
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButton[(autoB00129F6_var+1)] = DialogControlLastCreated();
        lv_itCurrentPanelLayer += 1;
        lv_panels[lv_itCurrentPanelLayer] = DialogControlLastCreated();
        DialogControlCreateInPanelFromTemplate(lv_panels[(lv_itCurrentPanelLayer-1)], c_triggerControlTypeTooltip, "MyStandardTooltip/HeroSelectionTooltipTemplate");
        libNtve_gf_SetDialogItemCustomTooltip(lv_panels[lv_itCurrentPanelLayer], DialogControlLastCreated(), PlayerGroupAll());
        lv_itTooltip = DialogControlLastCreated();
        libUIUI_gv_heroSelection.lv_talentsPanelTooltipFrame[(autoB00129F6_var+1)] = DialogControlLastCreated();
        DialogControlHookup(lv_itTooltip, c_triggerControlTypeLabel, "NameLabel");
        libUIUI_gv_heroSelection.lv_talentsPanelTooltipNameLabel[(autoB00129F6_var+1)] = DialogControlLastCreated();
        DialogControlHookup(lv_itTooltip, c_triggerControlTypeLabel, "InfoLabel");
        libUIUI_gv_heroSelection.lv_talentsPanelTooltipInfoLabel[(autoB00129F6_var+1)] = DialogControlLastCreated();
        DialogControlHookup(lv_itTooltip, c_triggerControlTypeLabel, "DescriptionLabel");
        libUIUI_gv_heroSelection.lv_talentsPanelTooltipDescriptionLabel[(autoB00129F6_var+1)] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "NameLabel");
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonNameLabel[(autoB00129F6_var+1)] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "Label");
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonDescriptionSimpleLabel[(autoB00129F6_var+1)] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeImage, "IconImage");
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonIconImage[(autoB00129F6_var+1)] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypePanel, "HotkeyFrame");
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyFrame[(autoB00129F6_var+1)] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeLabel, "HotkeyFrame/HotkeyLabel");
        libUIUI_gv_heroSelection.lv_talentsPanelTalentButtonHotkeyLabel[(autoB00129F6_var+1)] = DialogControlLastCreated();
        lv_itCurrentPanelLayer -= 1;
    }
    autoD75DFE02_var = 1;
    for ( ; autoD75DFE02_var <= autoD75DFE02_ae; autoD75DFE02_var += 1 ) {
        DialogControlHookup(lv_panels[lv_itCurrentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("TalentTierButton" + IntToString(autoD75DFE02_var))));
        libUIUI_gv_heroSelection.lv_talentsPanelTierButton[autoD75DFE02_var] = DialogControlLastCreated();
    }
    lv_itCurrentPanelLayer -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HeroSelectionUIInit_Init () {
    libUIUI_gt_HeroSelectionUIInit = TriggerCreate("libUIUI_gt_HeroSelectionUIInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HS - Button Used
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HSButtonUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itHeroRow;
    int lv_itHeroCol;
    int lv_player;
    int lv_dialogItem;

    // Automatic Variable Declarations
    const int auto66145C69_ae = libCore_gv_dataHeroesMaxTalentsTiers;
    int auto66145C69_var;
    int auto7C1B2975_ae;
    int autoC2078CBE_ae;

    // Variable Initialization
    lv_dialogItem = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((EventPlayer() >= 1))) {
            return false;
        }

        if (!((EventPlayer() <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    lv_dialogItem = EventDialogControl();
    if ((lv_dialogItem == libUIUI_gv_heroSelection.lv_abilitiesButton)) {
        if ((libUIUI_gv_heroSelectionSetting.lv_heroAbilitiesButtonToggled[lv_player] == true)) {
            libUIUI_gv_heroSelectionSetting.lv_heroAbilitiesButtonToggled[lv_player] = false;
            libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_abilitiesButton, false, libCore_gv_playerGroupFromPlayer[lv_player]);
            libCore_gf_SetDialogItemAnimationState(libUIUI_gv_heroSelection.lv_abilitiesPanel, libCore_gv_playerGroupFromPlayer[lv_player], "AbilitiesToggle", "Hide");
        }
        else {
            libUIUI_gv_heroSelectionSetting.lv_heroAbilitiesButtonToggled[lv_player] = true;
            libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_abilitiesButton, true, libCore_gv_playerGroupFromPlayer[lv_player]);
            libCore_gf_SetDialogItemAnimationState(libUIUI_gv_heroSelection.lv_abilitiesPanel, libCore_gv_playerGroupFromPlayer[lv_player], "AbilitiesToggle", "Show");
            if ((libUIUI_gv_heroSelectionSetting.lv_heroTalentsButtonToggled[lv_player] == true)) {
                libUIUI_gv_heroSelectionSetting.lv_heroTalentsButtonToggled[lv_player] = false;
                libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_talentsButton, false, libCore_gv_playerGroupFromPlayer[lv_player]);
                libCore_gf_SetDialogItemAnimationState(libUIUI_gv_heroSelection.lv_talentsPanel, libCore_gv_playerGroupFromPlayer[lv_player], "TalentsToggle", "Hide");
            }
        }
        return true;
    }
    else if ((lv_dialogItem == libUIUI_gv_heroSelection.lv_talentsButton)) {
        if ((libUIUI_gv_heroSelectionSetting.lv_heroTalentsButtonToggled[lv_player] == true)) {
            libUIUI_gv_heroSelectionSetting.lv_heroTalentsButtonToggled[lv_player] = false;
            libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_talentsButton, false, libCore_gv_playerGroupFromPlayer[lv_player]);
            libCore_gf_SetDialogItemAnimationState(libUIUI_gv_heroSelection.lv_talentsPanel, libCore_gv_playerGroupFromPlayer[lv_player], "TalentsToggle", "Hide");
        }
        else {
            libUIUI_gv_heroSelectionSetting.lv_heroTalentsButtonToggled[lv_player] = true;
            libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_talentsButton, true, libCore_gv_playerGroupFromPlayer[lv_player]);
            libCore_gf_SetDialogItemAnimationState(libUIUI_gv_heroSelection.lv_talentsPanel, libCore_gv_playerGroupFromPlayer[lv_player], "TalentsToggle", "Show");
            if ((libUIUI_gv_heroSelectionSetting.lv_heroAbilitiesButtonToggled[lv_player] == true)) {
                libUIUI_gv_heroSelectionSetting.lv_heroAbilitiesButtonToggled[lv_player] = false;
                libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_abilitiesButton, false, libCore_gv_playerGroupFromPlayer[lv_player]);
                libCore_gf_SetDialogItemAnimationState(libUIUI_gv_heroSelection.lv_abilitiesPanel, libCore_gv_playerGroupFromPlayer[lv_player], "AbilitiesToggle", "Hide");
            }
        }
        return true;
    }
    else if ((lv_dialogItem == libUIUI_gv_heroSelection.lv_abilitiesPanelCloseButton)) {
        if ((libUIUI_gv_heroSelectionSetting.lv_heroAbilitiesButtonToggled[lv_player] == true)) {
            libUIUI_gv_heroSelectionSetting.lv_heroAbilitiesButtonToggled[lv_player] = false;
            libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_abilitiesButton, false, libCore_gv_playerGroupFromPlayer[lv_player]);
            libCore_gf_SetDialogItemAnimationState(libUIUI_gv_heroSelection.lv_abilitiesPanel, libCore_gv_playerGroupFromPlayer[lv_player], "AbilitiesToggle", "Hide");
        }
        return true;
    }
    else if ((lv_dialogItem == libUIUI_gv_heroSelection.lv_talentsPanelCloseButton)) {
        if ((libUIUI_gv_heroSelectionSetting.lv_heroTalentsButtonToggled[lv_player] == true)) {
            libUIUI_gv_heroSelectionSetting.lv_heroTalentsButtonToggled[lv_player] = false;
            libNtve_gf_SetDialogItemToggled(libUIUI_gv_heroSelection.lv_talentsButton, false, libCore_gv_playerGroupFromPlayer[lv_player]);
            libCore_gf_SetDialogItemAnimationState(libUIUI_gv_heroSelection.lv_talentsPanel, libCore_gv_playerGroupFromPlayer[lv_player], "TalentsToggle", "Hide");
        }
        return true;
    }
    else if ((lv_dialogItem != libUIUI_gv_heroSelection.lv_talentsPanelTierButton[libUIUI_gv_heroSelectionSetting.lv_talentTierPressedButton[lv_player]]) && ((libUIUI_gv_heroSelection.lv_talentsPanelTierButton[1] == lv_dialogItem) || (libUIUI_gv_heroSelection.lv_talentsPanelTierButton[2] == lv_dialogItem) || (libUIUI_gv_heroSelection.lv_talentsPanelTierButton[3] == lv_dialogItem) || (libUIUI_gv_heroSelection.lv_talentsPanelTierButton[4] == lv_dialogItem) || (libUIUI_gv_heroSelection.lv_talentsPanelTierButton[5] == lv_dialogItem) || (libUIUI_gv_heroSelection.lv_talentsPanelTierButton[6] == lv_dialogItem) || (libUIUI_gv_heroSelection.lv_talentsPanelTierButton[7] == lv_dialogItem))) {
        auto66145C69_var = 1;
        for ( ; auto66145C69_var <= auto66145C69_ae; auto66145C69_var += 1 ) {
            if ((libUIUI_gv_heroSelection.lv_talentsPanelTierButton[auto66145C69_var] == lv_dialogItem)) {
                libUIUI_gf_HSUIUpdateTalentsTierForPlayer(lv_player, auto66145C69_var);
                return true;
            }

        }
    }
    else if ((lv_dialogItem == libUIUI_gv_heroSelection.lv_lockButton)) {
        if ((libUIUI_gv_heroSelectionSetting.lv_lockedIn[lv_player] == false)) {
            libUIUI_gf_lockunlockherochoise(lv_player, true);
            SoundPlayForPlayer(SoundLink("UI_BNet_Ready", c_soundIndexAny), c_maxPlayers, libCore_gv_playerGroupFromPlayer[lv_player], 100.0, 0.0);
        }
        else {
            libUIUI_gf_lockunlockherochoise(lv_player, false);
            SoundPlayForPlayer(SoundLink("UI_BNet_Customize", c_soundIndexAny), c_maxPlayers, libCore_gv_playerGroupFromPlayer[lv_player], 100.0, 0.0);
        }
        return true;
    }
    auto7C1B2975_ae = libUIUI_gv_heroSelectionNumberofRows;
    lv_itHeroRow = 1;
    for ( ; lv_itHeroRow <= auto7C1B2975_ae ; lv_itHeroRow += 1 ) {
        autoC2078CBE_ae = libUIUI_gv_heroSelectionNumberofCols;
        lv_itHeroCol = 1;
        for ( ; lv_itHeroCol <= autoC2078CBE_ae ; lv_itHeroCol += 1 ) {
            if ((libUIUI_gv_heroSelection.lv_heroButtons[lv_itHeroRow][lv_itHeroCol] == lv_dialogItem) && (libUIUI_gv_heroSelectionSetting.lv_lockedIn[lv_player] == false)) {
                libUIUI_gf_HeroSelectionSelectHeroForPlayer(lv_player, lv_itHeroRow, lv_itHeroCol);
                return true;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HSButtonUsed_Init () {
    libUIUI_gt_HSButtonUsed = TriggerCreate("libUIUI_gt_HSButtonUsed_Func");
    TriggerEnable(libUIUI_gt_HSButtonUsed, false);
    TriggerAddEventDialogControl(libUIUI_gt_HSButtonUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HS UI Countdown Timer Expires
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HSUICountdownTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_crowdSound;
    int lv_itHero;

    // Automatic Variable Declarations
    int auto8DED820B_ae;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), true);
    libNtve_gf_StopTimer(libUIUI_gv_heroSelectionSetting.lv_countdownTimer);
    auto8DED820B_ae = libCore_gv_bALMaxPlayers;
    lv_itPlayer = 1;
    for ( ; lv_itPlayer <= auto8DED820B_ae ; lv_itPlayer += 1 ) {
        if ((PlayerStatus(lv_itPlayer) != c_playerStatusUnused) && (PlayerStatus(lv_itPlayer) == c_playerStatusActive)) {
            if ((libUIUI_gv_heroSelectionSetting.lv_lockedIn[lv_itPlayer] == true)) {
                libGame_gv_players[lv_itPlayer].lv_heroIndex = libCore_gf_CommandersGetHeroIndexOfHeroLink(libUIUI_gv_heroSelectionCurateHeroSelections[libUIUI_gv_heroSelectionSetting.lv_lockedHeroRow[lv_itPlayer]][libUIUI_gv_heroSelectionSetting.lv_lockedHeroCol[lv_itPlayer]]);
            }
            else {
                if ((libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itPlayer] > 0) && (libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itPlayer] > 0)) {
                    if ((libUIUI_gf_HSUIGoodToLockIn(lv_itPlayer) == true)) {
                        libGame_gv_players[lv_itPlayer].lv_heroIndex = libCore_gf_CommandersGetHeroIndexOfHeroLink(libUIUI_gv_heroSelectionCurateHeroSelections[libUIUI_gv_heroSelectionSetting.lv_selectedHeroRow[lv_itPlayer]][libUIUI_gv_heroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]]);
                        libUIUI_gf_lockunlockherochoise(lv_itPlayer, true);
                        continue;
                    }

                }
                else {
                    libGame_gv_players[lv_itPlayer].lv_heroIndex = libUIUI_gf_HeroSelectionSelectRandomHeroForPlayer(lv_itPlayer);
                }
            }
        }

    }
    libUIUI_gf_HSUIUpdateHeroButtons();
    SoundPlayForPlayer(SoundLink("UI_BNet_Draft_Countdown_Start", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    libUIUI_gv_heroSelectionSetting.lv_finalCountDownStarted = true;
    if ((GameIsOnline() == false)) {
        DialogControlSetVisible(libUIUI_gv_heroSelection.lv_finalCountdownFrame, PlayerGroupAll(), false);
        DialogSetVisible(libUIUI_gv_heroSelection.lv_dialog, PlayerGroupAll(), false);
        SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
        UISetWorldVisible(PlayerGroupAll(), true);
        CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
        TriggerEnable(libUIUI_gt_HSButtonUsed, false);
        TriggerExecute(libCore_gt_GameStart, true, false);
        return true;
    }

    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_countdownLabel, PlayerGroupAll(), false);
    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_finalCountdownFrame, PlayerGroupAll(), true);
    SoundPlayForPlayer(SoundLink("UI_BNet_Draft_FinalCountdown02", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(6.0, c_timeGame);
    DialogControlFadeTransparency(libUIUI_gv_heroSelection.lv_mainPanel, PlayerGroupAll(), 0.5, 100.0);
    Wait(0.5, c_timeGame);
    DialogControlSetVisible(libUIUI_gv_heroSelection.lv_finalCountdownFrame, PlayerGroupAll(), false);
    DialogDestroy(libUIUI_gv_heroSelection.lv_dialog);
    TriggerExecute(libCore_gt_GameStart, true, false);
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    UISetWorldVisible(PlayerGroupAll(), true);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    TriggerEnable(libUIUI_gt_HSButtonUsed, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HSUICountdownTimerExpires_Init () {
    libUIUI_gt_HSUICountdownTimerExpires = TriggerCreate("libUIUI_gt_HSUICountdownTimerExpires_Func");
    TriggerAddEventTimer(libUIUI_gt_HSUICountdownTimerExpires, libUIUI_gv_heroSelectionSetting.lv_countdownTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Initialize Hero Tracker Arrow
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInitializeHeroTrackerArrow_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto19F9C206_ae = libCore_gv_bALMaxPlayers;
    const int auto19F9C206_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/OffscreenUnitContainer");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_uIHeroTrackerArrows.lv_mainPanel = DialogControlLastCreated();
    lv_index = 1;
    for ( ; ( (auto19F9C206_ai >= 0 && lv_index <= auto19F9C206_ae) || (auto19F9C206_ai < 0 && lv_index >= auto19F9C206_ae) ) ; lv_index += auto19F9C206_ai ) {
        DialogControlHookup(libUIUI_gv_uIHeroTrackerArrows.lv_mainPanel, c_triggerControlTypeOffscreenUnit, "OffscreenUnitFrame" + IntToString(lv_index));
        libUIUI_gv_uIHeroTrackerArrows.lv_arrow[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libUIUI_gv_uIHeroTrackerArrows.lv_arrow[lv_index], c_triggerControlTypeImage, "HeroIcon");
        libUIUI_gv_uIHeroTrackerArrows.lv_portraitImage[lv_index] = DialogControlLastCreated();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInitializeHeroTrackerArrow_Init () {
    libUIUI_gt_UIInitializeHeroTrackerArrow = TriggerCreate("libUIUI_gt_UIInitializeHeroTrackerArrow_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Path Display - Move [Create]
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_PathDisplayMoveCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    const int auto24FA7F0D_n = libCore_gv_bALMaxPlayers;
    int auto24FA7F0D_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto24FA7F0D_i = 1; auto24FA7F0D_i <= auto24FA7F0D_n; auto24FA7F0D_i += 1) {
        lv_player += 1;
        if ((PlayerType(lv_player) == c_playerTypeUser)) {
            PathCreateForUnit(libCore_gv_playerGroupFromPlayer[lv_player], libGame_gv_players[lv_player].lv_heroUnit);
            PathSetColor(PathLastCreated(), c_pathLocationAll, Color(0.00, 100.00, 0.00));
            PathSetVisible(PathLastCreated(), c_pathLocationWorld, false);
            PathSetAbilClassFilter(PathLastCreated(), c_classIdCAbilMove, c_abilClassFilterRequired);
            PathSetAbilClassFilter(PathLastCreated(), c_classIdCAbilEffectTarget, c_abilClassFilterRequired);
            PathSetAbilClassFilter(PathLastCreated(), c_classIdCAbilAttack, c_abilClassFilterRequired);
            libGame_gv_players[lv_player].lv_path = PathLastCreated();
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_PathDisplayMoveCreate_Init () {
    libUIUI_gt_PathDisplayMoveCreate = TriggerCreate("libUIUI_gt_PathDisplayMoveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Input - Ingame Button Used
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInputIngameButtonUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_locDialogItem;
    int lv_locPlayer;
    int lv_itTier;
    int lv_itColumn;
    int lv_itPrestigeAbilityIndex;

    // Automatic Variable Declarations
    int autoE813EEC3_val;
    int auto9BD4B4BD_ae;
    int auto1F2F541F_ae;
    int auto03F7E380_ae;
    int auto3514D027_ae;
    int auto321605F5_ae;

    // Variable Initialization
    lv_locDialogItem = EventDialogControl();
    lv_locPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_locDialogItem == libUIUI_gv_uIMyCustomLeaderBoard.lv_showStatsButton)) {
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_uIMyCustomLeaderBoard.lv_showTalentsButton, false, libCore_gv_playerGroupFromPlayer[lv_locPlayer]);
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_uIMyCustomLeaderBoard.lv_showStatsButton, true, libCore_gv_playerGroupFromPlayer[lv_locPlayer]);
        libUIUI_gf_UIMyCustomLeaderBoardChangeWatchingContainerForPlayer(libUIUI_ge_UIMyCustomLeaderBoardContainerType_Stats, lv_locPlayer);
        return true;
    }
    else if ((lv_locDialogItem == libUIUI_gv_uIMyCustomLeaderBoard.lv_showTalentsButton)) {
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_uIMyCustomLeaderBoard.lv_showTalentsButton, true, libCore_gv_playerGroupFromPlayer[lv_locPlayer]);
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_uIMyCustomLeaderBoard.lv_showStatsButton, false, libCore_gv_playerGroupFromPlayer[lv_locPlayer]);
        libUIUI_gf_UIMyCustomLeaderBoardChangeWatchingContainerForPlayer(libUIUI_ge_UIMyCustomLeaderBoardContainerType_Talents, lv_locPlayer);
        return true;
    }
    else if (((lv_locDialogItem == libUIUI_gv_uIMyCustomLeaderBoard.lv_sortKills) || (lv_locDialogItem == libUIUI_gv_uIMyCustomLeaderBoard.lv_sortAssists) || (lv_locDialogItem == libUIUI_gv_uIMyCustomLeaderBoard.lv_sortDeaths) || (lv_locDialogItem == libUIUI_gv_uIMyCustomLeaderBoard.lv_sortSiegeDamage) || (lv_locDialogItem == libUIUI_gv_uIMyCustomLeaderBoard.lv_sortHeroDamage) || (lv_locDialogItem == libUIUI_gv_uIMyCustomLeaderBoard.lv_sortHealedAndAbsorbed) || (lv_locDialogItem == libUIUI_gv_uIMyCustomLeaderBoard.lv_sortDamageTaken) || (lv_locDialogItem == libUIUI_gv_uIMyCustomLeaderBoard.lv_sortXPContribution))) {
        autoE813EEC3_val = EventDialogControl();
        if (autoE813EEC3_val == libUIUI_gv_uIMyCustomLeaderBoard.lv_sortKills) {
            libUIUI_gf_UIMyCustomLeaderBoardSortingChangeState(lv_locPlayer, libUIUI_ge_UIMyCustomLeaderBoardSortingSortingType_Kills);
        }
        else if (autoE813EEC3_val == libUIUI_gv_uIMyCustomLeaderBoard.lv_sortAssists) {
            libUIUI_gf_UIMyCustomLeaderBoardSortingChangeState(lv_locPlayer, libUIUI_ge_UIMyCustomLeaderBoardSortingSortingType_Assists);
        }
        else if (autoE813EEC3_val == libUIUI_gv_uIMyCustomLeaderBoard.lv_sortDeaths) {
            libUIUI_gf_UIMyCustomLeaderBoardSortingChangeState(lv_locPlayer, libUIUI_ge_UIMyCustomLeaderBoardSortingSortingType_Deaths);
        }
        else if (autoE813EEC3_val == libUIUI_gv_uIMyCustomLeaderBoard.lv_sortSiegeDamage) {
            libUIUI_gf_UIMyCustomLeaderBoardSortingChangeState(lv_locPlayer, libUIUI_ge_UIMyCustomLeaderBoardSortingSortingType_SiegeDamage);
        }
        else if (autoE813EEC3_val == libUIUI_gv_uIMyCustomLeaderBoard.lv_sortHeroDamage) {
            libUIUI_gf_UIMyCustomLeaderBoardSortingChangeState(lv_locPlayer, libUIUI_ge_UIMyCustomLeaderBoardSortingSortingType_HeroDamage);
        }
        else if (autoE813EEC3_val == libUIUI_gv_uIMyCustomLeaderBoard.lv_sortHealedAndAbsorbed) {
            libUIUI_gf_UIMyCustomLeaderBoardSortingChangeState(lv_locPlayer, libUIUI_ge_UIMyCustomLeaderBoardSortingSortingType_HealedandAbsorbed);
        }
        else if (autoE813EEC3_val == libUIUI_gv_uIMyCustomLeaderBoard.lv_sortDamageTaken) {
            libUIUI_gf_UIMyCustomLeaderBoardSortingChangeState(lv_locPlayer, libUIUI_ge_UIMyCustomLeaderBoardSortingSortingType_DamageTaken);
        }
        else if (autoE813EEC3_val == libUIUI_gv_uIMyCustomLeaderBoard.lv_sortXPContribution) {
            libUIUI_gf_UIMyCustomLeaderBoardSortingChangeState(lv_locPlayer, libUIUI_ge_UIMyCustomLeaderBoardSortingSortingType_XPContribution);
        }
        else {
        }
        return true;
    }
    else if ((libCore_gv_gameOver == false) && ((lv_locDialogItem == libUIUI_gv_uIMyTalentsPanel.lv_tierSelectionButton[1]) || (lv_locDialogItem == libUIUI_gv_uIMyTalentsPanel.lv_tierSelectionButton[2]) || (lv_locDialogItem == libUIUI_gv_uIMyTalentsPanel.lv_tierSelectionButton[3]) || (lv_locDialogItem == libUIUI_gv_uIMyTalentsPanel.lv_tierSelectionButton[4]) || (lv_locDialogItem == libUIUI_gv_uIMyTalentsPanel.lv_tierSelectionButton[5]) || (lv_locDialogItem == libUIUI_gv_uIMyTalentsPanel.lv_tierSelectionButton[6]) || (lv_locDialogItem == libUIUI_gv_uIMyTalentsPanel.lv_tierSelectionButton[7]))) {
        auto9BD4B4BD_ae = libCore_gv_dataHeroesMaxTalentsTiers;
        lv_itTier = 1;
        for ( ; lv_itTier <= auto9BD4B4BD_ae ; lv_itTier += 1 ) {
            if ((lv_locDialogItem == libUIUI_gv_uIMyTalentsPanel.lv_tierSelectionButton[lv_itTier])) {
                libUIUI_gf_UIMyTalentsPanelTierButtonPressedbyPlayer(lv_locPlayer, lv_itTier);
                return true;
            }

        }
    }
    else if ((libCore_gv_gameOver == false) && ((lv_locDialogItem == libUIUI_gv_uIMyTalentsPanel.lv_talentButtons[1]) || (lv_locDialogItem == libUIUI_gv_uIMyTalentsPanel.lv_talentButtons[2]) || (lv_locDialogItem == libUIUI_gv_uIMyTalentsPanel.lv_talentButtons[3]) || (lv_locDialogItem == libUIUI_gv_uIMyTalentsPanel.lv_talentButtons[4]) || (lv_locDialogItem == libUIUI_gv_uIMyTalentsPanel.lv_talentButtons[5]) || (lv_locDialogItem == libUIUI_gv_uIMyTalentsPanel.lv_talentButtons[6]) || (lv_locDialogItem == libUIUI_gv_uIMyTalentsPanel.lv_talentButtons[7]))) {
        auto1F2F541F_ae = libCore_gv_dataHeroesMaxTalentsperTier;
        lv_itColumn = 1;
        for ( ; lv_itColumn <= auto1F2F541F_ae ; lv_itColumn += 1 ) {
            if ((libCore_gf_TalentsPlayerCanChooseTalentFromTierAndColumn(lv_locPlayer, libUIUI_gv_uIMyTalentsPanelPlayerViewingQuickTalentsTier[lv_locPlayer], lv_itColumn) == true) && (lv_locDialogItem == libUIUI_gv_uIMyTalentsPanel.lv_talentButtons[lv_itColumn])) {
                libGame_gf_SendEventPlayerChooseTalent(lv_locPlayer, libUIUI_gv_uIMyTalentsPanelPlayerViewingQuickTalentsTier[lv_locPlayer], lv_itColumn);
                return true;
            }

        }
    }
    else if ((UnitHasBehavior2(libGame_gv_players[lv_locPlayer].lv_heroUnit, "SafeZone_Ally_ProtectionBuff") == true) && ((lv_locDialogItem == libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[1].lv_button) || (lv_locDialogItem == libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[2].lv_button) || (lv_locDialogItem == libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[3].lv_button) || (lv_locDialogItem == libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[4].lv_button) || (lv_locDialogItem == libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[5].lv_button) || (lv_locDialogItem == libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[6].lv_button) || (lv_locDialogItem == libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[7].lv_button) || (lv_locDialogItem == libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[8].lv_button))) {
        auto03F7E380_ae = libCore_gv_dataHeroesMaxPrestigeAbilities;
        lv_itPrestigeAbilityIndex = 1;
        for ( ; lv_itPrestigeAbilityIndex <= auto03F7E380_ae ; lv_itPrestigeAbilityIndex += 1 ) {
            if ((lv_locDialogItem == libUIUI_gv_uIMyCustomLeaderBoardPrestigeAbilities[lv_itPrestigeAbilityIndex].lv_button)) {
                if ((EventDialogControlMouseButton() == c_mouseButtonLeft)) {
                    libUIUI_gf_UIMyCustomLeaderBoardPrestigeAbilitiesChangeAbilityForPlayer(lv_locPlayer, lv_itPrestigeAbilityIndex, libUIUI_ge_UIMyCustomLeaderBoardPrestigeAbilitiesSlot_SelectedSlot1);
                }
                else if ((EventDialogControlMouseButton() == c_mouseButtonRight)) {
                    libUIUI_gf_UIMyCustomLeaderBoardPrestigeAbilitiesChangeAbilityForPlayer(lv_locPlayer, lv_itPrestigeAbilityIndex, libUIUI_ge_UIMyCustomLeaderBoardPrestigeAbilitiesSlot_SelectedSlot2);
                }
            }
        }
    }
    else if (((lv_locDialogItem == libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_heroSelectionButtonTeamAlly[1]) || (lv_locDialogItem == libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_heroSelectionButtonTeamAlly[2]) || (lv_locDialogItem == libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_heroSelectionButtonTeamAlly[3]) || (lv_locDialogItem == libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_heroSelectionButtonTeamAlly[4]) || (lv_locDialogItem == libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_heroSelectionButtonTeamAlly[5]) || (lv_locDialogItem == libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_heroSelectionButtonTeamEnemy[1]) || (lv_locDialogItem == libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_heroSelectionButtonTeamEnemy[2]) || (lv_locDialogItem == libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_heroSelectionButtonTeamEnemy[3]) || (lv_locDialogItem == libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_heroSelectionButtonTeamEnemy[4]) || (lv_locDialogItem == libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_heroSelectionButtonTeamEnemy[5]))) {
        libUIUI_gf_UIMyCustomLeaderBoardTalentsPlayerClicksOnTalentHeroIconSelectionDialogItem(lv_locPlayer, lv_locDialogItem);
    }
    else if ((lv_locDialogItem == libUIUI_gv_gameOverSplash.lv_leaveButton) && (libCore_gv_gameOver == true)) {
        if ((lv_locPlayer == libCore_gv_oBSERVER_ObserverUIPlayer)) {
            KickFromGame(libCore_gv_playerGroupFromPlayer[lv_locPlayer]);
        }
        else {
            GameOver(lv_locPlayer, libGame_gv_players[lv_locPlayer].lv_victoryDefeat, false, false);
        }
    }
    auto3514D027_ae = libCore_gv_dataHeroesMaxTalentsTiers;
    lv_itTier = 1;
    for ( ; lv_itTier <= auto3514D027_ae ; lv_itTier += 1 ) {
        if ((libCore_gv_gameOver == true)) {
            return true;
        }
        auto321605F5_ae = libCore_gv_dataHeroesMaxTalentsperTier;
        lv_itColumn = 1;
        for ( ; lv_itColumn <= auto321605F5_ae ; lv_itColumn += 1 ) {
            if ((libUIUI_gv_uIMyCustomLeaderBoardTalentsPlayerMonitoringTalentsOfPlayer[lv_locPlayer] == lv_locPlayer) && (lv_locDialogItem == libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentButton[lv_itTier][lv_itColumn]) && (libCore_gf_TalentsPlayerCanChooseTalentFromTierAndColumn(lv_locPlayer, lv_itTier, lv_itColumn) == true)) {
                libGame_gf_SendEventPlayerChooseTalent(lv_locPlayer, lv_itTier, lv_itColumn);
                return true;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInputIngameButtonUsed_Init () {
    libUIUI_gt_UIInputIngameButtonUsed = TriggerCreate("libUIUI_gt_UIInputIngameButtonUsed_Func");
    TriggerEnable(libUIUI_gt_UIInputIngameButtonUsed, false);
    TriggerAddEventDialogControl(libUIUI_gt_UIInputIngameButtonUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Input - Player Clicks Unit
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_InputPlayerClicksUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_itUnit;
    int lv_itPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_itUnit = EventUnit();
    lv_itPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameIsOnline() == false)) {
        UnitSelect(UnitGroupUnit(UnitGroupSelected(lv_itPlayer), 1), lv_itPlayer, false);
        UnitSelect(lv_itUnit, lv_itPlayer, true);
        libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(lv_itUnit, lv_itPlayer);
        libUIUI_gf_UIHeroConsoleSetUpForPlayer(lv_itPlayer, lv_itUnit);
        libGame_gv_players[lv_itPlayer].lv_selectedUnit = lv_itUnit;
        libGame_gv_players[lv_itPlayer].lv_selectedUnitGroup = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_InputPlayerClicksUnit_Init () {
    libUIUI_gt_InputPlayerClicksUnit = TriggerCreate("libUIUI_gt_InputPlayerClicksUnit_Func");
    TriggerAddEventUnitClick(libUIUI_gt_InputPlayerClicksUnit, null, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ctrl (Down) - Show Secondary Abilities
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_CtrlDownShowSecondaryAbilities_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityShow(libGame_gv_players[EventPlayer()].lv_heroUnit, "SpecificHealingWard", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_CtrlDownShowSecondaryAbilities_Init () {
    libUIUI_gt_CtrlDownShowSecondaryAbilities = TriggerCreate("libUIUI_gt_CtrlDownShowSecondaryAbilities_Func");
    TriggerEnable(libUIUI_gt_CtrlDownShowSecondaryAbilities, false);
    TriggerAddEventKeyPressed(libUIUI_gt_CtrlDownShowSecondaryAbilities, c_playerAny, c_keyControl, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ctrl (Up) - Hide Secondary Abilities
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_CtrlUpHideSecondaryAbilities_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityShow(libGame_gv_players[EventPlayer()].lv_heroUnit, "SpecificHealingWard", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_CtrlUpHideSecondaryAbilities_Init () {
    libUIUI_gt_CtrlUpHideSecondaryAbilities = TriggerCreate("libUIUI_gt_CtrlUpHideSecondaryAbilities_Func");
    TriggerEnable(libUIUI_gt_CtrlUpHideSecondaryAbilities, false);
    TriggerAddEventKeyPressed(libUIUI_gt_CtrlUpHideSecondaryAbilities, c_playerAny, c_keyControl, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tab - Show LeaderBoard
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_TabShowLeaderBoard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libUIUI_gf_UIMyCustomLeaderBoardPlayerWatchingLeaderBoard(EventPlayer()) == true)) {
        DialogControlSetVisible(libUIUI_gv_uIMyCustomLeaderBoard.lv_mainDialog, libCore_gv_playerGroupFromPlayer[EventPlayer()], false);
    }
    else {
        DialogControlSetVisible(libUIUI_gv_uIMyCustomLeaderBoard.lv_mainDialog, libCore_gv_playerGroupFromPlayer[EventPlayer()], true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_TabShowLeaderBoard_Init () {
    libUIUI_gt_TabShowLeaderBoard = TriggerCreate("libUIUI_gt_TabShowLeaderBoard_Func");
    TriggerEnable(libUIUI_gt_TabShowLeaderBoard, false);
    TriggerAddEventKeyPressed(libUIUI_gt_TabShowLeaderBoard, c_playerAny, c_keyTab, true, c_keyModifierStateIgnore, c_keyModifierStateExclude, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control - (Down) Show Quick Talents
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_ControlDownShowQuickTalents_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_buttonIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_buttonIndex = libUIUI_gv_uIMyTalentsPanelPlayerViewingQuickTalentsTierCtrlTab[EventPlayer()];
    if ((libUIUI_gv_uIMyTalentsPanelPlayerViewingQuickTalents[EventPlayer()] == false)) {
        if ((libGame_gv_players[EventPlayer()].lv_talentsNumberofPickedTalentsPerTier[lv_buttonIndex] >= libCore_gv_heroData[libCore_gf_CommandersGetHeroIndexOfPlayerHero(EventPlayer())].lv_talentsCountPerTier[lv_buttonIndex])) {
            return true;
        }
        libUIUI_gf_UIMyTalentsPanelTierButtonPressedbyPlayer(EventPlayer(), libUIUI_gv_uIMyTalentsPanelPlayerViewingQuickTalentsTierCtrlTab[EventPlayer()]);
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_uIMyTalentsPanel.lv_tierSelectionButton[lv_buttonIndex], true, libCore_gv_playerGroupFromPlayer[EventPlayer()]);
    }
    else {
        libUIUI_gf_UIMyTalentsPanelTierButtonPressedbyPlayer(EventPlayer(), libUIUI_gv_uIMyTalentsPanelPlayerViewingQuickTalentsTierCtrlTab[EventPlayer()]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_ControlDownShowQuickTalents_Init () {
    libUIUI_gt_ControlDownShowQuickTalents = TriggerCreate("libUIUI_gt_ControlDownShowQuickTalents_Func");
    TriggerEnable(libUIUI_gt_ControlDownShowQuickTalents, false);
    TriggerAddEventKeyPressed(libUIUI_gt_ControlDownShowQuickTalents, c_playerAny, c_keyControl, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control - (Up) Hide Quick Talents
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_ControlUpHideQuickTalents_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_buttonIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libUIUI_gv_uIMyTalentsPanelPlayerViewingQuickTalents[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_buttonIndex = libUIUI_gv_uIMyTalentsPanelPlayerViewingQuickTalentsTierCtrlTab[EventPlayer()];
    if ((libGame_gv_players[EventPlayer()].lv_talentsNumberofPickedTalentsPerTier[lv_buttonIndex] >= libCore_gv_heroData[libCore_gf_CommandersGetHeroIndexOfPlayerHero(EventPlayer())].lv_talentsCountPerTier[lv_buttonIndex])) {
        return true;
    }
    libUIUI_gf_UIMyTalentsPanelTierButtonPressedbyPlayer(EventPlayer(), libUIUI_gv_uIMyTalentsPanelPlayerViewingQuickTalentsTierCtrlTab[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_ControlUpHideQuickTalents_Init () {
    libUIUI_gt_ControlUpHideQuickTalents = TriggerCreate("libUIUI_gt_ControlUpHideQuickTalents_Func");
    TriggerEnable(libUIUI_gt_ControlUpHideQuickTalents, false);
    TriggerAddEventKeyPressed(libUIUI_gt_ControlUpHideQuickTalents, c_playerAny, c_keyControl, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ctrl + Tab - Change Quick Talents Tier
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_CtrlTabChangeQuickTalentsTier_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_buttonIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_buttonIndex = libUIUI_gv_uIMyTalentsPanelPlayerViewingQuickTalentsTierCtrlTab[EventPlayer()];
    if ((libGame_gv_players[EventPlayer()].lv_talentsNumberofPickedTalentsPerTier[lv_buttonIndex] >= libCore_gv_heroData[libCore_gf_CommandersGetHeroIndexOfPlayerHero(EventPlayer())].lv_talentsCountPerTier[lv_buttonIndex])) {
        return true;
    }
    if ((libUIUI_gv_uIMyTalentsPanelPlayerViewingQuickTalents[EventPlayer()] == false)) {
        libUIUI_gf_UIMyTalentsPanelTierButtonPressedbyPlayer(EventPlayer(), lv_buttonIndex);
        libNtve_gf_SetDialogItemToggled(libUIUI_gv_uIMyTalentsPanel.lv_tierSelectionButton[lv_buttonIndex], true, libCore_gv_playerGroupFromPlayer[EventPlayer()]);
    }
    else {
        libUIUI_gf_UIMyTalentsPanelTierButtonPressedbyPlayer(EventPlayer(), libUIUI_gf_UIMyTalentsPanelCalculateWheelNextTalentsTier(lv_buttonIndex));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_CtrlTabChangeQuickTalentsTier_Init () {
    libUIUI_gt_CtrlTabChangeQuickTalentsTier = TriggerCreate("libUIUI_gt_CtrlTabChangeQuickTalentsTier_Func");
    TriggerEnable(libUIUI_gt_CtrlTabChangeQuickTalentsTier, false);
    TriggerAddEventKeyPressed(libUIUI_gt_CtrlTabChangeQuickTalentsTier, c_playerAny, c_keyTab, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Mechanics Panel Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_MapMechanicsPanelInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_itTeam;
    int lv_itCannonball;
    int[6] lv_panels;
    int lv_currentPanelLayer;
    int lv_enemyTeam;

    // Automatic Variable Declarations
    const int autoE69FCAF7_ae = libCore_gv_bALMaxTeams;
    const int autoE69FCAF7_ai = 1;
    const int auto11D57F77_ae = libCore_gv_bALMaxTeams;
    const int auto11D57F77_ai = 1;
    const int auto4D7077B2_ae = libUIUI_gv_mapMechanicsBlackheartsBayCannonballCount_C;
    const int auto4D7077B2_ai = 1;
    const int auto024E983C_ae = libCore_gv_bALMaxTeams;
    const int auto024E983C_ai = 1;
    const int auto69D4EDDC_ae = libCore_gv_bALMaxTeams;
    const int auto69D4EDDC_ai = 1;
    const int autoAF81B7ED_ae = libCore_gv_bALMaxTeams;
    const int autoAF81B7ED_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/MapMechanicPanel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "RavenCourtPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "TributeSpawnFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TributeInfoLabel");
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnInfoLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TributeTimerLabel");
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnTimerLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "CurseFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "CurseInfoLabel");
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseInfoLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "CurseTimerLabel");
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseTimerLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    lv_itTeam = 1;
    for ( ; ( (autoE69FCAF7_ai >= 0 && lv_itTeam <= autoE69FCAF7_ae) || (autoE69FCAF7_ai < 0 && lv_itTeam >= autoE69FCAF7_ae) ) ; lv_itTeam += autoE69FCAF7_ai ) {
        lv_enemyTeam = (3 - lv_itTeam);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "Team" + IntToString(lv_itTeam) + "TributeFrame");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTeamTributeFrame[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "BackgroundBlue");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamChaosIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "RavenIconBlue");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamChaosIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "BackgroundRed");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "RavenIconRed");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TributeCounter");
        libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTeamTributeCounterLabel[lv_itTeam] = DialogControlLastCreated();
        lv_currentPanelLayer -= 1;
    }
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTeamTributeCounterLabel[libGame_gv_teamOrderIndex_C], "Storm_MapMechanic_MechanicCounterLeft_Red", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTeamTributeCounterLabel[libGame_gv_teamChaosIndex_C], "Storm_MapMechanic_MechanicCounterRight_Blue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "BlackheartsBayPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "ChestSpawnFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayChestSpawnFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "DoubloonModeFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayDoubloonModeFrame = DialogControlLastCreated();
    lv_itTeam = 1;
    for ( ; ( (auto11D57F77_ai >= 0 && lv_itTeam <= auto11D57F77_ae) || (auto11D57F77_ai < 0 && lv_itTeam >= auto11D57F77_ae) ) ; lv_itTeam += auto11D57F77_ai ) {
        lv_enemyTeam = (3 - lv_itTeam);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "BackgroundBlue");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamChaosIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "BackgroundRed");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "DoubloonBlue");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamChaosIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "DoubloonRed");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "DoubloonCounter");
        libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayDoubloonCounterLabel[lv_itTeam] = DialogControlLastCreated();
    }
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayDoubloonCounterLabel[libGame_gv_teamOrderIndex_C], "Storm_MapMechanic_MechanicCounterLeft_Red", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayDoubloonCounterLabel[libGame_gv_teamChaosIndex_C], "Storm_MapMechanic_MechanicCounterRight_Blue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "CannonModeFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonModeFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "CannonballsLeftLabel");
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonRemainingCannonballsLabel = DialogControlLastCreated();
    lv_itCannonball = 1;
    for ( ; ( (auto4D7077B2_ai >= 0 && lv_itCannonball <= auto4D7077B2_ae) || (auto4D7077B2_ai < 0 && lv_itCannonball >= auto4D7077B2_ae) ) ; lv_itCannonball += auto4D7077B2_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "CannonShotFrame" + IntToString(lv_itCannonball) + "/ActiveCannonBall");
        libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonCannonballImages[lv_itCannonball] = DialogControlLastCreated();
    }
    lv_itTeam = 1;
    for ( ; ( (auto024E983C_ai >= 0 && lv_itTeam <= auto024E983C_ae) || (auto024E983C_ai < 0 && lv_itTeam >= auto024E983C_ae) ) ; lv_itTeam += auto024E983C_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "ShotCounter");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonShotCounterLabel[lv_itTeam] = DialogControlLastCreated();
    }
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonShotCounterLabel[libGame_gv_teamOrderIndex_C], "Storm_MapMechanic_MechanicCounterSmallLeft_Red", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonShotCounterLabel[libGame_gv_teamChaosIndex_C], "Storm_MapMechanic_MechanicCounterSmallLeft_Blue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    lv_currentPanelLayer -= 1;
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HauntedMinesPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "SkullModeFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "SkullsRemainingLabel");
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeRemainingSkullsLabel = DialogControlLastCreated();
    lv_itTeam = 1;
    for ( ; ( (auto69D4EDDC_ai >= 0 && lv_itTeam <= auto69D4EDDC_ae) || (auto69D4EDDC_ai < 0 && lv_itTeam >= auto69D4EDDC_ae) ) ; lv_itTeam += auto69D4EDDC_ai ) {
        lv_enemyTeam = (3 - lv_itTeam);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "BackgroundBlue");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamChaosIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "BackgroundRed");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "SkullCounter");
        if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_MapMechanic_MechanicCounterLeft_Blue", libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_MapMechanic_MechanicCounterLeft_Red", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
        }
        else {
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_MapMechanic_MechanicCounterRight_Blue", libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_MapMechanic_MechanicCounterRight_Red", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
        }
        libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeSkullCounterLabel[lv_itTeam] = DialogControlLastCreated();
    }
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "MineTimerModeFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesMineTimerModeFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "MineOpenTimer");
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesMineTimerLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "GolemModeFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesGolemModeFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "AllyGolemHealthBar");
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesAllyGolemHealthUnitStatus = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "EnemyGolemHealthBar");
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesEnemyGolemHealthUnitStatus = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AllySkullCounter");
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesAllyGolemModeSkullCounterLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "EnemySkullCounter");
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesEnemyGolemModeSkullCounterLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AllyGolemLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_UIUI_0F42CBFC"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "EnemyGolemLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_UIUI_D98BE20D"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    lv_currentPanelLayer -= 1;
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "DragonShirePanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_dragonShirePanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "ShrineTimerModeFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineTimerModeFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "ShrineActivateTimer");
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineTimerLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "ShrineModeFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineModeFrame = DialogControlLastCreated();
    lv_itTeam = 1;
    for ( ; ( (autoAF81B7ED_ai >= 0 && lv_itTeam <= autoAF81B7ED_ae) || (autoAF81B7ED_ai < 0 && lv_itTeam >= autoAF81B7ED_ae) ) ; lv_itTeam += autoAF81B7ED_ai ) {
        lv_enemyTeam = (3 - lv_itTeam);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "BackgroundBlue");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamChaosIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "BackgroundRed");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "MoonShrineDisabled");
        libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineDisabledImage[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "StarShrineDisabled");
        libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineDisabledImage[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "MoonShrineEnabled");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineEnabledImage[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "StarShrineEnabled");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineEnabledImage[lv_itTeam] = DialogControlLastCreated();
    }
    libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineDisabledImage[libGame_gv_teamOrderIndex_C], "@UI/HUD_MapMechanic_DragonShire_MoonDisabledRed", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineDisabledImage[libGame_gv_teamChaosIndex_C], "@UI/HUD_MapMechanic_DragonShire_MoonDisabledBlue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineDisabledImage[libGame_gv_teamOrderIndex_C], "@UI/HUD_MapMechanic_DragonShire_StarDisabledRed", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineDisabledImage[libGame_gv_teamChaosIndex_C], "@UI/HUD_MapMechanic_DragonShire_StarDisabledBlue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineEnabledImage[libGame_gv_teamOrderIndex_C], "@UI/HUD_MapMechanic_DragonShire_MoonEnabledRed", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineEnabledImage[libGame_gv_teamChaosIndex_C], "@UI/HUD_MapMechanic_DragonShire_MoonEnabledBlue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineEnabledImage[libGame_gv_teamOrderIndex_C], "@UI/HUD_MapMechanic_DragonShire_StarEnabledRed", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineEnabledImage[libGame_gv_teamChaosIndex_C], "@UI/HUD_MapMechanic_DragonShire_StarEnabledBlue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "DragonModeFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonModeFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DragonInfoLabel");
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonInfoLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DragonTimer");
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonTimerLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "DragonHealthBar");
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonHealthUnitStatus = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DragonHealthBar/HealthLabel/StatusLabel");
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonHealthLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    lv_currentPanelLayer -= 1;
    libUIUI_gf_MapMechanicsGardenOfTerrorInit(lv_panels[lv_currentPanelLayer]);
    libUIUI_gf_MapMechanicsBattleForSlaynInit(lv_panels[lv_currentPanelLayer]);
    TriggerEnable(libUIUI_gt_MapMechanicsPanelUpdate, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_MapMechanicsPanelInitialize_Init () {
    libUIUI_gt_MapMechanicsPanelInitialize = TriggerCreate("libUIUI_gt_MapMechanicsPanelInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Mechanics Panel Update
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_MapMechanicsPanelUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_MapMechanicsPanelUpdate_Init () {
    libUIUI_gt_MapMechanicsPanelUpdate = TriggerCreate("libUIUI_gt_MapMechanicsPanelUpdate_Func");
    TriggerEnable(libUIUI_gt_MapMechanicsPanelUpdate, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_MapMechanicsPanelUpdate, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Mechanics Blackhearts Bay Chests Spawned Frame Timer Expires
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_MapMechanicsBlackheartsBayChestsSpawnedFrameTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayChestSpawnFrame, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_MapMechanicsBlackheartsBayChestsSpawnedFrameTimerExpires_Init () {
    libUIUI_gt_MapMechanicsBlackheartsBayChestsSpawnedFrameTimerExpires = TriggerCreate("libUIUI_gt_MapMechanicsBlackheartsBayChestsSpawnedFrameTimerExpires_Func");
    TriggerAddEventTimer(libUIUI_gt_MapMechanicsBlackheartsBayChestsSpawnedFrameTimerExpires, libUIUI_gv_mapMechanicsBlackheartsBayChestsSpawnedFrameTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Initialize Notification Display
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInitializeNotificationDisplay_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/GameAlertsPanel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_uINotificationDisplay.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeFlash, "InGameAlerts");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_uINotificationDisplay.lv_flashFrame = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInitializeNotificationDisplay_Init () {
    libUIUI_gt_UIInitializeNotificationDisplay = TriggerCreate("libUIUI_gt_UIInitializeNotificationDisplay_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Ping - Listen For Player Ping
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIPingListenForPlayerPing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pingType;
    unit lv_targetUnit;
    int lv_pingingPlayer;
    unit lv_pingingPlayerHero;
    playergroup lv_pingPlayerGroup;
    string lv_pingModel;
    soundlink lv_pingSound;

    // Automatic Variable Declarations
    int autoC60559F9_val;

    // Variable Initialization
    lv_pingPlayerGroup = PlayerGroupEmpty();
    lv_pingModel = "UI_Ping_General";
    lv_pingSound = SoundLink("UI_Game_Ping_General", -1);

    // Conditions
    if (testConds) {
        if (!((TimerGetRemaining(libGame_gv_players[EventPlayer()].lv_pingCooldownTimer) == 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pingType = EventPingOption();
    if ((lv_pingType == (4))) {
        return true;
    }

    lv_targetUnit = EventPingUnit();
    lv_pingingPlayer = EventPlayer();
    lv_pingingPlayerHero = libGame_gv_players[lv_pingingPlayer].lv_heroUnit;
    if ((libGame_gv_players[lv_pingingPlayer].lv_faction == libGame_ge_PlayerFaction_Order)) {
        lv_pingPlayerGroup = libCore_gv_teamOrder;
    }
    else {
        lv_pingPlayerGroup = libCore_gv_teamChaos;
    }
    TimerStart(libGame_gv_players[EventPlayer()].lv_pingCooldownTimer, libUIUI_gv_uI_PingCooldownTime_C, false, c_timeGame);
    autoC60559F9_val = lv_pingType;
    if (autoC60559F9_val == (-1)) {
        if ((lv_targetUnit != null)) {
            libUIUI_gf_UIPingPlayerPingsUnit(lv_pingingPlayer, lv_targetUnit, lv_pingPlayerGroup);
        }
        else {
            lv_targetUnit = libUIUI_gf_UIPingGetSpecialPingTargetInRangeOfPoint(EventPingPoint(), EventPingedMinimap(), lv_pingingPlayer);
            if ((lv_targetUnit != null)) {
                libUIUI_gf_UIPingPlayerPingsUnit(lv_pingingPlayer, lv_targetUnit, lv_pingPlayerGroup);
            }
            else {
                libNtve_gf_CreatePingFacingAngle(lv_pingPlayerGroup, lv_pingModel, EventPingPoint(), Color(100.00, 100.00, 100.00), 3.0, 270.0);
                SoundPlayForPlayer(lv_pingSound, lv_pingingPlayer, lv_pingPlayerGroup, 100.0, 0.0);
            }
        }
    }
    else if (autoC60559F9_val == (2)) {
        libUIUI_gf_UIPingPlayerUsesAssistMePing(lv_pingingPlayer, EventPingPoint());
    }
    else if (autoC60559F9_val == (0)) {
        libUIUI_gf_UIPingPlayerUsesDangerPing(lv_pingingPlayer, EventPingPoint(), lv_targetUnit);
    }
    else if (autoC60559F9_val == (1)) {
        libUIUI_gf_UIPingPlayerUsesOnMyWayPing(lv_pingingPlayer, EventPingPoint());
    }
    else if (autoC60559F9_val == (3)) {
        libUIUI_gf_PingPlayerUsesDefendPing(lv_targetUnit, lv_pingingPlayer, EventPingPoint());
    }
    else if (autoC60559F9_val == (5)) {
        libUIUI_gf_UIPingPlayerUsesRetreatPing(lv_pingingPlayer, EventPingPoint());
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIPingListenForPlayerPing_Init () {
    libUIUI_gt_UIPingListenForPlayerPing = TriggerCreate("libUIUI_gt_UIPingListenForPlayerPing_Func");
    TriggerAddEventPing(libUIUI_gt_UIPingListenForPlayerPing, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Initialize Target Info Panel
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInitializeTargetInfoPanel_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_i;
    int[6] lv_panels;
    int lv_currentPanelLayer;
    int lv_statBoostIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/TargetInfoPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_uITargetInfoPanel.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TargetNameLabel");
    libUIUI_gv_uITargetInfoPanel.lv_unitName = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TargetPlayerNameLabel");
    libUIUI_gv_uITargetInfoPanel.lv_playerName = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TargetLevelLabel");
    libUIUI_gv_uITargetInfoPanel.lv_level = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "TargetHeroImage");
    libUIUI_gv_uITargetInfoPanel.lv_portraitImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitTarget, "TargetHeroUnitFrame");
    libUIUI_gv_uITargetInfoPanel.lv_unitTargetFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "TargetMechanicLabelIcon");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_uITargetInfoPanel.lv_mapMechanicIcon = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TargetMechanicLabel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_uITargetInfoPanel.lv_mapMechanicLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "CursedBuildingIcon");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_UIUI_849F0660"), PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_uITargetInfoPanel.lv_cursedBuildingIcon = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DescriptionLabel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_uITargetInfoPanel.lv_descriptionLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HealthAndManaUnitStatusFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_uITargetInfoPanel.lv_healthAndManaUnitStatusStatusFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HealthOnlyUnitStatusFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_uITargetInfoPanel.lv_healthOnlyUnitStatusStatusFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "TowerWithAmmoUnitStatusFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_uITargetInfoPanel.lv_towerWithAmmoUnitStatusStatusFrame = DialogControlLastCreated();
    libUIUI_gf_UITargetInfoPanelEnableDisable(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInitializeTargetInfoPanel_Init () {
    libUIUI_gt_UIInitializeTargetInfoPanel = TriggerCreate("libUIUI_gt_UIInitializeTargetInfoPanel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Target Info Panel - Update
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UITargetInfoPanelUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    const int auto48EA03C5_ae = libCore_gv_bALMaxPlayers;
    const int auto48EA03C5_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = 1;
    for ( ; ( (auto48EA03C5_ai >= 0 && lv_player <= auto48EA03C5_ae) || (auto48EA03C5_ai < 0 && lv_player >= auto48EA03C5_ae) ) ; lv_player += auto48EA03C5_ai ) {
        if ((libGame_gv_players[lv_player].lv_playerisJoinedatStart == true)) {
            libUIUI_gf_UITargetInfoPanelUpdateForPlayer(lv_player);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UITargetInfoPanelUpdate_Init () {
    libUIUI_gt_UITargetInfoPanelUpdate = TriggerCreate("libUIUI_gt_UITargetInfoPanelUpdate_Func");
    TriggerEnable(libUIUI_gt_UITargetInfoPanelUpdate, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_UITargetInfoPanelUpdate, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team Level Panel Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_TeamLevelPanelInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_itTeam;
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    const int auto90603BD7_ae = libCore_gv_bALMaxTeams;
    const int auto90603BD7_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/TeamLevelPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_teamLevel_Panel.lv_mainDialog = DialogControlLastCreated();
    lv_itTeam = 1;
    for ( ; ( (auto90603BD7_ai >= 0 && lv_itTeam <= auto90603BD7_ae) || (auto90603BD7_ai < 0 && lv_itTeam >= auto90603BD7_ae) ) ; lv_itTeam += auto90603BD7_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "LevelLabel");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
        libUIUI_gv_teamLevel_Panel.lv_levelLabels[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "Team" + IntToString(lv_itTeam) + "UnitStatusFrame");
        libUIUI_gv_teamLevel_Panel.lv_xPBarUnitStatusFrames[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatusBar, "Team" + IntToString(lv_itTeam) + "UnitStatusFrame/XPBar");
        libUIUI_gv_teamLevel_Panel.lv_xPBarUnitStatusBars[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "GlowPipsImageTeam" + IntToString(lv_itTeam));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, true);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "BGImageColorFillTeam" + IntToString(lv_itTeam));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, true);
    }
    libNtve_gf_SetDialogItemImage(libUIUI_gv_teamLevel_Panel.lv_xPBarUnitStatusBars[1], "@UI/HUD_TeamLevel_BarRed", libGame_gv_teams[2].lv_teamPlayerGroup);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_teamLevel_Panel.lv_xPBarUnitStatusBars[2], "@UI/HUD_TeamLevel_BarBlue", libGame_gv_teams[2].lv_teamPlayerGroup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_TeamLevelPanelInitialize_Init () {
    libUIUI_gt_TeamLevelPanelInitialize = TriggerCreate("libUIUI_gt_TeamLevelPanelInitialize_Func");
    TriggerAddEventMapInit(libUIUI_gt_TeamLevelPanelInitialize);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team Status Panel Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_TeamStatusPanelInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_itTeam;
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    const int autoD23D6CD6_ae = libCore_gv_bALMaxTeams;
    const int autoD23D6CD6_ai = 1;
    const int autoBD0C6143_ae = libCore_gv_bALMaxTeams;
    const int autoBD0C6143_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/CompareTeamPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_teamStatusPanel.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "TopChevron");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_topChevron = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "TopChevronEmpty");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_topChevronEmpty = DialogControlLastCreated();
    lv_itTeam = 1;
    for ( ; ( (autoD23D6CD6_ai >= 0 && lv_itTeam <= autoD23D6CD6_ae) || (autoD23D6CD6_ai < 0 && lv_itTeam >= autoD23D6CD6_ae) ) ; lv_itTeam += autoD23D6CD6_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "ColorBar");
        DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 83.53, 100.00), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(87.45, 15.69, 25.49), libGame_gv_teams[(3-lv_itTeam)].lv_teamPlayerGroupNoNPCPlayers);
        libUIUI_gv_teamStatusPanel.lv_teamColorBar[lv_itTeam] = DialogControlLastCreated();
    }
    libNtve_gf_SetDialogItemColor(libUIUI_gv_teamStatusPanel.lv_teamColorBar[1], Color(0.00, 83.53, 100.00), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libNtve_gf_SetDialogItemColor(libUIUI_gv_teamStatusPanel.lv_teamColorBar[2], Color(87.45, 15.69, 25.49), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "TeamMatchMechanics");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_teamStatusPanel.lv_mapMechanicMainPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "MapMechanic/MapMechanicImage");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "MapMechanic/TooltipAnchorFrame");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicImageTooltipFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "MapMechanic/MapMechanicStatusLabel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicLabel = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "YourTeamMapMechanic");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamPanel[1] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "YourTeamMapMechanic/TeamMapMechanic");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamLabel[1] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "YourTeamMapMechanic/TooltipAnchorFrame");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamLabelTooltipFrame[1] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "YourTeamMapMechanic/TeamMechanicImage1");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamImages[1][1] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "YourTeamMapMechanic/TeamMechanicImage2");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamImages[1][2] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "EnemyTeamMapMechanic");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamPanel[2] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "EnemyTeamMapMechanic/TeamMapMechanic");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamLabel[2] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "EnemyTeamMapMechanic/TooltipAnchorFrame");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamLabelTooltipFrame[2] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "EnemyTeamMapMechanic/TeamMechanicImage1");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamImages[2][1] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "EnemyTeamMapMechanic/TeamMechanicImage2");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicTeamImages[2][2] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[(lv_currentPanelLayer - 1)], c_triggerControlTypePanel, "TeamMatchMechanicsActive");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActivePanel = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "MapMechanic/MapMechanicImage");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "MapMechanic/TooltipAnchorFrame");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveImageTooltipFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "MapMechanic/MapMechanicStatusLabel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveLabel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "YourTeamMapMechanic");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamPanel[1] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "YourTeamMapMechanic/TeamMechanicImage");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamImage[1] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "YourTeamMapMechanic/TeamMechanicImageBackground");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamImageBG[1] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "YourTeamMapMechanic/TeamMapMechanic");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamLabel[1] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "YourTeamMapMechanic/TeamMapMechanicSubLabel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamSubLabel[1] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "YourTeamMapMechanic/MechanicHealthFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamHPBar[1] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "YourTeamMapMechanic/MechanicHealthFrame/HealthBar/StatusBarLabel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamHPBarLabel[1] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "EnemyTeamMapMechanic");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamPanel[2] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "EnemyTeamMapMechanic/TeamMechanicImage");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamImage[2] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "EnemyTeamMapMechanic/TeamMechanicImageBackground");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamImageBG[2] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "EnemyTeamMapMechanic/TeamMapMechanic");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamLabel[2] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "EnemyTeamMapMechanic/TeamMapMechanicSubLabel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamSubLabel[2] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "EnemyTeamMapMechanic/MechanicHealthFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamHPBar[2] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "EnemyTeamMapMechanic/MechanicHealthFrame/HealthBar/StatusBarLabel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_teamStatusPanel.lv_mapMechanicActiveTeamHPBarLabel[2] = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    lv_itTeam = 1;
    for ( ; ( (autoBD0C6143_ai >= 0 && lv_itTeam <= autoBD0C6143_ae) || (autoBD0C6143_ai < 0 && lv_itTeam >= autoBD0C6143_ae) ) ; lv_itTeam += autoBD0C6143_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "Team" + IntToString(lv_itTeam) + "CoreHealth");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
        DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        libUIUI_gv_teamStatusPanel.lv_coreHealthBarFrames[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "CoreUnitStatusFrame");
        DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
        if ((libGame_gv_teams[lv_itTeam].lv_core != null)) {
            libNtve_gf_SetDialogItemUnit(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_core, PlayerGroupAll());
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "BGImage_Blue");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, true);
        DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
        if ((lv_itTeam == 1)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "BGImage_Red");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[(3-lv_itTeam)].lv_teamPlayerGroupNoNPCPlayers, true);
        DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
        if ((lv_itTeam == 2)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
        }

        lv_currentPanelLayer -= 1;
    }
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team1CoreHealth/PortraitImage");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "@UI/HUD_PalacePortrait_Blue", libGame_gv_teams[1].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "@UI/HUD_PalacePortrait_Red", libGame_gv_teams[2].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "@UI/HUD_PalacePortrait_Blue", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team2CoreHealth/PortraitImage");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "@UI/HUD_PalacePortrait_Red", libGame_gv_teams[1].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "@UI/HUD_PalacePortrait_Blue", libGame_gv_teams[2].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "@UI/HUD_PalacePortrait_Red", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_TeamStatusPanelInitialize_Init () {
    libUIUI_gt_TeamStatusPanelInitialize = TriggerCreate("libUIUI_gt_TeamStatusPanelInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team Status Panel Update
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_TeamStatusPanelUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_team;
    string lv_xPTotalStrings;
    int lv_rosterSlot;
    playergroup lv_allyTeam;
    playergroup lv_enemyTeam;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_xPTotalStrings = "";
    lv_allyTeam = PlayerGroupEmpty();
    lv_enemyTeam = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(libGame_gv_teams[1].lv_core, c_unitPropLifePercent, c_unitPropCurrent) == 100.0) && (UnitGetPropertyFixed(libGame_gv_teams[1].lv_core, c_unitPropShieldsPercent, c_unitPropCurrent) == 100.0)) {
        DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_coreHealthBarFrames[1], PlayerGroupAll(), false);
    }
    else {
        DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_coreHealthBarFrames[1], PlayerGroupAll(), true);
    }
    if ((UnitGetPropertyFixed(libGame_gv_teams[2].lv_core, c_unitPropLifePercent, c_unitPropCurrent) == 100.0) && (UnitGetPropertyFixed(libGame_gv_teams[2].lv_core, c_unitPropShieldsPercent, c_unitPropCurrent) == 100.0)) {
        DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_coreHealthBarFrames[2], PlayerGroupAll(), false);
    }
    else {
        DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_coreHealthBarFrames[2], PlayerGroupAll(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_TeamStatusPanelUpdate_Init () {
    libUIUI_gt_TeamStatusPanelUpdate = TriggerCreate("libUIUI_gt_TeamStatusPanelUpdate_Func");
    TriggerEnable(libUIUI_gt_TeamStatusPanelUpdate, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_TeamStatusPanelUpdate, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Status - Set Protected Color
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UnitStatusSetProtectedColor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_allyTeam;
    int lv_enemyTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_allyTeam = libGame_gf_TeamNumberOfPlayer(EventPlayer());
    lv_enemyTeam = libGame_gf_EnemyTeamNumberOfPlayer(EventPlayer());
    DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatusBar, "HeroUnitStatusParentFrame/InvincibleHealthBarFrame/HealthBarInvincible", EventUnit());
    DialogControlSetAnimationState(DialogControlLastCreated(), libGame_gf_PlayersOnTeamHeroes(lv_allyTeam, true), "ProtectedDarkAdjustColor", "AllyColor");
    DialogControlSetAnimationState(DialogControlLastCreated(), libGame_gf_PlayersOnTeamHeroes(lv_enemyTeam, true), "ProtectedDarkAdjustColor", "EnemyColor");
    DialogControlSetAnimationState(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[EventPlayer()], "ProtectedDarkAdjustColor", "PlayerColor");
    if ((lv_allyTeam == libGame_gv_teamOrderIndex_C)) {
        DialogControlSetAnimationState(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "ProtectedDarkAdjustColor", "AllyColor");
    }
    else {
        DialogControlSetAnimationState(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "ProtectedDarkAdjustColor", "EnemyColor");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UnitStatusSetProtectedColor_Init () {
    libUIUI_gt_UnitStatusSetProtectedColor = TriggerCreate("libUIUI_gt_UnitStatusSetProtectedColor_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libUIUI_gt_UnitStatusSetProtectedColor, null, c_unitBehaviorFlagPhysical, c_unitBehaviorChangeCreate);
}

void libUIUI_InitTriggers () {
    libUIUI_gt_UITopPanelInitialize_Init();
    libUIUI_gt_UITopPanelBGSTimer_Init();
    libUIUI_gt_UITopPanelGameTimer_Init();
    libUIUI_gt_UITopPanelHeroicAbilityStateChanged_Init();
    libUIUI_gt_UITopPanelUpdateHeroicAbilityCDs_Init();
    libUIUI_gt_UIMyTalentsPanelHighlightTiers_Init();
    libUIUI_gt_UIMyTalentsPanelInitialize_Init();
    libUIUI_gt_UIMyTalentsPanelPlayerViewingQuickTalentsUpdate_Init();
    libUIUI_gt_UIPropertyFramePanelInitialize_Init();
    libUIUI_gt_UIMyPropertyPanelPeriodicUpdate_Init();
    libUIUI_gt_UIMyCustomLeaderBoardInitialize_Init();
    libUIUI_gt_UIMyCustomLeaderBoardUpdateStats_Init();
    libUIUI_gt_UIMyCustomLeaderBoardTalentsInitializeTalentsFrame_Init();
    libUIUI_gt_UIMyCustomLeaderBoardTalentsUpdateTalents_Init();
    libUIUI_gt_UIMyCustomLeaderBoardPrestigeAbilitiesSetUpAbilities_Init();
    libUIUI_gt_Timer_Init();
    libUIUI_gt_UIKillLogInitialization_Init();
    libUIUI_gt_UIInitialization_Init();
    libUIUI_gt_UIInitizalizationFastUI_Init();
    libUIUI_gt_AnnUIInit_Init();
    libUIUI_gt_UIInitializeDamageFlashUI_Init();
    libUIUI_gt_UIDamageFlashTriggerDamageFlash_Init();
    libUIUI_gt_UIDamageFlashLowHPSoundsLooper_Init();
    libUIUI_gt_DeathAnnouncementPanelInitialize_Init();
    libUIUI_gt_EncouragementPanelInitialize_Init();
    libUIUI_gt_EncouragementPanelCloseButtonClicked_Init();
    libUIUI_gt_UIFloatingCombatTextNewKineticDamage_Init();
    libUIUI_gt_UIFloatingCombatTextNewKineticDamageBlocked_Init();
    libUIUI_gt_UIFloatingCombatTextNewEnergeticDamage_Init();
    libUIUI_gt_UIFloatingCombatTextNewEnergeticDamageBlocked_Init();
    libUIUI_gt_UIFloatingCombatTextNewStormDamage_Init();
    libUIUI_gt_UIFloatingCombatTextNewHeal_Init();
    libUIUI_gt_FullscreenOverlaysInitialize_Init();
    libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires_Init();
    libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires_Init();
    libUIUI_gt_FullscreenOverlaysInitializeRework_Init();
    libUIUI_gt_GameOverSplashInitialize_Init();
    libUIUI_gt_UIInitializeGameUIHandles_Init();
    libUIUI_gt_UIGameUIMinimapCommandsButtonClicked_Init();
    libUIUI_gt_UIGodRayCreate_Init();
    libUIUI_gt_UIGodRayDestroy_Init();
    libUIUI_gt_UIGodRayDestroyOnDC_Init();
    libUIUI_gt_UIInitializeHealingFountainsHelpText_Init();
    libUIUI_gt_UIHealingFountainsHelpTextPlayerUsesHealingFountain_Init();
    libUIUI_gt_UIHealingFountainsHelpTextTextDisplayController_Init();
    libUIUI_gt_UIHealingFountainsHelpTextHealingFountainDies_Init();
    libUIUI_gt_UIInitializeHeroConsole_Init();
    libUIUI_gt_HeroConsoleUnitStatusBarsInitialize_Init();
    libUIUI_gt_HeroConsoleUnitStatusBarsChannelBehaviorAdded_Init();
    libUIUI_gt_HeroConsoleUnitStatusBarsUpdate_Init();
    libUIUI_gt_DirectiveInit_Init();
    libUIUI_gt_HeroSelectionUIInit_Init();
    libUIUI_gt_HSButtonUsed_Init();
    libUIUI_gt_HSUICountdownTimerExpires_Init();
    libUIUI_gt_UIInitializeHeroTrackerArrow_Init();
    libUIUI_gt_PathDisplayMoveCreate_Init();
    libUIUI_gt_UIInputIngameButtonUsed_Init();
    libUIUI_gt_InputPlayerClicksUnit_Init();
    libUIUI_gt_CtrlDownShowSecondaryAbilities_Init();
    libUIUI_gt_CtrlUpHideSecondaryAbilities_Init();
    libUIUI_gt_TabShowLeaderBoard_Init();
    libUIUI_gt_ControlDownShowQuickTalents_Init();
    libUIUI_gt_ControlUpHideQuickTalents_Init();
    libUIUI_gt_CtrlTabChangeQuickTalentsTier_Init();
    libUIUI_gt_MapMechanicsPanelInitialize_Init();
    libUIUI_gt_MapMechanicsPanelUpdate_Init();
    libUIUI_gt_MapMechanicsBlackheartsBayChestsSpawnedFrameTimerExpires_Init();
    libUIUI_gt_UIInitializeNotificationDisplay_Init();
    libUIUI_gt_UIPingListenForPlayerPing_Init();
    libUIUI_gt_UIInitializeTargetInfoPanel_Init();
    libUIUI_gt_UITargetInfoPanelUpdate_Init();
    libUIUI_gt_TeamLevelPanelInitialize_Init();
    libUIUI_gt_TeamStatusPanelInitialize_Init();
    libUIUI_gt_TeamStatusPanelUpdate_Init();
    libUIUI_gt_UnitStatusSetProtectedColor_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libUIUI_InitLib_completed = false;

void libUIUI_InitLib () {
    if (libUIUI_InitLib_completed) {
        return;
    }

    libUIUI_InitLib_completed = true;

    libUIUI_InitLibraries();
    libUIUI_InitVariables();
    libUIUI_InitTriggers();
}

include "LibAIAI"
include "LibCore"
include "LibGame"
include "LibMapM"


include "TriggerLibs/NativeLib"
include "LibAIAI_h"
include "LibCore_h"
include "LibUIUI_h"

include "LibGame_h"

//--------------------------------------------------------------------------------------------------
// Library: Game
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libGame_InitLibraries () {
    libNtve_InitVariables();
    libAIAI_InitVariables();
    libCore_InitVariables();
    libUIUI_InitVariables();
}

// Variable Initialization
bool libGame_InitVariables_completed = false;

void libGame_InitVariables () {
    int init_i;
    int init_j;
    int init_i1;

    if (libGame_InitVariables_completed) {
        return;
    }

    libGame_InitVariables_completed = true;

    libGame_gv_startMinionAI = true;
    libGame_gv_minionSpawnTimer = TimerCreate();
    libGame_gv_gAMEFirstBloodAvailable = true;
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGame_gv_cameraFollowForced[init_i] = true;
    }
    libGame_gv_announcement_SystemEnabled = true;
    libGame_gv_accouncement_FCT_General_C = "<s val=\"FCT_Event_General\">";
    libGame_gv_announcement_FCT_Ally_C = "<s val=\"FCT_Event_Ally\">";
    libGame_gv_announcement_FCT_Enemy_C = "<s val=\"FCT_Event_Enemy\">";
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGame_gv_announcementQueue[init_i].lv_messageTimer = TimerCreate();
        for (init_i1 = 0; init_i1 <= libGame_gv_announcement_QueueMaxCount_C; init_i1 += 1) {
            libGame_gv_announcementQueue[init_i].lv_announcerVOEvent[init_i1] = libCore_ge_AnnouncerVOEvents_Null;
        }
    }
    libGame_gv_annDefaultAnnSound = "UI_Game_Flyin_AllyKilled";
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGame_gv_annData[init_i].lv_messageTimer = TimerCreate();
        for (init_i1 = 0; init_i1 <= libGame_gv_annDataAnncounts; init_i1 += 1) {
            libGame_gv_annData[init_i].lv_type[init_i1] = libGame_ge_AnnAnnouncementType_Nothing;
        }
        for (init_i1 = 0; init_i1 <= libGame_gv_announcement_QueueMaxCount_C; init_i1 += 1) {
            libGame_gv_annData[init_i].lv_announcerVOEvent[init_i1] = libCore_ge_AnnouncerVOEvents_Null;
        }
    }
    for (init_i = 0; init_i <= libGame_gv_capturePointMaxCount_C; init_i += 1) {
        libGame_gv_capturePoints[init_i].lv_captureProgressBar = c_invalidDialogControlId;
    }
    libGame_gv_capturePointLastCreatedCapturePointIndex_C = "CapturePointLastCreatedCapturePointIndex";
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGame_gv_playerCanChooseTalentsTimer[init_i] = TimerCreate();
    }
    libGame_gv_heroDeath_UpdateStats = true;
    libGame_gv_heroDeath_RespawnMounted = true;
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libGame_gv_stormMapHeroDeathOverlay[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        for (init_j = 0; init_j <= libGame_gv_moonwellMaxMoonwellCount; init_j += 1) {
            libGame_gv_moonwellTextTags[init_i][init_j] = c_textTagNone;
        }
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libGame_gv_moonwellTextTagsUnitGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        libGame_gv_coreTimerNotification[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGame_gv_players[init_i].lv_victoryDefeat = c_gameOverVictory;
        libGame_gv_players[init_i].lv_playerName = StringExternal("Param/Value/lib_Game_D42BD148");
        libGame_gv_players[init_i].lv_heroName = StringExternal("Param/Value/lib_Game_C690062E");
        libGame_gv_players[init_i].lv_pingCooldownTimer = TimerCreate();
        libGame_gv_players[init_i].lv_playerLeftAnnouncementTimer = TimerCreate();
        libGame_gv_players[init_i].lv_eXPPoints = 1000.0;
        libGame_gv_players[init_i].lv_talentsCurrentMaxTier = 1;
        libGame_gv_players[init_i].lv_heroUnitGroup = UnitGroupEmpty();
        libGame_gv_players[init_i].lv_selectedUnitGroup = UnitGroupEmpty();
        libGame_gv_players[init_i].lv_faction = libGame_ge_PlayerFaction_Nothing;
        libGame_gv_players[init_i].lv_multikillTimer = TimerCreate();
        for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
            libGame_gv_players[init_i].lv_participatedTimer[init_i1] = TimerCreate();
        }
        libGame_gv_players[init_i].lv_cameraPlayerHasControl = true;
        libGame_gv_players[init_i].lv_respawnTimer = TimerCreate();
        libGame_gv_players[init_i].lv_downedStateTimer = TimerCreate();
        libGame_gv_players[init_i].lv_gravestoneTextTag = c_textTagNone;
        libGame_gv_players[init_i].lv_mountModel = "HorseMount";
    }
    libGame_gv_safeZonePunchedGroup = UnitGroupEmpty();
    libGame_gv_scalingXPTrickleTimer = TimerCreate();
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        libGame_gv_teams[init_i].lv_teamPlayerGroup = PlayerGroupEmpty();
        libGame_gv_teams[init_i].lv_teamPlayerGroupNoNPCPlayers = PlayerGroupEmpty();
        libGame_gv_teams[init_i].lv_multikillTimer = TimerCreate();
        for (init_i1 = 0; init_i1 <= libGame_gv_mapLanesCountMax; init_i1 += 1) {
            libGame_gv_teams[init_i].lv_fortRegionGROUP[init_i1] = UnitGroupEmpty();
        }
        for (init_i1 = 0; init_i1 <= libGame_gv_mapLanesCountMax; init_i1 += 1) {
            libGame_gv_teams[init_i].lv_keepRegionGROUP[init_i1] = UnitGroupEmpty();
        }
        libGame_gv_teams[init_i].lv_abandonedTheGame = TimerCreate();
    }
    for (init_i = 0; init_i <= libGame_gv_warpMaxWarpCount; init_i += 1) {
        libGame_gv_warpTextTags[init_i] = c_textTagNone;
    }
    libGame_gv_warpTextTagsUnitGroup = UnitGroupEmpty();
}

// Presets
string libGame_ge_EncouragementDeathTipsNames_Ident (int lp_val) {
         if (lp_val == libGame_ge_EncouragementDeathTipsNames_Null) { return "Null"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_Gangups) { return "Gangups"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_FollowMinions) { return "FollowMinions"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_MinionsvsTowns) { return "MinionsvsTowns"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_UseYourAbilities) { return "UseYourAbilities"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_Moonwell) { return "Moonwell"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_Retreat) { return "Retreat"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_TrainTalents) { return "TrainTalents"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_Mount) { return "Mount"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_EnemyFountainDeath) { return "EnemyFountainDeath"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_Count) { return "Count"; }
    return null;
}

// Functions
playergroup libGame_gf_PlayersOnTeamHeroes (int lp_team, bool lp_nPCOption) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_team < 1) || (lp_team > 2))) {
        TextExpressionSetToken("Param/Expression/lib_Game_7590EFAC", "A", IntToText(lp_team));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_Game_7590EFAC"));
        return PlayerGroupEmpty();
    }

    if ((lp_nPCOption == true)) {
        return libGame_gv_teams[lp_team].lv_teamPlayerGroup;
    }
    else {
        return libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers;
    }
}

int libGame_gf_CustomValueIndex (int lp_customValueIndex) {
    // Automatic Variable Declarations
    // Implementation
    return lp_customValueIndex;
}

text libGame_gf_CustomValueGetTextValue (int lp_customValueIndex, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToText(UnitGetCustomValue(lp_unit, lp_customValueIndex), 0);
}

int libGame_gf_CustomValueGetAsInteger (int lp_customValueIndex, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_unit, lp_customValueIndex));
}

int libGame_gf_UnitStatsArmorCustomValueIndex (int lp_armorTypeIndex, int lp_armorUnitTypeIndex) {
    // Variable Declarations
    int lv_value;

    // Automatic Variable Declarations
    int auto7456FCCE_val;
    int auto7C6021AB_val;
    int autoCC21C270_val;
    int autoDF6FD537_val;

    // Variable Initialization

    // Implementation
    auto7456FCCE_val = lp_armorTypeIndex;
    if (auto7456FCCE_val == libGame_ge_UnitStatsArmorBehaviorType_ArmorKinetic) {
        auto7C6021AB_val = lp_armorUnitTypeIndex;
        if (auto7C6021AB_val == libGame_ge_UnitStatsArmorUnitType_Creep) {
            lv_value = libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticCreep);
        }
        else if (auto7C6021AB_val == libGame_ge_UnitStatsArmorUnitType_Hero) {
            lv_value = libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticHero);
        }
        else if (auto7C6021AB_val == libGame_ge_UnitStatsArmorUnitType_Mercenary) {
            lv_value = libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticMercenary);
        }
        else if (auto7C6021AB_val == libGame_ge_UnitStatsArmorUnitType_Minion) {
            lv_value = libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticMinion);
        }
        else if (auto7C6021AB_val == libGame_ge_UnitStatsArmorUnitType_Structure) {
            lv_value = libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticStructure);
        }
        else if (auto7C6021AB_val == libGame_ge_UnitStatsArmorUnitType_Summon) {
            lv_value = libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticSummon);
        }
        else {
        }
    }
    else if (auto7456FCCE_val == libGame_ge_UnitStatsArmorBehaviorType_ArmorEnergetic) {
        autoCC21C270_val = lp_armorUnitTypeIndex;
        if (autoCC21C270_val == libGame_ge_UnitStatsArmorUnitType_Creep) {
            lv_value = libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticCreep);
        }
        else if (autoCC21C270_val == libGame_ge_UnitStatsArmorUnitType_Hero) {
            lv_value = libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticHero);
        }
        else if (autoCC21C270_val == libGame_ge_UnitStatsArmorUnitType_Mercenary) {
            lv_value = libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticMercenary);
        }
        else if (autoCC21C270_val == libGame_ge_UnitStatsArmorUnitType_Minion) {
            lv_value = libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticMinion);
        }
        else if (autoCC21C270_val == libGame_ge_UnitStatsArmorUnitType_Structure) {
            lv_value = libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticStructure);
        }
        else if (autoCC21C270_val == libGame_ge_UnitStatsArmorUnitType_Summon) {
            lv_value = libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticSummon);
        }
        else {
        }
    }
    else if (auto7456FCCE_val == libGame_ge_UnitStatsArmorBehaviorType_ArmorStorm) {
        autoDF6FD537_val = lp_armorUnitTypeIndex;
        if (autoDF6FD537_val == libGame_ge_UnitStatsArmorUnitType_Creep) {
            lv_value = libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorStormCreep);
        }
        else if (autoDF6FD537_val == libGame_ge_UnitStatsArmorUnitType_Hero) {
            lv_value = libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorStormHero);
        }
        else if (autoDF6FD537_val == libGame_ge_UnitStatsArmorUnitType_Mercenary) {
            lv_value = libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorStormMercenary);
        }
        else if (autoDF6FD537_val == libGame_ge_UnitStatsArmorUnitType_Minion) {
            lv_value = libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorStormMinion);
        }
        else if (autoDF6FD537_val == libGame_ge_UnitStatsArmorUnitType_Structure) {
            lv_value = libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorStormStructure);
        }
        else if (autoDF6FD537_val == libGame_ge_UnitStatsArmorUnitType_Summon) {
            lv_value = libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorStormSummon);
        }
        else {
        }
    }
    else {
    }
    return lv_value;
}

int libGame_gf_UnitStatsArmorCustomValueOfUnit (int lp_armorTypeIndex, int lp_armorUnitTypeIndex, unit lp_unit) {
    // Variable Declarations
    int lv_armorIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_armorIndex = libGame_gf_UnitStatsArmorCustomValueIndex(lp_armorTypeIndex, lp_armorUnitTypeIndex);

    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_unit, lv_armorIndex));
}

int libGame_gf_UnitStatsValidArmorValueOfUnit (int lp_armorTypeIndex, int lp_armorUnitTypeIndex, unit lp_unit) {
    // Variable Declarations
    int lv_value;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_value = libGame_gf_UnitStatsArmorCustomValueOfUnit(lp_armorTypeIndex, lp_armorUnitTypeIndex, lp_unit);
    if ((lv_value < libGame_gv_unitStatsMinimumArmor)) {
        return libGame_gv_unitStatsMinimumArmor;
    }
    if ((lv_value > libGame_gv_unitStatsMaximumArmor)) {
        return libGame_gv_unitStatsMaximumArmor;
    }
    return lv_value;
}

bool libGame_gf_UnitStatsTargetUnitHasArmorBehaviorByType (int lp_armorTypeIndex, int lp_armorUnitTypeIndex, unit lp_targetUnit) {
    // Variable Declarations
    string lv_validatorLink;

    // Automatic Variable Declarations
    int auto1AFCFBDF_val;
    int auto43DB4262_val;
    int auto1F31FBC7_val;
    int autoDB06CA53_val;

    // Variable Initialization

    // Implementation
    auto1AFCFBDF_val = lp_armorTypeIndex;
    if (auto1AFCFBDF_val == libGame_ge_UnitStatsArmorBehaviorType_ArmorKinetic) {
        auto43DB4262_val = lp_armorUnitTypeIndex;
        if (auto43DB4262_val == libGame_ge_UnitStatsArmorUnitType_Creep) {
            lv_validatorLink = "CommandersTargetHasArmorKineticCreepBehaviors";
        }
        else if (auto43DB4262_val == libGame_ge_UnitStatsArmorUnitType_Hero) {
            lv_validatorLink = "CommandersTargetHasArmorKineticHeroBehaviors";
        }
        else if (auto43DB4262_val == libGame_ge_UnitStatsArmorUnitType_Mercenary) {
            lv_validatorLink = "CommandersTargetHasArmorKineticMercenaryBehaviors";
        }
        else if (auto43DB4262_val == libGame_ge_UnitStatsArmorUnitType_Minion) {
            lv_validatorLink = "CommandersTargetHasArmorKineticMinionBehaviors";
        }
        else if (auto43DB4262_val == libGame_ge_UnitStatsArmorUnitType_Structure) {
            lv_validatorLink = "CommandersTargetHasArmorKineticStructureBehaviors";
        }
        else if (auto43DB4262_val == libGame_ge_UnitStatsArmorUnitType_Summon) {
            lv_validatorLink = "CommandersTargetHasArmorKineticSummonBehaviors";
        }
        else {
        }
    }
    else if (auto1AFCFBDF_val == libGame_ge_UnitStatsArmorBehaviorType_ArmorEnergetic) {
        auto1F31FBC7_val = lp_armorUnitTypeIndex;
        if (auto1F31FBC7_val == libGame_ge_UnitStatsArmorUnitType_Creep) {
            lv_validatorLink = "CommandersTargetHasArmorEnergeticCreepBehaviors";
        }
        else if (auto1F31FBC7_val == libGame_ge_UnitStatsArmorUnitType_Hero) {
            lv_validatorLink = "CommandersTargetHasArmorEnergeticHeroBehaviors";
        }
        else if (auto1F31FBC7_val == libGame_ge_UnitStatsArmorUnitType_Mercenary) {
            lv_validatorLink = "CommandersTargetHasArmorEnergeticMercenaryBehaviors";
        }
        else if (auto1F31FBC7_val == libGame_ge_UnitStatsArmorUnitType_Minion) {
            lv_validatorLink = "CommandersTargetHasArmorEnergeticMinionBehaviors";
        }
        else if (auto1F31FBC7_val == libGame_ge_UnitStatsArmorUnitType_Structure) {
            lv_validatorLink = "CommandersTargetHasArmorEnergeticStructureBehaviors";
        }
        else if (auto1F31FBC7_val == libGame_ge_UnitStatsArmorUnitType_Summon) {
            lv_validatorLink = "CommandersTargetHasArmorEnergeticSummonBehaviors";
        }
        else {
        }
    }
    else if (auto1AFCFBDF_val == libGame_ge_UnitStatsArmorBehaviorType_ArmorStorm) {
        autoDB06CA53_val = lp_armorUnitTypeIndex;
        if (autoDB06CA53_val == libGame_ge_UnitStatsArmorUnitType_Creep) {
            lv_validatorLink = "CommandersTargetHasArmorStormCreepBehaviors";
        }
        else if (autoDB06CA53_val == libGame_ge_UnitStatsArmorUnitType_Hero) {
            lv_validatorLink = "CommandersTargetHasArmorStormHeroBehaviors";
        }
        else if (autoDB06CA53_val == libGame_ge_UnitStatsArmorUnitType_Mercenary) {
            lv_validatorLink = "CommandersTargetHasArmorStormMercenaryBehaviors";
        }
        else if (autoDB06CA53_val == libGame_ge_UnitStatsArmorUnitType_Minion) {
            lv_validatorLink = "CommandersTargetHasArmorStormMinionBehaviors";
        }
        else if (autoDB06CA53_val == libGame_ge_UnitStatsArmorUnitType_Structure) {
            lv_validatorLink = "CommandersTargetHasArmorStormStructureBehaviors";
        }
        else if (autoDB06CA53_val == libGame_ge_UnitStatsArmorUnitType_Summon) {
            lv_validatorLink = "CommandersTargetHasArmorStormSummonBehaviors";
        }
        else {
        }
    }
    else {
    }
    return libCore_gf_CheckValidatorOnUnit(lv_validatorLink, lp_targetUnit, lp_targetUnit);
}

bool libGame_gf_UnitStatsUnitNeedsUpdateArmor (int lp_currentValue, int lp_armorType, int lp_armorUnitType, unit lp_targetUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_currentValue >= libGame_gv_unitStatsMaximumArmor) && (UnitHasBehavior2(lp_targetUnit, libGame_gv_unitStatsArmorBehaviorType[lp_armorType][lp_armorUnitType][libGame_gv_unitStatsDoubledArmorValue]) == true)) {
        return false;
    }
    if ((lp_currentValue <= libGame_gv_unitStatsMinimumArmor) && (UnitHasBehavior2(lp_targetUnit, libGame_gv_unitStatsArmorBehaviorType[lp_armorType][lp_armorUnitType][0]) == true)) {
        return false;
    }
    if ((lp_currentValue == 0)) {
        if ((libGame_gf_UnitStatsTargetUnitHasArmorBehaviorByType(lp_armorType, lp_armorUnitType, lp_targetUnit) == false)) {
            return false;
        }
    }
    else {
        if ((UnitHasBehavior2(lp_targetUnit, libGame_gv_unitStatsArmorBehaviorType[lp_armorType][lp_armorUnitType][(libGame_gv_unitStatsMaximumArmor + lp_currentValue)]) == true)) {
            return false;
        }
    }
    return true;
}

int libGame_gf_UnitStatsCalculateValidArmorValue (int lp_armorCurrentValue) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_armorCurrentValue > libGame_gv_unitStatsMaximumArmor)) {
        return libGame_gv_unitStatsMaximumArmor;
    }
    else if ((lp_armorCurrentValue < libGame_gv_unitStatsMinimumArmor)) {
        return libGame_gv_unitStatsMinimumArmor;
    }
    return lp_armorCurrentValue;
}

void libGame_gf_UnitStatsRemoveArmorBehaviorsByAliasFromUnit (int lp_armorTypeIndex, int lp_armorUnitTypeIndex, unit lp_unit) {
    // Variable Declarations
    string lv_effectLink;

    // Automatic Variable Declarations
    int auto8558FBC8_val;
    int autoEF5329CE_val;
    int auto5298FC91_val;
    int autoE21800A7_val;

    // Variable Initialization

    // Implementation
    auto8558FBC8_val = lp_armorTypeIndex;
    if (auto8558FBC8_val == libGame_ge_UnitStatsArmorBehaviorType_ArmorKinetic) {
        autoEF5329CE_val = lp_armorUnitTypeIndex;
        if (autoEF5329CE_val == libGame_ge_UnitStatsArmorUnitType_Creep) {
            lv_effectLink = "CommandersRemoveArmorKineticCreepBehaviors";
        }
        else if (autoEF5329CE_val == libGame_ge_UnitStatsArmorUnitType_Hero) {
            lv_effectLink = "CommandersRemoveArmorKineticHeroBehaviors";
        }
        else if (autoEF5329CE_val == libGame_ge_UnitStatsArmorUnitType_Mercenary) {
            lv_effectLink = "CommandersRemoveArmorKineticMercenaryBehaviors";
        }
        else if (autoEF5329CE_val == libGame_ge_UnitStatsArmorUnitType_Minion) {
            lv_effectLink = "CommandersRemoveArmorKineticMinionBehaviors";
        }
        else if (autoEF5329CE_val == libGame_ge_UnitStatsArmorUnitType_Structure) {
            lv_effectLink = "CommandersRemoveArmorKineticStructureBehaviors";
        }
        else if (autoEF5329CE_val == libGame_ge_UnitStatsArmorUnitType_Summon) {
            lv_effectLink = "CommandersRemoveArmorKineticSummonBehaviors";
        }
        else {
        }
    }
    else if (auto8558FBC8_val == libGame_ge_UnitStatsArmorBehaviorType_ArmorEnergetic) {
        auto5298FC91_val = lp_armorUnitTypeIndex;
        if (auto5298FC91_val == libGame_ge_UnitStatsArmorUnitType_Creep) {
            lv_effectLink = "CommandersRemoveArmorEnergeticCreepBehaviors";
        }
        else if (auto5298FC91_val == libGame_ge_UnitStatsArmorUnitType_Hero) {
            lv_effectLink = "CommandersRemoveArmorEnergeticHeroBehaviors";
        }
        else if (auto5298FC91_val == libGame_ge_UnitStatsArmorUnitType_Mercenary) {
            lv_effectLink = "CommandersRemoveArmorEnergeticMercenaryBehaviors";
        }
        else if (auto5298FC91_val == libGame_ge_UnitStatsArmorUnitType_Minion) {
            lv_effectLink = "CommandersRemoveArmorEnergeticMinionBehaviors";
        }
        else if (auto5298FC91_val == libGame_ge_UnitStatsArmorUnitType_Structure) {
            lv_effectLink = "CommandersRemoveArmorEnergeticStructureBehaviors";
        }
        else if (auto5298FC91_val == libGame_ge_UnitStatsArmorUnitType_Summon) {
            lv_effectLink = "CommandersRemoveArmorEnergeticSummonBehaviors";
        }
        else {
        }
    }
    else if (auto8558FBC8_val == libGame_ge_UnitStatsArmorBehaviorType_ArmorStorm) {
        autoE21800A7_val = lp_armorUnitTypeIndex;
        if (autoE21800A7_val == libGame_ge_UnitStatsArmorUnitType_Creep) {
            lv_effectLink = "CommandersRemoveArmorStormCreepBehaviors";
        }
        else if (autoE21800A7_val == libGame_ge_UnitStatsArmorUnitType_Hero) {
            lv_effectLink = "CommandersRemoveArmorStormHeroBehaviors";
        }
        else if (autoE21800A7_val == libGame_ge_UnitStatsArmorUnitType_Mercenary) {
            lv_effectLink = "CommandersRemoveArmorStormMercenaryBehaviors";
        }
        else if (autoE21800A7_val == libGame_ge_UnitStatsArmorUnitType_Minion) {
            lv_effectLink = "CommandersRemoveArmorStormMinionBehaviors";
        }
        else if (autoE21800A7_val == libGame_ge_UnitStatsArmorUnitType_Structure) {
            lv_effectLink = "CommandersRemoveArmorStormStructureBehaviors";
        }
        else if (autoE21800A7_val == libGame_ge_UnitStatsArmorUnitType_Summon) {
            lv_effectLink = "CommandersRemoveArmorStormSummonBehaviors";
        }
        else {
        }
    }
    else {
    }
    UnitCreateEffectUnit(lp_unit, lv_effectLink, lp_unit);
}

void libGame_gf_UnitStatsArmorUpdate (unit lp_targetUnit) {
    // Variable Declarations
    int lv_itArmorType;
    int lv_itArmorUnitType;
    int lv_itBehaviorIndex;
    int lv_armorCurrentValue;

    // Automatic Variable Declarations
    int auto9AC65BD6_ae;
    int auto807BD234_ae;

    // Variable Initialization

    // Implementation
    auto9AC65BD6_ae = libGame_gv_unitStatsArmorTypes;
    lv_itArmorType = 0;
    for ( ; lv_itArmorType <= auto9AC65BD6_ae ; lv_itArmorType += 1 ) {
        auto807BD234_ae = libGame_gv_unitStatsArmorUnitTypes;
        lv_itArmorUnitType = 0;
        for ( ; lv_itArmorUnitType <= auto807BD234_ae ; lv_itArmorUnitType += 1 ) {
            lv_armorCurrentValue = libGame_gf_UnitStatsArmorCustomValueOfUnit(lv_itArmorType, lv_itArmorUnitType, lp_targetUnit);
            lv_armorCurrentValue = libGame_gf_UnitStatsCalculateValidArmorValue(lv_armorCurrentValue);
            if ((libGame_gf_UnitStatsUnitNeedsUpdateArmor(lv_armorCurrentValue, lv_itArmorType, lv_itArmorUnitType, lp_targetUnit) == true)) {
                libGame_gf_UnitStatsRemoveArmorBehaviorsByAliasFromUnit(lv_itArmorType, lv_itArmorUnitType, lp_targetUnit);
                if ((lv_armorCurrentValue != 0)) {
                    lv_armorCurrentValue += libGame_gv_unitStatsMaximumArmor;
                    UnitBehaviorAdd(lp_targetUnit, libGame_gv_unitStatsArmorBehaviorType[lv_itArmorType][lv_itArmorUnitType][lv_armorCurrentValue], lp_targetUnit, 1);
                }
            }
        }
    }
}

int libGame_gf_UnitStatsPowerCustomValueIndex (int lp_powerTypeIndex) {
    // Variable Declarations
    int lv_value;

    // Automatic Variable Declarations
    int auto7DBA169A_val;

    // Variable Initialization

    // Implementation
    auto7DBA169A_val = lp_powerTypeIndex;
    if (auto7DBA169A_val == libGame_ge_UnitStatsPowerType_PowerKinetic) {
        lv_value = libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsPowerKinetic);
    }
    else if (auto7DBA169A_val == libGame_ge_UnitStatsPowerType_PowerEnergetic) {
        lv_value = libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsPowerEnergetic);
    }
    else if (auto7DBA169A_val == libGame_ge_UnitStatsPowerType_PowerStorm) {
        lv_value = libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsPowerStorm);
    }
    else {
    }
    return lv_value;
}

int libGame_gf_UnitStatsPowerCustomValueOfUnit (int lp_powerTypeIndex, unit lp_unit) {
    // Variable Declarations
    int lv_powerIndex;
    int lv_valueToReturn;

    // Automatic Variable Declarations
    int autoD0FD7B1D_val;

    // Variable Initialization
    lv_powerIndex = libGame_gf_UnitStatsPowerCustomValueIndex(lp_powerTypeIndex);

    // Implementation
    if ((libCore_gf_CommandersIsHeroOrVehicleUnit(lp_unit) == true)) {
        return FixedToInt(UnitGetCustomValue(lp_unit, lv_powerIndex));
    }
    else {
        autoD0FD7B1D_val = lv_powerIndex;
        if (autoD0FD7B1D_val == libGame_ge_CustomValueIndexes_UnitStatsPowerEnergetic) {
            lv_valueToReturn = (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsPowerEnergetic, lp_unit) + libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsPowerToSummonedEnergetic, lp_unit));
        }
        else if (autoD0FD7B1D_val == libGame_ge_CustomValueIndexes_UnitStatsPowerKinetic) {
            lv_valueToReturn = (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsPowerKinetic, lp_unit) + libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsPowerToSummonedKinetic, lp_unit));
        }
        else if (autoD0FD7B1D_val == libGame_ge_CustomValueIndexes_UnitStatsPowerStorm) {
            lv_valueToReturn = (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsPowerStorm, lp_unit) + libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsPowerToSummonedStorm, lp_unit));
        }
        else {
        }
    }
    return lv_valueToReturn;
}

int libGame_gf_UnitStatsValidPowerValueOfUnit (int lp_powerTypeIndex, unit lp_unit) {
    // Variable Declarations
    int lv_value;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_value = libGame_gf_UnitStatsPowerCustomValueOfUnit(lp_powerTypeIndex, lp_unit);
    if ((lv_value < (-libGame_gv_unitStatsPowerMaxValueNegative))) {
        return (-libGame_gv_unitStatsPowerMaxValueNegative);
    }
    if ((lv_value > libGame_gv_unitStatsPowerMaxValuePositive)) {
        return libGame_gv_unitStatsPowerMaxValuePositive;
    }
    return lv_value;
}

int libGame_gf_UnitStatsCalculateValidPowerValue (int lp_powerCurrentValue) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_powerCurrentValue > libGame_gv_unitStatsPowerMaxValuePositive)) {
        return libGame_gv_unitStatsPowerMaxValuePositive;
    }
    else if ((lp_powerCurrentValue < (-libGame_gv_unitStatsPowerMaxValueNegative))) {
        return (-libGame_gv_unitStatsPowerMaxValueNegative);
    }
    return lp_powerCurrentValue;
}

bool libGame_gf_UnitStatsTargetUnitHasPowerBehaviorByType (int lp_powerTypeIndex, unit lp_targetUnit) {
    // Variable Declarations
    string lv_validatorLink;

    // Automatic Variable Declarations
    int auto075C5901_val;

    // Variable Initialization

    // Implementation
    auto075C5901_val = lp_powerTypeIndex;
    if (auto075C5901_val == libGame_ge_UnitStatsPowerType_PowerEnergetic) {
        lv_validatorLink = "CommandersTargetHasPowerEnergeticBehaviors";
    }
    else if (auto075C5901_val == libGame_ge_UnitStatsPowerType_PowerKinetic) {
        lv_validatorLink = "CommandersTargetHasPowerKineticBehaviors";
    }
    else if (auto075C5901_val == libGame_ge_UnitStatsPowerType_PowerStorm) {
        lv_validatorLink = "CommandersTargetHasPowerStormBehaviors";
    }
    else {
    }
    return libCore_gf_CheckValidatorOnUnit(lv_validatorLink, lp_targetUnit, lp_targetUnit);
}

bool libGame_gf_UnitStatsUnitNeedsUpdatePower (int lp_powerCurrentValue, int lp_powerTypeIndex, unit lp_targetUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_powerCurrentValue >= libGame_gv_unitStatsPowerMaxValuePositive) && (UnitHasBehavior2(lp_targetUnit, libGame_gv_unitStatsPowerBehaviors[lp_powerTypeIndex][libGame_gv_unitStatsPowerAllValues]) == true)) {
        return false;
    }
    if ((lp_powerCurrentValue <= (-libGame_gv_unitStatsPowerMaxValueNegative)) && (UnitHasBehavior2(lp_targetUnit, libGame_gv_unitStatsPowerBehaviors[lp_powerTypeIndex][0]) == true)) {
        return false;
    }
    if ((lp_powerCurrentValue == 0)) {
        if ((libGame_gf_UnitStatsTargetUnitHasPowerBehaviorByType(lp_powerTypeIndex, lp_targetUnit) == false)) {
            return false;
        }
    }
    else {
        if ((UnitHasBehavior2(lp_targetUnit, libGame_gv_unitStatsPowerBehaviors[lp_powerTypeIndex][(libGame_gv_unitStatsPowerMaxValueNegative + lp_powerCurrentValue)]) == true)) {
            return false;
        }
    }
    return true;
}

void libGame_gf_UnitStatsRemovePowerBehaviorsByAliasFromUnit (int lp_powerTypeIndex, unit lp_targetUnit) {
    // Variable Declarations
    string lv_effectLink;

    // Automatic Variable Declarations
    int autoE68FC270_val;

    // Variable Initialization

    // Implementation
    autoE68FC270_val = lp_powerTypeIndex;
    if (autoE68FC270_val == libGame_ge_UnitStatsPowerType_PowerKinetic) {
        lv_effectLink = "CommandersRemovePowerKineticBehaviors";
    }
    else if (autoE68FC270_val == libGame_ge_UnitStatsPowerType_PowerEnergetic) {
        lv_effectLink = "CommandersRemovePowerEnergeticBehaviors";
    }
    else if (autoE68FC270_val == libGame_ge_UnitStatsPowerType_PowerStorm) {
        lv_effectLink = "CommandersRemovePowerStormBehaviors";
    }
    else {
    }
    UnitCreateEffectUnit(lp_targetUnit, lv_effectLink, lp_targetUnit);
}

void libGame_gf_UnitStatsPowerUpdate (unit lp_unit) {
    // Variable Declarations
    int lv_itPowerType;
    int lv_itPowerBehavior;
    int lv_powerCurrentValue;

    // Automatic Variable Declarations
    int auto7D6D4FB5_ae;

    // Variable Initialization

    // Implementation
    auto7D6D4FB5_ae = libGame_gv_unitStatsPowerTypes;
    lv_itPowerType = 0;
    for ( ; lv_itPowerType <= auto7D6D4FB5_ae ; lv_itPowerType += 1 ) {
        lv_powerCurrentValue = libGame_gf_UnitStatsPowerCustomValueOfUnit(lv_itPowerType, lp_unit);
        lv_powerCurrentValue = libGame_gf_UnitStatsCalculateValidPowerValue(lv_powerCurrentValue);
        if ((libGame_gf_UnitStatsUnitNeedsUpdatePower(lv_powerCurrentValue, lv_itPowerType, lp_unit) == true)) {
            libGame_gf_UnitStatsRemovePowerBehaviorsByAliasFromUnit(lv_itPowerType, lp_unit);
            if ((libGame_gf_UnitStatsPowerCustomValueOfUnit(lv_itPowerType, lp_unit) != 0)) {
                lv_powerCurrentValue += libGame_gv_unitStatsPowerMaxValueNegative;
                UnitBehaviorAdd(lp_unit, libGame_gv_unitStatsPowerBehaviors[lv_itPowerType][lv_powerCurrentValue], lp_unit, 1);
            }
        }
    }
}

void libGame_gf_UnitStatsCompareHeroAndSummonedPower (unit lp_unit) {
    // Automatic Variable Declarations
    unitgroup autoE9D8854F_g;
    int autoE9D8854F_u;
    unit autoE9D8854F_var;

    // Implementation
    if ((libCore_gf_CommandersIsHeroOrVehicleUnit(lp_unit) == false)) {
        return ;
    }
    if ((UnitGroupCount(UnitGetTrackedUnitGroup(lp_unit, "CommandersHeroSummonedUnitTracker"), c_unitCountAlive) > 0)) {
        autoE9D8854F_g = UnitGetTrackedUnitGroup(lp_unit, "CommandersHeroSummonedUnitTracker");
        autoE9D8854F_u = UnitGroupCount(autoE9D8854F_g, c_unitCountAll);
        for (;; autoE9D8854F_u -= 1) {
            autoE9D8854F_var = UnitGroupUnitFromEnd(autoE9D8854F_g, autoE9D8854F_u);
            if (autoE9D8854F_var == null) { break; }
            UnitSetCustomValue(autoE9D8854F_var, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsPowerToSummonedEnergetic), UnitGetCustomValue(lp_unit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsPowerToSummonedEnergetic)));
            UnitSetCustomValue(autoE9D8854F_var, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsPowerToSummonedKinetic), UnitGetCustomValue(lp_unit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsPowerToSummonedKinetic)));
            UnitSetCustomValue(autoE9D8854F_var, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsPowerToSummonedStorm), UnitGetCustomValue(lp_unit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsPowerToSummonedStorm)));
            libGame_gf_UnitStatsPowerUpdate(autoE9D8854F_var);
        }
    }
}

int libGame_gf_UnitStatsHealingCustomValueIndex (int lp_healingTypeIndex) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoCA84AB81_val;

    // Variable Initialization

    // Implementation
    autoCA84AB81_val = lp_healingTypeIndex;
    if (autoCA84AB81_val == libGame_ge_UnitStatsHealingType_HealingCreatedEffects) {
        lv_index = libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsHealingCreatedEffects);
    }
    else if (autoCA84AB81_val == libGame_ge_UnitStatsHealingType_HealingCreatedVampiricEnergetic) {
        lv_index = libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsHealingCreatedVampiricEnergetic);
    }
    else if (autoCA84AB81_val == libGame_ge_UnitStatsHealingType_HealingCreatedVampiricKinetic) {
        lv_index = libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsHealingCreatedVampiricKinetic);
    }
    else if (autoCA84AB81_val == libGame_ge_UnitStatsHealingType_HealingCreatedVampiricStorm) {
        lv_index = libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsHealingCreatedVampiricStorm);
    }
    else if (autoCA84AB81_val == libGame_ge_UnitStatsHealingType_HealingTaken) {
        lv_index = libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsHealingTaken);
    }
    else {
    }
    return lv_index;
}

int libGame_gf_UnitStatsHealingCustomValueOfUnit (int lp_healingTypeIndex, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_unit, libGame_gf_UnitStatsHealingCustomValueIndex(lp_healingTypeIndex)));
}

unit libGame_gf_UnitStatsVampiricGetDamagingUnit (unit lp_damagingUnit) {
    // Variable Declarations
    unit lv_sourceUnit;
    unit lv_heroUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_heroUnit = libCore_gf_CommandersCurrentHeroOrVehicleOfPlayer(UnitGetOwner(lp_damagingUnit));
    if ((lv_heroUnit == lp_damagingUnit)) {
        lv_sourceUnit = lv_heroUnit;
    }
    else {
        if ((UnitGroupHasUnit(UnitGetTrackedUnitGroup(lv_heroUnit, "CommandersHeroSummonedUnitTracker"), lp_damagingUnit) == true)) {
            lv_sourceUnit = lp_damagingUnit;
        }
    }
    return lv_sourceUnit;
}

fixed libGame_gf_UnitStatsVampiricGetCorrectHealingValue (fixed lp_damage, unit lp_targetUnit, int lp_vampiricHealingType) {
    // Variable Declarations
    fixed lv_modificator;
    fixed lv_healingValue;

    // Automatic Variable Declarations
    int auto2FBAE8B3_val;

    // Variable Initialization

    // Implementation
    auto2FBAE8B3_val = lp_vampiricHealingType;
    if (auto2FBAE8B3_val == libGame_ge_UnitStatsVampiricHealingType_HealingCreatedVampiricKinetic) {
        lv_modificator = UnitGetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsHealingCreatedVampiricKinetic));
    }
    else if (auto2FBAE8B3_val == libGame_ge_UnitStatsVampiricHealingType_HealingCreatedVampiricEnergetic) {
        lv_modificator = UnitGetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsHealingCreatedVampiricEnergetic));
    }
    else if (auto2FBAE8B3_val == libGame_ge_UnitStatsVampiricHealingType_HealingCreatedVampiricStorm) {
        lv_modificator = UnitGetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsHealingCreatedVampiricStorm));
    }
    else {
    }
    if ((lv_modificator > libGame_gv_unitStatsHealingMaxValuePositive)) {
        lv_modificator = libGame_gv_unitStatsHealingMaxValuePositive;
    }
    lv_modificator /= 100.0;
    lv_healingValue = (lp_damage*lv_modificator);
    return lv_healingValue;
}

int libGame_gf_UnitStatsCalculateValidHealingValue (int lp_healingTakenCurrentValue) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_healingTakenCurrentValue > libGame_gv_unitStatsHealingMaxValuePositive)) {
        return libGame_gv_unitStatsHealingMaxValuePositive;
    }
    else if ((lp_healingTakenCurrentValue < (-libGame_gv_unitStatsHealingMaxValueNegative))) {
        return (-libGame_gv_unitStatsHealingMaxValueNegative);
    }
    return lp_healingTakenCurrentValue;
}

bool libGame_gf_UnitStatsUnitNeedsUpdateHealingTaken (unit lp_targetUnit) {
    // Variable Declarations
    int lv_currentHealingTakenValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentHealingTakenValue = libGame_gf_UnitStatsHealingCustomValueOfUnit(libGame_ge_UnitStatsHealingType_HealingTaken, lp_targetUnit);

    // Implementation
    if ((lv_currentHealingTakenValue >= libGame_gv_unitStatsHealingMaxValuePositive) && (UnitHasBehavior2(lp_targetUnit, libGame_gv_unitStatsHealingTakenBehaviors[libGame_gv_unitStatsHealingAllValues]) == true)) {
        return false;
    }
    if ((lv_currentHealingTakenValue <= (-libGame_gv_unitStatsPowerMaxValueNegative)) && (UnitHasBehavior2(lp_targetUnit, libGame_gv_unitStatsHealingTakenBehaviors[0]) == true)) {
        return false;
    }
    if ((lv_currentHealingTakenValue == 0)) {
        if ((libCore_gf_CheckValidatorOnUnit("CommandersTargetHasHealingTakenBehaviors", lp_targetUnit, lp_targetUnit) == false)) {
            return false;
        }
    }
    else {
        if ((UnitHasBehavior2(lp_targetUnit, libGame_gv_unitStatsHealingTakenBehaviors[(libGame_gv_unitStatsHealingMaxValueNegative+lv_currentHealingTakenValue)]) == true)) {
            return false;
        }
    }
    return true;
}

void libGame_gf_UnitStatsUpdateHealing (unit lp_unit) {
    // Variable Declarations
    int lv_value;
    fixed lv_calculatedValue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitGetCustomValue(lp_unit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsHealingCreatedEffects)) != 0.0) && (UnitGetCustomValue(lp_unit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsHealingIngameUsedCreatedEffects)) != 0.0)) {
        lv_value = libGame_gf_UnitStatsCalculateValidHealingValue(libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsHealingCreatedEffects, lp_unit));
        lv_calculatedValue = (lv_value / 100.0);
        UnitSetCustomValue(lp_unit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsHealingIngameUsedCreatedEffects), lv_calculatedValue);
    }
    libGame_gf_UnitStatsUpdateHealingTakenBehaviors(lp_unit);
}

void libGame_gf_UnitStatsUpdateHealingTakenBehaviors (unit lp_unit) {
    // Variable Declarations
    int lv_healingTakenCurrentValue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libGame_gf_UnitStatsUnitNeedsUpdateHealingTaken(lp_unit) == true)) {
        UnitCreateEffectUnit(lp_unit, "CommandersRemoveHealingTakenBehaviors", lp_unit);
        lv_healingTakenCurrentValue = libGame_gf_UnitStatsHealingCustomValueOfUnit(libGame_ge_UnitStatsHealingType_HealingTaken, lp_unit);
        lv_healingTakenCurrentValue = libGame_gf_UnitStatsCalculateValidHealingValue(lv_healingTakenCurrentValue);
        if ((lv_healingTakenCurrentValue != 0)) {
            UnitSetCustomValue(lp_unit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsHealingIngameUsedTaken), (lv_healingTakenCurrentValue / 100.0));
            lv_healingTakenCurrentValue += libGame_gv_unitStatsHealingMaxValueNegative;
            UnitBehaviorAdd(lp_unit, libGame_gv_unitStatsHealingTakenBehaviors[lv_healingTakenCurrentValue], lp_unit, 1);
        }
    }
}

void libGame_gf_UnitStatsChangeCustomValue (string lp_behavior, int lp_behaviorChange, unit lp_targetUnit) {
    // Variable Declarations
    int lv_modificator;
    int lv_statsValue;
    int lv_attributeIndex;
    int lv_ownerOfCasterUnit;

    // Automatic Variable Declarations
    int auto080DFF6D_ae;
    int auto81EA9B74_val;

    // Variable Initialization

    // Implementation
    lv_ownerOfCasterUnit = UnitGetOwner(UnitBehaviorEffectUnit(lp_targetUnit, lp_behavior, c_effectUnitCaster, 0));
    if ((lp_behaviorChange == c_unitBehaviorChangeIncrease)) {
        lv_modificator = 1;
    }
    else if ((lp_behaviorChange == c_unitBehaviorChangeDecrease)) {
        lv_modificator = -1;
    }
    auto080DFF6D_ae = libGame_gv_unitStatsAttributesValueConstant;
    lv_attributeIndex = 0;
    for ( ; lv_attributeIndex <= auto080DFF6D_ae ; lv_attributeIndex += 1 ) {
        lv_statsValue = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, lp_behavior, "Modification.AttributeChangeArray[" + IntToString(lv_attributeIndex) + "].Points", lv_ownerOfCasterUnit);
        if ((lv_statsValue == 0)) {
            continue;
        }
        lv_statsValue *= lv_modificator;
        auto81EA9B74_val = lv_attributeIndex;
        if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsArmorAll) {
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticCreep), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticCreep, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticHero), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticHero, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticMercenary), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticMercenary, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticMinion), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticMinion, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticStructure), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticStructure, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticSummon), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticSummon, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticCreep), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticCreep, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticHero), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticHero, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticMercenary), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticMercenary, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticMinion), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticMinion, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticStructure), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticStructure, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticSummon), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticSummon, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorStormCreep), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorStormCreep, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorStormHero), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorStormHero, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorStormMercenary), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorStormMercenary, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorStormMinion), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorStormMinion, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorStormStructure), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorStormStructure, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorStormSummon), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorStormSummon, lp_targetUnit)+lv_statsValue));
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsArmorAllEnergetic) {
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticCreep), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticCreep, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticHero), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticHero, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticMercenary), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticMercenary, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticMinion), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticMinion, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticStructure), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticStructure, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticSummon), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticSummon, lp_targetUnit)+lv_statsValue));
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsArmorAllKinetic) {
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticCreep), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticCreep, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticHero), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticHero, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticMercenary), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticMercenary, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticMinion), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticMinion, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticStructure), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticStructure, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticSummon), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticSummon, lp_targetUnit)+lv_statsValue));
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsArmorAllStorm) {
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorStormCreep), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorStormCreep, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorStormHero), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorStormHero, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorStormMercenary), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorStormMercenary, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorStormMinion), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorStormMinion, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorStormStructure), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorStormStructure, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorStormSummon), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorStormSummon, lp_targetUnit)+lv_statsValue));
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsArmorEnergeticCreep) {
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticCreep), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticCreep, lp_targetUnit)+lv_statsValue));
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsArmorEnergeticHero) {
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticHero), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticHero, lp_targetUnit)+lv_statsValue));
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsArmorEnergeticMercenary) {
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticMercenary), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticMercenary, lp_targetUnit)+lv_statsValue));
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsArmorEnergeticMinion) {
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticMinion), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticMinion, lp_targetUnit)+lv_statsValue));
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsArmorEnergeticStructure) {
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticStructure), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticStructure, lp_targetUnit)+lv_statsValue));
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsArmorEnergeticSummon) {
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticSummon), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorEnergeticSummon, lp_targetUnit)+lv_statsValue));
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsArmorKineticCreep) {
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticCreep), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticCreep, lp_targetUnit)+lv_statsValue));
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsArmorKineticHero) {
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticHero), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticHero, lp_targetUnit)+lv_statsValue));
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsArmorKineticMercenary) {
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticMercenary), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticMercenary, lp_targetUnit)+lv_statsValue));
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsArmorKineticMinion) {
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticMinion), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticMinion, lp_targetUnit)+lv_statsValue));
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsArmorKineticStructure) {
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticStructure), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticStructure, lp_targetUnit)+lv_statsValue));
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsArmorKineticSummon) {
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticSummon), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorKineticSummon, lp_targetUnit)+lv_statsValue));
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsArmorStormCreep) {
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorStormCreep), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorStormCreep, lp_targetUnit)+lv_statsValue));
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsArmorStormHero) {
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorStormHero), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorStormHero, lp_targetUnit)+lv_statsValue));
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsArmorStormMercenary) {
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorStormMercenary), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorStormMercenary, lp_targetUnit)+lv_statsValue));
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsArmorStormMinion) {
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorStormMinion), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorStormMinion, lp_targetUnit)+lv_statsValue));
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsArmorStormStructure) {
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorStormStructure), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorStormStructure, lp_targetUnit)+lv_statsValue));
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsArmorStormSummon) {
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsArmorStormSummon), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsArmorStormSummon, lp_targetUnit)+lv_statsValue));
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsHealingAll) {
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsHealingCreatedEffects), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsHealingCreatedEffects, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsHealingCreatedVampiricEnergetic), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsHealingCreatedVampiricEnergetic, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsHealingCreatedVampiricKinetic), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsHealingCreatedVampiricKinetic, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsHealingCreatedVampiricStorm), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsHealingCreatedVampiricStorm, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsHealingTaken), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsHealingTaken, lp_targetUnit)+lv_statsValue));
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsHealingCreatedAll) {
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsHealingCreatedEffects), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsHealingCreatedEffects, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsHealingCreatedVampiricEnergetic), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsHealingCreatedVampiricEnergetic, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsHealingCreatedVampiricKinetic), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsHealingCreatedVampiricKinetic, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsHealingCreatedVampiricStorm), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsHealingCreatedVampiricStorm, lp_targetUnit)+lv_statsValue));
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsHealingCreatedEffects) {
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsHealingCreatedEffects), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsHealingCreatedEffects, lp_targetUnit)+lv_statsValue));
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsHealingCreatedVampiricEnergetic) {
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsHealingCreatedVampiricEnergetic), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsHealingCreatedVampiricEnergetic, lp_targetUnit)+lv_statsValue));
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsHealingCreatedVampiricKinetic) {
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsHealingCreatedVampiricKinetic), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsHealingCreatedVampiricKinetic, lp_targetUnit)+lv_statsValue));
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsHealingCreatedVampiricStorm) {
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsHealingCreatedVampiricStorm), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsHealingCreatedVampiricStorm, lp_targetUnit)+lv_statsValue));
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsHealingTaken) {
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsHealingTaken), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsHealingTaken, lp_targetUnit)+lv_statsValue));
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsPowerAll) {
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsPowerEnergetic), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsPowerEnergetic, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsPowerKinetic), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsPowerKinetic, lp_targetUnit)+lv_statsValue));
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsPowerStorm), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsPowerStorm, lp_targetUnit)+lv_statsValue));
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsPowerEnergetic) {
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsPowerEnergetic), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsPowerEnergetic, lp_targetUnit)+lv_statsValue));
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsPowerKinetic) {
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsPowerKinetic), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsPowerKinetic, lp_targetUnit)+lv_statsValue));
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsPowerStorm) {
            UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsPowerStorm), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsPowerStorm, lp_targetUnit)+lv_statsValue));
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsPowerToSummonedAll) {
            if ((libCore_gf_CommandersIsHeroOrVehicleUnit(lp_targetUnit) == true)) {
                UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsPowerToSummonedEnergetic), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsPowerToSummonedEnergetic, lp_targetUnit)+lv_statsValue));
                UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsPowerToSummonedKinetic), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsPowerToSummonedKinetic, lp_targetUnit)+lv_statsValue));
                UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsPowerToSummonedStorm), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsPowerToSummonedStorm, lp_targetUnit)+lv_statsValue));
            }
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsPowerToSummonedEnergetic) {
            if ((libCore_gf_CommandersIsHeroOrVehicleUnit(lp_targetUnit) == true)) {
                UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsPowerToSummonedEnergetic), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsPowerToSummonedEnergetic, lp_targetUnit)+lv_statsValue));
            }
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsPowerToSummonedKinetic) {
            if ((libCore_gf_CommandersIsHeroOrVehicleUnit(lp_targetUnit) == true)) {
                UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsPowerToSummonedKinetic), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsPowerToSummonedKinetic, lp_targetUnit)+lv_statsValue));
            }
        }
        else if (auto81EA9B74_val == libGame_ge_UnitStatsBehaviorStatsIndexes_UnitBehaviorStatsPowerToSummonedStorm) {
            if ((libCore_gf_CommandersIsHeroOrVehicleUnit(lp_targetUnit) == true)) {
                UnitSetCustomValue(lp_targetUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsPowerToSummonedStorm), (libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_UnitStatsPowerToSummonedStorm, lp_targetUnit)+lv_statsValue));
            }
        }
        else {
        }
    }
}

void libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary (int lp_player, point lp_point, fixed lp_duration, fixed lp_initialVelocity, fixed lp_decelerate, bool lp_smart) {
    // Variable Declarations
    int lv_itBound;
    fixed lv_actualDuration;

    // Automatic Variable Declarations
    int auto9561BDB8_ae;
    const int auto9561BDB8_ai = 1;

    // Variable Initialization

    // Implementation
    lv_actualDuration = lp_duration;
    auto9561BDB8_ae = libGame_gv_cameraBound_Count;
    lv_itBound = 1;
    for ( ; ( (auto9561BDB8_ai >= 0 && lv_itBound <= auto9561BDB8_ae) || (auto9561BDB8_ai < 0 && lv_itBound >= auto9561BDB8_ae) ) ; lv_itBound += auto9561BDB8_ai ) {
        if ((RegionContainsPoint(libGame_gv_cameraBound_Regions[lv_itBound], lp_point) == true)) {
            if ((libGame_gv_cameraBound_CurrentCameraBoundForPlayer[lp_player] != lv_itBound)) {
                libGame_gf_SetCameraBoundStormIndexForPlayer(lp_player, lv_itBound);
                lv_actualDuration = 0.0;
            }

            break;
        }

    }
    CameraPan(lp_player, lp_point, lv_actualDuration, lp_initialVelocity, lp_decelerate, lp_smart);
    libGame_gf_SendEventCameraPannedFromScript(lp_player, lp_point);
}

void libGame_gf_CameraTrackNextAliveAllyForPlayer (int lp_player) {
    // Variable Declarations
    int lv_i;
    int lv_playerFaction;
    bool lv_valueSet;

    // Automatic Variable Declarations
    const int autoA329EA21_ae = libCore_gv_bALMaxPlayers;
    const int autoA329EA21_ai = 1;
    int auto78F9AC02_ae;
    const int auto78F9AC02_ai = 1;

    // Variable Initialization
    lv_playerFaction = libGame_ge_PlayerFaction_Nothing;

    // Implementation
    lv_playerFaction = libGame_gv_players[lp_player].lv_faction;
    if ((libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack < libCore_gv_bALMaxPlayers)) {
        lv_i = (libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack + 1);
        for ( ; ( (autoA329EA21_ai >= 0 && lv_i <= autoA329EA21_ae) || (autoA329EA21_ai < 0 && lv_i >= autoA329EA21_ae) ) ; lv_i += autoA329EA21_ai ) {
            if ((libGame_gv_players[lv_i].lv_faction == lv_playerFaction) && (libGame_gv_players[lp_player].lv_isDead == false)) {
                libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack = lv_i;
                lv_valueSet = true;
                break;
            }

        }
    }

    if ((lv_valueSet == false)) {
        auto78F9AC02_ae = libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack;
        lv_i = 1;
        for ( ; ( (auto78F9AC02_ai >= 0 && lv_i <= auto78F9AC02_ae) || (auto78F9AC02_ai < 0 && lv_i >= auto78F9AC02_ae) ) ; lv_i += auto78F9AC02_ai ) {
            if ((libGame_gv_players[lv_i].lv_faction == lv_playerFaction) && (libGame_gv_players[lv_i].lv_isDead == false)) {
                libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack = lv_i;
                lv_valueSet = true;
                break;
            }

        }
    }

    if ((lv_valueSet == false)) {
        libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack = 0;
    }

}

void libGame_gf_CameraTrackPreviousAliveAllyForPlayer (int lp_player) {
    // Variable Declarations
    int lv_i;
    int lv_playerFaction;
    bool lv_valueSet;

    // Automatic Variable Declarations
    const int auto286D1281_ae = 1;
    const int auto286D1281_ai = -1;
    int auto591788ED_ae;
    const int auto591788ED_ai = -1;

    // Variable Initialization
    lv_playerFaction = libGame_ge_PlayerFaction_Nothing;

    // Implementation
    lv_playerFaction = libGame_gv_players[lp_player].lv_faction;
    if ((libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack == 1)) {
        lv_i = (libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack - 1);
        for ( ; ( (auto286D1281_ai >= 0 && lv_i <= auto286D1281_ae) || (auto286D1281_ai < 0 && lv_i >= auto286D1281_ae) ) ; lv_i += auto286D1281_ai ) {
            if ((libGame_gv_players[lv_i].lv_faction == lv_playerFaction) && (libGame_gv_players[lv_i].lv_isDead == false)) {
                libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack = lv_i;
                lv_valueSet = true;
                break;
            }

        }
    }

    if ((lv_valueSet == false)) {
        auto591788ED_ae = libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack;
        lv_i = libCore_gv_bALMaxPlayers;
        for ( ; ( (auto591788ED_ai >= 0 && lv_i <= auto591788ED_ae) || (auto591788ED_ai < 0 && lv_i >= auto591788ED_ae) ) ; lv_i += auto591788ED_ai ) {
            if ((libGame_gv_players[lv_i].lv_faction == lv_playerFaction) && (libGame_gv_players[lv_i].lv_isDead == false)) {
                libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack = lv_i;
                lv_valueSet = true;
                break;
            }

        }
    }

    if ((lv_valueSet == false)) {
        libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack = 0;
    }

}

trigger auto_libGame_gf_CameraUpdateCameraForPlayer_Trigger = null;
int auto_libGame_gf_CameraUpdateCameraForPlayer_lp_player;

void libGame_gf_CameraUpdateCameraForPlayer (int lp_player) {
    auto_libGame_gf_CameraUpdateCameraForPlayer_lp_player = lp_player;

    if (auto_libGame_gf_CameraUpdateCameraForPlayer_Trigger == null) {
        auto_libGame_gf_CameraUpdateCameraForPlayer_Trigger = TriggerCreate("auto_libGame_gf_CameraUpdateCameraForPlayer_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_CameraUpdateCameraForPlayer_Trigger, false, false);
}

bool auto_libGame_gf_CameraUpdateCameraForPlayer_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libGame_gf_CameraUpdateCameraForPlayer_lp_player;

    // Variable Declarations
    int lv_playerBeingTracked;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_playerBeingTracked = libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack;
    if ((libGame_gv_cameraFollowForced[lp_player] == true)) {
        libGame_gv_cameraFollowForced[lp_player] = false;
        CameraForceFollowUnitGroup(lp_player, false);
    }

    PlayerOptionOverride(lp_player, "camerafollow", null);
    if ((lv_playerBeingTracked != 0)) {
        if ((libGame_gv_players[lp_player].lv_cameraCurrentTarget != null)) {
            CameraFollowUnitGroup(lp_player, libNtve_gf_ConvertUnitToUnitGroup(libGame_gv_players[lp_player].lv_cameraCurrentTarget), false, false);
        }

        libGame_gv_players[lp_player].lv_cameraCurrentTarget = libGame_gv_players[lv_playerBeingTracked].lv_cameraPlayerUnitToFocusOn;
        libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lp_player, UnitGetPosition(libGame_gv_players[lp_player].lv_cameraCurrentTarget), 0.0, -1, 0.0, false);
        CameraFollowUnitGroup(lp_player, libNtve_gf_ConvertUnitToUnitGroup(libGame_gv_players[lp_player].lv_cameraCurrentTarget), true, false);
        PlayerOptionOverride(lp_player, "camerafollow", "1");
    }
    else {
        if ((libGame_gv_players[lp_player].lv_isDead == false) && (libGame_gv_players[lp_player].lv_cameraPlayerHasControl == false) && (libGame_gv_players[lp_player].lv_cameraCameraLockInterrupt == false)) {
            if ((libGame_gv_players[lp_player].lv_cameraCurrentTarget != null)) {
                CameraFollowUnitGroup(lp_player, libNtve_gf_ConvertUnitToUnitGroup(libGame_gv_players[lp_player].lv_cameraCurrentTarget), false, false);
            }

            libGame_gv_players[lp_player].lv_cameraCurrentTarget = libGame_gv_players[lp_player].lv_cameraPlayerUnitToFocusOn;
            libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lp_player, UnitGetPosition(libGame_gv_players[lp_player].lv_cameraCurrentTarget), 0.0, -1, 0.0, false);
            CameraFollowUnitGroup(lp_player, libNtve_gf_ConvertUnitToUnitGroup(libGame_gv_players[lp_player].lv_cameraCurrentTarget), true, false);
            PlayerOptionOverride(lp_player, "camerafollow", "1");
        }
        else {
            if ((libGame_gv_players[lp_player].lv_cameraCurrentTarget != null)) {
                CameraFollowUnitGroup(lp_player, libNtve_gf_ConvertUnitToUnitGroup(libGame_gv_players[lp_player].lv_cameraCurrentTarget), false, false);
            }

            libGame_gv_players[lp_player].lv_cameraCurrentTarget = libGame_gv_players[lp_player].lv_cameraPlayerUnitToFocusOn;
            CameraFollowUnitGroup(lp_player, libNtve_gf_ConvertUnitToUnitGroup(libGame_gv_players[lp_player].lv_cameraCurrentTarget), true, false);
        }
    }
    if ((libGame_gv_players[lp_player].lv_cameraPlayerHasControl == true)) {
        CameraLockInput(lp_player, false);
    }
    else {
        CameraLockInput(lp_player, true);
    }
    return true;
}

int libGame_gf_CameraBoundStormIndex (region lp_bound) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int autoC4AE4220_ae;
    const int autoC4AE4220_ai = 1;

    // Variable Initialization

    // Implementation
    autoC4AE4220_ae = libGame_gv_cameraBound_Count;
    lv_itIndex = 1;
    for ( ; ( (autoC4AE4220_ai >= 0 && lv_itIndex <= autoC4AE4220_ae) || (autoC4AE4220_ai < 0 && lv_itIndex >= autoC4AE4220_ae) ) ; lv_itIndex += autoC4AE4220_ai ) {
        if ((PointGetX(RegionGetBoundsMax(lp_bound)) == PointGetX(RegionGetBoundsMax(libGame_gv_cameraBound_Regions[lv_itIndex]))) && (PointGetY(RegionGetBoundsMax(lp_bound)) == PointGetY(RegionGetBoundsMax(libGame_gv_cameraBound_Regions[lv_itIndex]))) && (PointGetX(RegionGetBoundsMin(lp_bound)) == PointGetX(RegionGetBoundsMin(libGame_gv_cameraBound_Regions[lv_itIndex]))) && (PointGetY(RegionGetBoundsMin(lp_bound)) == PointGetY(RegionGetBoundsMin(libGame_gv_cameraBound_Regions[lv_itIndex]))) && (PointGetX(RegionGetCenter(lp_bound)) == PointGetX(RegionGetCenter(libGame_gv_cameraBound_Regions[lv_itIndex]))) && (PointGetY(RegionGetCenter(lp_bound)) == PointGetY(RegionGetCenter(libGame_gv_cameraBound_Regions[lv_itIndex])))) {
            return lv_itIndex;
        }

    }
    return -1;
}

void libGame_gf_AddCameraBoundsStorm (region lp_bounds) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_cameraBound_Count >= libGame_gv_cameraBound_MaxCount_C)) {
        TextExpressionSetToken("Param/Expression/lib_Game_ABC6140D", "A", IntToText(libGame_gv_cameraBound_MaxCount_C));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_ABC6140D"), true);
        return ;
    }

    libGame_gv_cameraBound_Count += 1;
    libGame_gv_cameraBound_Regions[libGame_gv_cameraBound_Count] = lp_bounds;
}

void libGame_gf_SetCameraBoundsStorm (int lp_index, region lp_bounds) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_index > libGame_gv_cameraBound_Count) && (lp_index < 1)) {
        return ;
    }

    libGame_gv_cameraBound_Regions[lp_index] = lp_bounds;
}

void libGame_gf_SetCameraBoundStormIndexForPlayer (int lp_player, int lp_boundsIndex) {
    // Automatic Variable Declarations
    // Implementation
    libGame_gv_cameraBound_CurrentCameraBoundForPlayer[lp_player] = lp_boundsIndex;
    CameraSetBounds(libCore_gv_playerGroupFromPlayer[lp_player], libGame_gv_cameraBound_Regions[lp_boundsIndex], true);
}

void libGame_gf_SetCameraBoundStormForPlayer (int lp_player, region lp_bound) {
    // Variable Declarations
    int lv_boundsIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_boundsIndex = libGame_gf_CameraBoundStormIndex(lp_bound);
    if ((lv_boundsIndex <= 0)) {
        libGame_gf_AddCameraBoundsStorm(lp_bound);
        lv_boundsIndex = libGame_gv_cameraBound_Count;
    }

    libGame_gv_cameraBound_CurrentCameraBoundForPlayer[lp_player] = lv_boundsIndex;
    CameraSetBounds(libCore_gv_playerGroupFromPlayer[lp_player], lp_bound, true);
}

bool libGame_gf_AnnHeroDeathCheckTeamWipe (playergroup lp_team) {
    // Variable Declarations
    int lv_player;
    int lv_i;

    // Automatic Variable Declarations
    const int autoD94040C7_n = 5;
    int autoD94040C7_i;

    // Variable Initialization

    // Implementation
    if ((lp_team == libGame_gv_teams[2].lv_teamPlayerGroupNoNPCPlayers)) {
        lv_player = 5;
    }

    for (autoD94040C7_i = 1; autoD94040C7_i <= autoD94040C7_n; autoD94040C7_i += 1) {
        if ((libGame_gv_players[lv_player].lv_isDead == true)) {
            lv_i += 1;
        }

    }
    if ((lv_i == 5)) {
        return true;
    }

    return false;
}

text libGame_gf_AnnHeroDeathGetMultikillStreak (int lp_killingPlayer) {
    // Automatic Variable Declarations
    int autoBDE11C81_val;

    // Implementation
    autoBDE11C81_val = libGame_gv_players[lp_killingPlayer].lv_multikillStreak;
    if (autoBDE11C81_val == 1) {
        if ((libGame_gv_gAMEFirstBloodAvailable == true)) {
            return StringExternal("Param/Value/lib_Game_4A5B4278");
        }
        else {
            return StringExternal("Param/Value/lib_Game_691D4C4A");
        }
    }
    else if (autoBDE11C81_val == 2) {
        return StringExternal("Param/Value/lib_Game_4CA11534");
    }
    else if (autoBDE11C81_val == 3) {
        return StringExternal("Param/Value/lib_Game_AA78B124");
    }
    else if (autoBDE11C81_val == 4) {
        return StringExternal("Param/Value/lib_Game_81F975CA");
    }
    else if (autoBDE11C81_val == 5) {
        return StringExternal("Param/Value/lib_Game_E0CFA2C6");
    }
    else {
    }
    if ((libGame_gv_players[lp_killingPlayer].lv_multikillStreak > 5)) {
        return StringExternal("Param/Value/lib_Game_E2FF9721");
    }

    return StringToText("");
}

text libGame_gf_AnnHeroDeathGetKillingSpree (int lp_killingPlayer) {
    // Automatic Variable Declarations
    int auto6A561D3D_val;

    // Implementation
    auto6A561D3D_val = libGame_gv_players[lp_killingPlayer].lv_killingSpreeCount;
    if (auto6A561D3D_val == 5) {
        return StringExternal("Param/Value/lib_Game_BF32FC7C");
    }
    else if (auto6A561D3D_val == 10) {
        return StringExternal("Param/Value/lib_Game_7E03F5EE");
    }
    else if (auto6A561D3D_val == 15) {
        return StringExternal("Param/Value/lib_Game_E83B98CF");
    }
    else if (auto6A561D3D_val == 20) {
        return StringExternal("Param/Value/lib_Game_B317ACE8");
    }
    else if (auto6A561D3D_val == 25) {
        return StringExternal("Param/Value/lib_Game_18B800ED");
    }
    else {
    }
    return StringToText("");
}

trigger auto_libGame_gf_AnnRegisterEvent_Trigger = null;
int auto_libGame_gf_AnnRegisterEvent_lp_announceType;
int auto_libGame_gf_AnnRegisterEvent_lp_player;
int auto_libGame_gf_AnnRegisterEvent_lp_heroDiesKillStreakKillingPlayer;
int auto_libGame_gf_AnnRegisterEvent_lp_heroDiesDeadPlayer;
bool auto_libGame_gf_AnnRegisterEvent_lp_firstblood;

void libGame_gf_AnnRegisterEvent (int lp_announceType, int lp_player, int lp_heroDiesKillStreakKillingPlayer, int lp_heroDiesDeadPlayer, bool lp_firstblood) {
    auto_libGame_gf_AnnRegisterEvent_lp_announceType = lp_announceType;
    auto_libGame_gf_AnnRegisterEvent_lp_player = lp_player;
    auto_libGame_gf_AnnRegisterEvent_lp_heroDiesKillStreakKillingPlayer = lp_heroDiesKillStreakKillingPlayer;
    auto_libGame_gf_AnnRegisterEvent_lp_heroDiesDeadPlayer = lp_heroDiesDeadPlayer;
    auto_libGame_gf_AnnRegisterEvent_lp_firstblood = lp_firstblood;

    if (auto_libGame_gf_AnnRegisterEvent_Trigger == null) {
        auto_libGame_gf_AnnRegisterEvent_Trigger = TriggerCreate("auto_libGame_gf_AnnRegisterEvent_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_AnnRegisterEvent_Trigger, false, false);
}

bool auto_libGame_gf_AnnRegisterEvent_TriggerFunc (bool testConds, bool runActions) {
    int lp_announceType = auto_libGame_gf_AnnRegisterEvent_lp_announceType;
    int lp_player = auto_libGame_gf_AnnRegisterEvent_lp_player;
    int lp_heroDiesKillStreakKillingPlayer = auto_libGame_gf_AnnRegisterEvent_lp_heroDiesKillStreakKillingPlayer;
    int lp_heroDiesDeadPlayer = auto_libGame_gf_AnnRegisterEvent_lp_heroDiesDeadPlayer;
    bool lp_firstblood = auto_libGame_gf_AnnRegisterEvent_lp_firstblood;

    // Variable Declarations
    int lv_slot;
    int lv_annPackID;
    text lv_playerName;
    text lv_multiKillStreak;
    text lv_fullSecondString;

    // Automatic Variable Declarations
    int autoECFB8A0C_val;

    // Variable Initialization
    lv_playerName = StringToText("");
    lv_multiKillStreak = StringToText("");
    lv_fullSecondString = StringToText("");

    // Implementation
    if ((PlayerStatus(lp_player) != c_playerStatusActive)) {
        return true;
    }
    if ((libCore_gv_gameOver == true) && (lp_announceType != libCore_ge_AnnouncerVOEvents_Defeat) && (lp_announceType != libCore_ge_AnnouncerVOEvents_Victory)) {
        return true;
    }
    lv_slot = (libGame_gv_annData[lp_player].lv_numberOfItemsInQueue + 1);
    if ((lv_slot >= libGame_gv_annDataAnncounts)) {
        return true;
    }
    lv_annPackID = libGame_gv_players[lp_player].lv_selectedAnnouncerVOPack;
    libGame_gv_annData[lp_player].lv_type[lv_slot] = lp_announceType;
    libGame_gv_annData[lp_player].lv_backgroundSound[lv_slot] = libGame_gv_annDefaultAnnSound;
    libGame_gv_annData[lp_player].lv_numberOfItemsInQueue += 1;
    autoECFB8A0C_val = lp_announceType;
    if (autoECFB8A0C_val == libCore_ge_AnnouncerVOEvents_Countdown30) {
        libGame_gv_annData[lp_player].lv_text[lv_slot] = (StringToText(libGame_gv_accouncement_FCT_General_C) + StringExternal("Param/Value/lib_Game_F8D3C57D"));
        libGame_gv_annData[lp_player].lv_soundID[lv_slot] = libCore_ge_AnnouncerVOEvents_Countdown30;
    }
    else if (autoECFB8A0C_val == libCore_ge_AnnouncerVOEvents_AllyKilled) {
        if ((PlayerGroupHasPlayer(libNtve_gf_UnionOfPlayerGroups(libGame_gv_teams[1].lv_teamPlayerGroupNoNPCPlayers, libGame_gv_teams[2].lv_teamPlayerGroupNoNPCPlayers), lp_heroDiesKillStreakKillingPlayer) == true)) {
            lv_fullSecondString = (libGame_gv_players[lp_heroDiesKillStreakKillingPlayer].lv_playerName + StringExternal("Param/Value/lib_Game_0D6E1CA0") + libGame_gf_AnnHeroDeathGetMultikillStreak(lp_heroDiesKillStreakKillingPlayer));
        }

        libGame_gv_annData[lp_player].lv_text[lv_slot] = (StringToText(libGame_gv_announcement_FCT_Enemy_C) + StringExternal("Param/Value/lib_Game_6146EDF4") + libGame_gv_players[lp_heroDiesDeadPlayer].lv_heroName + StringExternal("Param/Value/lib_Game_9DFF876C") + lv_fullSecondString);
        if ((libGame_gv_players[lp_heroDiesDeadPlayer].lv_killingSpreeCount >= libCore_gv_killingSpree_KillThresholdBase_C)) {
            libGame_gv_annData[lp_player].lv_soundID[lv_slot] = libCore_ge_AnnouncerVOEvents_KillingSpreeEndAlly;
        }
        else {
            libGame_gv_annData[lp_player].lv_soundID[lv_slot] = libCore_ge_AnnouncerVOEvents_AllyKilled;
        }
    }
    else if (autoECFB8A0C_val == libCore_ge_AnnouncerVOEvents_EnemyKilledParticipants) {
        if ((PlayerGroupHasPlayer(libNtve_gf_UnionOfPlayerGroups(libGame_gv_teams[1].lv_teamPlayerGroupNoNPCPlayers, libGame_gv_teams[2].lv_teamPlayerGroupNoNPCPlayers), lp_heroDiesKillStreakKillingPlayer) == true)) {
            lv_fullSecondString = (libGame_gv_players[lp_heroDiesKillStreakKillingPlayer].lv_playerName + StringExternal("Param/Value/lib_Game_D29544EC") + libGame_gf_AnnHeroDeathGetMultikillStreak(lp_heroDiesKillStreakKillingPlayer));
        }

        libGame_gv_annData[lp_player].lv_text[lv_slot] = (StringToText(libGame_gv_announcement_FCT_Ally_C) + StringExternal("Param/Value/lib_Game_891C5FA7") + libGame_gv_players[lp_heroDiesDeadPlayer].lv_heroName + StringExternal("Param/Value/lib_Game_AC7D010F") + lv_fullSecondString);
        if ((lp_firstblood == true)) {
            libGame_gv_annData[lp_player].lv_soundID[lv_slot] = libCore_ge_AnnouncerVOEvents_AllyFirstBlood;
        }
        else {
            if ((libGame_gv_players[lp_player].lv_multikillStreak == 1)) {
                libGame_gv_annData[lp_player].lv_soundID[lv_slot] = libCore_ge_AnnouncerVOEvents_EnemyKilledParticipants;
            }
            else if ((libGame_gv_players[lp_player].lv_multikillStreak == 2)) {
                libGame_gv_annData[lp_player].lv_soundID[lv_slot] = libCore_ge_AnnouncerVOEvents_DoubleKill;
            }
            else if ((libGame_gv_players[lp_player].lv_multikillStreak == 3)) {
                libGame_gv_annData[lp_player].lv_soundID[lv_slot] = libCore_ge_AnnouncerVOEvents_TripleKill;
            }
            else if ((libGame_gv_players[lp_player].lv_multikillStreak == 4)) {
                libGame_gv_annData[lp_player].lv_soundID[lv_slot] = libCore_ge_AnnouncerVOEvents_QuadraKill;
            }
            else if ((libGame_gv_players[lp_player].lv_multikillStreak == 5)) {
                libGame_gv_annData[lp_player].lv_soundID[lv_slot] = libCore_ge_AnnouncerVOEvents_PentaKill;
            }
        }
    }
    else if (autoECFB8A0C_val == libCore_ge_AnnouncerVOEvents_HeroSlain) {
        if ((PlayerGroupHasPlayer(libNtve_gf_UnionOfPlayerGroups(libGame_gv_teams[1].lv_teamPlayerGroupNoNPCPlayers, libGame_gv_teams[2].lv_teamPlayerGroupNoNPCPlayers), lp_heroDiesKillStreakKillingPlayer) == true)) {
            lv_fullSecondString = (libGame_gv_players[lp_heroDiesKillStreakKillingPlayer].lv_playerName + StringExternal("Param/Value/lib_Game_A1061F2C") + libGame_gf_AnnHeroDeathGetMultikillStreak(lp_heroDiesKillStreakKillingPlayer));
        }

        libGame_gv_annData[lp_player].lv_text[lv_slot] = (StringToText(libGame_gv_announcement_FCT_Enemy_C) + StringExternal("Param/Value/lib_Game_3698B8AB") + StringExternal("Param/Value/lib_Game_690A1A9A") + lv_fullSecondString);
        if ((libGame_gv_players[lp_heroDiesDeadPlayer].lv_killingSpreeCount >= libCore_gv_killingSpree_KillThresholdBase_C)) {
            libGame_gv_annData[lp_player].lv_soundID[lv_slot] = libCore_ge_AnnouncerVOEvents_KillingSpreeEndYou;
        }
        else {
            libGame_gv_annData[lp_player].lv_soundID[lv_slot] = libCore_ge_AnnouncerVOEvents_HeroSlain;
        }
    }
    else if (autoECFB8A0C_val == libCore_ge_AnnouncerVOEvents_EventStarts) {
        libGame_gv_annData[lp_player].lv_soundID[lv_slot] = libCore_ge_AnnouncerVOEvents_EventStarts;
    }
    else if (autoECFB8A0C_val == libCore_ge_AnnouncerVOEvents_EventContinues) {
        libGame_gv_annData[lp_player].lv_soundID[lv_slot] = libCore_ge_AnnouncerVOEvents_EventContinues;
    }
    else if (autoECFB8A0C_val == libCore_ge_AnnouncerVOEvents_EventEnds) {
        libGame_gv_annData[lp_player].lv_soundID[lv_slot] = libCore_ge_AnnouncerVOEvents_EventEnds;
    }
    else if (autoECFB8A0C_val == libCore_ge_AnnouncerVOEvents_AlliesCaptureMercCamp) {
        libGame_gv_annData[lp_player].lv_text[lv_slot] = (StringToText(libGame_gv_announcement_FCT_Ally_C) + StringExternal("Param/Value/lib_Game_7000ADE5"));
    }
    else if (autoECFB8A0C_val == libCore_ge_AnnouncerVOEvents_EnemiesCaptureMercCamp) {
        libGame_gv_annData[lp_player].lv_text[lv_slot] = (StringToText(libGame_gv_announcement_FCT_Enemy_C) + StringExternal("Param/Value/lib_Game_1C6C694A"));
    }
    else if (autoECFB8A0C_val == libCore_ge_AnnouncerVOEvents_BlueTeamCapturesMercCamp) {
        libGame_gv_annData[lp_player].lv_text[lv_slot] = (StringToText(libGame_gv_announcement_FCT_Ally_C) + StringExternal("Param/Value/lib_Game_8CE2D065"));
    }
    else if (autoECFB8A0C_val == libCore_ge_AnnouncerVOEvents_RedTeamCapturesMercCamp) {
        libGame_gv_annData[lp_player].lv_text[lv_slot] = (StringToText(libGame_gv_announcement_FCT_Enemy_C) + StringExternal("Param/Value/lib_Game_126DBAE8"));
    }
    else if (autoECFB8A0C_val == libCore_ge_AnnouncerVOEvents_AlliedFortDestroyed) {
        libGame_gv_annData[lp_player].lv_text[lv_slot] = (StringToText(libGame_gv_announcement_FCT_Enemy_C) + StringExternal("Param/Value/lib_Game_838E8E5E"));
        libGame_gv_annData[lp_player].lv_soundID[lv_slot] = libCore_ge_AnnouncerVOEvents_AlliedFortDestroyed;
    }
    else if (autoECFB8A0C_val == libCore_ge_AnnouncerVOEvents_EnemyFortDestroyed) {
        libGame_gv_annData[lp_player].lv_text[lv_slot] = (StringToText(libGame_gv_announcement_FCT_Ally_C) + StringExternal("Param/Value/lib_Game_0A053C53"));
        libGame_gv_annData[lp_player].lv_soundID[lv_slot] = libCore_ge_AnnouncerVOEvents_EnemyFortDestroyed;
    }
    else if (autoECFB8A0C_val == libCore_ge_AnnouncerVOEvents_BlueTeamDestroysFort) {
        libGame_gv_annData[lp_player].lv_text[lv_slot] = (StringToText(libGame_gv_announcement_FCT_Ally_C) + StringExternal("Param/Value/lib_Game_1F806873"));
        libGame_gv_annData[lp_player].lv_soundID[lv_slot] = libCore_ge_AnnouncerVOEvents_BlueTeamDestroysFort;
    }
    else if (autoECFB8A0C_val == libCore_ge_AnnouncerVOEvents_RedTeamDestroysFort) {
        libGame_gv_annData[lp_player].lv_text[lv_slot] = (StringToText(libGame_gv_announcement_FCT_Enemy_C) + StringExternal("Param/Value/lib_Game_ABC17028"));
        libGame_gv_annData[lp_player].lv_soundID[lv_slot] = libCore_ge_AnnouncerVOEvents_RedTeamDestroysFort;
    }
    else if (autoECFB8A0C_val == libCore_ge_AnnouncerVOEvents_AlliedKeepDestroyed) {
        libGame_gv_annData[lp_player].lv_text[lv_slot] = (StringToText(libGame_gv_announcement_FCT_Enemy_C) + StringExternal("Param/Value/lib_Game_0B12BEEE"));
        libGame_gv_annData[lp_player].lv_soundID[lv_slot] = libCore_ge_AnnouncerVOEvents_AlliedKeepDestroyed;
    }
    else if (autoECFB8A0C_val == libCore_ge_AnnouncerVOEvents_EnemyKeepDestroyed) {
        libGame_gv_annData[lp_player].lv_text[lv_slot] = (StringToText(libGame_gv_announcement_FCT_Ally_C) + StringExternal("Param/Value/lib_Game_2F962625"));
        libGame_gv_annData[lp_player].lv_soundID[lv_slot] = libCore_ge_AnnouncerVOEvents_EnemyKeepDestroyed;
    }
    else if (autoECFB8A0C_val == libCore_ge_AnnouncerVOEvents_BlueTeamDestroysKeep) {
        libGame_gv_annData[lp_player].lv_text[lv_slot] = (StringToText(libGame_gv_announcement_FCT_Ally_C) + StringExternal("Param/Value/lib_Game_9D485247"));
        libGame_gv_annData[lp_player].lv_soundID[lv_slot] = libCore_ge_AnnouncerVOEvents_EnemyKeepDestroyed;
    }
    else if (autoECFB8A0C_val == libCore_ge_AnnouncerVOEvents_RedTeamDestroysKeep) {
        libGame_gv_annData[lp_player].lv_text[lv_slot] = (StringToText(libGame_gv_announcement_FCT_Enemy_C) + StringExternal("Param/Value/lib_Game_6236337D"));
        libGame_gv_annData[lp_player].lv_soundID[lv_slot] = libCore_ge_AnnouncerVOEvents_EnemyKeepDestroyed;
    }
    else if (autoECFB8A0C_val == libCore_ge_AnnouncerVOEvents_AlliedCoreUnderAttack) {
        libGame_gv_annData[lp_player].lv_soundID[lv_slot] = libCore_ge_AnnouncerVOEvents_AlliedCoreUnderAttack;
    }
    else if (autoECFB8A0C_val == libCore_ge_AnnouncerVOEvents_BlueTeamCoreUnderAttack) {
        libGame_gv_annData[lp_player].lv_soundID[lv_slot] = libCore_ge_AnnouncerVOEvents_BlueTeamCoreUnderAttack;
    }
    else if (autoECFB8A0C_val == libCore_ge_AnnouncerVOEvents_TalentUnlocked) {
        libGame_gv_annData[lp_player].lv_soundID[lv_slot] = libCore_ge_AnnouncerVOEvents_TalentUnlocked;
    }
    else if (autoECFB8A0C_val == libCore_ge_AnnouncerVOEvents_RedTeamCoreUnderAttack) {
        libGame_gv_annData[lp_player].lv_soundID[lv_slot] = libCore_ge_AnnouncerVOEvents_RedTeamCoreUnderAttack;
    }
    else if (autoECFB8A0C_val == libCore_ge_AnnouncerVOEvents_BlueTeamWins) {
        libGame_gv_annData[lp_player].lv_soundID[lv_slot] = libCore_ge_AnnouncerVOEvents_BlueTeamWins;
    }
    else if (autoECFB8A0C_val == libCore_ge_AnnouncerVOEvents_RedTeamWins) {
        libGame_gv_annData[lp_player].lv_soundID[lv_slot] = libCore_ge_AnnouncerVOEvents_RedTeamWins;
    }
    else if (autoECFB8A0C_val == libCore_ge_AnnouncerVOEvents_Victory) {
        libGame_gv_annData[lp_player].lv_soundID[lv_slot] = libCore_ge_AnnouncerVOEvents_Victory;
    }
    else if (autoECFB8A0C_val == libCore_ge_AnnouncerVOEvents_Defeat) {
        libGame_gv_annData[lp_player].lv_soundID[lv_slot] = libCore_ge_AnnouncerVOEvents_Defeat;
    }
    else {
    }
    if ((TimerGetRemaining(libGame_gv_annData[lp_player].lv_messageTimer) <= 0.0)) {
        libGame_gf_AnnCreateNotification(lp_player, lp_announceType);
    }
    else {
        if ((lp_heroDiesDeadPlayer > 0) && (lp_heroDiesDeadPlayer <= libCore_gv_bALMaxPlayers) && (TimerGetRemaining(libGame_gv_annData[lp_player].lv_messageTimer) > libGame_gv_announcement_KillAnnouncementTimerTreshold_C)) {
            TimerStart(libGame_gv_annData[lp_player].lv_messageTimer, libGame_gv_announcement_KillAnnouncementTimerTreshold_C, false, c_timeGame);
        }
    }
    return true;
}

void libGame_gf_AnnCreateNotification (int lp_player, int lp_event) {
    // Variable Declarations
    int lv_i;
    fixed lv_shownigDuration;
    int lv_annPackID;
    soundlink lv_sound;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_annPackID = libGame_gv_players[lp_player].lv_selectedAnnouncerVOPack;
    lv_sound = libCore_gv_dataAnnouncerVOPacks[lv_annPackID].lv_sounds[lp_event];
    libNtve_gf_SetDialogItemText(libUIUI_gv_annUI.lv_textLabel, libGame_gv_annData[lp_player].lv_text[1], libCore_gv_playerGroupFromPlayer[lp_player]);
    if ((lp_event == libCore_ge_AnnouncerVOEvents_Countdown30)) {
        TimerStart(libGame_gv_annData[lp_player].lv_messageTimer, 31.0, false, c_timeGame);
        SoundPlayForPlayer(libCore_gv_dataAnnouncerVOPacks[lv_annPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_Countdown30], c_maxPlayers, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
        Wait(17.0, c_timeGame);
        SoundPlayForPlayer(libCore_gv_dataAnnouncerVOPacks[lv_annPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_CountdownRemain], c_maxPlayers, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
        Wait(3.0, c_timeGame);
        SoundPlayForPlayer(libCore_gv_dataAnnouncerVOPacks[lv_annPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_Countdown10], c_maxPlayers, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
        Wait(6.0, c_timeGame);
        SoundPlayForPlayer(libCore_gv_dataAnnouncerVOPacks[lv_annPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_Countdown5], c_maxPlayers, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
        Wait(1.0, c_timeGame);
        SoundPlayForPlayer(libCore_gv_dataAnnouncerVOPacks[lv_annPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_Countdown4], c_maxPlayers, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
        Wait(1.0, c_timeGame);
        SoundPlayForPlayer(libCore_gv_dataAnnouncerVOPacks[lv_annPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_Countdown3], c_maxPlayers, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
        Wait(1.0, c_timeGame);
        SoundPlayForPlayer(libCore_gv_dataAnnouncerVOPacks[lv_annPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_Countdown2], c_maxPlayers, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
        Wait(1.0, c_timeGame);
        SoundPlayForPlayer(libCore_gv_dataAnnouncerVOPacks[lv_annPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_Countdown1], c_maxPlayers, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
        Wait(1.0, c_timeGame);
        SoundPlayForPlayer(libCore_gv_dataAnnouncerVOPacks[lv_annPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_GameStart], c_maxPlayers, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
    }
    else {
        SoundPlayForPlayer(libCore_gv_dataAnnouncerVOPacks[lv_annPackID].lv_sounds[libGame_gv_annData[lp_player].lv_soundID[1]], c_maxPlayers, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
    }
    if (((lp_event == libCore_ge_AnnouncerVOEvents_Defeat) || (lp_event == libCore_ge_AnnouncerVOEvents_Victory) || (lp_event == libCore_ge_AnnouncerVOEvents_Countdown30))) {
        lv_shownigDuration = 4.0;
    }
    else {
        lv_shownigDuration = libGame_gv_announcement_StandardTimerDuration_C;
    }
    DialogControlFadeTransparency(libUIUI_gv_annUI.lv_textLabel, libCore_gv_playerGroupFromPlayer[lp_player], 0.25, 0.0);
    TimerStart(libGame_gv_annData[lp_player].lv_messageTimer, lv_shownigDuration, false, c_timeGame);
}

void libGame_gf_CapturePointChangeOwnership (int lp_capturePointIndex, int lp_newOwner, int lp_newPlayerOwner, playergroup lp_capturingPlayers, bool lp_hasMercLordTalent) {
    // Variable Declarations
    int lv_currentOwner;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_currentOwner = UnitGetOwner(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit);
    if ((lp_newOwner == lv_currentOwner)) {
        return ;
    }

    if ((UnitGetType(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit) == "WatchTowerCaptureBeacon")) {
        if (((lp_newOwner == libCore_gv_cOMPUTER_Blue) || (lp_newOwner == libCore_gv_cOMPUTER_Red))) {
            libNtve_gf_SendActorMessageToUnit(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit, "AnimPlay Spell Spell");
        }

    }

    UnitSetOwner(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit, lp_newOwner, true);
    libGame_gf_SendEventCapturePointChangesOwner(lp_capturePointIndex, lp_newOwner, lp_newPlayerOwner, lp_capturingPlayers, lp_hasMercLordTalent);
}

void libGame_gf_CapturePointCreate (unit lp_beaconUnit, fixed lp_captureRadius, fixed lp_captureTime, fixed lp_overCaptureTime, bool lp_decayToOwner, bool lp_rememberLastOwner) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_capturePointCurrentCount == libGame_gv_capturePointMaxCount_C)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_ECE525DC"), true);
        return ;
    }

    libGame_gv_capturePointCurrentCount += 1;
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_enabled = false;
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_captureBeaconUnit = lp_beaconUnit;
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_captureRegion = RegionCircle(UnitGetPosition(lp_beaconUnit), lp_captureRadius);
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_captureCounter = 0;
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_pointsNeededToCapture = FixedToInt((lp_captureTime * 16.0));
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_maximumPoints = FixedToInt(((lp_captureTime + lp_overCaptureTime) * 16.0));
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_decayToOwner = lp_decayToOwner;
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_rememberLastOwner = lp_rememberLastOwner;
    DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatusBar, "CaptureProgressBar", lp_beaconUnit);
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), (libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_maximumPoints * 2.0), PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "@UI/CaptureBar_Fill_Blue", libGame_gv_teams[1].lv_teamPlayerGroup);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "@UI/CaptureBar_Fill_Red", libGame_gv_teams[2].lv_teamPlayerGroup);
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_captureProgressBar = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "CaptureProgressBGImage", lp_beaconUnit);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "@UI/CaptureBar_Fill_Red", libGame_gv_teams[1].lv_teamPlayerGroup);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "@UI/CaptureBar_Fill_Blue", libGame_gv_teams[2].lv_teamPlayerGroup);
    UnitStatusBarOverride(lp_beaconUnit, c_unitStatusGroupAll);
    libGame_gf_CapturePointEnable(libGame_gv_capturePointCurrentCount);
    if ((TriggerIsEnabled(libGame_gt_CapturePointLogic) == false)) {
        TriggerEnable(libGame_gt_CapturePointLogic, true);
    }

    DataTableSetInt(true, libGame_gv_capturePointLastCreatedCapturePointIndex_C, libGame_gv_capturePointCurrentCount);
}

void libGame_gf_CapturePointEnable (int lp_capturePointIndex) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_capturePointIndex > libGame_gv_capturePointCurrentCount) || (libGame_gv_capturePoints[lp_capturePointIndex].lv_enabled == true))) {
        return ;
    }

    libGame_gv_capturePoints[lp_capturePointIndex].lv_enabled = true;
    UnitSetOwner(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit, libCore_gv_cOMPUTER_Hostile, true);
    ActorSend(libNtve_gf_MainActorofUnit(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit), "Signal Show");
    libGame_gv_capturePoints[lp_capturePointIndex].lv_captureCounter = 0;
}

trigger auto_libGame_gf_CapturePointDisable_Trigger = null;
int auto_libGame_gf_CapturePointDisable_lp_capturePointIndex;

void libGame_gf_CapturePointDisable (int lp_capturePointIndex) {
    auto_libGame_gf_CapturePointDisable_lp_capturePointIndex = lp_capturePointIndex;

    if (auto_libGame_gf_CapturePointDisable_Trigger == null) {
        auto_libGame_gf_CapturePointDisable_Trigger = TriggerCreate("auto_libGame_gf_CapturePointDisable_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_CapturePointDisable_Trigger, false, false);
}

bool auto_libGame_gf_CapturePointDisable_TriggerFunc (bool testConds, bool runActions) {
    int lp_capturePointIndex = auto_libGame_gf_CapturePointDisable_lp_capturePointIndex;

    // Automatic Variable Declarations
    // Implementation
    if (((lp_capturePointIndex > libGame_gv_capturePointCurrentCount) || (libGame_gv_capturePoints[lp_capturePointIndex].lv_enabled == false))) {
        return true;
    }

    libGame_gv_capturePoints[lp_capturePointIndex].lv_enabled = false;
    ActorSend(libNtve_gf_MainActorofUnit(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit), "Signal Hide");
    Wait(1.0, c_timeGame);
    UnitSetOwner(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit, libCore_gv_cOMPUTER_Hostile, true);
    return true;
}

int libGame_gf_LastCreatedCapturePoint () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, libGame_gv_capturePointLastCreatedCapturePointIndex_C);
}

bool libGame_gf_CapturePointFullyCaptured (int lp_capturePointIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_capturePointIndex > libGame_gv_capturePointCurrentCount)) {
        return false;
    }

    if (((libGame_gv_capturePoints[lp_capturePointIndex].lv_captureCounter == libGame_gv_capturePoints[lp_capturePointIndex].lv_maximumPoints) || (libGame_gv_capturePoints[lp_capturePointIndex].lv_captureCounter == (libGame_gv_capturePoints[lp_capturePointIndex].lv_maximumPoints * -1)))) {
        return true;
    }
    else {
        return false;
    }
}

void libGame_gf_CameraPannedFromScript (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_CameraPannedFromScript_C);
}

void libGame_gf_SendEventCameraPannedFromScript (int lp_player, point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetPoint(false, TriggerEventParamName(libGame_gv_eventID_CameraPannedFromScript_C, libGame_gv_eventParam_CameraPannedFromScript_Point_C), lp_point);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_CameraPannedFromScript_C, libGame_gv_eventParam_CameraPannedFromScript_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_CameraPannedFromScript_C);
}

point libGame_gf_CameraPannedFromScriptPoint () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPoint(false, TriggerEventParamName(libGame_gv_eventID_CameraPannedFromScript_C, libGame_gv_eventParam_CameraPannedFromScript_Point_C));
}

int libGame_gf_CameraPannedFromScriptPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_CameraPannedFromScript_C, libGame_gv_eventParam_CameraPannedFromScript_Player_C));
}

void libGame_gf_CapturePointChangesOwner (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_CapturePointChangesOwner_C);
}

void libGame_gf_SendEventCapturePointChangesOwner (int lp_capturePointIndex, int lp_owner, int lp_playerOwner, playergroup lp_capturingPlayers, bool lp_hasMercLordTalent) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_CapturePointIndex_C), lp_capturePointIndex);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_AIOwner_C), lp_owner);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_PlayerOwner_C), lp_playerOwner);
    DataTableSetPlayerGroup(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_CapturingPlayers_C), lp_capturingPlayers);
    DataTableSetBool(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_HasMercLordTalent_C), lp_hasMercLordTalent);
    TriggerSendEvent(libGame_gv_eventID_CapturePointChangesOwner_C);
}

int libGame_gf_CapturePointChangesOwnerCapturePointIndex () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_CapturePointIndex_C));
}

int libGame_gf_CapturePointChangesOwnerOwner () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_AIOwner_C));
}

int libGame_gf_CapturePointChangesOwnerOwner2 () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_PlayerOwner_C));
}

playergroup libGame_gf_CapturePointChangesOwnerCapturingPlayers () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPlayerGroup(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_CapturingPlayers_C));
}

bool libGame_gf_CapturePointChangesOwnerHasMercLordTalent () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetBool(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_HasMercLordTalent_C));
}

void libGame_gf_CapturePointBecomesFullyOverCaptured (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_CapturePointBecomesFullyOverCaptured_C);
}

void libGame_gf_SendEventCapturePointBecomesFullyOverCaptured (int lp_capturePointIndex) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointBecomesFullyOverCaptured_C, libGame_gv_eventParam_CapturePointBecomesFullyOverCaptured_CapturePointIndex_C), lp_capturePointIndex);
    TriggerSendEvent(libGame_gv_eventID_CapturePointBecomesFullyOverCaptured_C);
}

int libGame_gf_CapturePointBecomesFullyOverCapturedCapturePointIndex () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointBecomesFullyOverCaptured_C, libGame_gv_eventParam_CapturePointBecomesFullyOverCaptured_CapturePointIndex_C));
}

void libGame_gf_JungleDefenderAIDefendersBeginFighting (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_JungleDefenderAIDefendersBeginFighting_C);
}

void libGame_gf_SendEventJungleDefenderAIDefendersBeginFighting (int lp_defenderAIIndex) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefendersBeginFighting_C, libGame_gv_eventParam_JungleDefenderAIDefendersBeginFighting_Index_C), lp_defenderAIIndex);
    TriggerSendEvent(libGame_gv_eventID_JungleDefenderAIDefendersBeginFighting_C);
}

int libGame_gf_JungleDefenderAIDefendersBeginFightingIndex () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefendersBeginFighting_C, libGame_gv_eventParam_JungleDefenderAIDefendersBeginFighting_Index_C));
}

void libGame_gf_JungleDefenderAIDefendersEndFighting (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_JungleDefenderAIDefendersEndFighting_C);
}

void libGame_gf_SendEventJungleDefenderAIDefendersEndFighting (int lp_defenderAIIndex) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefendersEndFighting_C, libGame_gv_eventParam_JungleDefenderAIDefendersEndFighting_Index_C), lp_defenderAIIndex);
    TriggerSendEvent(libGame_gv_eventID_JungleDefenderAIDefendersEndFighting_C);
}

int libGame_gf_JungleDefenderAIDefendersEndFightingIndex () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefendersEndFighting_C, libGame_gv_eventParam_JungleDefenderAIDefendersEndFighting_Index_C));
}

void libGame_gf_JungleDefenderAIDefenderKilled (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_JungleDefenderAIDefenderKilled_C);
}

void libGame_gf_SendEventJungleDefenderAIDefenderKilled (int lp_defenderAIIndex, unit lp_unit, int lp_killingPlayer) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C, libGame_gv_eventParam_JungleDefenderAIDefenderKilled_Index_C), lp_defenderAIIndex);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C, libGame_gv_eventParam_JungleDefenderAIDefenderKilled_Unit_C), lp_unit);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C, libGame_gv_eventParam_JungleDefenderAIDefenderKilled_KillingPlayer_C), lp_killingPlayer);
    TriggerSendEvent(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C);
}

int libGame_gf_JungleDefenderAIDefenderKilledIndex () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C, libGame_gv_eventParam_JungleDefenderAIDefenderKilled_Index_C));
}

unit libGame_gf_JungleDefenderAIDefenderKilledUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C, libGame_gv_eventParam_JungleDefenderAIDefenderKilled_Unit_C));
}

int libGame_gf_JungleDefenderAIDefenderKilledKillingPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C, libGame_gv_eventParam_JungleDefenderAIDefenderKilled_KillingPlayer_C));
}

void libGame_gf_JungleDefenderAIAllDefendersKilled (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_JungleDefenderAIAllDefendersKilled_C);
}

void libGame_gf_SendEventJungleDefenderAIAllDefendersKilled (int lp_defenderAIIndex, int lp_killingPlayer) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIAllDefendersKilled_C, libGame_gv_eventParam_JungleDefenderAIAllDefendersKilled_Index_C), lp_defenderAIIndex);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIAllDefendersKilled_C, libGame_gv_eventParam_JungleDefenderAIAllDefendersKilled_KillingPlayer_C), lp_killingPlayer);
    TriggerSendEvent(libGame_gv_eventID_JungleDefenderAIAllDefendersKilled_C);
}

int libGame_gf_JungleDefenderAIAllDefendersKilledIndex () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIAllDefendersKilled_C, libGame_gv_eventParam_JungleDefenderAIAllDefendersKilled_Index_C));
}

int libGame_gf_JungleDefenderAIAllDefendersKilledKillingPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIAllDefendersKilled_C, libGame_gv_eventParam_JungleDefenderAIAllDefendersKilled_KillingPlayer_C));
}

void libGame_gf_HeroAbilityUsed (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroAbilityUsed_C);
}

void libGame_gf_SendEventHeroAbilityUsed (int lp_player, string lp_abilityType, string lp_abilityLink) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroAbilityUsed_C, libGame_gv_eventParam_HeroAbilityUsed_Player_C), lp_player);
    DataTableSetString(false, TriggerEventParamName(libGame_gv_eventID_HeroAbilityUsed_C, libGame_gv_eventParam_HeroAbilityUsed_AbilityType_C), (lp_abilityType));
    DataTableSetString(false, TriggerEventParamName(libGame_gv_eventID_HeroAbilityUsed_C, libGame_gv_eventParam_HeroAbilityUsed_AbilityLink_C), (lp_abilityLink));
    TriggerSendEvent(libGame_gv_eventID_HeroAbilityUsed_C);
}

int libGame_gf_HeroAbilityUsedPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroAbilityUsed_C, libGame_gv_eventParam_HeroAbilityUsed_Player_C));
}

string libGame_gf_HeroAbilityUsedAbilityTechType () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetString(false, TriggerEventParamName(libGame_gv_eventID_HeroAbilityUsed_C, libGame_gv_eventParam_HeroAbilityUsed_AbilityType_C));
}

string libGame_gf_HeroAbilityUsedAbilityLink () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetString(false, TriggerEventParamName(libGame_gv_eventID_HeroAbilityUsed_C, libGame_gv_eventParam_HeroAbilityUsed_AbilityLink_C));
}

void libGame_gf_HeroKilled (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroKilled_C);
}

void libGame_gf_SendEventHeroKilled (int lp_playerKilled, int lp_playerKilling) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_PlayerKilled_C), lp_playerKilled);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_PlayerKilling_C), lp_playerKilling);
    TriggerSendEvent(libGame_gv_eventID_HeroKilled_C);
}

int libGame_gf_HeroKilledKillingPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_PlayerKilling_C));
}

int libGame_gf_HeroKilledPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_PlayerKilled_C));
}

point libGame_gf_HeroKilledLocaiton () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPoint(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_Location_C));
}

void libGame_gf_HeroParticipatedInTakedown (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroParticipatedInTakedown_C);
}

void libGame_gf_SendEventHeroParticipatedInTakedown (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_HeroParticipatedInTakedown_C);
}

int libGame_gf_HeroParticipatedInTakedownKillingPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_Player_C));
}

int libGame_gf_HeroParticipatedInTakedownKilledUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_Player_C));
}

void libGame_gf_HeroRespawn (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroRespawn_C);
}

void libGame_gf_SendEventHeroRespawn (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroRespawn_C, libGame_gv_eventParam_HeroRespawn_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_HeroRespawn_C);
}

int libGame_gf_HeroRespawnPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroRespawn_C, libGame_gv_eventParam_HeroRespawn_Player_C));
}

void libGame_gf_MapRavenLordTributeWarning (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapTributeWarning_C);
}

void libGame_gf_SendEventMapTributeWarning (point lp_position) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetPoint(false, TriggerEventParamName(libGame_gv_eventID_MapTributeWarning_C, libGame_gv_eventParam_MapTributeWarning_Position_C), lp_position);
    TriggerSendEvent(libGame_gv_eventID_MapTributeWarning_C);
}

point libGame_gf_MapTributeWarningPosition () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPoint(false, TriggerEventParamName(libGame_gv_eventID_MapTributeWarning_C, libGame_gv_eventParam_MapTributeWarning_Position_C));
}

void libGame_gf_MapRavenLordTributeSpawned (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapTributeSpawned_C);
}

void libGame_gf_SendEventMapTributeSpawned (unit lp_tribute) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_MapTributeSpawned_C, libGame_gv_eventParam_MapTributeSpawned_Tribute_C), lp_tribute);
    TriggerSendEvent(libGame_gv_eventID_MapTributeSpawned_C);
}

unit libGame_gf_MapTributeSpawnedUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_MapTributeSpawned_C, libGame_gv_eventParam_MapTributeSpawned_Tribute_C));
}

void libGame_gf_MapRavenLordTributePickedUp (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapTributePickedup_C);
}

void libGame_gf_SendEventMapTributePickedUp (int lp_player, point lp_positioin) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapTributePickedup_C, libGame_gv_eventParam_MapTributePickedup_Player_C), lp_player);
    DataTableSetPoint(false, TriggerEventParamName(libGame_gv_eventID_MapTributePickedup_C, libGame_gv_eventParam_MapTributePickedup_Position_C), lp_positioin);
    TriggerSendEvent(libGame_gv_eventID_MapTributePickedup_C);
}

int libGame_gf_MapTributePickedUpPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapTributePickedup_C, libGame_gv_eventParam_MapTributePickedup_Player_C));
}

point libGame_gf_MapTributePickedUpPosition () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPoint(false, TriggerEventParamName(libGame_gv_eventID_MapTributePickedup_C, libGame_gv_eventParam_MapTributePickedup_Position_C));
}

void libGame_gf_MapRavenLordCurseStarts (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapRavenCurseStarts_C);
}

void libGame_gf_SendEventMapRavenLordCurseStarts (int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapRavenCurseStarts_C, libGame_gv_eventParam_MapRavenCurseStarts_Team_C), lp_team);
    TriggerSendEvent(libGame_gv_eventID_MapRavenCurseStarts_C);
}

int libGame_gf_MapRavenLordCurseActivatedTeam () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapRavenCurseStarts_C, libGame_gv_eventParam_MapRavenCurseStarts_Team_C));
}

void libGame_gf_MapRavenLordCurseEnds (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapRavenCurseEnds_C);
}

void libGame_gf_SendEventMapRavenLordCurseEnds () {
    // Automatic Variable Declarations
    // Implementation
    TriggerSendEvent(libGame_gv_eventID_MapRavenCurseEnds_C);
}

void libGame_gf_UnitEntersSafeZonePuntRegion (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_UnitEntersSafeZonePuntRegion_C);
}

void libGame_gf_SendEventUnitEntersSafeZonePuntRegion (unit lp_unit, point lp_puntPoint) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_UnitEntersSafeZonePuntRegion_C, libGame_gv_eventParam_UnitEntersSafeZonePuntRegion_Unit_C), lp_unit);
    DataTableSetPoint(false, TriggerEventParamName(libGame_gv_eventID_UnitEntersSafeZonePuntRegion_C, libGame_gv_eventParam_UnitEntersSafeZonePuntRegion_PuntPoint_C), lp_puntPoint);
    TriggerSendEvent(libGame_gv_eventID_UnitEntersSafeZonePuntRegion_C);
}

unit libGame_gf_UnitEntersSafeZonePuntRegionUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_UnitEntersSafeZonePuntRegion_C, libGame_gv_eventParam_UnitEntersSafeZonePuntRegion_Unit_C));
}

point libGame_gf_UnitEntersSafeZonePuntRegionPuntPoint () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPoint(false, TriggerEventParamName(libGame_gv_eventID_UnitEntersSafeZonePuntRegion_C, libGame_gv_eventParam_UnitEntersSafeZonePuntRegion_PuntPoint_C));
}

void libGame_gf_UnitEntersSafeZoneRegion (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_UnitEntersSafeZoneRegion_C);
}

void libGame_gf_SendEventUnitEntersSafeZoneRegion (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_UnitEntersSafeZoneRegion_C, libGame_gv_eventParam_UnitEntersSafeZoneRegion_Unit_C), lp_unit);
    TriggerSendEvent(libGame_gv_eventID_UnitEntersSafeZoneRegion_C);
}

unit libGame_gf_UnitEntersSafeZoneRegionUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_UnitEntersSafeZoneRegion_C, libGame_gv_eventParam_UnitEntersSafeZoneRegion_Unit_C));
}

void libGame_gf_UnitExitsSafeZoneRegion (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_UnitExitsSafeZoneRegion_C);
}

void libGame_gf_SendEventUnitExitsSafeZoneRegion (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_UnitExitsSafeZoneRegion_C, libGame_gv_eventParam_UnitExitsSafeZoneRegion_Unit_C), lp_unit);
    TriggerSendEvent(libGame_gv_eventID_UnitExitsSafeZoneRegion_C);
}

unit libGame_gf_UnitExitsSafeZoneRegionUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_UnitExitsSafeZoneRegion_C, libGame_gv_eventParam_UnitExitsSafeZoneRegion_Unit_C));
}

void libGame_gf_PlayerChooseTalent (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_PlayerChooseTalent_C);
}

int libGame_gf_PlayerChooseTalentPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerChooseTalent_C, libGame_gv_eventParam_PlayerChooseTalent_Player_C));
}

int libGame_gf_PlayerChooseTalentTalentTier () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerChooseTalent_C, libGame_gv_eventParam_PlayerChooseTalent_TalentTier_C));
}

int libGame_gf_PlayerChooseTalentTalentColumn () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerChooseTalent_C, libGame_gv_eventParam_PlayerChooseTalent_TalentColumn_C));
}

string libGame_gf_PlayerChooseTalentTalentLink () {
    // Automatic Variable Declarations
    // Implementation
    return (DataTableGetString(false, TriggerEventParamName(libGame_gv_eventID_PlayerChooseTalent_C, libGame_gv_eventParam_PlayerChooseTalent_TalentLink_C)));
}

void libGame_gf_SendEventPlayerChooseTalent (int lp_player, int lp_talentTier, int lp_talentColumn) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerChooseTalent_C, libGame_gv_eventParam_PlayerChooseTalent_Player_C), lp_player);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerChooseTalent_C, libGame_gv_eventParam_PlayerChooseTalent_TalentTier_C), lp_talentTier);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerChooseTalent_C, libGame_gv_eventParam_PlayerChooseTalent_TalentColumn_C), lp_talentColumn);
    DataTableSetString(false, TriggerEventParamName(libGame_gv_eventID_PlayerChooseTalent_C, libGame_gv_eventParam_PlayerChooseTalent_TalentLink_C), (libCore_gv_heroData[libCore_gf_CommandersGetHeroIndexOfPlayerHero(lp_player)].lv_talentsData[lp_talentTier][lp_talentColumn].lv_talentLink));
    TriggerSendEvent(libGame_gv_eventID_PlayerChooseTalent_C);
}

void libGame_gf_PlayerCanChooseTalentsAnnouncement (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_PlayerCanChooseTalents_C);
}

void libGame_gf_SendEventPlayerCanChooseTalents (int lp_player) {
    // Variable Declarations
    int lv_team;
    int lv_currentMaxTier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_team = libGame_gf_PlayerGetPlayerTeam(lp_player);
    lv_currentMaxTier = libGame_gv_players[lp_player].lv_talentsCurrentMaxTier;

    // Implementation
    if ((TimerGetRemaining(libGame_gv_playerCanChooseTalentsTimer[lp_player]) <= 0.0) && (UnitXPGetCurrentLevel(libGame_gv_teams[lv_team].lv_core, "TeamVeterancyBehavior") > 1)) {
        if ((((lv_currentMaxTier == libCore_gv_dataHeroesMaxTalentsTiers) && (libGame_gv_players[lp_player].lv_talentsNumberofPickedTalentsPerTier[lv_currentMaxTier] == 0)) || ((lv_currentMaxTier < libCore_gv_dataHeroesMaxTalentsTiers) && (libGame_gv_players[lp_player].lv_eXPPoints >= libCore_gv_talentsTierInfo[lv_currentMaxTier].lv_price)))) {
            TimerStart(libGame_gv_playerCanChooseTalentsTimer[lp_player], libGame_gv_playerCanChooseTalentsTimerDelay, false, c_timeGame);
            DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerCanChooseTalents_C, libGame_gv_eventParam_PlayerCanChooseTalents_Player_C), lp_player);
            TriggerSendEvent(libGame_gv_eventID_PlayerCanChooseTalents_C);
        }
    }
}

int libGame_gf_PlayerCanChooseTalentsPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerCanChooseTalents_C, libGame_gv_eventParam_PlayerCanChooseTalents_Player_C));
}

void libGame_gf_SendEventCapturePointChangesOwner2 (int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_TeamGetsLevelUp, libGame_gv_eventParam_TeamGetsLevelUp_Team), lp_team);
    TriggerSendEvent(libGame_gv_eventID_TeamGetsLevelUp);
}

int libGame_gf_CapturePointChangesOwnerCapturePointIndex2 () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_TeamGetsLevelUp, libGame_gv_eventParam_TeamGetsLevelUp_Team));
}

void libGame_gf_CapturePointChangesOwner2 (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_TeamGetsLevelUp);
}

trigger auto_libGame_gf_HeroDeathHERODIESNEW_Trigger = null;
point auto_libGame_gf_HeroDeathHERODIESNEW_lp_point;
int auto_libGame_gf_HeroDeathHERODIESNEW_lp_deadPlayer;
int auto_libGame_gf_HeroDeathHERODIESNEW_lp_killingPlayer;

void libGame_gf_HeroDeathHERODIESNEW (point lp_point, int lp_deadPlayer, int lp_killingPlayer) {
    auto_libGame_gf_HeroDeathHERODIESNEW_lp_point = lp_point;
    auto_libGame_gf_HeroDeathHERODIESNEW_lp_deadPlayer = lp_deadPlayer;
    auto_libGame_gf_HeroDeathHERODIESNEW_lp_killingPlayer = lp_killingPlayer;

    if (auto_libGame_gf_HeroDeathHERODIESNEW_Trigger == null) {
        auto_libGame_gf_HeroDeathHERODIESNEW_Trigger = TriggerCreate("auto_libGame_gf_HeroDeathHERODIESNEW_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_HeroDeathHERODIESNEW_Trigger, false, false);
}

bool auto_libGame_gf_HeroDeathHERODIESNEW_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_libGame_gf_HeroDeathHERODIESNEW_lp_point;
    int lp_deadPlayer = auto_libGame_gf_HeroDeathHERODIESNEW_lp_deadPlayer;
    int lp_killingPlayer = auto_libGame_gf_HeroDeathHERODIESNEW_lp_killingPlayer;

    // Variable Declarations
    const fixed lv_multikillTimer = 6.0;
    int lv_i;
    int lv_itPlayer;
    fixed lv_totalXPValue;
    fixed lv_individualXPValue;
    int lv_jj;
    int lv_killingTeam;
    int lv_deadTeam;
    playergroup lv_displayPlayerGroup;

    // Automatic Variable Declarations
    playergroup auto60629823_g;
    playergroup auto360CE7FA_g;
    int auto360CE7FA_var;
    playergroup autoA5AAC2FB_g;
    int autoA5AAC2FB_var;

    // Variable Initialization
    lv_killingTeam = libGame_gf_EnemyTeamNumberOfPlayer(lp_deadPlayer);
    lv_deadTeam = libGame_gf_PlayerGetPlayerTeam(lp_deadPlayer);
    lv_displayPlayerGroup = PlayerGroupEmpty();

    // Implementation
    libGame_gv_scoreValues[lp_deadPlayer].lv_deaths += 1;
    libGame_gv_teams[lv_killingTeam].lv_kills += 1;
    lv_totalXPValue = libCore_gf_DataXPXPForHero(libGame_gv_players[lp_deadPlayer].lv_heroUnit);
    libGame_gv_teams[lv_killingTeam].lv_xPTotals2 += lv_totalXPValue;
    libGame_gv_teams[lv_killingTeam].lv_xPTotals += lv_totalXPValue;
    if ((PlayerGroupHasPlayer(libCore_gv_teamOrder, lp_deadPlayer) == true)) {
        SoundPlayForPlayer(SoundLink("Generic_HeroDies_Ally", -1), c_maxPlayers, libCore_gv_teamOrder, 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("Generic_HeroDies_Enemy", -1), c_maxPlayers, libCore_gv_teamChaos, 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("Generic_HeroDies_Ally", -1), c_maxPlayers, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], 100.0, 0.0);
    }
    else {
        SoundPlayForPlayer(SoundLink("Generic_HeroDies_Enemy", -1), c_maxPlayers, libCore_gv_teamOrder, 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("Generic_HeroDies_Ally", -1), c_maxPlayers, libCore_gv_teamChaos, 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("Generic_HeroDies_Enemy", -1), c_maxPlayers, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], 100.0, 0.0);
    }
    auto60629823_g = libGame_gf_PlayersOnTeamHeroes(lv_killingTeam, false);
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto60629823_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libGame_gv_players[lv_itPlayer].lv_participatedInTakedown[lp_deadPlayer] == true)) {
            if ((lv_itPlayer != lp_killingPlayer)) {
                PlayerGroupAdd(lv_displayPlayerGroup, lv_itPlayer);
                libGame_gv_players[lv_itPlayer].lv_eXPPoints += (lv_totalXPValue * libGame_gv_heroDeathParticipatedTalentPointsModificator_C);
                libGame_gv_scoreValues[lv_itPlayer].lv_individualTalentPointsEarned[lv_killingTeam] += (lv_totalXPValue * libGame_gv_heroDeathParticipatedTalentPointsModificator_C);
                libGame_gv_scoreValues[lv_itPlayer].lv_assists += 1;
                if ((PlayerHasTalent(lv_itPlayer, "TalentBucket_GatheringPower_Stacks") == true)) {
                    UnitBehaviorAdd(libGame_gv_players[lv_itPlayer].lv_heroUnit, "TalentBucket_GatheringPower_Stacks", libGame_gv_players[lv_itPlayer].lv_heroUnit, 1);
                }
            }
        }
        else {
            libGame_gv_players[lv_itPlayer].lv_eXPPoints += (lv_totalXPValue * libGame_gv_heroDeathNonParticipatedTalentPointsModificator_C);
        }
    }
    PlayerGroupAdd(lv_displayPlayerGroup, lp_killingPlayer);
    libGame_gv_scoreValues[lp_killingPlayer].lv_kills += 1;
    libGame_gv_scoreValues[lp_killingPlayer].lv_multikillStreak += 1;
    libGame_gv_scoreValues[lp_killingPlayer].lv_killingSpreeCount += 1;
    libGame_gv_players[lp_killingPlayer].lv_eXPPoints += (lv_totalXPValue * libGame_gv_heroDeathParticipatedTalentPointsModificator_C);
    libGame_gv_scoreValues[lv_itPlayer].lv_individualTalentPointsEarned[lv_killingTeam] += (lv_totalXPValue * libGame_gv_heroDeathParticipatedTalentPointsModificator_C);
    if ((PlayerHasTalent(lp_killingPlayer, "TalentBucket_GatheringPower_Stacks") == true)) {
        UnitBehaviorAdd(libGame_gv_players[lp_killingPlayer].lv_heroUnit, "TalentBucket_GatheringPower_Stacks", libGame_gv_players[lp_killingPlayer].lv_heroUnit, 1);
    }

    auto360CE7FA_g = libGame_gv_teams[lv_killingTeam].lv_teamPlayerGroupNoNPCPlayers;
    auto360CE7FA_var = -1;
    while (true) {
        auto360CE7FA_var = PlayerGroupNextPlayer(auto360CE7FA_g, auto360CE7FA_var);
        if (auto360CE7FA_var < 0) { break; }
        libGame_gf_AnnRegisterEvent(libCore_ge_AnnouncerVOEvents_EnemyKilledParticipants, auto360CE7FA_var, lp_killingPlayer, lp_deadPlayer, libGame_gv_gAMEFirstBloodAvailable);
    }
    autoA5AAC2FB_g = libGame_gv_teams[lv_deadTeam].lv_teamPlayerGroupNoNPCPlayers;
    autoA5AAC2FB_var = -1;
    while (true) {
        autoA5AAC2FB_var = PlayerGroupNextPlayer(autoA5AAC2FB_g, autoA5AAC2FB_var);
        if (autoA5AAC2FB_var < 0) { break; }
        if ((autoA5AAC2FB_var != lp_deadPlayer)) {
            libGame_gf_AnnRegisterEvent(libCore_ge_AnnouncerVOEvents_AllyKilled, autoA5AAC2FB_var, lp_killingPlayer, lp_deadPlayer, libGame_gv_gAMEFirstBloodAvailable);
        }
        else {
            libGame_gf_AnnRegisterEvent(libCore_ge_AnnouncerVOEvents_HeroSlain, autoA5AAC2FB_var, lp_killingPlayer, lp_deadPlayer, libGame_gv_gAMEFirstBloodAvailable);
        }
    }
    if ((libGame_gv_gAMEFirstBloodAvailable == true)) {
        libGame_gv_gAMEFirstBloodAvailable = false;
    }
    libUIUI_gf_addkill(lp_killingPlayer, libGame_gv_players[lp_deadPlayer].lv_heroUnit);
    if ((libGame_gv_players[lp_killingPlayer].lv_multikillStreak > 1)) {
        TimerRestart(libGame_gv_players[lp_killingPlayer].lv_multikillTimer);
    }
    else {
        TimerStart(libGame_gv_players[lp_killingPlayer].lv_multikillTimer, lv_multikillTimer, false, c_timeGame);
    }
    UnitXPAddXP(libGame_gv_teams[lv_killingTeam].lv_core, "TeamVeterancyBehavior", lv_totalXPValue);
    libUIUI_gf_UICombatFloatingElementsCreateTextatPointForPlayerGroup(UnitGetPosition(libGame_gv_players[lp_deadPlayer].lv_heroUnit), (StringExternal("Param/Value/lib_Game_2BEDFC59") + FixedToText(lv_totalXPValue, 0) + StringExternal("Param/Value/lib_Game_69B5F21E")), "FCT_XP_Crit", libUIUI_ge_UIFCTDirection_Vertical, lv_displayPlayerGroup, 100, "EventAnimateSlow");
    return true;
}

void libGame_gf_HeroDeathUpdateUIElementsForDeath (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gf_FullscreenOverlaysShowHideDeathOverlay(true, lp_player);
    libUIUI_gf_UIHeroConsoleShowHideUnitStatusFrameForPlayer(false, lp_player);
    libUIUI_gf_UIHeroConsoleShowHideUnitStatusFrameForPlayer2(false, lp_player);
}

void libGame_gf_HeroDeathUpdateUIElementsForDeath2 (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libUIUI_gf_UIHeroConsoleShowHideUnitStatusFrameForPlayer(true, lp_player);
    libUIUI_gf_UIHeroConsoleShowHideUnitStatusFrameForPlayer2(true, lp_player);
}

void libGame_gf_HeroDeathStartRespawnTimer (int lp_player) {
    // Variable Declarations
    int lv_team;
    unit lv_heroUnit;
    int lv_heroLevel;
    fixed lv_respawnTime;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_team = libGame_gf_PlayerGetPlayerTeam(lp_player);

    // Implementation
    lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;
    lv_heroLevel = UnitLevel(lv_heroUnit);
    UnitSetState(lv_heroUnit, c_unitStateStatusBar, false);
    lv_respawnTime = libCore_gv_bALDeathTimes[libGame_gv_teams[lv_team].lv_teamLevel];
    TimerStart(libGame_gv_players[lp_player].lv_respawnTimer, lv_respawnTime, false, c_timeGame);
    libUIUI_gf_UITopPanelDeathTimerStartForPlayer(lp_player);
}

void libGame_gf_HeroDeathUpdateRespawnTimer (int lp_respawningPlayer, fixed lp_modificationAmount) {
    // Variable Declarations
    fixed lv_currentRespawnTimer;
    fixed lv_newRespawnTimer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_currentRespawnTimer = TimerGetRemaining(libGame_gv_players[lp_respawningPlayer].lv_respawnTimer);
    if ((lv_currentRespawnTimer == 0.0)) {
        return ;
    }

    lv_newRespawnTimer = (lv_currentRespawnTimer + lp_modificationAmount);
    if ((lv_newRespawnTimer < 0.0)) {
        lv_newRespawnTimer = 0.0;
    }

    TimerStart(libGame_gv_players[lp_respawningPlayer].lv_respawnTimer, lv_newRespawnTimer, false, c_timeGame);
}

void libGame_gf_HeroDeathPortHeroBackAndSetDeathState (int lp_player) {
    // Variable Declarations
    int lv_i;
    unit lv_heroUnit;

    // Automatic Variable Declarations
    const int auto8491E5D0_ae = libCore_gv_bALMaxPlayers;
    const int auto8491E5D0_ai = 1;

    // Variable Initialization

    // Implementation
    lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;
    lv_i = 1;
    for ( ; ( (auto8491E5D0_ai >= 0 && lv_i <= auto8491E5D0_ae) || (auto8491E5D0_ai < 0 && lv_i >= auto8491E5D0_ae) ) ; lv_i += auto8491E5D0_ai ) {
        if (true) {
            if (true) {
            }

        }

    }
    UnitSetPropertyFixed(lv_heroUnit, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(lv_heroUnit, c_unitPropEnergyPercent, 100.0);
    UnitBehaviorAdd(lv_heroUnit, "Dead", lv_heroUnit, 1);
    if ((TimerGetDuration(libGame_gv_players[lp_player].lv_respawnTimer) > 0.0)) {
        UnitBehaviorSetDuration(lv_heroUnit, "Dead", TimerGetRemaining(libGame_gv_players[lp_player].lv_respawnTimer));
    }
    else {
        UnitBehaviorSetDuration(lv_heroUnit, "Dead", 0.0);
    }
    libUIUI_gf_HeroConsoleUnitStatusBarsUpdateStunDeathBar("Dead", lv_heroUnit);
    Wait(0.5, c_timeGame);
    UnitSetPosition(lv_heroUnit, libGame_gv_players[lp_player].lv_spawnPoint, false);
    UnitSetFacing(lv_heroUnit, 270.0, 0.0);
}

void libGame_gf_HeroDeathRespawnHeroforPlayer (int lp_player) {
    // Variable Declarations
    int lv_i;
    unit lv_heroUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;
    UnitKill(libGame_gv_players[lp_player].lv_gravestoneUnit);
    UnitBehaviorRemove(lv_heroUnit, "Dead", 1);
    UnitSetPosition(lv_heroUnit, libGame_gv_players[lp_player].lv_spawnPoint, false);
    UnitRevive(lv_heroUnit);
    UnitSetState(lv_heroUnit, c_unitStateStatusBar, true);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(libGame_gv_players[lp_player].lv_spawnPoint, 1.0, PointGetFacing(libGame_gv_players[lp_player].lv_spawnPoint))), c_orderQueueReplace);
    libNtve_gf_SendActorMessageToUnit(libGame_gv_players[lp_player].lv_heroUnit, "Signal Respawn");
    UnitSetPropertyFixed(lv_heroUnit, c_unitPropLifePercent, 100.0);
    if ((UnitGetType(lv_heroUnit) == "HeroBarbarian")) {
        UnitSetPropertyFixed(lv_heroUnit, c_unitPropEnergyPercent, 0.0);
    }
    else {
        UnitSetPropertyFixed(lv_heroUnit, c_unitPropEnergyPercent, 100.0);
    }
    libGame_gv_players[lp_player].lv_isDead = false;
    libGame_gv_players[lp_player].lv_cameraCameraLockInterrupt = false;
    libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack = 0;
    libGame_gv_players[lp_player].lv_cameraPlayerUnitToFocusOn = lv_heroUnit;
    libUIUI_gf_FullscreenOverlaysShowHideDeathOverlay(false, lp_player);
    libGame_gf_HeroDeathUpdateUIElementsForDeath2(lp_player);
}

bool libGame_gf_LaneIndexisValid (int lp_laneIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_laneIndex <= 0) && (lp_laneIndex > libGame_gv_laneInfo.lv_laneCount)) {
        return false;
    }
    else {
        return true;
    }
}

trigger auto_libGame_gf_LevelUpAddHeroUpgradestoTeam_Trigger = null;
int auto_libGame_gf_LevelUpAddHeroUpgradestoTeam_lp_team;

void libGame_gf_LevelUpAddHeroUpgradestoTeam (int lp_team) {
    auto_libGame_gf_LevelUpAddHeroUpgradestoTeam_lp_team = lp_team;

    if (auto_libGame_gf_LevelUpAddHeroUpgradestoTeam_Trigger == null) {
        auto_libGame_gf_LevelUpAddHeroUpgradestoTeam_Trigger = TriggerCreate("auto_libGame_gf_LevelUpAddHeroUpgradestoTeam_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_LevelUpAddHeroUpgradestoTeam_Trigger, false, false);
}

bool auto_libGame_gf_LevelUpAddHeroUpgradestoTeam_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libGame_gf_LevelUpAddHeroUpgradestoTeam_lp_team;

    // Variable Declarations
    fixed lv_energyMaximumBeforeLevelUp;
    fixed lv_energyMaximumAfterLevelUp;
    unit lv_itUnit;

    // Automatic Variable Declarations
    playergroup autoE02A2A0B_g;
    int autoE02A2A0B_var;

    // Variable Initialization

    // Implementation
    autoE02A2A0B_g = libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers;
    autoE02A2A0B_var = -1;
    while (true) {
        autoE02A2A0B_var = PlayerGroupNextPlayer(autoE02A2A0B_g, autoE02A2A0B_var);
        if (autoE02A2A0B_var < 0) { break; }
        if ((libGame_gv_players[autoE02A2A0B_var].lv_playerisJoinedatStart == true) && (libGame_gv_players[autoE02A2A0B_var].lv_heroUnit != null)) {
            lv_itUnit = libGame_gv_players[autoE02A2A0B_var].lv_heroUnit;
            lv_energyMaximumBeforeLevelUp = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, UnitGetType(lv_itUnit), "EnergyMax", autoE02A2A0B_var);
            libNtve_gf_SendActorMessageToUnit(libGame_gv_players[autoE02A2A0B_var].lv_heroUnit, "Signal LevelUp");
            TechTreeUpgradeAddLevel(autoE02A2A0B_var, "LevelUp_StandardUpgrades", 1);
            TechTreeUpgradeAddLevel(autoE02A2A0B_var, libCore_gv_heroData[libCore_gf_CommandersGetHeroIndexOfPlayerHero(autoE02A2A0B_var)].lv_heroLevelUpgrade, 1);
            lv_energyMaximumAfterLevelUp = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, UnitGetType(lv_itUnit), "EnergyMax", autoE02A2A0B_var);
            UnitSetPropertyFixed(lv_itUnit, c_unitPropEnergy, (UnitGetPropertyFixed(lv_itUnit, c_unitPropEnergy, c_unitPropCurrent) + (lv_energyMaximumAfterLevelUp - lv_energyMaximumBeforeLevelUp)));
            if ((UnitGetType(libGame_gv_players[autoE02A2A0B_var].lv_heroUnit) == "HeroAbathur")) {
                libGame_gf_LevelUpAbathurAddTeammatesUpgrades(autoE02A2A0B_var, lp_team);
            }

        }

    }
    return true;
}

void libGame_gf_LevelUpAbathurAddTeammatesUpgrades (int lp_player, int lp_team) {
    // Automatic Variable Declarations
    playergroup autoD814CFA4_g;
    int autoD814CFA4_var;

    // Implementation
    autoD814CFA4_g = libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers;
    autoD814CFA4_var = -1;
    while (true) {
        autoD814CFA4_var = PlayerGroupNextPlayer(autoD814CFA4_g, autoD814CFA4_var);
        if (autoD814CFA4_var < 0) { break; }
        if ((autoD814CFA4_var != lp_player) && (libGame_gv_players[autoD814CFA4_var].lv_heroUnit != null) && (libGame_gv_players[autoD814CFA4_var].lv_playerisJoinedatStart == true) && (UnitGetType(libGame_gv_players[autoD814CFA4_var].lv_heroUnit) != "HeroAbathur")) {
            TechTreeUpgradeAddLevel(lp_player, libCore_gv_heroData[libCore_gf_CommandersGetHeroIndexOfPlayerHero(autoD814CFA4_var)].lv_heroLevelUpgrade, 1);
        }

    }
}

trigger auto_libGame_gf_SpawnWave_Trigger = null;
int auto_libGame_gf_SpawnWave_lp_team;
int auto_libGame_gf_SpawnWave_lp_lane;

void libGame_gf_SpawnWave (int lp_team, int lp_lane) {
    auto_libGame_gf_SpawnWave_lp_team = lp_team;
    auto_libGame_gf_SpawnWave_lp_lane = lp_lane;

    if (auto_libGame_gf_SpawnWave_Trigger == null) {
        auto_libGame_gf_SpawnWave_Trigger = TriggerCreate("auto_libGame_gf_SpawnWave_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_SpawnWave_Trigger, false, false);
}

bool auto_libGame_gf_SpawnWave_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libGame_gf_SpawnWave_lp_team;
    int lp_lane = auto_libGame_gf_SpawnWave_lp_lane;

    // Variable Declarations
    int lv_itGroup;
    int lv_itMinion;
    int lv_groupCount;
    point lv_basePoint;
    point lv_offsetPoint;
    fixed lv_currentOffsetAmount;
    point lv_spawnPoint;
    int lv_minionType;
    const fixed lv_offsetChangePerGroup = 1.875;

    // Automatic Variable Declarations
    int autoCF6D3ABD_ae;
    const int autoCF6D3ABD_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libCore_gv_gameOver == true)) {
        return true;
    }
    if (((UnitIsValid(libGame_gv_teams[libGame_gf_EnemyTeamNumberOfTeam(lp_team)].lv_towerFort[lp_lane]) == true) || (UnitIsValid(libGame_gv_teams[libGame_gf_EnemyTeamNumberOfTeam(lp_team)].lv_towerKeep[lp_lane]) == true))) {
        lv_groupCount = 3;
    }
    else {
        lv_groupCount = 4;
    }
    lv_basePoint = libGame_gv_laneInfo.lv_lanePointsForTeam[lp_team][lp_lane][2];
    lv_offsetPoint = libGame_gv_laneInfo.lv_lanePointsForTeam[lp_team][lp_lane][3];
    lv_currentOffsetAmount = ((lv_groupCount - 1) * lv_offsetChangePerGroup);
    autoCF6D3ABD_ae = lv_groupCount;
    lv_itGroup = 1;
    for ( ; ( (autoCF6D3ABD_ai >= 0 && lv_itGroup <= autoCF6D3ABD_ae) || (autoCF6D3ABD_ai < 0 && lv_itGroup >= autoCF6D3ABD_ae) ) ; lv_itGroup += autoCF6D3ABD_ai ) {
        lv_spawnPoint = libNtve_gf_PointOffsetTowardsPoint(lv_basePoint, lv_currentOffsetAmount, lv_offsetPoint);
        libGame_gf_SpawnMinions(lp_team, lv_itGroup, lp_lane, lv_spawnPoint);
        lv_currentOffsetAmount -= lv_offsetChangePerGroup;
        Wait(0.0625, c_timeGame);
    }
    return true;
}

void libGame_gf_SpawnMinions (int lp_team, int lp_minionType, int lp_lane, point lp_point) {
    // Variable Declarations
    string lv_itUnitType;
    int lv_itCount;

    // Automatic Variable Declarations
    int auto42CA4900_val;
    int auto2DB9082B_n;
    int auto2DB9082B_i;

    // Variable Initialization

    // Implementation
    auto42CA4900_val = lp_minionType;
    if (auto42CA4900_val == libGame_ge_SpawnMinionsMinionTypeNumber_Melee) {
        lv_itUnitType = "Minion_Melee";
        lv_itCount = 3;
    }
    else if (auto42CA4900_val == libGame_ge_SpawnMinionsMinionTypeNumber_Wizard) {
        lv_itUnitType = "Minion_Psionic";
        lv_itCount = 1;
    }
    else if (auto42CA4900_val == libGame_ge_SpawnMinionsMinionTypeNumber_Ranged) {
        lv_itUnitType = "Minion_Ranged";
        lv_itCount = 3;
    }
    else if (auto42CA4900_val == libGame_ge_SpawnMinionsMinionTypeNumber_Catapult) {
        lv_itUnitType = "Minion_Catapult";
        lv_itCount = 1;
    }
    else {
    }
    auto2DB9082B_n = lv_itCount;
    for (auto2DB9082B_i = 1; auto2DB9082B_i <= auto2DB9082B_n; auto2DB9082B_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, lv_itUnitType, 0, libGame_gv_teams[lp_team].lv_nPCPlayer, lp_point, libGame_gv_laneInfo.lv_lanePointsForTeam[lp_team][lp_lane][3]);
        if ((libCore_gv_mAPCurrentMap == libCore_ge_MAPName_BattleForSlayn)) {
            UnitBehaviorAddPlayer(UnitLastCreated(), "MinionProtoss_WarpingInvulnerable", libGame_gv_teams[lp_team].lv_nPCPlayer, 1);
        }
        if ((lv_itUnitType == "Minion_Catapult")) {
            libAIAI_gf_MinionAICheckIndex(UnitLastCreated(), lp_lane, true);
        }
        else {
            libAIAI_gf_MinionAICheckIndex(UnitLastCreated(), lp_lane, false);
        }
        if ((lv_itUnitType == "Minion_Psionic")) {
            UnitBehaviorAdd(UnitLastCreated(), "HeroGeneric_WizardDropGlobe", libGame_gv_teams[libGame_gf_EnemyTeamNumberOfTeam(lp_team)].lv_core, 1);
        }

    }
}

void libGame_gf_ShareUnshareVisionOfAlliesForPlayer (bool lp_onOff, int lp_player) {
    // Variable Declarations
    int lv_i;
    unit lv_u;
    playergroup lv_allyPlayerGroup;

    // Automatic Variable Declarations
    playergroup autoB4DBE070_g;

    // Variable Initialization
    lv_allyPlayerGroup = PlayerGroupEmpty();

    // Implementation
    lv_allyPlayerGroup = libGame_gv_teams[libGame_gf_PlayerGetPlayerTeam(lp_player)].lv_teamPlayerGroup;
    autoB4DBE070_g = lv_allyPlayerGroup;
    lv_i = -1;
    while (true) {
        lv_i = PlayerGroupNextPlayer(autoB4DBE070_g, lv_i);
        if (lv_i < 0) { break; }
        if ((lv_i != lp_player)) {
            PlayerSetAlliance(lv_i, c_allianceIdVision, lp_player, lp_onOff);
        }

    }
}

int libGame_gf_PlayersAliveOnTeam (int lp_team) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_count;

    // Automatic Variable Declarations
    playergroup autoB3CAA3DD_g;

    // Variable Initialization

    // Implementation
    autoB3CAA3DD_g = libGame_gf_PlayersOnTeamHeroes(lp_team, false);
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoB3CAA3DD_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libGame_gv_players[lv_itPlayer].lv_isDead == false)) {
            lv_count += 1;
        }

    }
    return lv_count;
}

int libGame_gf_TeamNumberOfPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGroupHasPlayer(libCore_gv_teamOrder, lp_player) == true)) {
        return 1;
    }

    if ((PlayerGroupHasPlayer(libCore_gv_teamChaos, lp_player) == true)) {
        return 2;
    }

    return 0;
}

int libGame_gf_EnemyTeamNumberOfPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (3-libGame_gf_PlayerGetPlayerTeam(lp_player));
}

int libGame_gf_EnemyTeamNumberOfTeam (int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    return (3 - lp_team);
}

unit libGame_gf_PlayerHeroUnit (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libGame_gv_players[lp_player].lv_heroUnit;
}

int libGame_gf_PlayerGetPlayerTeam (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGroupHasPlayer(libGame_gv_teams[1].lv_teamPlayerGroup, lp_player) == true)) {
        return 1;
    }
    else if ((PlayerGroupHasPlayer(libGame_gv_teams[2].lv_teamPlayerGroup, lp_player) == true)) {
        return 2;
    }
    return -1;
}

trigger auto_libGame_gf_SafeZoneAddtoPunchedGroup_Trigger = null;
unit auto_libGame_gf_SafeZoneAddtoPunchedGroup_lp_punchedUnit;

void libGame_gf_SafeZoneAddtoPunchedGroup (unit lp_punchedUnit) {
    auto_libGame_gf_SafeZoneAddtoPunchedGroup_lp_punchedUnit = lp_punchedUnit;

    if (auto_libGame_gf_SafeZoneAddtoPunchedGroup_Trigger == null) {
        auto_libGame_gf_SafeZoneAddtoPunchedGroup_Trigger = TriggerCreate("auto_libGame_gf_SafeZoneAddtoPunchedGroup_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_SafeZoneAddtoPunchedGroup_Trigger, false, false);
}

bool auto_libGame_gf_SafeZoneAddtoPunchedGroup_TriggerFunc (bool testConds, bool runActions) {
    unit lp_punchedUnit = auto_libGame_gf_SafeZoneAddtoPunchedGroup_lp_punchedUnit;

    // Automatic Variable Declarations
    // Implementation
    UnitGroupAdd(libGame_gv_safeZonePunchedGroup, lp_punchedUnit);
    Wait(1.0, c_timeGame);
    UnitGroupRemove(libGame_gv_safeZonePunchedGroup, lp_punchedUnit);
    return true;
}

void libGame_gf_ScoreValueTrackingTeamScoreValues () {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itTeam;
    int lv_enemyTeam;
    unit lv_heroUnit;

    // Automatic Variable Declarations
    int auto6F4654B6_ae;
    playergroup auto38713907_g;

    // Variable Initialization

    // Implementation
    auto6F4654B6_ae = libCore_gv_bALMaxTeams;
    lv_itTeam = 1;
    for ( ; lv_itTeam <= auto6F4654B6_ae ; lv_itTeam += 1 ) {
        lv_enemyTeam = libGame_gf_EnemyTeamNumberOfTeam(lv_itTeam);
        auto38713907_g = libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false);
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto38713907_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            lv_heroUnit = libCore_gf_CommandersCurrentHeroOrVehicleOfPlayer(lv_itPlayer);
            if (((libNtve_gf_UnitIsVisibleToPlayer(lv_heroUnit, libGame_gv_teams[lv_enemyTeam].lv_nPCPlayer) == true) || (libCore_gv_gameOver == true))) {
                libGame_gv_scoreValues[lv_itPlayer].lv_heroDamage[lv_enemyTeam] = libGame_gv_scoreValues[lv_itPlayer].lv_heroDamage[lv_itTeam];
                libGame_gv_scoreValues[lv_itPlayer].lv_siegeDamage[lv_enemyTeam] = libGame_gv_scoreValues[lv_itPlayer].lv_siegeDamage[lv_itTeam];
                libGame_gv_scoreValues[lv_itPlayer].lv_healedandAbsorbed[lv_enemyTeam] = libGame_gv_scoreValues[lv_itPlayer].lv_healedandAbsorbed[lv_itTeam];
                libGame_gv_scoreValues[lv_itPlayer].lv_damageTaken[lv_enemyTeam] = libGame_gv_scoreValues[lv_itPlayer].lv_damageTaken[lv_itTeam];
                libGame_gv_scoreValues[lv_itPlayer].lv_individualTalentPointsEarned[lv_enemyTeam] = libGame_gv_scoreValues[lv_itPlayer].lv_individualTalentPointsEarned[lv_itTeam];
            }
        }
    }
}

void libGame_gf_TownAnnounceTownDestroyed (unit lp_town) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetOwner(lp_town) == libCore_gv_cOMPUTER_Blue)) {
        MinimapPing(libCore_gv_teamOrder, UnitGetPosition(lp_town), 5.0, libCore_gv_cOLOREnemyColor);
        MinimapPing(libCore_gv_teamChaos, UnitGetPosition(lp_town), 5.0, libCore_gv_cOLORAllyColor);
        SoundPlayForPlayer(SoundLink("MX_Stinger_TownDestroyed_Ally", -1), c_maxPlayers, libCore_gv_teamOrder, 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("MX_Stinger_TownDestroyed_Enemy", -1), c_maxPlayers, libCore_gv_teamChaos, 100.0, 0.0);
    }
    else {
        MinimapPing(libCore_gv_teamOrder, UnitGetPosition(lp_town), 5.0, libCore_gv_cOLORAllyColor);
        MinimapPing(libCore_gv_teamChaos, UnitGetPosition(lp_town), 5.0, libCore_gv_cOLOREnemyColor);
        SoundPlayForPlayer(SoundLink("MX_Stinger_TownDestroyed_Ally", -1), c_maxPlayers, libCore_gv_teamChaos, 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("MX_Stinger_TownDestroyed_Enemy", -1), c_maxPlayers, libCore_gv_teamOrder, 100.0, 0.0);
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Defender Scaling
//--------------------------------------------------------------------------------------------------
bool libGame_gt_DefenderScaling_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_scalingValue;
    int lv_scaleNumber;
    int lv_groupIndex;
    fixed lv_defaultExp;

    // Automatic Variable Declarations
    const int auto43478243_ae = libAIAI_gv_defMaxCamps;
    int auto43478243_var;
    unitgroup auto9EBBBEF0_g;
    int auto9EBBBEF0_u;
    unit auto9EBBBEF0_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(60.0, c_timeGame);
        auto43478243_var = 1;
        for ( ; auto43478243_var <= auto43478243_ae; auto43478243_var += 1 ) {
            lv_groupIndex = auto43478243_var;
            if ((libAIAI_gv_defenderGroupInfo[lv_groupIndex].lv_scale_Number < 30)) {
                if (((libAIAI_gv_defenderGroupInfo[auto43478243_var].lv_groupisCapturing == true) || (libAIAI_gv_defenderGroupInfo[auto43478243_var].lv_groupIsFighting == true))) {
                    libAIAI_gv_defenderGroupInfo[lv_groupIndex].lv_scale_Number_Skipped += 1;
                }
                else {
                    libAIAI_gv_defenderGroupInfo[lv_groupIndex].lv_scale_Number += 1;
                    libAIAI_gv_defenderGroupInfo[lv_groupIndex].lv_scale_Number_AfterDeath += 1;
                    auto9EBBBEF0_g = libAIAI_gv_defenderGroupInfo[lv_groupIndex].lv_defendersGroup;
                    auto9EBBBEF0_u = UnitGroupCount(auto9EBBBEF0_g, c_unitCountAll);
                    for (;; auto9EBBBEF0_u -= 1) {
                        auto9EBBBEF0_var = UnitGroupUnitFromEnd(auto9EBBBEF0_g, auto9EBBBEF0_u);
                        if (auto9EBBBEF0_var == null) { break; }
                        if ((UnitIsAlive(auto9EBBBEF0_var) == true)) {
                            UnitXPSetCurrentLevel(auto9EBBBEF0_var, null, libAIAI_gv_defenderGroupInfo[lv_groupIndex].lv_scale_Number);
                        }
                    }
                }
                TextTagSetText(libAIAI_gv_defenderGroupInfo[lv_groupIndex].lv_textTagLevel, (StringExternal("Param/Value/lib_Game_A607758A") + IntToText(lv_scaleNumber)));
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_DefenderScaling_Init () {
    libGame_gt_DefenderScaling = TriggerCreate("libGame_gt_DefenderScaling_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minion Spawn
//--------------------------------------------------------------------------------------------------
bool libGame_gt_MinionSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itLane;

    // Automatic Variable Declarations
    int auto63E7F2BA_ae;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSMinionsAIEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((libCore_gv_gameOver == true)) {
            return true;
        }
        libGame_gv_minionScalingNumber += 1;
        auto63E7F2BA_ae = libGame_gv_laneInfo.lv_laneCount;
        lv_itLane = 1;
        for ( ; lv_itLane <= auto63E7F2BA_ae ; lv_itLane += 1 ) {
            libGame_gf_SpawnWave(libGame_gv_teamOrderIndex_C, lv_itLane);
            libGame_gf_SpawnWave(libGame_gv_teamChaosIndex_C, lv_itLane);
        }
        Wait(libGame_gv_minionSpawnTime, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_MinionSpawn_Init () {
    libGame_gt_MinionSpawn = TriggerCreate("libGame_gt_MinionSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Data
//--------------------------------------------------------------------------------------------------
bool libGame_gt_InitData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_colorString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_colorString = "";

    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gv_cOLORPlayerColor = libCore_gf_GetAllianceColorFromGameUIData(0);
    libCore_gv_cOLORAllyColor = libCore_gf_GetAllianceColorFromGameUIData(1);
    libCore_gv_cOLOREnemyColor = libCore_gf_GetAllianceColorFromGameUIData(2);
    libCore_gv_cOLORNeutralColor = libCore_gf_GetAllianceColorFromGameUIData(3);
    lv_colorString = (FixedToString((ColorGetComponent(libCore_gv_cOLORJungleCreepColor, c_colorComponentRed) / 100.0), 4) + "," + FixedToString((ColorGetComponent(libCore_gv_cOLORJungleCreepColor, c_colorComponentGreen) / 100.0), 4) + "," + FixedToString((ColorGetComponent(libCore_gv_cOLORJungleCreepColor, c_colorComponentBlue) / 100.0), 4) + ",1.0");
    CatalogFieldValueSet(c_gameCatalogGameUI, "Dflt", "OverrideColors[" + IntToString(2) + "].Value[" + IntToString(0) + "]", libCore_gv_cOMPUTER_Hostile, lv_colorString);
    CatalogFieldValueSet(c_gameCatalogGameUI, "Dflt", "OverrideColors[" + IntToString(2) + "].Value[" + IntToString(1) + "]", libCore_gv_cOMPUTER_Hostile, lv_colorString);
    CatalogFieldValueSet(c_gameCatalogGameUI, "Dflt", "OverrideColors[" + IntToString(2) + "].Value[" + IntToString(2) + "]", libCore_gv_cOMPUTER_Hostile, lv_colorString);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_InitData_Init () {
    libGame_gt_InitData = TriggerCreate("libGame_gt_InitData_Func");
    TriggerAddEventMapInit(libGame_gt_InitData);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Stats - Armor Initialization
//--------------------------------------------------------------------------------------------------
bool libGame_gt_UnitStatsArmorInitialization_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_armorValue;
    int lv_difference;
    const int lv_maximumArmor75 = libGame_gv_unitStatsMaximumArmor;
    string[libGame_gv_unitStatsArmorTypes + 1] lv_armorType;
    string[libGame_gv_unitStatsArmorUnitTypes + 1] lv_armorUnitType;
    int lv_itArmorValue;
    int lv_itArmorType;
    int lv_itArmorUnitType;
    string lv_fullString;

    // Automatic Variable Declarations
    int auto4F7F23B2_ae;
    int auto87DE4463_ae;
    int auto3FE7A28D_ae;
    int autoFDABC9FE_ae;
    int auto9F81630B_ae;
    int auto1F3EE4AC_ae;

    // Variable Initialization
    for (init_i = 0; init_i <= libGame_gv_unitStatsArmorTypes; init_i += 1) {
        lv_armorType[init_i] = "";
    }
    for (init_i = 0; init_i <= libGame_gv_unitStatsArmorUnitTypes; init_i += 1) {
        lv_armorUnitType[init_i] = "";
    }
    lv_fullString = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_armorType[0] = "Kinetic";
    lv_armorType[1] = "Energetic";
    lv_armorType[2] = "Storm";
    lv_armorUnitType[0] = "Hero";
    lv_armorUnitType[1] = "Creep";
    lv_armorUnitType[2] = "Mercenary";
    lv_armorUnitType[3] = "Minion";
    lv_armorUnitType[4] = "Structure";
    lv_armorUnitType[5] = "Summon";
    auto4F7F23B2_ae = (lv_maximumArmor75 - 1);
    lv_itArmorValue = 0;
    for ( ; lv_itArmorValue <= auto4F7F23B2_ae ; lv_itArmorValue += 1 ) {
        lv_difference = (libGame_gv_unitStatsMaximumArmor - lv_itArmorValue);
        auto87DE4463_ae = libGame_gv_unitStatsArmorTypes;
        lv_itArmorType = 0;
        for ( ; lv_itArmorType <= auto87DE4463_ae ; lv_itArmorType += 1 ) {
            auto3FE7A28D_ae = libGame_gv_unitStatsArmorUnitTypes;
            lv_itArmorUnitType = 0;
            for ( ; lv_itArmorUnitType <= auto3FE7A28D_ae ; lv_itArmorUnitType += 1 ) {
                lv_fullString = (lv_armorType[lv_itArmorType] + lv_armorUnitType[lv_itArmorUnitType]);
                if ((lv_difference < 10)) {
                    libGame_gv_unitStatsArmorBehaviorType[lv_itArmorType][lv_itArmorUnitType][lv_itArmorValue] = (("CommandersArmor" + lv_fullString + "Negative0" + IntToString(lv_difference)));
                }
                else {
                    libGame_gv_unitStatsArmorBehaviorType[lv_itArmorType][lv_itArmorUnitType][lv_itArmorValue] = (("CommandersArmor" + lv_fullString + "Negative" + IntToString(lv_difference)));
                }
            }
        }
    }
    autoFDABC9FE_ae = lv_maximumArmor75;
    lv_itArmorValue = 1;
    for ( ; lv_itArmorValue <= autoFDABC9FE_ae ; lv_itArmorValue += 1 ) {
        lv_armorValue = (lv_itArmorValue + lv_maximumArmor75);
        auto9F81630B_ae = libGame_gv_unitStatsArmorTypes;
        lv_itArmorType = 0;
        for ( ; lv_itArmorType <= auto9F81630B_ae ; lv_itArmorType += 1 ) {
            auto1F3EE4AC_ae = libGame_gv_unitStatsArmorUnitTypes;
            lv_itArmorUnitType = 0;
            for ( ; lv_itArmorUnitType <= auto1F3EE4AC_ae ; lv_itArmorUnitType += 1 ) {
                lv_fullString = (lv_armorType[lv_itArmorType] + lv_armorUnitType[lv_itArmorUnitType]);
                if ((lv_itArmorValue < 10)) {
                    libGame_gv_unitStatsArmorBehaviorType[lv_itArmorType][lv_itArmorUnitType][lv_armorValue] = (("CommandersArmor" + lv_fullString + "Positive0" + IntToString(lv_itArmorValue)));
                }
                else {
                    libGame_gv_unitStatsArmorBehaviorType[lv_itArmorType][lv_itArmorUnitType][lv_armorValue] = (("CommandersArmor" + lv_fullString + "Positive" + IntToString(lv_itArmorValue)));
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_UnitStatsArmorInitialization_Init () {
    libGame_gt_UnitStatsArmorInitialization = TriggerCreate("libGame_gt_UnitStatsArmorInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Stats - Power Initialization
//--------------------------------------------------------------------------------------------------
bool libGame_gt_UnitStatsPowerInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_j;

    // Automatic Variable Declarations
    int auto85E7B6C5_ae;
    int auto7D6AA387_ae;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto85E7B6C5_ae = libGame_gv_unitStatsPowerMaxValueNegative;
    lv_i = 1;
    for ( ; lv_i <= auto85E7B6C5_ae ; lv_i += 1 ) {
        lv_j = (libGame_gv_unitStatsPowerMaxValueNegative - lv_i);
        if ((lv_i < 10)) {
            libGame_gv_unitStatsPowerBehaviors[libGame_ge_UnitStatsPowerType_PowerKinetic][lv_j] = (("CommandersPowerKineticNegative0" + IntToString(lv_i)));
            libGame_gv_unitStatsPowerBehaviors[libGame_ge_UnitStatsPowerType_PowerEnergetic][lv_j] = (("CommandersPowerEnergeticNegative0" + IntToString(lv_i)));
            libGame_gv_unitStatsPowerBehaviors[libGame_ge_UnitStatsPowerType_PowerStorm][lv_j] = (("CommandersPowerStormNegative0" + IntToString(lv_i)));
        }
        else {
            libGame_gv_unitStatsPowerBehaviors[libGame_ge_UnitStatsPowerType_PowerKinetic][lv_j] = (("CommandersPowerKineticNegative" + IntToString(lv_i)));
            libGame_gv_unitStatsPowerBehaviors[libGame_ge_UnitStatsPowerType_PowerEnergetic][lv_j] = (("CommandersPowerEnergeticNegative" + IntToString(lv_i)));
            libGame_gv_unitStatsPowerBehaviors[libGame_ge_UnitStatsPowerType_PowerStorm][lv_j] = (("CommandersPowerStormNegative" + IntToString(lv_i)));
        }
    }
    auto7D6AA387_ae = 300;
    lv_i = 101;
    for ( ; lv_i <= auto7D6AA387_ae ; lv_i += 1 ) {
        if ((lv_i < 110)) {
            libGame_gv_unitStatsPowerBehaviors[libGame_ge_UnitStatsPowerType_PowerKinetic][lv_i] = (("CommandersPowerKineticPositive0" + IntToString((lv_i - 100))));
            libGame_gv_unitStatsPowerBehaviors[libGame_ge_UnitStatsPowerType_PowerEnergetic][lv_i] = (("CommandersPowerEnergeticPositive0" + IntToString((lv_i - 100))));
            libGame_gv_unitStatsPowerBehaviors[libGame_ge_UnitStatsPowerType_PowerStorm][lv_i] = (("CommandersPowerStormPositive0" + IntToString((lv_i - 100))));
        }
        else {
            libGame_gv_unitStatsPowerBehaviors[libGame_ge_UnitStatsPowerType_PowerKinetic][lv_i] = (("CommandersPowerKineticPositive" + IntToString((lv_i - 100))));
            libGame_gv_unitStatsPowerBehaviors[libGame_ge_UnitStatsPowerType_PowerEnergetic][lv_i] = (("CommandersPowerEnergeticPositive" + IntToString((lv_i - 100))));
            libGame_gv_unitStatsPowerBehaviors[libGame_ge_UnitStatsPowerType_PowerStorm][lv_i] = (("CommandersPowerStormPositive" + IntToString((lv_i - 100))));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_UnitStatsPowerInitialization_Init () {
    libGame_gt_UnitStatsPowerInitialization = TriggerCreate("libGame_gt_UnitStatsPowerInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Stats - Vampiric Kinetic
//--------------------------------------------------------------------------------------------------
bool libGame_gt_UnitStatsVampiricKinetic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_value;
    fixed lv_damage;
    unit lv_sourceUnit;
    unit lv_heroUnit;
    fixed lv_healingValue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourcePlayer() >= 1))) {
            return false;
        }

        if (!((EventUnitDamageSourcePlayer() <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((EventPlayer() != EventUnitDamageSourcePlayer()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heroUnit = libCore_gf_CommandersCurrentHeroOrVehicleOfPlayer(EventUnitDamageSourcePlayer());
    lv_value = libGame_gf_UnitStatsHealingCustomValueOfUnit(libGame_ge_UnitStatsHealingType_HealingCreatedVampiricKinetic, lv_heroUnit);
    if ((lv_value <= 0)) {
        return true;
    }
    lv_sourceUnit = libGame_gf_UnitStatsVampiricGetDamagingUnit(EventUnitDamageSourceUnit());
    if ((lv_sourceUnit != null)) {
        lv_damage = (EventUnitDamageAttemptedVitals() + EventUnitDamageBehaviorShield());
        lv_healingValue = libGame_gf_UnitStatsVampiricGetCorrectHealingValue(lv_damage, lv_heroUnit, libGame_ge_UnitStatsVampiricHealingType_HealingCreatedVampiricKinetic);
        UnitSetCustomValue(lv_heroUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsHealingIngameUsedCreatedVampiricKinetic), lv_healingValue);
        UnitCreateEffectUnit(lv_heroUnit, "CommandersVampiricHealerKinetic", lv_heroUnit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_UnitStatsVampiricKinetic_Init () {
    libGame_gt_UnitStatsVampiricKinetic = TriggerCreate("libGame_gt_UnitStatsVampiricKinetic_Func");
    TriggerAddEventUnitDamaged(libGame_gt_UnitStatsVampiricKinetic, null, c_unitDamageTypeRanged, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Stats - Vampiric Energetic
//--------------------------------------------------------------------------------------------------
bool libGame_gt_UnitStatsVampiricEnergetic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_value;
    fixed lv_damage;
    unit lv_sourceUnit;
    unit lv_heroUnit;
    fixed lv_healingValue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourcePlayer() >= 1))) {
            return false;
        }

        if (!((EventUnitDamageSourcePlayer() <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((EventPlayer() != EventUnitDamageSourcePlayer()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heroUnit = libCore_gf_CommandersCurrentHeroOrVehicleOfPlayer(EventUnitDamageSourcePlayer());
    lv_value = libGame_gf_UnitStatsHealingCustomValueOfUnit(libGame_ge_UnitStatsHealingType_HealingCreatedVampiricEnergetic, lv_heroUnit);
    if ((lv_value <= 0)) {
        return true;
    }
    lv_sourceUnit = libGame_gf_UnitStatsVampiricGetDamagingUnit(EventUnitDamageSourceUnit());
    if ((lv_sourceUnit != null)) {
        lv_damage = (EventUnitDamageAttemptedVitals() + EventUnitDamageBehaviorShield());
        lv_healingValue = libGame_gf_UnitStatsVampiricGetCorrectHealingValue(lv_damage, lv_heroUnit, libGame_ge_UnitStatsVampiricHealingType_HealingCreatedVampiricEnergetic);
        UnitSetCustomValue(lv_heroUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsHealingIngameUsedCreatedVampiricEnergetic), lv_healingValue);
        UnitCreateEffectUnit(lv_heroUnit, "CommandersVampiricHealerEnergetic", lv_heroUnit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_UnitStatsVampiricEnergetic_Init () {
    libGame_gt_UnitStatsVampiricEnergetic = TriggerCreate("libGame_gt_UnitStatsVampiricEnergetic_Func");
    TriggerAddEventUnitDamaged(libGame_gt_UnitStatsVampiricEnergetic, null, c_unitDamageTypeSpell, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Stats - Vampiric Storm
//--------------------------------------------------------------------------------------------------
bool libGame_gt_UnitStatsVampiricStorm_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_value;
    fixed lv_damage;
    unit lv_sourceUnit;
    unit lv_heroUnit;
    fixed lv_healingValue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourcePlayer() >= 1))) {
            return false;
        }

        if (!((EventUnitDamageSourcePlayer() <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((EventPlayer() != EventUnitDamageSourcePlayer()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heroUnit = libCore_gf_CommandersCurrentHeroOrVehicleOfPlayer(EventUnitDamageSourcePlayer());
    lv_value = libGame_gf_UnitStatsHealingCustomValueOfUnit(libGame_ge_UnitStatsHealingType_HealingCreatedVampiricStorm, lv_heroUnit);
    if ((lv_value <= 0)) {
        return true;
    }
    lv_sourceUnit = libGame_gf_UnitStatsVampiricGetDamagingUnit(EventUnitDamageSourceUnit());
    if ((lv_sourceUnit != null)) {
        lv_damage = (EventUnitDamageAttemptedVitals() + EventUnitDamageBehaviorShield());
        lv_healingValue = libGame_gf_UnitStatsVampiricGetCorrectHealingValue(lv_damage, lv_heroUnit, libGame_ge_UnitStatsVampiricHealingType_HealingCreatedVampiricStorm);
        UnitSetCustomValue(lv_heroUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_UnitStatsHealingIngameUsedCreatedVampiricStorm), lv_healingValue);
        UnitCreateEffectUnit(lv_heroUnit, "CommandersVampiricHealerStorm", lv_heroUnit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_UnitStatsVampiricStorm_Init () {
    libGame_gt_UnitStatsVampiricStorm = TriggerCreate("libGame_gt_UnitStatsVampiricStorm_Func");
    TriggerAddEventUnitDamaged(libGame_gt_UnitStatsVampiricStorm, null, c_unitDamageTypeSplash, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Stats - Healing Taken Initialization
//--------------------------------------------------------------------------------------------------
bool libGame_gt_UnitStatsHealingTakenInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_j;

    // Automatic Variable Declarations
    int autoC825E971_ae;
    int autoB27AECDD_ae;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoC825E971_ae = libGame_gv_unitStatsHealingMaxValueNegative;
    lv_i = 1;
    for ( ; lv_i <= autoC825E971_ae ; lv_i += 1 ) {
        lv_j = (libGame_gv_unitStatsPowerMaxValueNegative - lv_i);
        if ((lv_i < 10)) {
            libGame_gv_unitStatsHealingTakenBehaviors[lv_j] = (("CommandersHealingTakenNegative0" + IntToString(lv_i)));
        }
        else {
            libGame_gv_unitStatsHealingTakenBehaviors[lv_j] = (("CommandersHealingTakenNegative" + IntToString(lv_i)));
        }
    }
    autoB27AECDD_ae = libGame_gv_unitStatsHealingAllValues;
    lv_i = 101;
    for ( ; lv_i <= autoB27AECDD_ae ; lv_i += 1 ) {
        if ((lv_i < 110)) {
            libGame_gv_unitStatsHealingTakenBehaviors[lv_j] = (("CommandersHealingTakenPositive0" + IntToString((lv_i - 100))));
        }
        else {
            libGame_gv_unitStatsHealingTakenBehaviors[lv_j] = (("CommandersHealingTakenPositive" + IntToString((lv_i - 100))));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_UnitStatsHealingTakenInitialization_Init () {
    libGame_gt_UnitStatsHealingTakenInitialization = TriggerCreate("libGame_gt_UnitStatsHealingTakenInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Stats - Behavior Change Category
//--------------------------------------------------------------------------------------------------
bool libGame_gt_UnitStatsBehaviorChangeCategory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_UnitStatsChangeCustomValue(EventUnitBehavior(), EventUnitBehaviorChange(), EventUnit());
    libGame_gf_UnitStatsArmorUpdate(EventUnit());
    libGame_gf_UnitStatsPowerUpdate(EventUnit());
    libGame_gf_UnitStatsCompareHeroAndSummonedPower(EventUnit());
    libGame_gf_UnitStatsUpdateHealing(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_UnitStatsBehaviorChangeCategory_Init () {
    libGame_gt_UnitStatsBehaviorChangeCategory = TriggerCreate("libGame_gt_UnitStatsBehaviorChangeCategory_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_UnitStatsBehaviorChangeCategory, null, c_unitBehaviorFlagUser1, c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_UnitStatsBehaviorChangeCategory, null, c_unitBehaviorFlagUser1, c_unitBehaviorChangeDecrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Uses Ability
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroUsesAbility_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    string autoE385CCC1_val;

    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_AbilityMatchesFilters(AbilityCommandGetAbility(EventUnitAbility()), lv_player, c_classIdCAbilBehavior, "") == true) || (libNtve_gf_AbilityMatchesFilters(AbilityCommandGetAbility(EventUnitAbility()), lv_player, c_classIdCAbilEffectTarget, "") == true) || (libNtve_gf_AbilityMatchesFilters(AbilityCommandGetAbility(EventUnitAbility()), lv_player, c_classIdCAbilEffectInstant, "") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE385CCC1_val = CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(EventUnitAbility()), "TechAliasArray[" + IntToString(0) + "]", c_playerAny);
    if (autoE385CCC1_val == "Ability1") {
        libGame_gf_SendEventHeroAbilityUsed(lv_player, "Ability1", AbilityCommandGetAbility(EventUnitAbility()));
    }
    else if (autoE385CCC1_val == "Ability2") {
        libGame_gf_SendEventHeroAbilityUsed(lv_player, "Ability2", AbilityCommandGetAbility(EventUnitAbility()));
    }
    else if (autoE385CCC1_val == "Ability3") {
        libGame_gf_SendEventHeroAbilityUsed(lv_player, "Ability3", AbilityCommandGetAbility(EventUnitAbility()));
    }
    else if (autoE385CCC1_val == "Heroic") {
        libGame_gf_SendEventHeroAbilityUsed(lv_player, "Heroic", AbilityCommandGetAbility(EventUnitAbility()));
    }
    else if (autoE385CCC1_val == "Trait") {
        libGame_gf_SendEventHeroAbilityUsed(lv_player, "Trait", AbilityCommandGetAbility(EventUnitAbility()));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroUsesAbility_Init () {
    libGame_gt_HeroUsesAbility = TriggerCreate("libGame_gt_HeroUsesAbility_Func");
    TriggerAddEventUnitAbility(libGame_gt_HeroUsesAbility, UnitRefFromVariable("libGame_gv_players[1].lv_heroUnit"), null, c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(libGame_gt_HeroUsesAbility, UnitRefFromVariable("libGame_gv_players[2].lv_heroUnit"), null, c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(libGame_gt_HeroUsesAbility, UnitRefFromVariable("libGame_gv_players[3].lv_heroUnit"), null, c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(libGame_gt_HeroUsesAbility, UnitRefFromVariable("libGame_gv_players[4].lv_heroUnit"), null, c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(libGame_gt_HeroUsesAbility, UnitRefFromVariable("libGame_gv_players[5].lv_heroUnit"), null, c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(libGame_gt_HeroUsesAbility, UnitRefFromVariable("libGame_gv_players[6].lv_heroUnit"), null, c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(libGame_gt_HeroUsesAbility, UnitRefFromVariable("libGame_gv_players[7].lv_heroUnit"), null, c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(libGame_gt_HeroUsesAbility, UnitRefFromVariable("libGame_gv_players[8].lv_heroUnit"), null, c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(libGame_gt_HeroUsesAbility, UnitRefFromVariable("libGame_gv_players[9].lv_heroUnit"), null, c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(libGame_gt_HeroUsesAbility, UnitRefFromVariable("libGame_gv_players[10].lv_heroUnit"), null, c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Announcement - Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_AnnouncementTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_itPlayer;

    // Automatic Variable Declarations
    int auto4FC733E9_ae;
    int autoCB6D3DDE_ae;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto4FC733E9_ae = libCore_gv_bALMaxEnginePlayerCount;
    lv_itPlayer = 1;
    for ( ; lv_itPlayer <= auto4FC733E9_ae ; lv_itPlayer += 1 ) {
        if ((libGame_gv_annData[lv_itPlayer].lv_messageTimer == EventTimer())) {
            DialogControlFadeTransparency(libUIUI_gv_annUI.lv_textLabel, libCore_gv_playerGroupFromPlayer[lv_itPlayer], 0.25, 100.0);
            Wait(0.25, c_timeGame);
            autoCB6D3DDE_ae = libGame_gv_annDataAnncounts;
            lv_i = 2;
            for ( ; lv_i <= autoCB6D3DDE_ae ; lv_i += 1 ) {
                libGame_gv_annData[lv_itPlayer].lv_type[(lv_i-1)] = libGame_gv_annData[lv_itPlayer].lv_type[lv_i];
                libGame_gv_annData[lv_itPlayer].lv_announcerVOEvent[(lv_i-1)] = libGame_gv_annData[lv_itPlayer].lv_announcerVOEvent[0];
                libGame_gv_annData[lv_itPlayer].lv_text[(lv_i-1)] = libGame_gv_annData[lv_itPlayer].lv_text[lv_i];
                libGame_gv_annData[lv_itPlayer].lv_soundID[(lv_i-1)] = libGame_gv_annData[lv_itPlayer].lv_soundID[lv_i];
                libGame_gv_annData[lv_itPlayer].lv_backgroundSound[(lv_i-1)] = libGame_gv_annData[lv_itPlayer].lv_backgroundSound[lv_i];
                libGame_gv_annData[lv_itPlayer].lv_type[lv_i] = libGame_ge_AnnAnnouncementType_Nothing;
                libGame_gv_annData[lv_itPlayer].lv_announcerVOEvent[lv_i] = libCore_ge_AnnouncerVOEvents_Null;
                libGame_gv_annData[lv_itPlayer].lv_text[lv_i] = null;
                libGame_gv_annData[lv_itPlayer].lv_soundID[lv_i] = 0;
                libGame_gv_annData[lv_itPlayer].lv_backgroundSound[lv_i] = null;
            }
            libGame_gv_annData[lv_itPlayer].lv_numberOfItemsInQueue -= 1;
            if ((libGame_gv_annData[lv_itPlayer].lv_numberOfItemsInQueue >= 1)) {
                libGame_gf_AnnCreateNotification(lv_itPlayer, libGame_gv_annData[lv_itPlayer].lv_announcerVOEvent[1]);
            }
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_AnnouncementTimerExpires_Init () {
    libGame_gt_AnnouncementTimerExpires = TriggerCreate("libGame_gt_AnnouncementTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_AnnouncementTimerExpires, libGame_gv_annData[1].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementTimerExpires, libGame_gv_annData[2].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementTimerExpires, libGame_gv_annData[3].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementTimerExpires, libGame_gv_annData[4].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementTimerExpires, libGame_gv_annData[5].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementTimerExpires, libGame_gv_annData[6].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementTimerExpires, libGame_gv_annData[7].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementTimerExpires, libGame_gv_annData[8].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementTimerExpires, libGame_gv_annData[9].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementTimerExpires, libGame_gv_annData[10].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementTimerExpires, libGame_gv_annData[libCore_gv_oBSERVER_ObserverUIPlayer].lv_messageTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Capture Point Logic
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CapturePointLogic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_captureIncrement = 1;
    unit lv_itUnit;
    int lv_capturePointIndex;
    int lv_orderTeamHeroes;
    int lv_chaosTeamHeroes;
    playergroup lv_capturingPlayers;
    bool lv_hasOverCaptureRegion;
    bool lv_becameFullyCaptured;
    bool lv_capperHasMercLordTalent;
    int lv_newOwnerPlayer;

    // Automatic Variable Declarations
    int auto318A7F83_ae;
    const int auto318A7F83_ai = 1;
    unitgroup autoD0047345_g;
    int autoD0047345_u;
    int auto7A18317D_val;
    playergroup auto35C6319C_g;
    int auto35C6319C_var;
    playergroup autoCCFBCF4A_g;
    int autoCCFBCF4A_var;

    // Variable Initialization
    lv_capturingPlayers = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto318A7F83_ae = libGame_gv_capturePointCurrentCount;
    lv_capturePointIndex = 1;
    for ( ; ( (auto318A7F83_ai >= 0 && lv_capturePointIndex <= auto318A7F83_ae) || (auto318A7F83_ai < 0 && lv_capturePointIndex >= auto318A7F83_ae) ) ; lv_capturePointIndex += auto318A7F83_ai ) {
        if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_enabled == false)) {
            continue;
        }

        lv_orderTeamHeroes = 0;
        lv_chaosTeamHeroes = 0;
        autoD0047345_g = UnitGroup(null, c_playerAny, libGame_gv_capturePoints[lv_capturePointIndex].lv_captureRegion, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
        autoD0047345_u = UnitGroupCount(autoD0047345_g, c_unitCountAll);
        for (;; autoD0047345_u -= 1) {
            lv_itUnit = UnitGroupUnitFromEnd(autoD0047345_g, autoD0047345_u);
            if (lv_itUnit == null) { break; }
            if (((UnitBehaviorCount(lv_itUnit, "UltimateEvolutionBuff") == 1) || (UnitTestState(lv_itUnit, c_unitStateHallucination) == false))) {
                if ((libGame_gv_players[UnitGetOwner(lv_itUnit)].lv_faction == libGame_ge_PlayerFaction_Order)) {
                    lv_orderTeamHeroes += 1;
                }
                else {
                    lv_chaosTeamHeroes += 1;
                }
                PlayerGroupAdd(lv_capturingPlayers, UnitGetOwner(lv_itUnit));
                if ((UnitHasBehavior2(lv_itUnit, "TalentBucket_MercenaryLord_CarryBehavior") == true)) {
                    lv_capperHasMercLordTalent = true;
                }

            }

        }
        if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_decayToOwner == true)) {
            auto7A18317D_val = UnitGetOwner(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit);
            if (auto7A18317D_val == libCore_gv_cOMPUTER_Blue) {
                if ((lv_chaosTeamHeroes == 0) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter < libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture)) {
                    libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter += lv_captureIncrement;
                }

            }
            else if (auto7A18317D_val == libCore_gv_cOMPUTER_Red) {
                if ((lv_orderTeamHeroes == 0) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter > (libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture * -1))) {
                    libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter -= lv_captureIncrement;
                }

            }
            else if (auto7A18317D_val == libCore_gv_cOMPUTER_Hostile) {
                if ((lv_orderTeamHeroes == 0) && (lv_chaosTeamHeroes == 0)) {
                    if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter < 0)) {
                        libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter += lv_captureIncrement;
                    }

                    if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter > 0)) {
                        libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter -= lv_captureIncrement;
                    }

                }

            }
            else {
            }
        }

        if ((lv_orderTeamHeroes > 0) && (lv_chaosTeamHeroes == 0) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter < libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints)) {
            if (((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter + lv_captureIncrement) >= libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints)) {
                lv_becameFullyCaptured = true;
                libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter = libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints;
            }
            else {
                libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter += lv_captureIncrement;
            }
        }

        if ((lv_chaosTeamHeroes > 0) && (lv_orderTeamHeroes == 0) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter > (-1 * libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints))) {
            if (((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter - lv_captureIncrement) <= (-1 * libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints))) {
                lv_becameFullyCaptured = true;
                libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter = (-1 * libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints);
            }
            else {
                libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter -= lv_captureIncrement;
            }
        }

        libNtve_gf_SetDialogItemCurrentValue(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureProgressBar, (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter + libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints), PlayerGroupAll());
        if ((UnitGetOwner(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) != libCore_gv_cOMPUTER_Hostile) && (((libGame_gv_capturePoints[lv_capturePointIndex].lv_rememberLastOwner == true) && (UnitGetOwner(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) == libCore_gv_cOMPUTER_Blue) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter <= 0)) || ((libGame_gv_capturePoints[lv_capturePointIndex].lv_rememberLastOwner == true) && (UnitGetOwner(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) == libCore_gv_cOMPUTER_Red) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter >= 0)) || ((libGame_gv_capturePoints[lv_capturePointIndex].lv_rememberLastOwner == false) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter > (libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture * -1)) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter < libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture)))) {
            libGame_gf_CapturePointChangeOwnership(lv_capturePointIndex, libCore_gv_cOMPUTER_Hostile, 0, lv_capturingPlayers, lv_capperHasMercLordTalent);
        }
        else if ((UnitGetOwner(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) != libCore_gv_cOMPUTER_Blue) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter >= libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture)) {
            auto35C6319C_g = libCore_gv_teamOrder;
            auto35C6319C_var = -1;
            while (true) {
                auto35C6319C_var = PlayerGroupNextPlayer(auto35C6319C_g, auto35C6319C_var);
                if (auto35C6319C_var < 0) { break; }
                if (((libNtve_gf_UnitInRegion(libGame_gv_players[auto35C6319C_var].lv_heroUnit, libGame_gv_capturePoints[lv_capturePointIndex].lv_captureRegion) == true) || (libNtve_gf_UnitInRegion(libGame_gv_players[auto35C6319C_var].lv_activeVehicle, libGame_gv_capturePoints[lv_capturePointIndex].lv_captureRegion) == true))) {
                    lv_newOwnerPlayer = auto35C6319C_var;
                    continue;
                }

            }
            libGame_gf_CapturePointChangeOwnership(lv_capturePointIndex, libCore_gv_cOMPUTER_Blue, lv_newOwnerPlayer, lv_capturingPlayers, lv_capperHasMercLordTalent);
        }
        else if ((UnitGetOwner(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) != libCore_gv_cOMPUTER_Red) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter <= (libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture * -1))) {
            autoCCFBCF4A_g = libCore_gv_teamOrder;
            autoCCFBCF4A_var = -1;
            while (true) {
                autoCCFBCF4A_var = PlayerGroupNextPlayer(autoCCFBCF4A_g, autoCCFBCF4A_var);
                if (autoCCFBCF4A_var < 0) { break; }
                if (((libNtve_gf_UnitInRegion(libGame_gv_players[autoCCFBCF4A_var].lv_heroUnit, libGame_gv_capturePoints[lv_capturePointIndex].lv_captureRegion) == true) || (libNtve_gf_UnitInRegion(libGame_gv_players[autoCCFBCF4A_var].lv_activeVehicle, libGame_gv_capturePoints[lv_capturePointIndex].lv_captureRegion) == true))) {
                    lv_newOwnerPlayer = autoCCFBCF4A_var;
                    continue;
                }

            }
            libGame_gf_CapturePointChangeOwnership(lv_capturePointIndex, libCore_gv_cOMPUTER_Red, lv_newOwnerPlayer, lv_capturingPlayers, lv_capperHasMercLordTalent);
        }
        lv_hasOverCaptureRegion = (libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints >= libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture);
        if ((lv_becameFullyCaptured == true) && (lv_hasOverCaptureRegion == true)) {
            libGame_gf_SendEventCapturePointBecomesFullyOverCaptured(lv_capturePointIndex);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CapturePointLogic_Init () {
    libGame_gt_CapturePointLogic = TriggerCreate("libGame_gt_CapturePointLogic_Func");
    TriggerEnable(libGame_gt_CapturePointLogic, false);
    TriggerAddEventTimePeriodic(libGame_gt_CapturePointLogic, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Recognition
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CCRecognition_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_FullscreenOverlaysCreateCCEffectFlashForPlayer(EventPlayer(), UnitBehaviorDuration(EventUnit(), EventUnitBehavior()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CCRecognition_Init () {
    libGame_gt_CCRecognition = TriggerCreate("libGame_gt_CCRecognition_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_CCRecognition, null, c_unitBehaviorFlagUser7, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_CCRecognition, null, c_unitBehaviorFlagStun, c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn on AI (11 - 12) Collision
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TurnonAI1112Collision_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gf_ChangeCollisionForPlayerForUnitType(libCore_gv_cOMPUTER_Blue, "Minion_Catapult", libCore_ge_CollisionTypes_Land04HeroTeam2andMinionTeam1, libCore_ge_CollisionOperationType_TurnOn);
    libCore_gf_ChangeCollisionForPlayerForUnitType(libCore_gv_cOMPUTER_Blue, "Minion_Melee", libCore_ge_CollisionTypes_Land04HeroTeam2andMinionTeam1, libCore_ge_CollisionOperationType_TurnOn);
    libCore_gf_ChangeCollisionForPlayerForUnitType(libCore_gv_cOMPUTER_Blue, "Minion_Psionic", libCore_ge_CollisionTypes_Land04HeroTeam2andMinionTeam1, libCore_ge_CollisionOperationType_TurnOn);
    libCore_gf_ChangeCollisionForPlayerForUnitType(libCore_gv_cOMPUTER_Blue, "Minion_Ranged", libCore_ge_CollisionTypes_Land04HeroTeam2andMinionTeam1, libCore_ge_CollisionOperationType_TurnOn);
    libCore_gf_ChangeCollisionForPlayerForUnitType(libCore_gv_cOMPUTER_Red, "Minion_Catapult", libCore_ge_CollisionTypes_Land03HeroTeam1andMinionTeam2, libCore_ge_CollisionOperationType_TurnOn);
    libCore_gf_ChangeCollisionForPlayerForUnitType(libCore_gv_cOMPUTER_Red, "Minion_Melee", libCore_ge_CollisionTypes_Land03HeroTeam1andMinionTeam2, libCore_ge_CollisionOperationType_TurnOn);
    libCore_gf_ChangeCollisionForPlayerForUnitType(libCore_gv_cOMPUTER_Red, "Minion_Psionic", libCore_ge_CollisionTypes_Land03HeroTeam1andMinionTeam2, libCore_ge_CollisionOperationType_TurnOn);
    libCore_gf_ChangeCollisionForPlayerForUnitType(libCore_gv_cOMPUTER_Red, "Minion_Ranged", libCore_ge_CollisionTypes_Land03HeroTeam1andMinionTeam2, libCore_ge_CollisionOperationType_TurnOn);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TurnonAI1112Collision_Init () {
    libGame_gt_TurnonAI1112Collision = TriggerCreate("libGame_gt_TurnonAI1112Collision_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Diablo Participated In Takedown
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathDiabloParticipatedInTakedown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_behaviorCountToAdd;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit) == "HeroDiablo"))) {
            return false;
        }

        if (!((UnitHasBehavior2(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit, "BlackSoulstoneCarryBehavior") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitBehaviorCount(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit, "BlackSoulstone") < 50)) {
        if (((UnitBehaviorCount(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit, "BlackSoulstone") + 5) > 50)) {
            lv_behaviorCountToAdd = (50 - UnitBehaviorCount(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit, "BlackSoulstone"));
            UnitBehaviorAdd(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit, "BlackSoulstone", libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit, lv_behaviorCountToAdd);
        }
        else {
            UnitBehaviorAdd(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit, "BlackSoulstone", libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit, 5);
        }
    }
    else {
        if ((UnitHasBehavior2(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit, "EndlessDeathCarryBehavior") == true)) {
            UnitBehaviorAdd(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit, "BlackSoulstone", libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit, 5);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathDiabloParticipatedInTakedown_Init () {
    libGame_gt_HeroDeathDiabloParticipatedInTakedown = TriggerCreate("libGame_gt_HeroDeathDiabloParticipatedInTakedown_Func");
    libGame_gf_HeroParticipatedInTakedown(libGame_gt_HeroDeathDiabloParticipatedInTakedown);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Uther Participated In Takedown
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathUtherParticipatedInTakedown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit) == "HeroUther"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit;
    if ((UnitHasBehavior2(lv_unit, "SpiritOfWrathCarryBehavior") == true) && ((UnitHasBehavior2(lv_unit, "SpiritOfRedemptionSpiritFormBuff") == true) || (UnitHasBehavior2(lv_unit, "SpiritOfRedemptionSpiritFormBuffImproved") == true) || (UnitHasBehavior2(lv_unit, "UtherEternalDevotionRezDelay") == true))) {
        libGame_gv_heroDeath_UtherParticipation[libGame_gf_HeroParticipatedInTakedownKillingPlayer()] = (libGame_gv_heroDeath_UtherParticipation[libGame_gf_HeroParticipatedInTakedownKillingPlayer()] + 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathUtherParticipatedInTakedown_Init () {
    libGame_gt_HeroDeathUtherParticipatedInTakedown = TriggerCreate("libGame_gt_HeroDeathUtherParticipatedInTakedown_Func");
    libGame_gf_HeroParticipatedInTakedown(libGame_gt_HeroDeathUtherParticipatedInTakedown);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Hero Dies
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathHeroDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_deadUnit;
    int lv_deadPlayer;
    int lv_killingPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameOver == false))) {
            return false;
        }

        if (!((EventPlayer() >= 1))) {
            return false;
        }

        if (!((EventPlayer() <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((EventUnit() == libGame_gv_players[EventPlayer()].lv_heroUnit))) {
            return false;
        }

        if (!((UnitTestState(EventUnit(), c_unitStateHallucination) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_deadUnit = EventUnit();
    lv_deadPlayer = EventPlayer();
    lv_killingPlayer = libNtve_gf_KillingPlayer();
    libGame_gv_players[lv_deadPlayer].lv_isDead = true;
    libGame_gf_SendEventHeroKilled(lv_deadPlayer, lv_killingPlayer);
    libGame_gf_HeroDeathHERODIESNEW(UnitGetPosition(EventUnit()), lv_deadPlayer, lv_killingPlayer);
    libGame_gf_HeroDeathStartRespawnTimer(lv_deadPlayer);
    libGame_gf_HeroDeathUpdateUIElementsForDeath(lv_deadPlayer);
    libGame_gf_HeroDeathPortHeroBackAndSetDeathState(lv_deadPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathHeroDies_Init () {
    libGame_gt_HeroDeathHeroDies = TriggerCreate("libGame_gt_HeroDeathHeroDies_Func");
    TriggerAddEventUnitDied(libGame_gt_HeroDeathHeroDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Hero Respawn Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathHeroRespawnTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    const int autoE25EFFC3_ae = libCore_gv_bALMaxPlayers;
    const int autoE25EFFC3_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = 1;
    for ( ; ( (autoE25EFFC3_ai >= 0 && lv_player <= autoE25EFFC3_ae) || (autoE25EFFC3_ai < 0 && lv_player >= autoE25EFFC3_ae) ) ; lv_player += autoE25EFFC3_ai ) {
        if ((EventTimer() == libGame_gv_players[lv_player].lv_respawnTimer)) {
            libGame_gf_HeroDeathRespawnHeroforPlayer(lv_player);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathHeroRespawnTimerExpires_Init () {
    libGame_gt_HeroDeathHeroRespawnTimerExpires = TriggerCreate("libGame_gt_HeroDeathHeroRespawnTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[1].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[2].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[3].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[4].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[5].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[6].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[7].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[8].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[9].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[10].lv_respawnTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Player Multikill Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathPlayerMultikillTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int auto8A70E5E5_ae = libCore_gv_bALMaxEnginePlayerCount;
    const int auto8A70E5E5_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 1;
    for ( ; ( (auto8A70E5E5_ai >= 0 && lv_itPlayer <= auto8A70E5E5_ae) || (auto8A70E5E5_ai < 0 && lv_itPlayer >= auto8A70E5E5_ae) ) ; lv_itPlayer += auto8A70E5E5_ai ) {
        if ((EventTimer() == libGame_gv_players[lv_itPlayer].lv_multikillTimer)) {
            libGame_gv_players[lv_itPlayer].lv_multikillStreak = 0;
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathPlayerMultikillTimerExpires_Init () {
    libGame_gt_HeroDeathPlayerMultikillTimerExpires = TriggerCreate("libGame_gt_HeroDeathPlayerMultikillTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[1].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[2].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[3].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[4].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[5].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[6].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[7].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[8].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[9].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[10].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[libCore_gv_cOMPUTER_Blue].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[libCore_gv_cOMPUTER_Red].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[libCore_gv_cOMPUTER_Hostile].lv_multikillTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: [Participated in TD] - Hero Deal Damage To Enemy
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ParticipatedinTDHeroDealDamageToEnemy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_triggeringPlayer;
    int lv_damagingPlayer;
    const fixed lv_participatedTimer = 5.0;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourcePlayer() >= 1))) {
            return false;
        }

        if (!((EventUnitDamageSourcePlayer() <= 10))) {
            return false;
        }

        if (!((EventPlayer() >= 1))) {
            return false;
        }

        if (!((EventPlayer() <= 10))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_damagingPlayer = EventUnitDamageSourcePlayer();
    lv_triggeringPlayer = UnitGetOwner(EventUnit());
    libGame_gv_players[lv_damagingPlayer].lv_participatedInTakedown[lv_triggeringPlayer] = true;
    if ((TimerGetRemaining(libGame_gv_players[lv_damagingPlayer].lv_participatedTimer[EventPlayer()]) < 5.0)) {
        TimerRestart(libGame_gv_players[lv_damagingPlayer].lv_participatedTimer[lv_triggeringPlayer]);
    }
    else {
        TimerStart(libGame_gv_players[lv_damagingPlayer].lv_participatedTimer[lv_triggeringPlayer], lv_participatedTimer, false, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ParticipatedinTDHeroDealDamageToEnemy_Init () {
    libGame_gt_ParticipatedinTDHeroDealDamageToEnemy = TriggerCreate("libGame_gt_ParticipatedinTDHeroDealDamageToEnemy_Func");
    TriggerAddEventUnitDamaged(libGame_gt_ParticipatedinTDHeroDealDamageToEnemy, UnitRefFromVariable("libGame_gv_players[1].lv_heroUnit"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
    TriggerAddEventUnitDamaged(libGame_gt_ParticipatedinTDHeroDealDamageToEnemy, UnitRefFromVariable("libGame_gv_players[2].lv_heroUnit"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
    TriggerAddEventUnitDamaged(libGame_gt_ParticipatedinTDHeroDealDamageToEnemy, UnitRefFromVariable("libGame_gv_players[3].lv_heroUnit"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
    TriggerAddEventUnitDamaged(libGame_gt_ParticipatedinTDHeroDealDamageToEnemy, UnitRefFromVariable("libGame_gv_players[4].lv_heroUnit"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
    TriggerAddEventUnitDamaged(libGame_gt_ParticipatedinTDHeroDealDamageToEnemy, UnitRefFromVariable("libGame_gv_players[5].lv_heroUnit"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
    TriggerAddEventUnitDamaged(libGame_gt_ParticipatedinTDHeroDealDamageToEnemy, UnitRefFromVariable("libGame_gv_players[6].lv_heroUnit"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
    TriggerAddEventUnitDamaged(libGame_gt_ParticipatedinTDHeroDealDamageToEnemy, UnitRefFromVariable("libGame_gv_players[7].lv_heroUnit"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
    TriggerAddEventUnitDamaged(libGame_gt_ParticipatedinTDHeroDealDamageToEnemy, UnitRefFromVariable("libGame_gv_players[8].lv_heroUnit"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
    TriggerAddEventUnitDamaged(libGame_gt_ParticipatedinTDHeroDealDamageToEnemy, UnitRefFromVariable("libGame_gv_players[9].lv_heroUnit"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
    TriggerAddEventUnitDamaged(libGame_gt_ParticipatedinTDHeroDealDamageToEnemy, UnitRefFromVariable("libGame_gv_players[10].lv_heroUnit"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: [Participated in TD] - Player 1
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ParticipatedinTDPlayer1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enemyPlayer;

    // Automatic Variable Declarations
    const int auto22D51C3E_n = 10;
    int auto22D51C3E_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto22D51C3E_i = 1; auto22D51C3E_i <= auto22D51C3E_n; auto22D51C3E_i += 1) {
        lv_enemyPlayer += 1;
        if ((EventTimer() == libGame_gv_players[1].lv_participatedTimer[lv_enemyPlayer])) {
            libGame_gv_players[1].lv_participatedInTakedown[lv_enemyPlayer] = false;
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ParticipatedinTDPlayer1_Init () {
    libGame_gt_ParticipatedinTDPlayer1 = TriggerCreate("libGame_gt_ParticipatedinTDPlayer1_Func");
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer1, libGame_gv_players[1].lv_participatedTimer[1]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer1, libGame_gv_players[1].lv_participatedTimer[2]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer1, libGame_gv_players[1].lv_participatedTimer[3]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer1, libGame_gv_players[1].lv_participatedTimer[4]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer1, libGame_gv_players[1].lv_participatedTimer[5]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer1, libGame_gv_players[1].lv_participatedTimer[6]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer1, libGame_gv_players[1].lv_participatedTimer[7]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer1, libGame_gv_players[1].lv_participatedTimer[8]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer1, libGame_gv_players[1].lv_participatedTimer[9]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer1, libGame_gv_players[1].lv_participatedTimer[10]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: [Participated in TD] - Player 2
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ParticipatedinTDPlayer2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enemyPlayer;

    // Automatic Variable Declarations
    const int autoC7CDC61D_n = 10;
    int autoC7CDC61D_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    for (autoC7CDC61D_i = 1; autoC7CDC61D_i <= autoC7CDC61D_n; autoC7CDC61D_i += 1) {
        lv_enemyPlayer += 1;
        if ((EventTimer() == libGame_gv_players[2].lv_participatedTimer[lv_enemyPlayer])) {
            libGame_gv_players[2].lv_participatedInTakedown[lv_enemyPlayer] = false;
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ParticipatedinTDPlayer2_Init () {
    libGame_gt_ParticipatedinTDPlayer2 = TriggerCreate("libGame_gt_ParticipatedinTDPlayer2_Func");
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer2, libGame_gv_players[2].lv_participatedTimer[1]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer2, libGame_gv_players[2].lv_participatedTimer[2]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer2, libGame_gv_players[2].lv_participatedTimer[3]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer2, libGame_gv_players[2].lv_participatedTimer[4]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer2, libGame_gv_players[2].lv_participatedTimer[5]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer2, libGame_gv_players[2].lv_participatedTimer[6]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer2, libGame_gv_players[2].lv_participatedTimer[7]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer2, libGame_gv_players[2].lv_participatedTimer[8]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer2, libGame_gv_players[2].lv_participatedTimer[9]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer2, libGame_gv_players[2].lv_participatedTimer[10]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: [Participated in TD] - Player 3
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ParticipatedinTDPlayer3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enemyPlayer;

    // Automatic Variable Declarations
    const int autoADF21C6B_n = 10;
    int autoADF21C6B_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    for (autoADF21C6B_i = 1; autoADF21C6B_i <= autoADF21C6B_n; autoADF21C6B_i += 1) {
        lv_enemyPlayer += 1;
        if ((EventTimer() == libGame_gv_players[3].lv_participatedTimer[lv_enemyPlayer])) {
            libGame_gv_players[3].lv_participatedInTakedown[lv_enemyPlayer] = false;
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ParticipatedinTDPlayer3_Init () {
    libGame_gt_ParticipatedinTDPlayer3 = TriggerCreate("libGame_gt_ParticipatedinTDPlayer3_Func");
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer3, libGame_gv_players[3].lv_participatedTimer[1]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer3, libGame_gv_players[3].lv_participatedTimer[2]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer3, libGame_gv_players[3].lv_participatedTimer[3]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer3, libGame_gv_players[3].lv_participatedTimer[4]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer3, libGame_gv_players[3].lv_participatedTimer[5]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer3, libGame_gv_players[3].lv_participatedTimer[6]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer3, libGame_gv_players[3].lv_participatedTimer[7]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer3, libGame_gv_players[3].lv_participatedTimer[8]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer3, libGame_gv_players[3].lv_participatedTimer[9]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer3, libGame_gv_players[3].lv_participatedTimer[10]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: [Participated in TD] - Player 4
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ParticipatedinTDPlayer4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enemyPlayer;

    // Automatic Variable Declarations
    const int auto93081CB8_n = 10;
    int auto93081CB8_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto93081CB8_i = 1; auto93081CB8_i <= auto93081CB8_n; auto93081CB8_i += 1) {
        lv_enemyPlayer += 1;
        if ((EventTimer() == libGame_gv_players[4].lv_participatedTimer[lv_enemyPlayer])) {
            libGame_gv_players[4].lv_participatedInTakedown[lv_enemyPlayer] = false;
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ParticipatedinTDPlayer4_Init () {
    libGame_gt_ParticipatedinTDPlayer4 = TriggerCreate("libGame_gt_ParticipatedinTDPlayer4_Func");
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer4, libGame_gv_players[4].lv_participatedTimer[1]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer4, libGame_gv_players[4].lv_participatedTimer[2]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer4, libGame_gv_players[4].lv_participatedTimer[3]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer4, libGame_gv_players[4].lv_participatedTimer[4]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer4, libGame_gv_players[4].lv_participatedTimer[5]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer4, libGame_gv_players[4].lv_participatedTimer[6]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer4, libGame_gv_players[4].lv_participatedTimer[7]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer4, libGame_gv_players[4].lv_participatedTimer[8]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer4, libGame_gv_players[4].lv_participatedTimer[9]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer4, libGame_gv_players[4].lv_participatedTimer[10]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: [Participated in TD] - Player 5
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ParticipatedinTDPlayer5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enemyPlayer;

    // Automatic Variable Declarations
    const int autoD770968D_n = 10;
    int autoD770968D_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    for (autoD770968D_i = 1; autoD770968D_i <= autoD770968D_n; autoD770968D_i += 1) {
        lv_enemyPlayer += 1;
        if ((EventTimer() == libGame_gv_players[5].lv_participatedTimer[lv_enemyPlayer])) {
            libGame_gv_players[5].lv_participatedInTakedown[lv_enemyPlayer] = false;
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ParticipatedinTDPlayer5_Init () {
    libGame_gt_ParticipatedinTDPlayer5 = TriggerCreate("libGame_gt_ParticipatedinTDPlayer5_Func");
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer5, libGame_gv_players[5].lv_participatedTimer[1]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer5, libGame_gv_players[5].lv_participatedTimer[2]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer5, libGame_gv_players[5].lv_participatedTimer[3]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer5, libGame_gv_players[5].lv_participatedTimer[4]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer5, libGame_gv_players[5].lv_participatedTimer[5]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer5, libGame_gv_players[5].lv_participatedTimer[6]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer5, libGame_gv_players[5].lv_participatedTimer[7]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer5, libGame_gv_players[5].lv_participatedTimer[8]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer5, libGame_gv_players[5].lv_participatedTimer[9]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer5, libGame_gv_players[5].lv_participatedTimer[10]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: [Participated in TD] - Player 6
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ParticipatedinTDPlayer6_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enemyPlayer;

    // Automatic Variable Declarations
    const int auto91B773B2_n = 10;
    int auto91B773B2_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto91B773B2_i = 1; auto91B773B2_i <= auto91B773B2_n; auto91B773B2_i += 1) {
        lv_enemyPlayer += 1;
        if ((EventTimer() == libGame_gv_players[6].lv_participatedTimer[lv_enemyPlayer])) {
            libGame_gv_players[6].lv_participatedInTakedown[lv_enemyPlayer] = false;
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ParticipatedinTDPlayer6_Init () {
    libGame_gt_ParticipatedinTDPlayer6 = TriggerCreate("libGame_gt_ParticipatedinTDPlayer6_Func");
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer6, libGame_gv_players[6].lv_participatedTimer[1]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer6, libGame_gv_players[6].lv_participatedTimer[2]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer6, libGame_gv_players[6].lv_participatedTimer[3]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer6, libGame_gv_players[6].lv_participatedTimer[4]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer6, libGame_gv_players[6].lv_participatedTimer[5]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer6, libGame_gv_players[6].lv_participatedTimer[6]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer6, libGame_gv_players[6].lv_participatedTimer[7]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer6, libGame_gv_players[6].lv_participatedTimer[8]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer6, libGame_gv_players[6].lv_participatedTimer[9]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer6, libGame_gv_players[6].lv_participatedTimer[10]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: [Participated in TD] - Player 7
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ParticipatedinTDPlayer7_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enemyPlayer;

    // Automatic Variable Declarations
    const int auto92E159A5_n = 10;
    int auto92E159A5_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto92E159A5_i = 1; auto92E159A5_i <= auto92E159A5_n; auto92E159A5_i += 1) {
        lv_enemyPlayer += 1;
        if ((EventTimer() == libGame_gv_players[7].lv_participatedTimer[lv_enemyPlayer])) {
            libGame_gv_players[7].lv_participatedInTakedown[lv_enemyPlayer] = false;
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ParticipatedinTDPlayer7_Init () {
    libGame_gt_ParticipatedinTDPlayer7 = TriggerCreate("libGame_gt_ParticipatedinTDPlayer7_Func");
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer7, libGame_gv_players[7].lv_participatedTimer[1]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer7, libGame_gv_players[7].lv_participatedTimer[2]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer7, libGame_gv_players[7].lv_participatedTimer[3]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer7, libGame_gv_players[7].lv_participatedTimer[4]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer7, libGame_gv_players[7].lv_participatedTimer[5]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer7, libGame_gv_players[7].lv_participatedTimer[6]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer7, libGame_gv_players[7].lv_participatedTimer[7]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer7, libGame_gv_players[7].lv_participatedTimer[8]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer7, libGame_gv_players[7].lv_participatedTimer[9]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer7, libGame_gv_players[7].lv_participatedTimer[10]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: [Participated in TD] - Player 8
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ParticipatedinTDPlayer8_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enemyPlayer;

    // Automatic Variable Declarations
    const int autoA6D95369_n = 10;
    int autoA6D95369_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    for (autoA6D95369_i = 1; autoA6D95369_i <= autoA6D95369_n; autoA6D95369_i += 1) {
        lv_enemyPlayer += 1;
        if ((EventTimer() == libGame_gv_players[8].lv_participatedTimer[lv_enemyPlayer])) {
            libGame_gv_players[8].lv_participatedInTakedown[lv_enemyPlayer] = false;
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ParticipatedinTDPlayer8_Init () {
    libGame_gt_ParticipatedinTDPlayer8 = TriggerCreate("libGame_gt_ParticipatedinTDPlayer8_Func");
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer8, libGame_gv_players[8].lv_participatedTimer[1]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer8, libGame_gv_players[8].lv_participatedTimer[2]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer8, libGame_gv_players[8].lv_participatedTimer[3]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer8, libGame_gv_players[8].lv_participatedTimer[4]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer8, libGame_gv_players[8].lv_participatedTimer[5]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer8, libGame_gv_players[8].lv_participatedTimer[6]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer8, libGame_gv_players[8].lv_participatedTimer[7]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer8, libGame_gv_players[8].lv_participatedTimer[8]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer8, libGame_gv_players[8].lv_participatedTimer[9]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer8, libGame_gv_players[8].lv_participatedTimer[10]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: [Participated in TD] - Player 9
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ParticipatedinTDPlayer9_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enemyPlayer;

    // Automatic Variable Declarations
    const int autoC40BBD18_n = 10;
    int autoC40BBD18_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    for (autoC40BBD18_i = 1; autoC40BBD18_i <= autoC40BBD18_n; autoC40BBD18_i += 1) {
        lv_enemyPlayer += 1;
        if ((EventTimer() == libGame_gv_players[9].lv_participatedTimer[lv_enemyPlayer])) {
            libGame_gv_players[9].lv_participatedInTakedown[lv_enemyPlayer] = false;
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ParticipatedinTDPlayer9_Init () {
    libGame_gt_ParticipatedinTDPlayer9 = TriggerCreate("libGame_gt_ParticipatedinTDPlayer9_Func");
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer9, libGame_gv_players[9].lv_participatedTimer[1]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer9, libGame_gv_players[9].lv_participatedTimer[2]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer9, libGame_gv_players[9].lv_participatedTimer[3]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer9, libGame_gv_players[9].lv_participatedTimer[4]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer9, libGame_gv_players[9].lv_participatedTimer[5]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer9, libGame_gv_players[9].lv_participatedTimer[6]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer9, libGame_gv_players[9].lv_participatedTimer[7]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer9, libGame_gv_players[9].lv_participatedTimer[8]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer9, libGame_gv_players[9].lv_participatedTimer[9]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer9, libGame_gv_players[9].lv_participatedTimer[10]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: [Participated in TD] - Player 10
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ParticipatedinTDPlayer10_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enemyPlayer;

    // Automatic Variable Declarations
    const int auto155EE881_n = 10;
    int auto155EE881_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto155EE881_i = 1; auto155EE881_i <= auto155EE881_n; auto155EE881_i += 1) {
        lv_enemyPlayer += 1;
        if ((EventTimer() == libGame_gv_players[10].lv_participatedTimer[lv_enemyPlayer])) {
            libGame_gv_players[10].lv_participatedInTakedown[lv_enemyPlayer] = false;
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ParticipatedinTDPlayer10_Init () {
    libGame_gt_ParticipatedinTDPlayer10 = TriggerCreate("libGame_gt_ParticipatedinTDPlayer10_Func");
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer10, libGame_gv_players[10].lv_participatedTimer[1]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer10, libGame_gv_players[10].lv_participatedTimer[2]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer10, libGame_gv_players[10].lv_participatedTimer[3]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer10, libGame_gv_players[10].lv_participatedTimer[4]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer10, libGame_gv_players[10].lv_participatedTimer[5]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer10, libGame_gv_players[10].lv_participatedTimer[6]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer10, libGame_gv_players[10].lv_participatedTimer[7]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer10, libGame_gv_players[10].lv_participatedTimer[8]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer10, libGame_gv_players[10].lv_participatedTimer[9]);
    TriggerAddEventTimer(libGame_gt_ParticipatedinTDPlayer10, libGame_gv_players[10].lv_participatedTimer[10]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Lane Points
//--------------------------------------------------------------------------------------------------
bool libGame_gt_SetLanePoints_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lane;
    int lv_number;
    string lv_laneXWaypointNumber1;
    int lv_itPoint;
    int lv_itPointRed;

    // Automatic Variable Declarations
    int autoCE9AF513_n;
    int autoCE9AF513_i;
    int autoF5B23B73_n;
    int autoF5B23B73_i;
    int auto37F94E88_val;
    int auto2D766309_n;
    int auto2D766309_i;
    int autoB572E3F6_ae;
    int autoE8F63A39_ae;
    int autoA3B39BD5_ae;

    // Variable Initialization
    lv_laneXWaypointNumber1 = "";

    // Actions
    if (!runActions) {
        return true;
    }

    autoCE9AF513_n = libGame_gv_laneInfo.lv_laneCount;
    for (autoCE9AF513_i = 1; autoCE9AF513_i <= autoCE9AF513_n; autoCE9AF513_i += 1) {
        lv_lane += 1;
        autoF5B23B73_n = libGame_gv_laneInfo.lv_lanePointsCount[lv_lane];
        for (autoF5B23B73_i = 1; autoF5B23B73_i <= autoF5B23B73_n; autoF5B23B73_i += 1) {
            lv_number += 1;
            lv_laneXWaypointNumber1 = ("Lane " + IntToString(lv_lane) + " - Waypoint " + IntToString((lv_number - 1)));
            auto37F94E88_val = lv_number;
            if (auto37F94E88_val == 1) {
                libGame_gv_laneInfo.lv_lanePoints[lv_lane][lv_number] = UnitGetPosition(libGame_gv_teams[1].lv_core);
            }
            else if (auto37F94E88_val == 2) {
                libGame_gv_laneInfo.lv_lanePoints[lv_lane][lv_number] = PointFromName((lv_laneXWaypointNumber1 + " (Order Spawn)"));
                libGame_gv_laneInfo.lv_laneMinionSpawn[libGame_gv_teamOrderIndex_C][lv_lane] = libGame_gv_laneInfo.lv_lanePoints[lv_lane][lv_number];
            }
            else if (auto37F94E88_val == (libGame_gv_laneInfo.lv_lanePointsCount[lv_lane] - 1)) {
                libGame_gv_laneInfo.lv_lanePoints[lv_lane][lv_number] = PointFromName((lv_laneXWaypointNumber1 + " (Chaos Spawn)"));
                libGame_gv_laneInfo.lv_laneMinionSpawn[libGame_gv_teamChaosIndex_C][lv_lane] = libGame_gv_laneInfo.lv_lanePoints[lv_lane][lv_number];
            }
            else if (auto37F94E88_val == libGame_gv_laneInfo.lv_lanePointsCount[lv_lane]) {
                libGame_gv_laneInfo.lv_lanePoints[lv_lane][lv_number] = UnitGetPosition(libGame_gv_teams[2].lv_core);
            }
            else {
                libGame_gv_laneInfo.lv_lanePoints[lv_lane][lv_number] = PointFromName(lv_laneXWaypointNumber1);
            }
        }
        lv_number = 0;
    }
    auto2D766309_n = libGame_gv_laneInfo.lv_laneCount;
    for (auto2D766309_i = 1; auto2D766309_i <= auto2D766309_n; auto2D766309_i += 1) {
        autoB572E3F6_ae = libGame_gv_laneInfo.lv_laneCount;
        lv_lane = 1;
        for ( ; lv_lane <= autoB572E3F6_ae ; lv_lane += 1 ) {
            autoE8F63A39_ae = libGame_gv_laneInfo.lv_lanePointsCount[lv_lane];
            lv_itPoint = 1;
            for ( ; lv_itPoint <= autoE8F63A39_ae ; lv_itPoint += 1 ) {
                libGame_gv_laneInfo.lv_lanePointsForTeam[libGame_gv_teamOrderIndex_C][lv_lane][lv_itPoint] = libGame_gv_laneInfo.lv_lanePoints[lv_lane][lv_itPoint];
            }
            lv_itPoint = libGame_gv_laneInfo.lv_lanePointsCount[lv_lane];
            autoA3B39BD5_ae = libGame_gv_laneInfo.lv_lanePointsCount[lv_lane];
            lv_itPointRed = 1;
            for ( ; lv_itPointRed <= autoA3B39BD5_ae ; lv_itPointRed += 1 ) {
                libGame_gv_laneInfo.lv_lanePointsForTeam[libGame_gv_teamChaosIndex_C][lv_lane][lv_itPointRed] = libGame_gv_laneInfo.lv_lanePoints[lv_lane][lv_itPoint];
                lv_itPoint -= 1;
            }
            lv_itPoint = 0;
            lv_itPointRed = 0;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_SetLanePoints_Init () {
    libGame_gt_SetLanePoints = TriggerCreate("libGame_gt_SetLanePoints_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Leaves Game
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PlayerLeavesGame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_team;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libGame_gv_players[lv_player].lv_gameEndsForPlayer == false))) {
            return false;
        }

        if (!((libCore_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libGame_gv_players[lv_player].lv_playerLeftAnnouncementTimer, libGame_gv_playerLeftAnnouncementTimerDuration_C, false, c_timeGame);
    lv_team = libGame_gf_PlayerGetPlayerTeam(lv_player);
    libGame_gv_teams[lv_team].lv_teamActivePlayersCount -= 1;
    if ((libGame_gv_teams[lv_team].lv_teamActivePlayersCount == 0)) {
        TextExpressionSetToken("Param/Expression/lib_Game_A99F0F34", "A", FixedToText(libGame_gv_teamAbandonedTheGameTimerDuration_C, 0));
        UIDisplayMessage(libGame_gv_teams[libGame_gf_EnemyTeamNumberOfTeam(lv_team)].lv_teamPlayerGroupNoNPCPlayers, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_Game_A99F0F34"));
        TimerStart(libGame_gv_teams[lv_team].lv_abandonedTheGame, libGame_gv_playerLeftAnnouncementTimerDuration_C, false, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PlayerLeavesGame_Init () {
    libGame_gt_PlayerLeavesGame = TriggerCreate("libGame_gt_PlayerLeavesGame_Func");
    TriggerAddEventPlayerLeft(libGame_gt_PlayerLeavesGame, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Rejoins Game
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PlayerRejoinsGame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;
    int lv_itPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_itPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gv_players[lv_itPlayer].lv_playerLeftAnnouncementPlayed == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (PlayerName(lv_itPlayer) + StringExternal("Param/Value/lib_Game_1D924A03")));
    }
    else {
        TimerPause(libGame_gv_players[lv_itPlayer].lv_playerLeftAnnouncementTimer, true);
    }
    lv_team = libGame_gf_PlayerGetPlayerTeam(lv_itPlayer);
    libGame_gv_teams[lv_team].lv_teamActivePlayersCount += 1;
    TimerPause(libGame_gv_teams[lv_team].lv_abandonedTheGame, true);
    if ((libGame_gv_players[lv_itPlayer].lv_activeVehicle == null)) {
        CameraPan(lv_itPlayer, UnitGetPosition(libGame_gv_players[lv_itPlayer].lv_heroUnit), 0.0, -1, 0.0, false);
    }
    else {
        CameraPan(lv_itPlayer, UnitGetPosition(libGame_gv_players[lv_itPlayer].lv_activeVehicle), 0.0, -1, 0.0, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PlayerRejoinsGame_Init () {
    libGame_gt_PlayerRejoinsGame = TriggerCreate("libGame_gt_PlayerRejoinsGame_Func");
    TriggerAddEventPlayerJoin(libGame_gt_PlayerRejoinsGame, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team Abandoned The Game Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TeamAbandonedTheGameTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTeam;
    int lv_enemyTeam;

    // Automatic Variable Declarations
    int auto1395198A_ae;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto1395198A_ae = libCore_gv_bALMaxTeams;
    lv_itTeam = 1;
    for ( ; lv_itTeam <= auto1395198A_ae ; lv_itTeam += 1 ) {
        if ((EventTimer() == libGame_gv_teams[lv_itTeam].lv_abandonedTheGame)) {
            lv_enemyTeam = (3-lv_itTeam);
            UIDisplayMessage(libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, c_messageAreaChat, StringExternal("Param/Value/lib_Game_7B9AE285"));
            UnitBehaviorRemove(libGame_gv_teams[lv_itTeam].lv_core, "CoreInvulnerability", 1);
            UnitKill(libGame_gv_teams[lv_itTeam].lv_core);
            TriggerEnable(TriggerGetCurrent(), false);
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TeamAbandonedTheGameTimerExpires_Init () {
    libGame_gt_TeamAbandonedTheGameTimerExpires = TriggerCreate("libGame_gt_TeamAbandonedTheGameTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_TeamAbandonedTheGameTimerExpires, libGame_gv_teams[1].lv_abandonedTheGame);
    TriggerAddEventTimer(libGame_gt_TeamAbandonedTheGameTimerExpires, libGame_gv_teams[2].lv_abandonedTheGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Left Announcement Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PlayerLeftAnnouncementTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_announcementGroup;
    int lv_itPlayer;
    int lv_itTriggeringPlayer;
    int lv_enemyTeam;

    // Automatic Variable Declarations
    int auto1CEBCB76_ae;

    // Variable Initialization
    lv_announcementGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto1CEBCB76_ae = libCore_gv_bALMaxEnginePlayerCount;
    lv_itTriggeringPlayer = 1;
    for ( ; lv_itTriggeringPlayer <= auto1CEBCB76_ae ; lv_itTriggeringPlayer += 1 ) {
        if ((EventTimer() == libGame_gv_players[lv_itTriggeringPlayer].lv_playerLeftAnnouncementTimer)) {
            libGame_gv_players[lv_itTriggeringPlayer].lv_playerLeftAnnouncementPlayed = true;
            libNtve_gf_AddPlayerGroupToPlayerGroup(libGame_gv_teams[1].lv_teamPlayerGroupNoNPCPlayers, lv_announcementGroup);
            libNtve_gf_AddPlayerGroupToPlayerGroup(libGame_gv_teams[2].lv_teamPlayerGroupNoNPCPlayers, lv_announcementGroup);
            PlayerGroupRemove(lv_announcementGroup, lv_itTriggeringPlayer);
            UIDisplayMessage(lv_announcementGroup, c_messageAreaChat, (PlayerName(lv_itPlayer) + StringExternal("Param/Value/lib_Game_F6BC144F")));
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PlayerLeftAnnouncementTimerExpires_Init () {
    libGame_gt_PlayerLeftAnnouncementTimerExpires = TriggerCreate("libGame_gt_PlayerLeftAnnouncementTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[0].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[1].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[2].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[3].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[4].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[5].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[6].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[7].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[8].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[9].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[10].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[11].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[12].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[13].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[14].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[15].lv_playerLeftAnnouncementTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team Gets Level Up
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TeamGetsLevelUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!(((lv_unit == libGame_gv_teams[1].lv_core) || (lv_unit == libGame_gv_teams[2].lv_core)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_team = libGame_gf_TeamNumberOfPlayer(EventPlayer());
    if ((libGame_gv_teams[lv_team].lv_teamLevel >= libCore_gv_bALMaxLevel)) {
        return true;
    }

    libGame_gv_teams[lv_team].lv_teamLevel += 1;
    libNtve_gf_SetDialogItemText(libUIUI_gv_uITopPanel.lv_team_Level[lv_team], IntToText(libGame_gv_teams[lv_team].lv_teamLevel), PlayerGroupAll());
    libGame_gf_LevelUpAddHeroUpgradestoTeam(lv_team);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TeamGetsLevelUp_Init () {
    libGame_gt_TeamGetsLevelUp = TriggerCreate("libGame_gt_TeamGetsLevelUp_Func");
    TriggerAddEventUnitGainLevel(libGame_gt_TeamGetsLevelUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Moonwell Cooldown On/Off
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroMoonwellCooldownOnOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_itPlayerIndex;
    bool lv_isHeroUnit;

    // Automatic Variable Declarations
    const int auto79509178_ae = libCore_gv_bALMaxPlayers;
    const int auto79509178_ai = 1;
    unitgroup autoC2EB8947_g;
    int autoC2EB8947_u;
    unit autoC2EB8947_var;
    const int autoD53F9E12_ae = libGame_gv_moonwellMaxMoonwellCount;
    int autoD53F9E12_var;
    unitgroup auto964D8256_g;
    int auto964D8256_u;
    unit auto964D8256_var;
    unitgroup auto1C88B7A5_g;
    int auto1C88B7A5_u;
    unit auto1C88B7A5_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayerIndex = 1;
    for ( ; ( (auto79509178_ai >= 0 && lv_itPlayerIndex <= auto79509178_ae) || (auto79509178_ai < 0 && lv_itPlayerIndex >= auto79509178_ae) ) ; lv_itPlayerIndex += auto79509178_ai ) {
        if ((EventUnit() == libGame_gv_players[lv_itPlayerIndex].lv_heroUnit)) {
            lv_isHeroUnit = true;
            break;
        }

    }
    if (((UnitIsValid(EventUnit()) == false) || (lv_isHeroUnit == false))) {
        return true;
    }

    UIFlyerHelperOverride(libCore_gv_playerGroupFromPlayer[UnitGetOwner(EventUnit())], libNtve_ge_FlyerHelperDisplay_c_flyerDisplayNone);
    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
        UIFlyerHelperOverride(libCore_gv_playerGroupFromPlayer[UnitGetOwner(EventUnit())], libNtve_ge_FlyerHelperDisplay_c_flyerDisplayAll);
        if (((UnitGetOwner(EventUnit()) < 1) || (UnitGetOwner(EventUnit()) > libCore_gv_bALMaxPlayers))) {
            TextExpressionSetToken("Param/Expression/lib_Game_4E700B52", "A", IntToText(UnitGetOwner(EventUnit())));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_4E700B52"), true);
        }

        auto964D8256_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Building_Moonwell", "", "", UnitGetOwner(EventUnit()), c_unitAllianceAlly, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto964D8256_u = UnitGroupCount(auto964D8256_g, c_unitCountAll);
        for (;; auto964D8256_u -= 1) {
            auto964D8256_var = UnitGroupUnitFromEnd(auto964D8256_g, auto964D8256_u);
            if (auto964D8256_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto964D8256_var, "Signal MoonwellDrink");
            UnitGroupAdd(libGame_gv_moonwellTextTagsUnitGroup[UnitGetOwner(EventUnit())], auto964D8256_var);
        }
        auto1C88B7A5_g = libGame_gv_moonwellTextTagsUnitGroup[UnitGetOwner(EventUnit())];
        auto1C88B7A5_u = UnitGroupCount(auto1C88B7A5_g, c_unitCountAll);
        for (;; auto1C88B7A5_u -= 1) {
            auto1C88B7A5_var = UnitGroupUnitFromEnd(auto1C88B7A5_g, auto1C88B7A5_u);
            if (auto1C88B7A5_var == null) { break; }
            lv_index += 1;
            TextTagCreate((StringExternal("Param/Value/lib_Game_483A4F7C") + FixedToText(UnitBehaviorDuration(EventUnit(), "HeroGeneric_FountainDrink_HealingFountainCooldown"), 0)), 20, UnitGetPosition(auto1C88B7A5_var), 4.2, false, false, PlayerGroupSingle(UnitGetOwner(EventUnit())));
            libGame_gv_moonwellTextTags[UnitGetOwner(EventUnit())][lv_index] = TextTagLastCreated();
            libGame_gv_moonwellTextTagsUnit[UnitGetOwner(EventUnit())][lv_index] = auto1C88B7A5_var;
        }
    }
    else {
        libUIUI_gv_uIHealingFountainsHelpTextHasFountainBeenUsed[UnitGetOwner(EventUnit())] = false;
        UIFlyerHelperOverride(libCore_gv_playerGroupFromPlayer[UnitGetOwner(EventUnit())], libNtve_ge_FlyerHelperDisplay_c_flyerDisplayAll);
        autoC2EB8947_g = libGame_gv_moonwellTextTagsUnitGroup[UnitGetOwner(EventUnit())];
        autoC2EB8947_u = UnitGroupCount(autoC2EB8947_g, c_unitCountAll);
        for (;; autoC2EB8947_u -= 1) {
            autoC2EB8947_var = UnitGroupUnitFromEnd(autoC2EB8947_g, autoC2EB8947_u);
            if (autoC2EB8947_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(autoC2EB8947_var, "Signal MoonwellReset");
            UnitGroupRemove(libGame_gv_moonwellTextTagsUnitGroup[UnitGetOwner(EventUnit())], autoC2EB8947_var);
        }
        autoD53F9E12_var = 1;
        for ( ; autoD53F9E12_var <= autoD53F9E12_ae; autoD53F9E12_var += 1 ) {
            libGame_gv_moonwellTextTagsUnit[UnitGetOwner(EventUnit())][autoD53F9E12_var] = null;
            TextTagDestroy(libGame_gv_moonwellTextTags[UnitGetOwner(EventUnit())][autoD53F9E12_var]);
        }
    }
    Wait(0.0625, c_timeGame);
    UIFlyerHelperClearOverride(libCore_gv_playerGroupFromPlayer[UnitGetOwner(EventUnit())]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroMoonwellCooldownOnOff_Init () {
    libGame_gt_HeroMoonwellCooldownOnOff = TriggerCreate("libGame_gt_HeroMoonwellCooldownOnOff_Func");
    TriggerAddEventUnitBehaviorChange(libGame_gt_HeroMoonwellCooldownOnOff, null, "HeroGeneric_FountainDrink_HealingFountainCooldown", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(libGame_gt_HeroMoonwellCooldownOnOff, null, "HeroGeneric_FountainDrink_HealingFountainCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Moonwell Duration Text Tag Updates
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroMoonwellDurationTextTagUpdates_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    text lv_helpLabel;
    int lv_team;
    fixed lv_remainingCooldown;

    // Automatic Variable Declarations
    const int autoEBD80256_ae = libCore_gv_bALMaxPlayers;
    const int autoEBD80256_ai = 1;
    const int auto398ED14C_ae = libGame_gv_moonwellMaxMoonwellCount;
    int auto398ED14C_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 1;
    for ( ; ( (autoEBD80256_ai >= 0 && lv_itPlayer <= autoEBD80256_ae) || (autoEBD80256_ai < 0 && lv_itPlayer >= autoEBD80256_ae) ) ; lv_itPlayer += autoEBD80256_ai ) {
        if ((UnitGroupCount(libGame_gv_moonwellTextTagsUnitGroup[lv_itPlayer], c_unitCountAlive) > 0)) {
            lv_team = libGame_gf_TeamNumberOfPlayer(lv_itPlayer);
            lv_remainingCooldown = UnitBehaviorDuration(libGame_gv_players[lv_itPlayer].lv_heroUnit, "HeroGeneric_FountainDrink_HealingFountainCooldown");
            auto398ED14C_var = 1;
            for ( ; auto398ED14C_var <= auto398ED14C_ae; auto398ED14C_var += 1 ) {
                if ((UnitIsAlive(libGame_gv_moonwellTextTagsUnit[lv_itPlayer][auto398ED14C_var]) == true)) {
                    if ((libUIUI_gv_uIHealingFountainsHelpTextHasFountainBeenUsed[lv_itPlayer] == true)) {
                        TextTagShow(libGame_gv_moonwellTextTags[lv_itPlayer][auto398ED14C_var], PlayerGroupSingle(lv_itPlayer), true);
                        TextTagSetText(libGame_gv_moonwellTextTags[lv_itPlayer][auto398ED14C_var], (StringExternal("Param/Value/lib_Game_187E158B") + FixedToText(lv_remainingCooldown, 0)));
                    }
                    else {
                        lv_helpLabel = StringExternal("Param/Value/lib_Game_59D420AA");
                        TextTagSetText(libGame_gv_moonwellTextTags[lv_itPlayer][auto398ED14C_var], lv_helpLabel);
                        TextTagShow(libGame_gv_moonwellTextTags[lv_itPlayer][auto398ED14C_var], PlayerGroupSingle(lv_itPlayer), false);
                    }
                }
                else {
                    TextTagDestroy(libGame_gv_moonwellTextTags[lv_itPlayer][auto398ED14C_var]);
                }
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroMoonwellDurationTextTagUpdates_Init () {
    libGame_gt_HeroMoonwellDurationTextTagUpdates = TriggerCreate("libGame_gt_HeroMoonwellDurationTextTagUpdates_Func");
    TriggerAddEventTimePeriodic(libGame_gt_HeroMoonwellDurationTextTagUpdates, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Dies (Default)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TowerDiesDefault_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_towerIndex;
    fixed lv_xPValue;
    int lv_enemyTeam;

    // Automatic Variable Declarations
    playergroup auto5C45E4D0_g;
    int auto5C45E4D0_var;

    // Variable Initialization
    lv_towerIndex = libAIAI_gf_TowerAIGetTowerIndex(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "GateTower_TowerController_DeadBehavior") == false))) {
            return false;
        }

        if (!((libCore_gv_gameOver == false))) {
            return false;
        }

        if (!((lv_towerIndex >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == libCore_gv_cOMPUTER_Blue)) {
        lv_enemyTeam = libGame_gv_teamChaosIndex_C;
    }
    else {
        lv_enemyTeam = libGame_gv_teamOrderIndex_C;
    }
    if ((PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(lv_enemyTeam, false)) == 0)) {
        return true;
    }
    lv_xPValue = libCore_gf_DataXPXPForUnit(EventUnit());
    auto5C45E4D0_g = libGame_gf_PlayersOnTeamHeroes(lv_enemyTeam, false);
    auto5C45E4D0_var = -1;
    while (true) {
        auto5C45E4D0_var = PlayerGroupNextPlayer(auto5C45E4D0_g, auto5C45E4D0_var);
        if (auto5C45E4D0_var < 0) { break; }
        libGame_gv_players[auto5C45E4D0_var].lv_eXPPoints += lv_xPValue;
        libGame_gv_scoreValues[auto5C45E4D0_var].lv_individualTalentPointsEarned[lv_enemyTeam] += lv_xPValue;
        libUIUI_gf_UIFloatingCombatTextCreateTextTag2(auto5C45E4D0_var, libCore_gv_floatingCombatTextStandardDuration, FixedToText(lv_xPValue, 0), EventUnit(), 2.0, RandomFixed(0.0001, 0.2), "FCT_XP_Crit");
    }
    libGame_gv_teams[lv_enemyTeam].lv_xPTotals += lv_xPValue;
    libGame_gv_teams[lv_enemyTeam].lv_xPTotals2 += lv_xPValue;
    UnitXPAddXP(libGame_gv_teams[lv_enemyTeam].lv_core, "TeamVeterancyBehavior", lv_xPValue);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TowerDiesDefault_Init () {
    libGame_gt_TowerDiesDefault = TriggerCreate("libGame_gt_TowerDiesDefault_Func");
    TriggerAddEventUnitDied(libGame_gt_TowerDiesDefault, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Dies (Dead Behavior)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TowerDiesDeadBehavior_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_towerIndex;
    fixed lv_xPValue;
    int lv_enemyTeam;

    // Automatic Variable Declarations
    playergroup auto38AE50C9_g;
    int auto38AE50C9_var;

    // Variable Initialization
    lv_towerIndex = libAIAI_gf_TowerAIGetTowerIndex(EventUnit());

    // Conditions
    if (testConds) {
        if (!((lv_towerIndex >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == libCore_gv_cOMPUTER_Blue)) {
        lv_enemyTeam = libGame_gv_teamChaosIndex_C;
    }
    else {
        lv_enemyTeam = libGame_gv_teamOrderIndex_C;
    }
    if ((PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(lv_enemyTeam, false)) == 0)) {
        return true;
    }
    lv_xPValue = libCore_gf_DataXPXPForUnit(EventUnit());
    auto38AE50C9_g = libGame_gf_PlayersOnTeamHeroes(lv_enemyTeam, false);
    auto38AE50C9_var = -1;
    while (true) {
        auto38AE50C9_var = PlayerGroupNextPlayer(auto38AE50C9_g, auto38AE50C9_var);
        if (auto38AE50C9_var < 0) { break; }
        libGame_gv_players[auto38AE50C9_var].lv_eXPPoints += lv_xPValue;
        libGame_gv_scoreValues[auto38AE50C9_var].lv_individualTalentPointsEarned[lv_enemyTeam] += lv_xPValue;
        libUIUI_gf_UIFloatingCombatTextCreateTextTag2(auto38AE50C9_var, libCore_gv_floatingCombatTextStandardDuration, FixedToText(lv_xPValue, 0), EventUnit(), 2.0, RandomFixed(0.0001, 0.2), "FCT_XP_Crit");
    }
    libGame_gv_teams[lv_enemyTeam].lv_xPTotals += lv_xPValue;
    libGame_gv_teams[lv_enemyTeam].lv_xPTotals2 += lv_xPValue;
    UnitXPAddXP(libGame_gv_teams[lv_enemyTeam].lv_core, "TeamVeterancyBehavior", lv_xPValue);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TowerDiesDeadBehavior_Init () {
    libGame_gt_TowerDiesDeadBehavior = TriggerCreate("libGame_gt_TowerDiesDeadBehavior_Func");
    TriggerAddEventUnitBehaviorChange(libGame_gt_TowerDiesDeadBehavior, null, "GateTower_TowerController_DeadBehavior", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Dies - Periodic Fort/Keep Dead
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TowerDiesPeriodicFortKeepDead_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTeam;
    int lv_itLane;

    // Automatic Variable Declarations
    int auto37DC127C_ae;
    int auto3BD81F44_ae;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto37DC127C_ae = libCore_gv_bALMaxTeams;
    lv_itTeam = 1;
    for ( ; lv_itTeam <= auto37DC127C_ae ; lv_itTeam += 1 ) {
        auto3BD81F44_ae = libGame_gv_mapLanesCountMax;
        lv_itLane = 1;
        for ( ; lv_itLane <= auto3BD81F44_ae ; lv_itLane += 1 ) {
            if ((UnitIsValid(libGame_gv_teams[lv_itTeam].lv_towerFort[lv_itLane]) == false) && (UnitIsValid(libGame_gv_teams[lv_itTeam].lv_towerKeep[lv_itLane]) == false) && (UnitHasBehavior2(libGame_gv_teams[lv_itTeam].lv_core, "CoreInvulnerability") == true)) {
                UnitBehaviorRemove(libGame_gv_teams[lv_itTeam].lv_core, "CoreInvulnerability", 1);
            }
        }
    }
    if ((UnitHasBehavior2(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core, "CoreInvulnerability") == false) && (UnitHasBehavior2(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core, "CoreInvulnerability") == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerStop(TriggerGetCurrent());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TowerDiesPeriodicFortKeepDead_Init () {
    libGame_gt_TowerDiesPeriodicFortKeepDead = TriggerCreate("libGame_gt_TowerDiesPeriodicFortKeepDead_Func");
    TriggerEnable(libGame_gt_TowerDiesPeriodicFortKeepDead, false);
    TriggerAddEventTimePeriodic(libGame_gt_TowerDiesPeriodicFortKeepDead, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minion Dies
//--------------------------------------------------------------------------------------------------
bool libGame_gt_MinionDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killingPlayer;
    int lv_locMinionIndex;
    int lv_locDefenderIndex;
    int lv_locDefenderGroupIndex;
    int lv_locMercenaryIndex;
    int lv_locMercenaryGroupIndex;
    fixed lv_xPValue;
    int lv_i;
    int lv_killingTeam;
    int lv_enemyTeam;
    playergroup lv_enemyHeroPlayersGroup;
    unitgroup lv_enemyHeroesNear;
    unitgroup lv_scanGroup;
    bool lv_eXPforKiller;
    fixed lv_xPforeachPlayer;
    unit lv_dead_NPC_Unit;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto5379F304_g;
    int auto5379F304_var;
    playergroup auto8AC2D53B_g;

    // Variable Initialization
    lv_killingPlayer = libNtve_gf_KillingPlayer();
    lv_enemyHeroPlayersGroup = PlayerGroupEmpty();
    lv_enemyHeroesNear = UnitGroupEmpty();
    lv_scanGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeBiological) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_dead_NPC_Unit = EventUnit();
    lv_locMinionIndex = libAIAI_gf_MinionAIGetMinionIndex(lv_dead_NPC_Unit);
    lv_locDefenderIndex = libAIAI_gf_DefenderAIGetDefenderIndex(lv_dead_NPC_Unit);
    lv_locMercenaryIndex = libAIAI_gf_MercAIGetMercIndex(lv_dead_NPC_Unit);
    if ((lv_locMinionIndex <= 0) && (lv_locDefenderIndex <= 0) && (lv_locMercenaryIndex <= 0)) {
        return true;
    }
    if ((lv_locMinionIndex > 0)) {
        lv_xPValue = libAIAI_gv_minionInfo[lv_locMinionIndex].lv_exp;
        libAIAI_gf_MinionAIFreeMinionIndex(lv_locMinionIndex);
    }
    else if ((lv_locDefenderIndex > 0)) {
        lv_locDefenderGroupIndex = libAIAI_gf_DefenderAIGetDefenderGroupIndex(lv_dead_NPC_Unit);
        lv_xPValue = (libAIAI_gv_defenderGroupInfo[lv_locDefenderGroupIndex].lv_scale_Number * libCore_gf_DataXPXPScalingForDefender(lv_dead_NPC_Unit));
        lv_xPValue = (libCore_gf_DataXPXPForUnit(lv_dead_NPC_Unit) + lv_xPValue);
        libAIAI_gf_DefenderAIClearDefenderInfo(lv_locDefenderGroupIndex, lv_locDefenderIndex);
    }
    else if ((lv_locMercenaryIndex > 0)) {
        lv_locMercenaryGroupIndex = libAIAI_gf_MercAIGetMercGroupIndex(lv_dead_NPC_Unit);
        lv_xPValue = (libAIAI_gv_defenderGroupInfo[lv_locMercenaryGroupIndex].lv_scale_Number * libCore_gf_DataXPXPScalingForMercenary(lv_dead_NPC_Unit));
        lv_xPValue = (libCore_gf_DataXPXPForUnit(lv_dead_NPC_Unit) + lv_xPValue);
        libAIAI_gf_MercAIClearInfo(lv_locMercenaryGroupIndex, lv_locMercenaryIndex);
    }
    lv_killingTeam = libGame_gf_PlayerGetPlayerTeam(lv_killingPlayer);
    if ((PlayerGroupCount(libGame_gv_teams[lv_killingTeam].lv_teamPlayerGroupNoNPCPlayers) == 0)) {
        return true;
    }
    auto5379F304_g = libGame_gv_teams[lv_killingTeam].lv_teamPlayerGroupNoNPCPlayers;
    auto5379F304_var = -1;
    while (true) {
        auto5379F304_var = PlayerGroupNextPlayer(auto5379F304_g, auto5379F304_var);
        if (auto5379F304_var < 0) { break; }
        lv_scanGroup = UnitGroup(null, auto5379F304_var, RegionCircle(UnitGetPosition(lv_dead_NPC_Unit), libCore_gv_bALXPRadius), UnitFilter((1 << c_targetFilterHeroic), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32))), 0);
        if ((UnitGroupCount(lv_scanGroup, c_unitCountAlive) > 0)) {
            UnitGroupAddUnitGroup(lv_enemyHeroesNear, lv_scanGroup);
            PlayerGroupAdd(lv_enemyHeroPlayersGroup, auto5379F304_var);
        }
    }
    if ((UnitGroupCount(lv_enemyHeroesNear, c_unitCountAlive) == 0)) {
        if ((lv_killingPlayer == libGame_gv_teams[lv_killingTeam].lv_nPCPlayer)) {
            return true;
        }
        else {
            PlayerGroupAdd(lv_enemyHeroPlayersGroup, lv_killingPlayer);
        }
    }

    auto8AC2D53B_g = libGame_gv_teams[lv_killingTeam].lv_teamPlayerGroupNoNPCPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto8AC2D53B_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((PlayerGroupHasPlayer(lv_enemyHeroPlayersGroup, lv_itPlayer) == true)) {
            libGame_gv_players[lv_itPlayer].lv_eXPPoints += (libCore_gv_data_TalentPoints_HeroNearModificator_C * lv_xPValue);
            libGame_gv_scoreValues[lv_itPlayer].lv_individualTalentPointsEarned[libGame_gf_TeamNumberOfPlayer(lv_itPlayer)] += (libCore_gv_data_TalentPoints_HeroNearModificator_C * lv_xPValue);
            libUIUI_gf_UIFloatingCombatTextCreateTextTag2(lv_itPlayer, libCore_gv_floatingCombatTextStandardDuration, FixedToText((libCore_gv_data_TalentPoints_HeroNearModificator_C * lv_xPValue), 0), lv_dead_NPC_Unit, 2.0, RandomFixed(0.0001, 0.2), "FCT_XP_Normal");
        }
        else {
            libGame_gv_players[lv_itPlayer].lv_eXPPoints += (libCore_gv_data_TalentPoints_HeroFarAwayModificator_C * lv_xPValue);
        }
    }
    libGame_gv_teams[lv_killingTeam].lv_xPTotals += lv_xPValue;
    libGame_gv_teams[lv_killingTeam].lv_xPTotals2 += lv_xPValue;
    UnitXPAddXP(libGame_gv_teams[lv_killingTeam].lv_core, "TeamVeterancyBehavior", lv_xPValue);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_MinionDies_Init () {
    libGame_gt_MinionDies = TriggerCreate("libGame_gt_MinionDies_Func");
    TriggerAddEventUnitDied(libGame_gt_MinionDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fort/Keep Dies
//--------------------------------------------------------------------------------------------------
bool libGame_gt_FortKeepDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_xP;

    // Automatic Variable Declarations
    playergroup autoA60DC796_g;
    int autoA60DC796_var;
    playergroup auto4463C210_g;
    int auto4463C210_var;
    playergroup auto089BEFE8_g;
    int auto089BEFE8_var;
    playergroup auto1C9C6EBC_g;
    int auto1C9C6EBC_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameOver == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Building_Fort") || (UnitGetType(EventUnit()) == "Building_Keep")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_TownAnnounceTownDestroyed(EventUnit());
    if ((UnitGetType(EventUnit()) == "Building_Fort")) {
        auto089BEFE8_g = libGame_gv_teams[libGame_gf_PlayerGetPlayerTeam(UnitGetOwner(EventUnit()))].lv_teamPlayerGroupNoNPCPlayers;
        auto089BEFE8_var = -1;
        while (true) {
            auto089BEFE8_var = PlayerGroupNextPlayer(auto089BEFE8_g, auto089BEFE8_var);
            if (auto089BEFE8_var < 0) { break; }
            libGame_gf_AnnRegisterEvent(libCore_ge_AnnouncerVOEvents_AlliedFortDestroyed, auto089BEFE8_var, 0, 0, false);
        }
        auto1C9C6EBC_g = libGame_gv_teams[libGame_gf_EnemyTeamNumberOfTeam(libGame_gf_PlayerGetPlayerTeam(UnitGetOwner(EventUnit())))].lv_teamPlayerGroupNoNPCPlayers;
        auto1C9C6EBC_var = -1;
        while (true) {
            auto1C9C6EBC_var = PlayerGroupNextPlayer(auto1C9C6EBC_g, auto1C9C6EBC_var);
            if (auto1C9C6EBC_var < 0) { break; }
            libGame_gf_AnnRegisterEvent(libCore_ge_AnnouncerVOEvents_EnemyFortDestroyed, auto1C9C6EBC_var, 0, 0, false);
        }
        if ((UnitGetOwner(EventUnit()) == libCore_gv_cOMPUTER_Blue)) {
            libGame_gf_AnnRegisterEvent(libCore_ge_AnnouncerVOEvents_RedTeamDestroysFort, libCore_gv_oBSERVER_ObserverUIPlayer, 0, 0, false);
        }
        else {
            libGame_gf_AnnRegisterEvent(libCore_ge_AnnouncerVOEvents_BlueTeamDestroysFort, libCore_gv_oBSERVER_ObserverUIPlayer, 0, 0, false);
        }
    }
    else {
        autoA60DC796_g = libGame_gv_teams[libGame_gf_PlayerGetPlayerTeam(UnitGetOwner(EventUnit()))].lv_teamPlayerGroupNoNPCPlayers;
        autoA60DC796_var = -1;
        while (true) {
            autoA60DC796_var = PlayerGroupNextPlayer(autoA60DC796_g, autoA60DC796_var);
            if (autoA60DC796_var < 0) { break; }
            libGame_gf_AnnRegisterEvent(libCore_ge_AnnouncerVOEvents_AlliedKeepDestroyed, autoA60DC796_var, 0, 0, false);
        }
        auto4463C210_g = libGame_gv_teams[libGame_gf_EnemyTeamNumberOfTeam(libGame_gf_PlayerGetPlayerTeam(UnitGetOwner(EventUnit())))].lv_teamPlayerGroupNoNPCPlayers;
        auto4463C210_var = -1;
        while (true) {
            auto4463C210_var = PlayerGroupNextPlayer(auto4463C210_g, auto4463C210_var);
            if (auto4463C210_var < 0) { break; }
            libGame_gf_AnnRegisterEvent(libCore_ge_AnnouncerVOEvents_EnemyKeepDestroyed, auto4463C210_var, 0, 0, false);
        }
        if ((UnitGetOwner(EventUnit()) == libCore_gv_cOMPUTER_Blue)) {
            libGame_gf_AnnRegisterEvent(libCore_ge_AnnouncerVOEvents_RedTeamDestroysKeep, libCore_gv_oBSERVER_ObserverUIPlayer, 0, 0, false);
        }
        else {
            libGame_gf_AnnRegisterEvent(libCore_ge_AnnouncerVOEvents_BlueTeamDestroysKeep, libCore_gv_oBSERVER_ObserverUIPlayer, 0, 0, false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_FortKeepDies_Init () {
    libGame_gt_FortKeepDies = TriggerCreate("libGame_gt_FortKeepDies_Func");
    TriggerAddEventUnitDamaged(libGame_gt_FortKeepDies, UnitRefFromVariable("libGame_gv_teams[1].lv_towerFort[1]"), c_unitDamageTypeAny, c_unitDamageFatal, null);
    TriggerAddEventUnitDamaged(libGame_gt_FortKeepDies, UnitRefFromVariable("libGame_gv_teams[1].lv_towerFort[2]"), c_unitDamageTypeAny, c_unitDamageFatal, null);
    TriggerAddEventUnitDamaged(libGame_gt_FortKeepDies, UnitRefFromVariable("libGame_gv_teams[1].lv_towerFort[3]"), c_unitDamageTypeAny, c_unitDamageFatal, null);
    TriggerAddEventUnitDamaged(libGame_gt_FortKeepDies, UnitRefFromVariable("libGame_gv_teams[1].lv_towerKeep[1]"), c_unitDamageTypeAny, c_unitDamageFatal, null);
    TriggerAddEventUnitDamaged(libGame_gt_FortKeepDies, UnitRefFromVariable("libGame_gv_teams[1].lv_towerKeep[2]"), c_unitDamageTypeAny, c_unitDamageFatal, null);
    TriggerAddEventUnitDamaged(libGame_gt_FortKeepDies, UnitRefFromVariable("libGame_gv_teams[1].lv_towerKeep[3]"), c_unitDamageTypeAny, c_unitDamageFatal, null);
    TriggerAddEventUnitDamaged(libGame_gt_FortKeepDies, UnitRefFromVariable("libGame_gv_teams[2].lv_towerFort[1]"), c_unitDamageTypeAny, c_unitDamageFatal, null);
    TriggerAddEventUnitDamaged(libGame_gt_FortKeepDies, UnitRefFromVariable("libGame_gv_teams[2].lv_towerFort[2]"), c_unitDamageTypeAny, c_unitDamageFatal, null);
    TriggerAddEventUnitDamaged(libGame_gt_FortKeepDies, UnitRefFromVariable("libGame_gv_teams[2].lv_towerFort[3]"), c_unitDamageTypeAny, c_unitDamageFatal, null);
    TriggerAddEventUnitDamaged(libGame_gt_FortKeepDies, UnitRefFromVariable("libGame_gv_teams[2].lv_towerKeep[1]"), c_unitDamageTypeAny, c_unitDamageFatal, null);
    TriggerAddEventUnitDamaged(libGame_gt_FortKeepDies, UnitRefFromVariable("libGame_gv_teams[2].lv_towerKeep[2]"), c_unitDamageTypeAny, c_unitDamageFatal, null);
    TriggerAddEventUnitDamaged(libGame_gt_FortKeepDies, UnitRefFromVariable("libGame_gv_teams[2].lv_towerKeep[3]"), c_unitDamageTypeAny, c_unitDamageFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Core Dies (Game Over)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CoreDiesGameOver_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_i;
    unit lv_u;
    const fixed lv_cameraPanTime = 2.0;
    const fixed lv_coreAnimationWaitExplodeTime = 2.8;
    const fixed lv_coreAnimationWaitTime = 5.0;
    int lv_killingFaction;
    int lv_winningTeam;
    int lv_losingTeam;

    // Automatic Variable Declarations
    playergroup autoF83D87B4_g;
    int autoF83D87B4_var;
    playergroup auto20E05A0A_g;
    int auto20E05A0A_var;
    unitgroup auto82B0AB44_g;
    int auto82B0AB44_u;
    unit auto82B0AB44_var;
    playergroup auto23398500_g;
    int auto23398500_var;
    playergroup autoC4556900_g;
    int autoC4556900_var;
    playergroup autoD67060EE_g;
    int autoD67060EE_var;

    // Variable Initialization
    lv_killingFaction = libGame_ge_PlayerFaction_Nothing;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCore_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCore_gv_gameOver = true;
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryCombat, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySpell, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySpellOneshotImpact, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySpellOneshotLaunch, true);
    if ((EventUnit() == libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core)) {
        lv_killingFaction = libGame_ge_PlayerFaction_Order;
        lv_winningTeam = libGame_gv_teamOrderIndex_C;
    }
    else {
        lv_killingFaction = libGame_ge_PlayerFaction_Chaos;
        lv_winningTeam = libGame_gv_teamChaosIndex_C;
    }
    lv_losingTeam = libGame_gf_EnemyTeamNumberOfTeam(lv_winningTeam);
    UnitPauseAll(true);
    TimerPause(libCore_gv_gameTimer, true);
    libNtve_gf_ChangeUnitDamage(libGame_gv_teams[1].lv_core, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(libGame_gv_teams[2].lv_core, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    Wait(0.0625, c_timeGame);
    libUIUI_gf_UITopPanelSetCoreLifeTo0(lv_losingTeam);
    autoF83D87B4_g = libGame_gv_teams[lv_winningTeam].lv_teamPlayerGroupNoNPCPlayers;
    autoF83D87B4_var = -1;
    while (true) {
        autoF83D87B4_var = PlayerGroupNextPlayer(autoF83D87B4_g, autoF83D87B4_var);
        if (autoF83D87B4_var < 0) { break; }
        libGame_gv_players[autoF83D87B4_var].lv_victoryDefeat = c_gameOverVictory;
        libNtve_gf_SetDialogItemText(libUIUI_gv_gameOverSplash.lv_leaveButton, StringExternal("Param/Value/lib_Game_A4D58EF2"), libCore_gv_playerGroupFromPlayer[autoF83D87B4_var]);
    }
    auto20E05A0A_g = libGame_gv_teams[lv_losingTeam].lv_teamPlayerGroupNoNPCPlayers;
    auto20E05A0A_var = -1;
    while (true) {
        auto20E05A0A_var = PlayerGroupNextPlayer(auto20E05A0A_g, auto20E05A0A_var);
        if (auto20E05A0A_var < 0) { break; }
        libGame_gv_players[auto20E05A0A_var].lv_victoryDefeat = c_gameOverDefeat;
        libNtve_gf_SetDialogItemText(libUIUI_gv_gameOverSplash.lv_leaveButton, StringExternal("Param/Value/lib_Game_8563B60A"), libCore_gv_playerGroupFromPlayer[auto20E05A0A_var]);
    }
    auto82B0AB44_g = UnitGroupAlliance(UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto82B0AB44_u = UnitGroupCount(auto82B0AB44_g, c_unitCountAll);
    for (;; auto82B0AB44_u -= 1) {
        auto82B0AB44_var = UnitGroupUnitFromEnd(auto82B0AB44_g, auto82B0AB44_u);
        if (auto82B0AB44_var == null) { break; }
        ActorSend(libNtve_gf_MainActorofUnit(auto82B0AB44_var), "AnimPlay Victory Stand,Victory PlayForever");
    }
    auto23398500_g = libCore_gv_activeHumanPlayers;
    auto23398500_var = -1;
    while (true) {
        auto23398500_var = PlayerGroupNextPlayer(auto23398500_g, auto23398500_var);
        if (auto23398500_var < 0) { break; }
        CameraLockInput(auto23398500_var, true);
        CameraFollowUnitGroup(auto23398500_var, UnitGroupFilterPlayer(UnitGroupSelected(auto23398500_var), auto23398500_var, 0), false, false);
        libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(auto23398500_var, UnitGetPosition(EventUnit()), lv_cameraPanTime, -1, 10, false);
    }
    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(libCore_gv_oBSERVER_ObserverUIPlayer, UnitGetPosition(EventUnit()), lv_cameraPanTime, -1, 10, false);
    Wait(lv_cameraPanTime, c_timeGame);
    SoundPlayForPlayer(SoundLink("Doodad_Core_Death", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(lv_coreAnimationWaitTime, c_timeGame);
    SoundtrackPlay(libCore_gv_allHeroPlayersPlusObserver, c_soundtrackCategoryMusic, "Storm_Music_Stinger_GameEnds", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    libUIUI_gf_GameOverSplashDisplayForAllPlayers(lv_winningTeam);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    autoC4556900_g = libGame_gv_teams[lv_winningTeam].lv_teamPlayerGroupNoNPCPlayers;
    autoC4556900_var = -1;
    while (true) {
        autoC4556900_var = PlayerGroupNextPlayer(autoC4556900_g, autoC4556900_var);
        if (autoC4556900_var < 0) { break; }
        libGame_gf_AnnRegisterEvent(libCore_ge_AnnouncerVOEvents_Victory, autoC4556900_var, 0, 0, false);
    }
    autoD67060EE_g = libGame_gv_teams[lv_losingTeam].lv_teamPlayerGroupNoNPCPlayers;
    autoD67060EE_var = -1;
    while (true) {
        autoD67060EE_var = PlayerGroupNextPlayer(autoD67060EE_g, autoD67060EE_var);
        if (autoD67060EE_var < 0) { break; }
        libGame_gf_AnnRegisterEvent(libCore_ge_AnnouncerVOEvents_Defeat, autoD67060EE_var, 0, 0, false);
    }
    if ((lv_winningTeam == libGame_gv_teamOrderIndex_C)) {
        libGame_gf_AnnRegisterEvent(libCore_ge_AnnouncerVOEvents_BlueTeamWins, libCore_gv_oBSERVER_ObserverUIPlayer, 0, 0, false);
    }
    else {
        libGame_gf_AnnRegisterEvent(libCore_ge_AnnouncerVOEvents_RedTeamWins, libCore_gv_oBSERVER_ObserverUIPlayer, 0, 0, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CoreDiesGameOver_Init () {
    libGame_gt_CoreDiesGameOver = TriggerCreate("libGame_gt_CoreDiesGameOver_Func");
    TriggerAddEventUnitDied(libGame_gt_CoreDiesGameOver, UnitRefFromVariable("libGame_gv_teams[1].lv_core"));
    TriggerAddEventUnitDied(libGame_gt_CoreDiesGameOver, UnitRefFromVariable("libGame_gv_teams[2].lv_core"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Core Takes Damage (UI)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CoreTakesDamageUI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;

    // Automatic Variable Declarations
    playergroup auto9527BE51_g;
    int auto9527BE51_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_team = libGame_gf_PlayerGetPlayerTeam(UnitGetOwner(EventUnit()));
    libUIUI_gf_UITopPanelCoreActionTrigger();
    if ((TimerGetRemaining(libGame_gv_coreTimerNotification[lv_team]) <= 0.0)) {
        TimerStart(libGame_gv_coreTimerNotification[lv_team], 30.0, false, c_timeGame);
        auto9527BE51_g = libGame_gv_teams[lv_team].lv_teamPlayerGroupNoNPCPlayers;
        auto9527BE51_var = -1;
        while (true) {
            auto9527BE51_var = PlayerGroupNextPlayer(auto9527BE51_g, auto9527BE51_var);
            if (auto9527BE51_var < 0) { break; }
            libGame_gf_AnnRegisterEvent(libCore_ge_AnnouncerVOEvents_AlliedCoreUnderAttack, auto9527BE51_var, 0, 0, false);
        }
        if ((lv_team == libCore_gv_cOMPUTER_Blue)) {
            libGame_gf_AnnRegisterEvent(libCore_ge_AnnouncerVOEvents_BlueTeamCoreUnderAttack, libCore_gv_oBSERVER_ObserverUIPlayer, 0, 0, false);
        }
        else {
            libGame_gf_AnnRegisterEvent(libCore_ge_AnnouncerVOEvents_RedTeamCoreUnderAttack, libCore_gv_oBSERVER_ObserverUIPlayer, 0, 0, false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CoreTakesDamageUI_Init () {
    libGame_gt_CoreTakesDamageUI = TriggerCreate("libGame_gt_CoreTakesDamageUI_Func");
    TriggerAddEventUnitDamaged(libGame_gt_CoreTakesDamageUI, UnitRefFromVariable("libGame_gv_teams[1].lv_core"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libGame_gt_CoreTakesDamageUI, UnitRefFromVariable("libGame_gv_teams[2].lv_core"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Safe Zone - Initialize
//--------------------------------------------------------------------------------------------------
bool libGame_gt_SafeZoneInitialize_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTeam;
    int lv_itIndex;

    // Automatic Variable Declarations
    int auto3598B855_ae;
    int autoA21CD820_ae;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto3598B855_ae = libCore_gv_bALMaxTeams;
    lv_itTeam = 1;
    for ( ; lv_itTeam <= auto3598B855_ae ; lv_itTeam += 1 ) {
        libGame_gv_safeZoneRegion[lv_itTeam] = RegionFromName(("Safe Zone - Team " + IntToString(lv_itTeam) + " Region"));
        autoA21CD820_ae = libGame_gv_safeZoneMaximumPoints_C;
        lv_itIndex = 1;
        for ( ; lv_itIndex <= autoA21CD820_ae ; lv_itIndex += 1 ) {
            libGame_gv_safeZoneKnockbackPoint[lv_itTeam][lv_itIndex] = PointFromName(("Safe Zone - Team " + IntToString(lv_itTeam) + " - Point " + IntToString(lv_itIndex)));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_SafeZoneInitialize_Init () {
    libGame_gt_SafeZoneInitialize = TriggerCreate("libGame_gt_SafeZoneInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Safe Zone - Launch Missile
//--------------------------------------------------------------------------------------------------
bool libGame_gt_SafeZoneLaunchMissile_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_base;
    unit lv_targetUnit;
    fixed lv_abilityRange;
    fixed lv_distanceFromBasePlayerTargetPoint;
    fixed lv_baseRadius;
    point lv_targetPoint;
    point lv_actualTargetPoint;
    fixed lv_modifiedDistance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_base = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_abilityRange = libGame_gv_safeZoneKnockbackDistance;
    lv_targetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_base), libGame_gv_safeZoneKnockbackDistance, UnitGetPosition(lv_targetUnit));
    lv_actualTargetPoint = lv_targetPoint;
    if ((PointPathingPassable(lv_actualTargetPoint) == true)) {
        lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(libGame_gv_teams[libGame_gf_PlayerGetPlayerTeam(UnitGetOwner(lv_base))].lv_core), 7.5, UnitGetPosition(lv_base));
    }
    UnitCreateEffectPoint(lv_targetUnit, "SafeZone_Knockback_LaunchMissile", lv_actualTargetPoint);
    if ((UnitGetType(lv_targetUnit) == "HeroFalstad")) {
        UnitSetPropertyFixed(lv_targetUnit, c_unitPropHeight, 2.0);
    }
    else {
        UnitSetPropertyFixed(lv_targetUnit, c_unitPropHeight, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_SafeZoneLaunchMissile_Init () {
    libGame_gt_SafeZoneLaunchMissile = TriggerCreate("libGame_gt_SafeZoneLaunchMissile_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_SafeZoneLaunchMissile, c_playerAny, "SafeZone_Knockback_DummyTriggerSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Safe Zone - Unit Enters Punt Zone
//--------------------------------------------------------------------------------------------------
bool libGame_gt_SafeZoneUnitEntersPuntZone_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitBehaviorCount(libGame_gf_UnitEntersSafeZonePuntRegionUnit(), "SafeZone_Knockback_InstantlyKill") == 1)) {
        UnitKill(libGame_gf_UnitEntersSafeZonePuntRegionUnit());
    }
    else {
        if ((UnitGetType(libGame_gf_UnitEntersSafeZonePuntRegionUnit()) != "AbathurToxicNest")) {
            UnitCreateEffectPoint(libGame_gf_UnitEntersSafeZonePuntRegionUnit(), "SafeZone_Knockback_LaunchMissile", libGame_gf_UnitEntersSafeZonePuntRegionPuntPoint());
            PlayerCreateEffectUnit(UnitGetOwner(libGame_gf_UnitEntersSafeZonePuntRegionUnit()), "SafeZone_Knockback_ImpactSet", libGame_gf_UnitEntersSafeZonePuntRegionUnit());
        }
        else {
            UnitKill(libGame_gf_UnitEntersSafeZonePuntRegionUnit());
        }
        if ((UnitGetType(libGame_gf_UnitEntersSafeZonePuntRegionUnit()) == "HeroFalstad")) {
            UnitSetPropertyFixed(libGame_gf_UnitEntersSafeZonePuntRegionUnit(), c_unitPropHeight, 2.0);
        }
        else {
            UnitSetPropertyFixed(libGame_gf_UnitEntersSafeZonePuntRegionUnit(), c_unitPropHeight, 0.0);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_SafeZoneUnitEntersPuntZone_Init () {
    libGame_gt_SafeZoneUnitEntersPuntZone = TriggerCreate("libGame_gt_SafeZoneUnitEntersPuntZone_Func");
    TriggerEnable(libGame_gt_SafeZoneUnitEntersPuntZone, false);
    libGame_gf_UnitEntersSafeZonePuntRegion(libGame_gt_SafeZoneUnitEntersPuntZone);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Safe Zone - Unit Enters Safe Zone
//--------------------------------------------------------------------------------------------------
bool libGame_gt_SafeZoneUnitEntersSafeZone_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libGame_gf_UnitEntersSafeZoneRegionUnit(), "SafeZone_Ally_ApplySet", libGame_gf_UnitEntersSafeZoneRegionUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_SafeZoneUnitEntersSafeZone_Init () {
    libGame_gt_SafeZoneUnitEntersSafeZone = TriggerCreate("libGame_gt_SafeZoneUnitEntersSafeZone_Func");
    TriggerEnable(libGame_gt_SafeZoneUnitEntersSafeZone, false);
    libGame_gf_UnitEntersSafeZoneRegion(libGame_gt_SafeZoneUnitEntersSafeZone);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Safe Zone - Unit Exits Safe Zone
//--------------------------------------------------------------------------------------------------
bool libGame_gt_SafeZoneUnitExitsSafeZone_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(libGame_gf_UnitExitsSafeZoneRegionUnit(), "SafeZone_Ally_ProtectionBuff", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_SafeZoneUnitExitsSafeZone_Init () {
    libGame_gt_SafeZoneUnitExitsSafeZone = TriggerCreate("libGame_gt_SafeZoneUnitExitsSafeZone_Func");
    TriggerEnable(libGame_gt_SafeZoneUnitExitsSafeZone, false);
    libGame_gf_UnitExitsSafeZoneRegion(libGame_gt_SafeZoneUnitExitsSafeZone);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Safe Zone - Punch Behavior
//--------------------------------------------------------------------------------------------------
bool libGame_gt_SafeZonePunchBehavior_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTeam;
    unit lv_itUnit;
    int lv_itPunchTargetIndex;
    point lv_pos;
    fixed lv_distance;
    fixed lv_distanceMin;
    int lv_punchTargetIndexMin;

    // Automatic Variable Declarations
    int auto975A90B1_ae;
    unitgroup auto26D4531E_g;
    int auto26D4531E_u;
    int auto81129289_ae;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((libCore_gv_gameOver == true)) {
            return true;
        }
        auto975A90B1_ae = libCore_gv_bALMaxTeams;
        lv_itTeam = 1;
        for ( ; lv_itTeam <= auto975A90B1_ae ; lv_itTeam += 1 ) {
            auto26D4531E_g = UnitGroup(null, c_playerAny, libGame_gv_safeZoneRegion[lv_itTeam], UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto26D4531E_u = UnitGroupCount(auto26D4531E_g, c_unitCountAll);
            for (;; auto26D4531E_u -= 1) {
                lv_itUnit = UnitGroupUnitFromEnd(auto26D4531E_g, auto26D4531E_u);
                if (lv_itUnit == null) { break; }
                if ((libGame_gf_PlayerGetPlayerTeam(UnitGetOwner(lv_itUnit)) == libGame_gf_EnemyTeamNumberOfTeam(lv_itTeam)) && (UnitGroupHasUnit(libGame_gv_safeZonePunchedGroup, lv_itUnit) == false) && (UnitHasBehavior2(lv_itUnit, "SafeZone_Knockback_Immune") == false) && ((UnitMoverExists(lv_itUnit, "Ground") == true) || (UnitTypeTestAttribute(UnitGetType(lv_itUnit), c_unitAttributeSummoned) == true))) {
                    lv_pos = UnitGetPosition(lv_itUnit);
                    lv_punchTargetIndexMin = 0;
                    auto81129289_ae = libGame_gv_safeZoneMaximumPoints_C;
                    lv_itPunchTargetIndex = 1;
                    for ( ; lv_itPunchTargetIndex <= auto81129289_ae ; lv_itPunchTargetIndex += 1 ) {
                        if ((libGame_gv_safeZoneKnockbackPoint[lv_itTeam][lv_itPunchTargetIndex] == null)) {
                            continue;
                        }
                        lv_distance = DistanceBetweenPoints(lv_pos, libGame_gv_safeZoneKnockbackPoint[lv_itTeam][lv_itPunchTargetIndex]);
                        if (((lv_punchTargetIndexMin == 0) || (lv_distance < lv_distanceMin))) {
                            libGame_gf_SendEventUnitEntersSafeZonePuntRegion(lv_itUnit, libGame_gv_safeZoneKnockbackPoint[lv_itTeam][lv_itPunchTargetIndex]);
                            libGame_gf_SafeZoneAddtoPunchedGroup(lv_itUnit);
                            if ((UnitMoverExists(lv_itUnit, "Ground") == true)) {
                            }
                            break;
                        }
                    }
                }
            }
        }
        Wait(0.125, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_SafeZonePunchBehavior_Init () {
    libGame_gt_SafeZonePunchBehavior = TriggerCreate("libGame_gt_SafeZonePunchBehavior_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Safe Zone - Safe Behavior
//--------------------------------------------------------------------------------------------------
bool libGame_gt_SafeZoneSafeBehavior_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTeam;
    unit lv_itUnit;

    // Automatic Variable Declarations
    int auto9B3ACD32_ae;
    unitgroup auto02F4229C_g;
    int auto02F4229C_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((libCore_gv_gameOver == true)) {
            return true;
        }
        auto9B3ACD32_ae = libCore_gv_bALMaxTeams;
        lv_itTeam = 1;
        for ( ; lv_itTeam <= auto9B3ACD32_ae ; lv_itTeam += 1 ) {
            if ((libGame_gv_safeZoneRegion[lv_itTeam] == null)) {
                continue;
            }
            auto02F4229C_g = UnitGroup(null, c_playerAny, libGame_gv_safeZoneRegion[lv_itTeam], UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto02F4229C_u = UnitGroupCount(auto02F4229C_g, c_unitCountAll);
            for (;; auto02F4229C_u -= 1) {
                lv_itUnit = UnitGroupUnitFromEnd(auto02F4229C_g, auto02F4229C_u);
                if (lv_itUnit == null) { break; }
                if ((libGame_gf_PlayerGetPlayerTeam(UnitGetOwner(lv_itUnit)) == lv_itTeam)) {
                    libGame_gf_SendEventUnitEntersSafeZoneRegion(lv_itUnit);
                }
            }
        }
        Wait(0.125, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_SafeZoneSafeBehavior_Init () {
    libGame_gt_SafeZoneSafeBehavior = TriggerCreate("libGame_gt_SafeZoneSafeBehavior_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: EXP Data - Periodic Update
//--------------------------------------------------------------------------------------------------
bool libGame_gt_EXPDataPeriodicUpdate_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_itPlayer;
    int lv_itTeam;
    int[libCore_gv_bALMaxTeams + 1] lv_passiveBonusExpForTeam;
    fixed[libCore_gv_bALMaxTeams + 1] lv_passiveExpTeamBonus;
    fixed[libCore_gv_bALMaxTeams + 1] lv_expToAdd;

    // Automatic Variable Declarations
    int auto3D7BC902_ae;
    int auto9CE1E137_ae;
    playergroup auto57D3E0FC_g;

    // Variable Initialization
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        lv_passiveBonusExpForTeam[init_i] = 1;
    }

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gv_scalingAllowXPTrickle == true) && (TimerGetRemaining(libGame_gv_scalingXPTrickleTimer) <= 0.0)) {
        auto3D7BC902_ae = libCore_gv_bALMaxTeams;
        lv_itTeam = 1;
        for ( ; lv_itTeam <= auto3D7BC902_ae ; lv_itTeam += 1 ) {
            if ((libGame_gv_teams[lv_itTeam].lv_teamLevel < libCore_gv_bALMaxLevel) && (PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false)) > 0)) {
                lv_expToAdd[lv_itTeam] = (libCore_gv_eXP_Passive + (libCore_gv_eXP_Passive * lv_passiveExpTeamBonus[lv_itTeam]));
                libGame_gv_teams[lv_itTeam].lv_xPTotals2 += lv_expToAdd[lv_itTeam];
                libGame_gv_teams[lv_itTeam].lv_xPTotals += lv_expToAdd[lv_itTeam];
                UnitXPAddXP(libGame_gv_teams[lv_itTeam].lv_core, "TeamVeterancyBehavior", lv_expToAdd[lv_itTeam]);
            }

        }
        TimerStart(libGame_gv_scalingXPTrickleTimer, libCore_gv_data_XP_TricklePeriod_C, false, c_timeGame);
    }

    auto9CE1E137_ae = libCore_gv_bALMaxTeams;
    lv_itTeam = 1;
    for ( ; lv_itTeam <= auto9CE1E137_ae ; lv_itTeam += 1 ) {
        auto57D3E0FC_g = libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false);
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto57D3E0FC_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            libGame_gv_players[lv_itPlayer].lv_eXPPoints += lv_expToAdd[libGame_gv_players[lv_itPlayer].lv_team];
            libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyTalentsPanel.lv_talentPointsLabel, FixedToText(libGame_gv_players[lv_itPlayer].lv_eXPPoints, 0), libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentPointsValueLabel, FixedToText(libGame_gv_players[lv_itPlayer].lv_eXPPoints, 0), libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_EXPDataPeriodicUpdate_Init () {
    libGame_gt_EXPDataPeriodicUpdate = TriggerCreate("libGame_gt_EXPDataPeriodicUpdate_Func");
    TriggerEnable(libGame_gt_EXPDataPeriodicUpdate, false);
    TriggerAddEventTimePeriodic(libGame_gt_EXPDataPeriodicUpdate, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score Value Tracking - Damage (NEW)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ScoreValueTrackingDamageNEW_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dmgPlayer;
    int lv_trigPlayer;
    int lv_allyTeam;
    int lv_damagingTeam;
    fixed lv_damageAttempted;
    playergroup lv_bothTeams;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bothTeams = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourcePlayer() != EventPlayer()))) {
            return false;
        }

        if (!((EventUnitDamageAttempted() > 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_trigPlayer = EventPlayer();
    lv_dmgPlayer = EventUnitDamageSourcePlayer();
    lv_bothTeams = libNtve_gf_UnionOfPlayerGroups(libGame_gv_teams[1].lv_teamPlayerGroupNoNPCPlayers, libGame_gv_teams[2].lv_teamPlayerGroupNoNPCPlayers);
    lv_damageAttempted = EventUnitDamageAttemptedVitals();
    if (((lv_dmgPlayer == libCore_gv_cOMPUTER_Blue) || (lv_dmgPlayer == libCore_gv_cOMPUTER_Red) || (lv_dmgPlayer == libCore_gv_cOMPUTER_Hostile))) {
        if ((UnitFilterMatch(EventUnit(), lv_dmgPlayer, UnitFilter((1 << c_targetFilterHeroic), 0, 0, (1 << (c_targetFilterHallucination - 32)))) == true)) {
            lv_allyTeam = libGame_gf_TeamNumberOfPlayer(lv_trigPlayer);
            libGame_gv_scoreValues[lv_trigPlayer].lv_damageTaken[lv_allyTeam] += lv_damageAttempted;
        }
    }
    else {
        if ((PlayerGroupHasPlayer(lv_bothTeams, lv_dmgPlayer) == true)) {
            if ((UnitFilterMatch(EventUnit(), lv_dmgPlayer, UnitFilter((1 << c_targetFilterHeroic), 0, 0, (1 << (c_targetFilterHallucination - 32)))) == true)) {
                lv_allyTeam = libGame_gf_TeamNumberOfPlayer(lv_trigPlayer);
                libGame_gv_scoreValues[lv_trigPlayer].lv_damageTaken[lv_allyTeam] += lv_damageAttempted;
                lv_damagingTeam = libGame_gf_TeamNumberOfPlayer(lv_dmgPlayer);
                libGame_gv_scoreValues[lv_dmgPlayer].lv_heroDamage[lv_damagingTeam] += lv_damageAttempted;
            }
            else {
                lv_allyTeam = libGame_gf_TeamNumberOfPlayer(lv_dmgPlayer);
                libGame_gv_scoreValues[lv_dmgPlayer].lv_siegeDamage[lv_allyTeam] += lv_damageAttempted;
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ScoreValueTrackingDamageNEW_Init () {
    libGame_gt_ScoreValueTrackingDamageNEW = TriggerCreate("libGame_gt_ScoreValueTrackingDamageNEW_Func");
    TriggerAddEventUnitDamaged(libGame_gt_ScoreValueTrackingDamageNEW, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score Value Tracking - Absorbed (NEW)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ScoreValueTrackingAbsorbedNEW_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dmgPlayer;
    int lv_trigPlayer;
    int lv_allyTeam;
    int lv_damagingTeam;
    int lv_enemyTeam;
    playergroup lv_bothTeams;
    fixed lv_damageAbsorbed;
    int lv_ownerofBehavior;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bothTeams = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourcePlayer() != EventPlayer()))) {
            return false;
        }

        if (!((EventUnitDamageAbsorbed() >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_trigPlayer = EventPlayer();
    lv_dmgPlayer = EventUnitDamageSourcePlayer();
    lv_ownerofBehavior = UnitGetOwner(UnitBehaviorEffectUnit(EventUnit(), EventUnitBehavior(), c_effectUnitCaster, 0));
    lv_bothTeams = libNtve_gf_UnionOfPlayerGroups(libGame_gv_teams[1].lv_teamPlayerGroupNoNPCPlayers, libGame_gv_teams[2].lv_teamPlayerGroupNoNPCPlayers);
    lv_damageAbsorbed = EventUnitDamageAbsorbed();
    if (((lv_dmgPlayer == libCore_gv_cOMPUTER_Blue) || (lv_dmgPlayer == libCore_gv_cOMPUTER_Red) || (lv_dmgPlayer == libCore_gv_cOMPUTER_Hostile))) {
        if ((UnitFilterMatch(EventUnit(), lv_dmgPlayer, UnitFilter((1 << c_targetFilterHeroic), 0, 0, (1 << (c_targetFilterHallucination - 32)))) == true)) {
            lv_allyTeam = libGame_gf_TeamNumberOfPlayer(lv_ownerofBehavior);
            libGame_gv_scoreValues[lv_ownerofBehavior].lv_healedandAbsorbed[lv_allyTeam] += lv_damageAbsorbed;
        }
    }
    else {
        if ((PlayerGroupHasPlayer(lv_bothTeams, lv_dmgPlayer) == true)) {
            if ((UnitFilterMatch(EventUnit(), lv_dmgPlayer, UnitFilter((1 << c_targetFilterHeroic), 0, 0, (1 << (c_targetFilterHallucination - 32)))) == true)) {
                lv_allyTeam = libGame_gf_TeamNumberOfPlayer(lv_ownerofBehavior);
                libGame_gv_scoreValues[lv_ownerofBehavior].lv_healedandAbsorbed[lv_allyTeam] += lv_damageAbsorbed;
                lv_damagingTeam = libGame_gf_TeamNumberOfPlayer(lv_dmgPlayer);
                libGame_gv_scoreValues[lv_dmgPlayer].lv_heroDamage[lv_damagingTeam] += lv_damageAbsorbed;
            }
            else {
                lv_damagingTeam = libGame_gf_TeamNumberOfPlayer(lv_dmgPlayer);
                libGame_gv_scoreValues[lv_dmgPlayer].lv_siegeDamage[lv_damagingTeam] += lv_damageAbsorbed;
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ScoreValueTrackingAbsorbedNEW_Init () {
    libGame_gt_ScoreValueTrackingAbsorbedNEW = TriggerCreate("libGame_gt_ScoreValueTrackingAbsorbedNEW_Func");
    TriggerAddEventUnitDamageAbsorbed(libGame_gt_ScoreValueTrackingAbsorbedNEW, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score Value Tracking - Heal (New)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ScoreValueTrackingHealNew_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_allyTeam;
    fixed lv_healingValue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventUnitHealEffect() != "SafeZone_Ally_RegenerateHealth"))) {
            return false;
        }

        if (!((EventUnitHealEffect() != "HeroGeneric_RegenGlobePickup_HealthPercentModifier"))) {
            return false;
        }

        if (!((EventUnitHealEffect() != "HeroGeneric_FountainDrink_CreateHealer_Health"))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), EventUnitHealLaunchPlayer(), UnitFilter((1 << c_targetFilterHeroic), 0, 0, (1 << (c_targetFilterHallucination - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_healingValue = EventUnitHealAmount();
    lv_allyTeam = libGame_gf_TeamNumberOfPlayer(EventUnitHealLaunchPlayer());
    libGame_gv_scoreValues[EventUnitHealLaunchPlayer()].lv_healedandAbsorbed[lv_allyTeam] += lv_healingValue;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ScoreValueTrackingHealNew_Init () {
    libGame_gt_ScoreValueTrackingHealNew = TriggerCreate("libGame_gt_ScoreValueTrackingHealNew_Func");
    TriggerAddEventUnitHealed(libGame_gt_ScoreValueTrackingHealNew, null, c_unitVitalLife, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Notification - Choose A Talent
//--------------------------------------------------------------------------------------------------
bool libGame_gt_NotificationChooseATalent_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_AnnRegisterEvent(libCore_ge_AnnouncerVOEvents_TalentUnlocked, libGame_gf_PlayerCanChooseTalentsPlayer(), 0, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_NotificationChooseATalent_Init () {
    libGame_gt_NotificationChooseATalent = TriggerCreate("libGame_gt_NotificationChooseATalent_Func");
    libGame_gf_PlayerCanChooseTalentsAnnouncement(libGame_gt_NotificationChooseATalent);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Choose A Talent
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PlayerChooseATalent_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_tier;
    int lv_column;
    int lv_heroIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = libGame_gf_PlayerChooseTalentPlayer();
    lv_tier = libGame_gf_PlayerChooseTalentTalentTier();
    lv_column = libGame_gf_PlayerChooseTalentTalentColumn();

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("UI_Void_Tech_Select_1", -1), c_maxPlayers, libCore_gv_playerGroupFromPlayer[lv_player], 100.0, 0.0);
    libGame_gv_players[lv_player].lv_mYTalentsTalentPicked[lv_tier][lv_column] = true;
    libGame_gv_players[lv_player].lv_eXPPoints -= libCore_gv_talentsTierInfo[lv_tier].lv_price;
    libGame_gv_players[lv_player].lv_talentsNumberofPickedTalentsPerTier[lv_tier] += 1;
    lv_heroIndex = libCore_gf_CommandersGetHeroIndexOfPlayerHero(lv_player);
    if ((libGame_gv_players[lv_player].lv_talentsCurrentMaxTier < libCore_gv_dataHeroesMaxTalentsTiers) && (libGame_gv_players[lv_player].lv_talentsCurrentMaxTier == lv_tier)) {
        libGame_gv_players[lv_player].lv_talentsCurrentMaxTier += 1;
    }

    libCore_gf_CommandersAddHeroTalenttoPlayer(lv_player, lv_tier, lv_column);
    if ((libUIUI_gv_uIMyTalentsPanelPlayerViewingQuickTalents[lv_player] == true) && ((libGame_gv_players[lv_player].lv_eXPPoints < libCore_gv_talentsTierInfo[lv_tier].lv_price) || (libGame_gv_players[lv_player].lv_talentsNumberofPickedTalentsPerTier[lv_tier] == libCore_gv_talentsTierInfo[lv_tier].lv_maximumAvailiableTalents))) {
        libUIUI_gf_UIMyTalentsPanelTierButtonPressedbyPlayer(lv_player, libUIUI_gv_uIMyTalentsPanelPlayerViewingQuickTalentsTier[lv_player]);
    }
    else if ((libGame_gv_players[lv_player].lv_talentsNumberofPickedTalentsPerTier[lv_tier] == libCore_gv_heroData[lv_heroIndex].lv_talentsCountPerTier[lv_tier])) {
        libUIUI_gf_UIMyTalentsPanelTierButtonPressedbyPlayer(lv_player, libUIUI_gv_uIMyTalentsPanelPlayerViewingQuickTalentsTier[lv_player]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PlayerChooseATalent_Init () {
    libGame_gt_PlayerChooseATalent = TriggerCreate("libGame_gt_PlayerChooseATalent_Func");
    libGame_gf_PlayerChooseTalent(libGame_gt_PlayerChooseATalent);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Created (Summoned)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_UnitCreatedSummoned_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libCore_gf_CommandersCurrentHeroOrVehicleOfPlayer(EventPlayer()), "CommandersAddSummonedUnitToTrackedList", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_UnitCreatedSummoned_Init () {
    libGame_gt_UnitCreatedSummoned = TriggerCreate("libGame_gt_UnitCreatedSummoned_Func");
    TriggerAddEventUnitBehaviorChange(libGame_gt_UnitCreatedSummoned, null, "CommandersSummonedUnit", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp - Inititalize
//--------------------------------------------------------------------------------------------------
bool libGame_gt_WarpInititalize_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    unitgroup auto082C25E8_g;
    int auto082C25E8_u;
    unit auto082C25E8_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto082C25E8_g = UnitGroup("Building_Warp", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto082C25E8_u = UnitGroupCount(auto082C25E8_g, c_unitCountAll);
    for (;; auto082C25E8_u -= 1) {
        auto082C25E8_var = UnitGroupUnitFromEnd(auto082C25E8_g, auto082C25E8_u);
        if (auto082C25E8_var == null) { break; }
        UnitGroupAdd(libGame_gv_warpTextTagsUnitGroup, auto082C25E8_var);
        lv_index += 1;
        TextTagCreate(StringExternal("Param/Value/lib_Game_3C6904FC"), 24, UnitGetPosition(auto082C25E8_var), 2.0, false, false, PlayerGroupAll());
        libGame_gv_warpTextTags[lv_index] = TextTagLastCreated();
    }
    TriggerExecute(libGame_gt_WarpUpdateTextTags, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_WarpInititalize_Init () {
    libGame_gt_WarpInititalize = TriggerCreate("libGame_gt_WarpInititalize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp Captured
//--------------------------------------------------------------------------------------------------
bool libGame_gt_WarpCaptured_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "Building_Warp"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget), libGame_gv_teams[libGame_gf_PlayerGetPlayerTeam(EventPlayer())].lv_nPCPlayer, true);
    TriggerExecute(libGame_gt_WarpUpdateTextTags, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_WarpCaptured_Init () {
    libGame_gt_WarpCaptured = TriggerCreate("libGame_gt_WarpCaptured_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_WarpCaptured, c_playerAny, "CaptureMacGuffinCastComplete");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp - Update Text Tags
//--------------------------------------------------------------------------------------------------
bool libGame_gt_WarpUpdateTextTags_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTeam;
    int lv_index;

    // Automatic Variable Declarations
    int auto75A575A9_ae;
    unitgroup autoD1C8B6C5_g;
    int autoD1C8B6C5_u;
    unit autoD1C8B6C5_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto75A575A9_ae = libCore_gv_bALMaxTeams;
    lv_itTeam = 1;
    for ( ; lv_itTeam <= auto75A575A9_ae ; lv_itTeam += 1 ) {
        autoD1C8B6C5_g = libGame_gv_warpTextTagsUnitGroup;
        autoD1C8B6C5_u = UnitGroupCount(autoD1C8B6C5_g, c_unitCountAll);
        for (;; autoD1C8B6C5_u -= 1) {
            autoD1C8B6C5_var = UnitGroupUnitFromEnd(autoD1C8B6C5_g, autoD1C8B6C5_u);
            if (autoD1C8B6C5_var == null) { break; }
            lv_index += 1;
            if ((UnitGetOwner(autoD1C8B6C5_var) != libGame_gv_teams[lv_itTeam].lv_nPCPlayer)) {
                TextTagShow(libGame_gv_warpTextTags[lv_index], libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, true);
            }
            else {
                TextTagShow(libGame_gv_warpTextTags[lv_index], libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, false);
            }
        }
        lv_index = 0;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_WarpUpdateTextTags_Init () {
    libGame_gt_WarpUpdateTextTags = TriggerCreate("libGame_gt_WarpUpdateTextTags_Func");
}

void libGame_InitTriggers () {
    libGame_gt_DefenderScaling_Init();
    libGame_gt_MinionSpawn_Init();
    libGame_gt_InitData_Init();
    libGame_gt_UnitStatsArmorInitialization_Init();
    libGame_gt_UnitStatsPowerInitialization_Init();
    libGame_gt_UnitStatsVampiricKinetic_Init();
    libGame_gt_UnitStatsVampiricEnergetic_Init();
    libGame_gt_UnitStatsVampiricStorm_Init();
    libGame_gt_UnitStatsHealingTakenInitialization_Init();
    libGame_gt_UnitStatsBehaviorChangeCategory_Init();
    libGame_gt_HeroUsesAbility_Init();
    libGame_gt_AnnouncementTimerExpires_Init();
    libGame_gt_CapturePointLogic_Init();
    libGame_gt_CCRecognition_Init();
    libGame_gt_TurnonAI1112Collision_Init();
    libGame_gt_HeroDeathDiabloParticipatedInTakedown_Init();
    libGame_gt_HeroDeathUtherParticipatedInTakedown_Init();
    libGame_gt_HeroDeathHeroDies_Init();
    libGame_gt_HeroDeathHeroRespawnTimerExpires_Init();
    libGame_gt_HeroDeathPlayerMultikillTimerExpires_Init();
    libGame_gt_ParticipatedinTDHeroDealDamageToEnemy_Init();
    libGame_gt_ParticipatedinTDPlayer1_Init();
    libGame_gt_ParticipatedinTDPlayer2_Init();
    libGame_gt_ParticipatedinTDPlayer3_Init();
    libGame_gt_ParticipatedinTDPlayer4_Init();
    libGame_gt_ParticipatedinTDPlayer5_Init();
    libGame_gt_ParticipatedinTDPlayer6_Init();
    libGame_gt_ParticipatedinTDPlayer7_Init();
    libGame_gt_ParticipatedinTDPlayer8_Init();
    libGame_gt_ParticipatedinTDPlayer9_Init();
    libGame_gt_ParticipatedinTDPlayer10_Init();
    libGame_gt_SetLanePoints_Init();
    libGame_gt_PlayerLeavesGame_Init();
    libGame_gt_PlayerRejoinsGame_Init();
    libGame_gt_TeamAbandonedTheGameTimerExpires_Init();
    libGame_gt_PlayerLeftAnnouncementTimerExpires_Init();
    libGame_gt_TeamGetsLevelUp_Init();
    libGame_gt_HeroMoonwellCooldownOnOff_Init();
    libGame_gt_HeroMoonwellDurationTextTagUpdates_Init();
    libGame_gt_TowerDiesDefault_Init();
    libGame_gt_TowerDiesDeadBehavior_Init();
    libGame_gt_TowerDiesPeriodicFortKeepDead_Init();
    libGame_gt_MinionDies_Init();
    libGame_gt_FortKeepDies_Init();
    libGame_gt_CoreDiesGameOver_Init();
    libGame_gt_CoreTakesDamageUI_Init();
    libGame_gt_SafeZoneInitialize_Init();
    libGame_gt_SafeZoneLaunchMissile_Init();
    libGame_gt_SafeZoneUnitEntersPuntZone_Init();
    libGame_gt_SafeZoneUnitEntersSafeZone_Init();
    libGame_gt_SafeZoneUnitExitsSafeZone_Init();
    libGame_gt_SafeZonePunchBehavior_Init();
    libGame_gt_SafeZoneSafeBehavior_Init();
    libGame_gt_EXPDataPeriodicUpdate_Init();
    libGame_gt_ScoreValueTrackingDamageNEW_Init();
    libGame_gt_ScoreValueTrackingAbsorbedNEW_Init();
    libGame_gt_ScoreValueTrackingHealNew_Init();
    libGame_gt_NotificationChooseATalent_Init();
    libGame_gt_PlayerChooseATalent_Init();
    libGame_gt_UnitCreatedSummoned_Init();
    libGame_gt_WarpInititalize_Init();
    libGame_gt_WarpCaptured_Init();
    libGame_gt_WarpUpdateTextTags_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libGame_InitLib_completed = false;

void libGame_InitLib () {
    if (libGame_InitLib_completed) {
        return;
    }

    libGame_InitLib_completed = true;

    libGame_InitLibraries();
    libGame_InitVariables();
    libGame_InitTriggers();
}

include "LibAIAI"
include "LibCore"
include "LibUIUI"


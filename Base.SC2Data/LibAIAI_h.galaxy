include "LibCore_h"

//--------------------------------------------------------------------------------------------------
// Library: AI
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int libAIAI_ge_AIStates_Nothing = 0;
const int libAIAI_ge_AIStates_HoldPosition = 1;
const int libAIAI_ge_AIStates_Move = 2;
const int libAIAI_ge_AIStates_AttackHero = 3;
const int libAIAI_ge_AIStates_AttackCore = 4;
const int libAIAI_ge_AIStates_AttackMapMUnit = 5;
const int libAIAI_ge_AIStates_AttackMinion = 6;
const int libAIAI_ge_AIStates_AttackStructure = 7;
const int libAIAI_ge_AIStates_AttackSummon = 8;
const int libAIAI_ge_AIStates_CastingAbility = 9;
const int libAIAI_ge_MinionAIStates_Advancing = 0;
const int libAIAI_ge_MinionAIStates_AttackingHero = 1;
const int libAIAI_ge_MinionAIStates_AttackingMinions = 2;
const int libAIAI_ge_MinionAIStates_AttackingStructure = 3;
const int libAIAI_ge_MinionAIStates_FollowHero = 4;
const int libAIAI_ge_MinionAIStates_HoldPosition = 5;
const int libAIAI_ge_JungleDefendersCampType_CapturetoReplaceMinions = 0;
const int libAIAI_ge_JungleDefendersCampType_CapturetoPushLanes = 1;
const int libAIAI_ge_JungleDefendersCampType_CapturetoGainBonuses = 2;
const int libAIAI_ge_JungleDefendersDifficulty_Easy = 0;
const int libAIAI_ge_JungleDefendersDifficulty_Medium = 1;
const int libAIAI_ge_JungleDefendersDifficulty_Elite = 2;
const int libAIAI_ge_JungleDefendersDifficulty_Boss = 3;
const int libAIAI_ge_JungleMercenaryMinionNumberType_None = 0;
const int libAIAI_ge_JungleMercenaryMinionNumberType_HybridMelee = 1;
const int libAIAI_ge_JungleMercenaryMinionNumberType_HybridWizard = 2;
const int libAIAI_ge_JungleMercenaryMinionNumberType_HybridRanged = 3;
const int libAIAI_ge_CapturePontsCampVision_Nothing = 0;
const int libAIAI_ge_CapturePontsCampVision_Camp = 1;
const int libAIAI_ge_CapturePontsCampVision_Vision = 2;
const int libAIAI_ge_DefenderAIState_Idle = 0;
const int libAIAI_ge_DefenderAIState_Leashing = 1;
const int libAIAI_ge_DefenderAIState_Fighting = 2;

// Constants
const int libAIAI_gv_aITowerIndexMod = 2;
const fixed libAIAI_gv_towerSearchRadius_C = 8.0;
const fixed libAIAI_gv_townSearchRadius_C = 9.0;
const fixed libAIAI_gv_aIRangedMinionSearchRadius = 5.0;
const fixed libAIAI_gv_aIWaypointAdvanceDistance = 4.0;
const fixed libAIAI_gv_aIAttackStructureBonusScanRange = 2.0;
const fixed libAIAI_gv_aIMinionSearchHeroRadiusBuffer = 0.5;
const fixed libAIAI_gv_aILeashOffDistance = 3.5;
const fixed libAIAI_gv_aILeashOnDistance = 9.0;
const fixed libAIAI_gv_aIDistanceFactor = 0.3;
const int libAIAI_gv_aIMaxPathDistance = 65536;
const fixed libAIAI_gv_minionDistance_C = 3.0;
const fixed libAIAI_gv_minionAI_LeashingTimeDelay_C = 1.0;
const int libAIAI_gv_minionMax = 300;
const int libAIAI_gv_summonedMax = 100;
const int libAIAI_gv_towerInfoMaxTowersCount = 50;
const int libAIAI_gv_jungleMaxAbilitiesPerUnit = 2;
const int libAIAI_gv_jungleMaxUnitsperGroup = 4;
const int libAIAI_gv_mercsMercsGroupsMaxCount = 24;
const int libAIAI_gv_mercAIMaxMercsperGroup = 4;
const int libAIAI_gv_mercAIMaxAbilities = 2;
const fixed libAIAI_gv_defenderAIMinLeashTime = 1.0;
const fixed libAIAI_gv_defenderAIMinAgroTime = 1.0;
const fixed libAIAI_gv_defenderAILeashReAnnounceTime = 4.0;
const fixed libAIAI_gv_defenderAIClosetoPointDistance = 0.5;
const fixed libAIAI_gv_defenderAIMinTimeBeforeCasting = 2.0;
const int libAIAI_gv_defMaxCamps = 10;
const int libAIAI_gv_mapMAIMaxUnits = 30;

// Structures
struct libAIAI_gs_MinionInfo {
    bool lv_minionIsAlive;
    unit lv_minionUnit;
    unit lv_storedUnit;
    unit lv_targetUnit;
    bool lv_lockStructureTargetUnit;
    int lv_state;
    int lv_state222222222;
    point lv_minionPosition;
    point lv_minionNextPoint;
    point lv_minionPreviousPoint;
    int lv_numberofPreviousPoint;
    int lv_numberofNextPoint;
    int lv_lane;
    int lv_team;
    int lv_owner;
    fixed lv_exp;
    point lv_battleStandardPoint;
    fixed lv_battleStandardLastUpdate;
    timer lv_leashDelay;
    text lv_monitoringText;
    bool lv_leashing;
    int lv_initialWaypoint;
    bool lv_forceStateTransition;
    fixed lv_attackRange;
    fixed lv_attackHeroRange;
    int lv_groupIndex;
};

struct libAIAI_gs_SummonedInfo {
    bool lv_summonedIsAlive;
    unit lv_summonedUnit;
    unit lv_targetUnit;
    int lv_state;
    fixed lv_weaponRange;
    point lv_summonedPosition;
    point lv_nextPoint;
    point lv_previousPoint;
    int lv_lane;
};

struct libAIAI_gs_TowerInfo {
    bool lv_towerIsAlive;
    unit lv_towerUnit;
    unit lv_targetUnit;
    unit lv_lastAttacker;
    int lv_lane;
    int lv_textTag;
};

struct libAIAI_gs_MercsGroupInfo {
    unitgroup lv_mercGroup;
    bool lv_groupIsFree;
    int lv_campDiff;
    point lv_campPoint;
    int lv_lane;
    int lv_pointsCountBeforeLane2222222222222;
    point[libCore_gv_bALMaxTeams + 1][6] lv_pointsBeforeLane;
    int lv_mercLeaderIndex;
    int[libCore_gv_bALMaxMercenaryPathLayers + 1] lv_mercLeaderPath;
    bool lv_havePath;
    unit[libAIAI_gv_mercAIMaxMercsperGroup + 1] lv_mercUnit;
    unit[libAIAI_gv_mercAIMaxMercsperGroup + 1] lv_mercTargetUnit;
    bool[libAIAI_gv_mercAIMaxMercsperGroup + 1] lv_mercIsAlive;
    bool[libAIAI_gv_mercAIMaxMercsperGroup + 1] lv_mercIsLeashing;
    int[libAIAI_gv_mercAIMaxMercsperGroup + 1] lv_mercState;
    point[libAIAI_gv_mercAIMaxMercsperGroup + 1] lv_mercPosition;
    int[libAIAI_gv_mercAIMaxMercsperGroup + 1] lv_mercNextPointNumber;
    int[libAIAI_gv_mercAIMaxMercsperGroup + 1] lv_mercPreviousPointNumber;
    bool[libAIAI_gv_mercAIMaxMercsperGroup + 1] lv_mercPreviousPointCampPoint;
    point[libAIAI_gv_mercAIMaxMercsperGroup + 1] lv_mercNextPoint;
    fixed[libAIAI_gv_mercAIMaxMercsperGroup + 1] lv_mercWeaponRange;
    point[libAIAI_gv_mercAIMaxMercsperGroup + 1] lv_mercBattleStandardPoint;
    fixed[libAIAI_gv_mercAIMaxMercsperGroup + 1] lv_mercBattleStandardLastUpdate;
};

struct libAIAI_gs_DefRespawnTimers {
    fixed lv_easy;
    fixed lv_medium;
    fixed lv_elite;
    fixed lv_boss;
};

struct libAIAI_gs_DefenderGroupInfo {
    unitgroup lv_defendersGroup;
    int lv_maxGroupSize;
    int lv_currentGroupSize;
    region lv_region;
    int lv_textTagLevel;
    unit lv_captainUnit;
    point lv_captainPoint;
    fixed lv_respawnTimer;
    bool lv_groupIsFighting;
    bool lv_groupisCapturing;
    int[libCore_gv_bALMaxTeams + 1] lv_firstTeamLanePointNumber;
    int lv_leashCount;
    fixed lv_fightStartTime;
    bool lv_healOnLeash;
    int lv_state;
    fixed lv_minLeashTime;
    fixed lv_minAgroTime;
    fixed lv_lastAnnouncedLeashing;
    unitgroup lv_targetUnitGroup;
    fixed lv_eXP_Defender_Default;
    fixed lv_eXP_Camp_Default;
    fixed lv_scalingValue;
    int lv_scale_Number;
    int lv_scale_Number_Skipped;
    int lv_scale_Number_AfterDeath;
    bool[libAIAI_gv_jungleMaxUnitsperGroup + 1] lv_defenderIsAlive;
    point[libAIAI_gv_jungleMaxUnitsperGroup + 1] lv_defenderDefaultPoint;
    point[libAIAI_gv_jungleMaxUnitsperGroup + 1] lv_defenderCurrentPosition;
    fixed[libAIAI_gv_jungleMaxUnitsperGroup + 1] lv_defenderAngle;
    unit[libAIAI_gv_jungleMaxUnitsperGroup + 1] lv_defenderUnit;
    unit[libAIAI_gv_jungleMaxUnitsperGroup + 1] lv_defenderTarget;
    bool[libAIAI_gv_jungleMaxUnitsperGroup + 1][libAIAI_gv_jungleMaxAbilitiesPerUnit + 1] lv_defenderHasCDAbility;
    bool[libAIAI_gv_jungleMaxUnitsperGroup + 1] lv_defenderIsCastingAbility;
    int[libAIAI_gv_jungleMaxUnitsperGroup + 1] lv_defenderState;
    fixed[libAIAI_gv_jungleMaxUnitsperGroup + 1] lv_defenderFightStartTime;
    fixed[libAIAI_gv_jungleMaxUnitsperGroup + 1] lv_defenderMinLeashTime;
    bool[libAIAI_gv_jungleMaxUnitsperGroup + 1] lv_defenderHealOnLeash9999999999999999;
    fixed[libAIAI_gv_jungleMaxUnitsperGroup + 1] lv_defenderMinAgroTime;
    fixed[libAIAI_gv_jungleMaxUnitsperGroup + 1] lv_defenderLastAnnouncedLeashing;
    text lv_defenderDebugText;
    int lv_campType;
    int lv_campDiff;
    string[libAIAI_gv_jungleMaxUnitsperGroup + 1] lv_defenderUnitsTypeC2ABGameLinkC2BB;
    int lv_lane;
};

struct libAIAI_gs_MapMAIUnitInfo {
    string lv_unitType;
    bool lv_unitIsAlive;
    unit lv_unit;
    region lv_region;
    int lv_lane;
    int lv_team;
    unit lv_unitTarget;
    int lv_state;
    int lv_debugTextTag;
};

// Variable Declarations
unitfilter libAIAI_gv_uF_MinionAI_EnemyMinions;
unitfilter libAIAI_gv_uF_MinionAI_AnyEnemyMinions2;
unitfilter libAIAI_gv_uF_MinionAI_EnemyStructure;
unitfilter libAIAI_gv_uF_MinionAI_EnemyHero;
unitfilter libAIAI_gv_uF_MinionAI_EnemyHeroForExp;
unitfilter libAIAI_gv_uF_MinionAI_HeroInWayOfStandard;
unitfilter libAIAI_gv_uF_MinionAI_DetermineOgreKingLogic;
unitfilter libAIAI_gv_uF_MinionAI_AnyMapObjectMinion;
fixed libAIAI_gv_aIRangedMinionWeaponRange;
fixed libAIAI_gv_aIEnemyMinionAttackRange;
fixed libAIAI_gv_aIMinionSearchHeroRadius;
unitfilter libAIAI_gv_uF_MinionAI_ScanGroup;
unitfilter libAIAI_gv_uF_MinionAI_ScanGroup_Summoned;
unitfilter libAIAI_gv_uF_MinionAI_Required_Heroic;
unitfilter libAIAI_gv_uF_MinionAI_Required_Minion;
unitfilter libAIAI_gv_uF_MinionAI_Required_Summoned;
unitfilter libAIAI_gv_uF_MinionAI_Required_Invulnerable;
unitfilter libAIAI_gv_uF_MinionAI_Required_Stasis;
unitfilter libAIAI_gv_uF_MinionAI_Required_Visible;
unitfilter libAIAI_gv_uF_MinionAI_Required_Ignored;
unitfilter libAIAI_gv_uF_MinionAI_Required_Structure;
unitfilter libAIAI_gv_uF_MinionAI_GetNearestAttackableEnemyStructure;
libAIAI_gs_MinionInfo[libAIAI_gv_minionMax + 1] libAIAI_gv_minionInfo;
int libAIAI_gv_minionAIActiveMinionsUpperBound;
unitgroup libAIAI_gv_minionAllMinionsMinionGroup;
libAIAI_gs_SummonedInfo[libAIAI_gv_summonedMax + 1] libAIAI_gv_summonedInfo;
unitfilter libAIAI_gv_uF_TowerAI_ScanGroup;
unitfilter libAIAI_gv_uF_TowerAI_ScanGroup_Minion;
unitfilter libAIAI_gv_uF_TowerAI_ScanGroup_Summoned;
unitfilter libAIAI_gv_uF_TowerAI_Required_Heroic;
unitfilter libAIAI_gv_uF_TowerAI_Required_Minion;
unitfilter libAIAI_gv_uF_TowerAI_Required_Summoned;
unitfilter libAIAI_gv_uF_TowerAI_Required_Invulnerable;
unitfilter libAIAI_gv_uF_TowerAI_Required_Stasis;
unitfilter libAIAI_gv_uF_TowerAI_Required_Visible;
unitfilter libAIAI_gv_uF_TowerAI_Required_Ignored;
libAIAI_gs_TowerInfo[libAIAI_gv_towerInfoMaxTowersCount + 1] libAIAI_gv_towerInfo;
int libAIAI_gv_towerInfoCurrentCount;
unitfilter libAIAI_gv_uF_DefenderAI_Enemy;
unit[3] libAIAI_gv_vision;
revealer[3][3] libAIAI_gv_revealerVision;
point[11] libAIAI_gv_capturePointPoint;
int[11] libAIAI_gv_capturePointNumber;
libAIAI_gs_MercsGroupInfo[libAIAI_gv_mercsMercsGroupsMaxCount + 1] libAIAI_gv_mercsGroupInfo;
int libAIAI_gv_mercAIActiveCampsUpperBound;
unitgroup libAIAI_gv_jungleDefendersGroup;
libAIAI_gs_DefRespawnTimers libAIAI_gv_defRespawnTimers;
bool libAIAI_gv_defenderAINeedsNewOrder;
libAIAI_gs_DefenderGroupInfo[libAIAI_gv_defMaxCamps + 1] libAIAI_gv_defenderGroupInfo;
libAIAI_gs_MapMAIUnitInfo[libAIAI_gv_mapMAIMaxUnits + 1] libAIAI_gv_mapMAIUnitInfo;
int libAIAI_gv_mapMAICurrentUnitsCount;

// Function Declarations
bool libAIAI_gf_SupportAIAIUnitMINIONHasalivenonHeroTarget (unit lp_aIUnit);
bool libAIAI_gf_SupportAIAnyEnemyMinionsInRangeOfUnit (unit lp_minionIndex, fixed lp_range);
bool libAIAI_gf_SupportAIAnyEnemySummonsInRangeOfUnit (unit lp_minionIndex, fixed lp_range);
bool libAIAI_gf_SupportAIAnyEnemyStructuresInRangeOfUnit (unit lp_minionIndex, fixed lp_range);
bool libAIAI_gf_SupportAIAnyEnemyHeroesInRangeOfUnit (unit lp_minionIndex, fixed lp_range);
bool libAIAI_gf_SupportAIEnemyCoreInRangeOfUnit (unit lp_minionIndex, fixed lp_range);
bool libAIAI_gf_SupportAIEXPAnyEnemyHeroesInRangeOfUnit (unit lp_minionIndex, fixed lp_range);
bool libAIAI_gf_SupportAIAnyEnemySymbioteInRangeOfUnit (unit lp_minionIndex, fixed lp_range);
bool libAIAI_gf_SupportAIAnyEnemyPlayerHeroorSymbioteInRangeOfUnit (int lp_player, unit lp_minionIndex, fixed lp_range);
unit libAIAI_gf_SupportAIGetNearestEnemyMinionInRangeOfUnit (unit lp_minionIndex, fixed lp_range);
unit libAIAI_gf_SupportAIGetNearestEnemyMinionSummonInRangeOfUnit (unit lp_minionIndex, fixed lp_range);
unit libAIAI_gf_SupportAIGetNearestEnemySummonInRangeOfUnit (unit lp_minionIndex, fixed lp_range);
unit libAIAI_gf_SupportAIGetNearestEnemyStructureInRangeOfUnit (unit lp_minionIndex, fixed lp_range);
unit libAIAI_gf_SupportAIGetNearestEnemyHeroInRangeOfUnit (unit lp_minionIndex, fixed lp_range);
point libAIAI_gf_SupportAIGetClosestPointFromLaneForUnit (int lp_lane, unit lp_unit);
int libAIAI_gf_SupportAIGetNumberofClosestPointFromLaneForUnit (int lp_lane, unit lp_unit);
int libAIAI_gf_SupportAIGetClosestLaneForUnit (unit lp_unit);
int libAIAI_gf_SupportAIGetClosestSpawnPointLANE (unit lp_unit);
point libAIAI_gf_SupportAIGetClosestPointFromLaneFromPointForTeam (int lp_team, int lp_lane, point lp_point);
int libAIAI_gf_SupportAIGetNumberofClosestPointofLaneFromPointForTeam (int lp_team, int lp_lane, point lp_point);
bool libAIAI_gf_SupportAIRegionAnyEnemyMapObjectInRegionforUnit (unit lp_minionIndex, region lp_region);
bool libAIAI_gf_SupportAIRegionAnyEnemySummonsInRegionforUnit (unit lp_minionIndex, region lp_region);
bool libAIAI_gf_SupportAIRegionAnyEnemyStructuresInRegionforUnit (unit lp_minionIndex, region lp_region);
bool libAIAI_gf_SupportAIRegionAnyEnemyHeroInRegionforUnit (unit lp_minionIndex, region lp_region);
unit libAIAI_gf_SupportAIRegionGetNearestEnemyMapObjectInRegionforUnit (region lp_region, unit lp_minionIndex);
unit libAIAI_gf_SupportAIRegionGetNearestEnemyHeroesInRegionforUnit (region lp_region, unit lp_minionIndex);
unit libAIAI_gf_SupportAIRegionGetNearestEnemySummonsInRegionforUnit (region lp_region, unit lp_minionIndex);
unit libAIAI_gf_SupportAIRegionGetNearestEnemyStructuresInRegionforUnit (region lp_region, unit lp_minionIndex);
bool libAIAI_gf_SupportAISourceandTargetareBehindorInFrontoftheGate (unit lp_targetUnit, unit lp_sourceUnit);
bool libAIAI_gf_UnitIsGate (unit lp_unit);
bool libAIAI_gf_UnitIsWall (unit lp_unit);
void libAIAI_gf_MinionAIFreeMinionIndex (int lp_minionIndex);
void libAIAI_gf_MinionAIChangeAttackState ();
bool libAIAI_gf_MinionAIIsValidTarget (int lp_minionIndex, unit lp_targetUnit);
unit libAIAI_gf_MinionAIGetHerotoFollow (int lp_minionIndex);
void libAIAI_gf_MinionAIUpdateBattleStandardDataForMinion (int lp_minionIndex);
void libAIAI_gf_MinionAIAdvanceMinionToNextWaypoint (int lp_minionIndex);
point libAIAI_gf_MinionAIGetWaypointForMinion (int lp_minionIndex, int lp_waypointIndex);
int libAIAI_gf_MinionAIGetWaypointCount (int lp_minionIndex);
int libAIAI_gf_MinionAIGetWaypointIndexForMinion (int lp_minionIndex);
point libAIAI_gf_MinionAIGetNextWaypointForMinion (int lp_minionIndex);
point libAIAI_gf_MinionAIGetPreviousWaypointForMinion (int lp_minionIndex);
bool libAIAI_gf_MinionAIWithinLeashingDistanceofLane (int lp_minionIntext);
bool libAIAI_gf_MinionAITestPastNextWaypoints (int lp_minionIndex);
int libAIAI_gf_MinionAIGetMinionIndex (unit lp_unit);
int libAIAI_gf_MinionAIGetMinionLane (unit lp_unit);
bool libAIAI_gf_MinionAICompareBuildingandMinionLane (int lp_minionLane, unit lp_building);
void libAIAI_gf_MinionAICheckIndex (unit lp_minionUnit, int lp_lane, bool lp_lockStructureTarget);
void libAIAI_gf_MinionAIFunctionAttack2D182D0BED187D182D0BED0BFD18BD182D0B0D0BBD181D18FD0BFD0BED0B4D185D0BED182D181D0BFD0B5D180D0B5D0B4D0B5D0BBD0B0D182D18C (int lp_minionIndex);
void libAIAI_gf_MinionAIFunctionAttackSet (point lp_nextPoint, point lp_previousPoint, int lp_minionIndex);
void libAIAI_gf_MinionAIFunctionAttackBattleStandard (int lp_minionIndex);
bool libAIAI_gf_MinionAIFunctionAttackWithinLeashingDistanceofLane (int lp_minionIndex);
void libAIAI_gf_MinionAIFunctionAttackSet3 (point lp_nextPoint, point lp_previousPoint, unit lp_minion, int lp_index, int lp_lane);
void libAIAI_gf_MinionAIFunctionAttackSwitch (unit lp_minion);
void libAIAI_gf_MinionAIFunctionAttackSwitchNEW (int lp_minionIndex);
int libAIAI_gf_MinionAIDetermineState (int lp_minionIndex, int lp_oldState);
int libAIAI_gf_MinionAIDeterimeAttackStateAndTarget (int lp_minionIndex);
bool libAIAI_gf_MinionAIShouldAttackStructure (int lp_minionIndex, unit lp_currentTarget);
bool libAIAI_gf_MinionAIShouldAttackMinions (int lp_minionIndex, unit lp_currentTarget);
int libAIAI_gf_MinionAIAttackHeroState (int lp_minionIndex, unit lp_currentTarget);
void libAIAI_gf_MinionAITransitionMinionIntoState (int lp_minionIndex, int lp_state);
void libAIAI_gf_SummonedAIInitialAttackLogic (bool lp_attackCreatorsTarget, unit lp_summonedUnit, unit lp_creatorUnit, bool lp_continuousScan);
int libAIAI_gf_SummonedAIGetSummonedIndex (unit lp_unit);
void libAIAI_gf_SummonedAICheckIndex (unit lp_summonedUnit);
void libAIAI_gf_SummonedAIFunctionAttack (unit lp_summoned);
void libAIAI_gf_SummonedAIFunctionAttackSet (point lp_nextPoint, point lp_previousPoint, unit lp_summonedUnit);
void libAIAI_gf_SummonedAIFunctionAttackSwitch (unit lp_summoned);
void libAIAI_gf_TowerAICheckIndex (unit lp_tower);
int libAIAI_gf_TowerAIGetTowerIndex (unit lp_tower);
string libAIAI_gf_MercAIGetMercUnitTypefromDefenderUnitType (int lp_groupIndex, int lp_defIndex);
int libAIAI_gf_MercAIGetMercIndex (unit lp_merc);
int libAIAI_gf_MercAIGetMercGroupIndex (unit lp_merc);
int libAIAI_gf_MercAIGetMercGroupLane (unit lp_merc);
bool libAIAI_gf_MercAICompareMercandBuildingLanes (int lp_mercLane, unit lp_building);
int libAIAI_gf_MercAIGetFreeMercGroup ();
unit libAIAI_gf_MercAIGetMercGroupLeader (int lp_mercGroupIndex);
bool libAIAI_gf_MercAIMercIsLeader (int lp_mercGroupIndex, int lp_mercIndex);
bool libAIAI_gf_MercAIGroupHasMercLeader (int lp_mercGroupIndex);
int libAIAI_gf_MercAIGetNumberofNextPointofMerc (int lp_groupindex, int lp_minionIndex);
int libAIAI_gf_MercAIGetNumberofPreviousPointofMerc (int lp_groupindex, int lp_minionIndex);
void libAIAI_gf_MercAICreateMercs (int lp_player, int lp_campNumber, int lp_scaleNumber);
void libAIAI_gf_MercAICheckIndex (unit lp_merc, int lp_groupIndex, int lp_mercIndex, int lp_campNumber);
void libAIAI_gf_MercAICreatePingAtCamp (point lp_point, int lp_owner);
void libAIAI_gf_MercAIFunctionAttack (int lp_groupIndex, int lp_mercIndex);
void libAIAI_gf_MercAIFunctionAttackBattleStandard (int lp_mercGroupIndex, int lp_mercIndex);
bool libAIAI_gf_MercAIFunctionAttackWithinLeashingDistanceofLane (int lp_mercGroupIndex, int lp_mercIndex);
void libAIAI_gf_MercAIFunctionAttackSet (int lp_groupIndex, int lp_mercIndex, int lp_lane);
void libAIAI_gf_MercAIFunctionAbility (unit lp_mercenary);
void libAIAI_gf_MercAIFunctionAttackSwitch (int lp_mercGroup, int lp_mercIndex);
void libAIAI_gf_MercAICreateMercPath (unit lp_merc, int lp_groupIndex, int lp_firstPointNumber, bool lp_newPath);
void libAIAI_gf_MercAISetMercLeader (int lp_mercGroupIndex, int lp_mercIndex);
void libAIAI_gf_MercAIClearInfo (int lp_groupIndex, int lp_mercIndex);
void libAIAI_gf_MercAILowdownUpperBound (int lp_campNumber);
void libAIAI_gf_DefenderAISpawnDefenderCamp (int lp_campNumber, fixed lp_respawnTime);
void libAIAI_gf_DefenderAISpawnDefenders (int lp_campDiff, int lp_campNumber);
void libAIAI_gf_DefenderAICheckIndex (unit lp_defenderUnit, int lp_groupIndex, int lp_defenderNumber);
void libAIAI_gf_DefenderAIClearDefenderInfo (int lp_defenderGroupIndex, int lp_defenderIndex);
void libAIAI_gf_CampGrantXPForCampForTeam (int lp_campId, int lp_team);
bool libAIAI_gf_DefenderAIGolemCanUseAbility (int lp_golemIndex, int lp_groupIndex);
bool libAIAI_gf_DefenderAISorcererCanUseAbility (int lp_sorcererIndex, int lp_groupIndex);
unitgroup libAIAI_gf_DefenderAIGetAllEnemyUnitsInRegionOfDefender (region lp_region);
unit libAIAI_gf_DefenderAIGetClosestEnemyUnitInRegionOfDefender (region lp_region, unit lp_minionIndex);
bool libAIAI_gf_DefenderAIAnyEnemyInRegionOfDefender (region lp_region);
int libAIAI_gf_DefenderAIGetDefenderIndex (unit lp_defender);
int libAIAI_gf_DefenderAIGetDefenderGroupIndex (unit lp_defender);
fixed libAIAI_gf_DefGetCampDifficultyRespawnTime (int lp_difficulty);
fixed libAIAI_gf_DefGetCampRespawnTime (int lp_campIndex);
void libAIAI_gf_DefenderAITransitionIntoState (int lp_state, int lp_defenderGroupIndex, int lp_defenderIndex);
void libAIAI_gf_DefenderAITransitionIntoState2 (int lp_state, int lp_defenderGroupIndex);
int libAIAI_gf_DefenderAIDetermineState (int lp_defenderGroupIndex, int lp_oldState);
void libAIAI_gf_DefenderAIStateLogic (int lp_defenderGroupIndex);
void libAIAI_gf_DefenderAIAttack (int lp_defenderGroupIndex, int lp_defenderIndex);
void libAIAI_gf_DefenderAIFunctionAttackNEW (int lp_groupIndex);
void libAIAI_gf_DefenderAICheckAbilityCDonDefender (int lp_defenderIndex, int lp_groupIndex);
bool libAIAI_gf_DefenderAICheckDefenderAndTargetRegionMain (int lp_defenderIndex, int lp_groupIndex);
void libAIAI_gf_DefenderAIFunctionAttackNYNEW (int lp_defenderGroupIndex);
void libAIAI_gf_MapMAIRegisterUnit (unit lp_unit, region lp_region, int lp_lane, int lp_level);
void libAIAI_gf_MapMAIFunction (int lp_mapMUnitIndex);
void libAIAI_gf_MapMAIFreeUnitIndex (int lp_mapMUnitIndex);
void libAIAI_gf_MapMAIVoidThrasherFunc (int lp_mapMIndex);
void libAIAI_gf_MapMAIVoidThrasherMinionFunc (int lp_mapMIndex);
unit libAIAI_gf_MapMAIClosestUnitfromFortKeepRegionCore (int lp_mapMIndex);
int libAIAI_gf_MapMAIGetMapMUnitIndex (unit lp_unit);

// Trigger Declarations
trigger libAIAI_gt_RunAISystem;
trigger libAIAI_gt_InitializeTowersandTowns;
trigger libAIAI_gt_CycleMinions2;
trigger libAIAI_gt_CycleDefenders;
trigger libAIAI_gt_CycleMercs;
trigger libAIAI_gt_CycleMapMAI;
trigger libAIAI_gt_MinionAICycle;
trigger libAIAI_gt_TowerAICycle;
trigger libAIAI_gt_VisionIsTaken;
trigger libAIAI_gt_DefenderTakesDamage3;
trigger libAIAI_gt_Campistaken;

// Library Initialization
void libAIAI_InitVariables ();


include "TriggerLibs/NativeLib"
include "LibCore_h"
include "LibGame_h"
include "LibMapM_h"
include "LibUIUI_h"

include "LibAIAI_h"

//--------------------------------------------------------------------------------------------------
// Library: AI
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libAIAI_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libMapM_InitVariables();
    libUIUI_InitVariables();
}

// Variable Initialization
bool libAIAI_InitVariables_completed = false;

void libAIAI_InitVariables () {
    int init_i;
    int init_i1;

    if (libAIAI_InitVariables_completed) {
        return;
    }

    libAIAI_InitVariables_completed = true;

    libAIAI_gv_uF_MinionAI_EnemyMinions = UnitFilter((1 << c_targetFilterBiological) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterUser1) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32)) | (1 << (c_targetFilterSummoned - 32)));
    libAIAI_gv_uF_MinionAI_AnyEnemyMinions2 = UnitFilter((1 << c_targetFilterVisible), (1 << (c_targetFilterSummoned - 32)), (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterUser1) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32)));
    libAIAI_gv_uF_MinionAI_EnemyStructure = UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterBiological) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterUser1) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32)) | (1 << (c_targetFilterSummoned - 32)));
    libAIAI_gv_uF_MinionAI_EnemyHero = UnitFilter((1 << c_targetFilterHeroic) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterBiological) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterUser1) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32)));
    libAIAI_gv_uF_MinionAI_EnemyHeroForExp = UnitFilter((1 << c_targetFilterHeroic) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterBiological) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHallucination - 32)));
    libAIAI_gv_uF_MinionAI_HeroInWayOfStandard = UnitFilter((1 << c_targetFilterHeroic) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterBiological) | (1 << c_targetFilterUser1) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    libAIAI_gv_uF_MinionAI_DetermineOgreKingLogic = UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterBiological) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32)));
    libAIAI_gv_uF_MinionAI_AnyMapObjectMinion = UnitFilter((1 << c_targetFilterUser1) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32)));
    libAIAI_gv_aIRangedMinionWeaponRange = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogWeapon, "MinionProtoss_WeaponRanged", "Range", c_playerAny);
    libAIAI_gv_aIEnemyMinionAttackRange = (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogWeapon, "MinionProtoss_WeaponRanged", "Range", c_playerAny) + 1.0);
    libAIAI_gv_aIMinionSearchHeroRadius = (libAIAI_gv_aIRangedMinionSearchRadius + 2.0);
    libAIAI_gv_uF_MinionAI_ScanGroup = UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterUser1) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    libAIAI_gv_uF_MinionAI_ScanGroup_Summoned = UnitFilter((1 << c_targetFilterVisible), (1 << (c_targetFilterSummoned - 32)), (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterUser1) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    libAIAI_gv_uF_MinionAI_Required_Heroic = UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0);
    libAIAI_gv_uF_MinionAI_Required_Minion = UnitFilter((1 << c_targetFilterBiological), 0, 0, 0);
    libAIAI_gv_uF_MinionAI_Required_Summoned = UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), 0, 0);
    libAIAI_gv_uF_MinionAI_Required_Invulnerable = UnitFilter(0, (1 << (c_targetFilterInvulnerable - 32)), 0, 0);
    libAIAI_gv_uF_MinionAI_Required_Stasis = UnitFilter(0, (1 << (c_targetFilterStasis - 32)), 0, 0);
    libAIAI_gv_uF_MinionAI_Required_Visible = UnitFilter((1 << c_targetFilterVisible), 0, 0, 0);
    libAIAI_gv_uF_MinionAI_Required_Ignored = UnitFilter((1 << c_targetFilterPsionic), 0, 0, 0);
    libAIAI_gv_uF_MinionAI_Required_Structure = UnitFilter((1 << c_targetFilterStructure), 0, 0, 0);
    libAIAI_gv_uF_MinionAI_GetNearestAttackableEnemyStructure = UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterBiological) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32)));
    for (init_i = 0; init_i <= libAIAI_gv_minionMax; init_i += 1) {
        libAIAI_gv_minionInfo[init_i].lv_state222222222 = libAIAI_ge_AIStates_Nothing;
        libAIAI_gv_minionInfo[init_i].lv_numberofPreviousPoint = 2;
        libAIAI_gv_minionInfo[init_i].lv_numberofNextPoint = 3;
        libAIAI_gv_minionInfo[init_i].lv_leashDelay = TimerCreate();
    }
    libAIAI_gv_minionAllMinionsMinionGroup = UnitGroupEmpty();
    for (init_i = 0; init_i <= libAIAI_gv_summonedMax; init_i += 1) {
        libAIAI_gv_summonedInfo[init_i].lv_state = libAIAI_ge_AIStates_HoldPosition;
    }
    libAIAI_gv_uF_TowerAI_ScanGroup = UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterArmored) | (1 << c_targetFilterUser1) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    libAIAI_gv_uF_TowerAI_ScanGroup_Minion = UnitFilter((1 << c_targetFilterBiological) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterArmored) | (1 << c_targetFilterUser1) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    libAIAI_gv_uF_TowerAI_ScanGroup_Summoned = UnitFilter((1 << c_targetFilterVisible), (1 << (c_targetFilterSummoned - 32)), (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterArmored) | (1 << c_targetFilterUser1) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    libAIAI_gv_uF_TowerAI_Required_Heroic = UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0);
    libAIAI_gv_uF_TowerAI_Required_Minion = UnitFilter((1 << c_targetFilterBiological), 0, 0, 0);
    libAIAI_gv_uF_TowerAI_Required_Summoned = UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), 0, 0);
    libAIAI_gv_uF_TowerAI_Required_Invulnerable = UnitFilter(0, (1 << (c_targetFilterInvulnerable - 32)), 0, 0);
    libAIAI_gv_uF_TowerAI_Required_Stasis = UnitFilter(0, (1 << (c_targetFilterStasis - 32)), 0, 0);
    libAIAI_gv_uF_TowerAI_Required_Visible = UnitFilter((1 << c_targetFilterVisible), 0, 0, 0);
    libAIAI_gv_uF_TowerAI_Required_Ignored = UnitFilter((1 << c_targetFilterArmored), 0, 0, 0);
    for (init_i = 0; init_i <= libAIAI_gv_towerInfoMaxTowersCount; init_i += 1) {
        libAIAI_gv_towerInfo[init_i].lv_textTag = c_textTagNone;
    }
    libAIAI_gv_uF_DefenderAI_Enemy = UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterUser1) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    for (init_i = 0; init_i <= libAIAI_gv_mercsMercsGroupsMaxCount; init_i += 1) {
        libAIAI_gv_mercsGroupInfo[init_i].lv_mercGroup = UnitGroupEmpty();
        libAIAI_gv_mercsGroupInfo[init_i].lv_groupIsFree = true;
        for (init_i1 = 0; init_i1 <= libAIAI_gv_mercAIMaxMercsperGroup; init_i1 += 1) {
            libAIAI_gv_mercsGroupInfo[init_i].lv_mercState[init_i1] = libAIAI_ge_AIStates_Nothing;
        }
        for (init_i1 = 0; init_i1 <= libAIAI_gv_mercAIMaxMercsperGroup; init_i1 += 1) {
            libAIAI_gv_mercsGroupInfo[init_i].lv_mercNextPointNumber[init_i1] = 1;
        }
        for (init_i1 = 0; init_i1 <= libAIAI_gv_mercAIMaxMercsperGroup; init_i1 += 1) {
            libAIAI_gv_mercsGroupInfo[init_i].lv_mercPreviousPointCampPoint[init_i1] = true;
        }
    }
    libAIAI_gv_jungleDefendersGroup = UnitGroupEmpty();
    libAIAI_gv_defRespawnTimers.lv_easy = 60.0;
    libAIAI_gv_defRespawnTimers.lv_medium = 120.0;
    libAIAI_gv_defRespawnTimers.lv_elite = 180.0;
    libAIAI_gv_defRespawnTimers.lv_boss = 270.0;
    for (init_i = 0; init_i <= libAIAI_gv_defMaxCamps; init_i += 1) {
        libAIAI_gv_defenderGroupInfo[init_i].lv_defendersGroup = UnitGroupEmpty();
        libAIAI_gv_defenderGroupInfo[init_i].lv_textTagLevel = c_textTagNone;
        libAIAI_gv_defenderGroupInfo[init_i].lv_state = libAIAI_ge_DefenderAIState_Idle;
        libAIAI_gv_defenderGroupInfo[init_i].lv_targetUnitGroup = UnitGroupEmpty();
        for (init_i1 = 0; init_i1 <= libAIAI_gv_jungleMaxUnitsperGroup; init_i1 += 1) {
            libAIAI_gv_defenderGroupInfo[init_i].lv_defenderState[init_i1] = libAIAI_ge_DefenderAIState_Idle;
        }
    }
    for (init_i = 0; init_i <= libAIAI_gv_mapMAIMaxUnits; init_i += 1) {
        libAIAI_gv_mapMAIUnitInfo[init_i].lv_state = libAIAI_ge_AIStates_HoldPosition;
        libAIAI_gv_mapMAIUnitInfo[init_i].lv_debugTextTag = c_textTagNone;
    }
}

// Presets
// Functions
bool libAIAI_gf_SupportAIAIUnitMINIONHasalivenonHeroTarget (unit lp_aIUnit) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_index = libAIAI_gf_MinionAIGetMinionIndex(lp_aIUnit);

    // Implementation
    if ((libAIAI_gv_minionInfo[lv_index].lv_lockStructureTargetUnit == true)) {
        if ((UnitIsAlive(libAIAI_gv_minionInfo[lv_index].lv_targetUnit) == true) && ((UnitTypeTestAttribute(UnitGetType(libAIAI_gv_minionInfo[lv_index].lv_targetUnit), c_unitAttributeBiological) == true) || (UnitTypeTestAttribute(UnitGetType(libAIAI_gv_minionInfo[lv_index].lv_targetUnit), c_unitAttributeStructure) == true) || (UnitTypeTestAttribute(UnitGetType(libAIAI_gv_minionInfo[lv_index].lv_targetUnit), c_unitAttributeSummoned) == true))) {
            return true;
        }

    }
    else {
        if ((UnitIsAlive(libAIAI_gv_minionInfo[lv_index].lv_targetUnit) == true) && ((UnitTypeTestAttribute(UnitGetType(libAIAI_gv_minionInfo[lv_index].lv_targetUnit), c_unitAttributeBiological) == true) || (UnitTypeTestAttribute(UnitGetType(libAIAI_gv_minionInfo[lv_index].lv_targetUnit), c_unitAttributeSummoned) == true))) {
            return true;
        }

    }
    return false;
}

bool libAIAI_gf_SupportAIAnyEnemyMinionsInRangeOfUnit (unit lp_minionIndex, fixed lp_range) {
    // Variable Declarations
    unitgroup lv_enemyMinions;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyMinions = UnitGroupEmpty();

    // Implementation
    lv_enemyMinions = UnitGroupSearch(null, UnitGetOwner(lp_minionIndex), UnitGetPosition(lp_minionIndex), lp_range, libAIAI_gv_uF_MinionAI_EnemyMinions, 0);
    if ((UnitGroupCount(lv_enemyMinions, c_unitCountAlive) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_SupportAIAnyEnemySummonsInRangeOfUnit (unit lp_minionIndex, fixed lp_range) {
    // Variable Declarations
    unitgroup lv_enemyMinions;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyMinions = UnitGroupEmpty();

    // Implementation
    lv_enemyMinions = UnitGroupSearch(null, UnitGetOwner(lp_minionIndex), UnitGetPosition(lp_minionIndex), lp_range, libAIAI_gv_uF_MinionAI_AnyEnemyMinions2, 0);
    return (UnitGroupCount(lv_enemyMinions, c_unitCountAlive) > 0);
}

bool libAIAI_gf_SupportAIAnyEnemyStructuresInRangeOfUnit (unit lp_minionIndex, fixed lp_range) {
    // Variable Declarations
    unitgroup lv_enemyMinions;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyMinions = UnitGroupEmpty();

    // Implementation
    lv_enemyMinions = UnitGroupSearch(null, UnitGetOwner(lp_minionIndex), UnitGetPosition(lp_minionIndex), lp_range, libAIAI_gv_uF_MinionAI_EnemyStructure, 0);
    if ((UnitGroupCount(lv_enemyMinions, c_unitCountAlive) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_SupportAIAnyEnemyHeroesInRangeOfUnit (unit lp_minionIndex, fixed lp_range) {
    // Variable Declarations
    unitgroup lv_enemyMinions;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyMinions = UnitGroupEmpty();

    // Implementation
    lv_enemyMinions = UnitGroupSearch(null, UnitGetOwner(lp_minionIndex), UnitGetPosition(lp_minionIndex), lp_range, libAIAI_gv_uF_MinionAI_EnemyHero, 0);
    if ((UnitGroupCount(lv_enemyMinions, c_unitCountAlive) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_SupportAIEnemyCoreInRangeOfUnit (unit lp_minionIndex, fixed lp_range) {
    // Variable Declarations
    int lv_team;
    unitgroup lv_enemyMinions;
    int lv_enemyTeam;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_team = libGame_gf_PlayerGetPlayerTeam(UnitGetOwner(lp_minionIndex));
    lv_enemyMinions = UnitGroupEmpty();

    // Implementation
    lv_enemyTeam = (3 - lv_team);
    if ((DistanceBetweenPoints(UnitGetPosition(lp_minionIndex), UnitGetPosition(libGame_gv_teams[lv_enemyTeam].lv_core)) <= lp_range)) {
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_SupportAIEXPAnyEnemyHeroesInRangeOfUnit (unit lp_minionIndex, fixed lp_range) {
    // Variable Declarations
    unitgroup lv_enemyMinions;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyMinions = UnitGroupEmpty();

    // Implementation
    lv_enemyMinions = UnitGroupSearch(null, UnitGetOwner(lp_minionIndex), UnitGetPosition(lp_minionIndex), lp_range, libAIAI_gv_uF_MinionAI_EnemyHeroForExp, 0);
    if ((UnitGroupCount(lv_enemyMinions, c_unitCountAlive) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_SupportAIAnyEnemySymbioteInRangeOfUnit (unit lp_minionIndex, fixed lp_range) {
    // Variable Declarations
    unitgroup lv_enemyMinions;
    unitgroup lv_enemySimbiot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyMinions = UnitGroupEmpty();
    lv_enemySimbiot = UnitGroupEmpty();

    // Implementation
    lv_enemySimbiot = UnitGroupSearch("AbathurSymbiote", UnitGetOwner(lp_minionIndex), UnitGetPosition(lp_minionIndex), lp_range, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterBiological) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    if ((UnitGroupCount(lv_enemySimbiot, c_unitCountAlive) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_SupportAIAnyEnemyPlayerHeroorSymbioteInRangeOfUnit (int lp_player, unit lp_minionIndex, fixed lp_range) {
    // Variable Declarations
    unitgroup lv_enemyMinions;
    unitgroup lv_enemySimbiot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyMinions = UnitGroupEmpty();
    lv_enemySimbiot = UnitGroupEmpty();

    // Implementation
    lv_enemySimbiot = UnitGroupSearch("AbathurSymbiote", UnitGetOwner(lp_minionIndex), UnitGetPosition(lp_minionIndex), lp_range, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterBiological) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    lv_enemyMinions = UnitGroupSearch(null, UnitGetOwner(lp_minionIndex), UnitGetPosition(lp_minionIndex), lp_range, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterBiological) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    if (((UnitGroupCount(lv_enemyMinions, c_unitCountAlive) > 0) || (UnitGroupCount(lv_enemySimbiot, c_unitCountAlive) > 0)) && ((lp_player == UnitGetOwner(UnitGroupUnit(lv_enemySimbiot, 1))) || (lp_player == UnitGetOwner(UnitGroupUnit(lv_enemyMinions, 1))))) {
        return true;
    }
    else {
        return false;
    }
}

unit libAIAI_gf_SupportAIGetNearestEnemyMinionInRangeOfUnit (unit lp_minionIndex, fixed lp_range) {
    // Variable Declarations
    point lv_minionPosition;
    unitgroup lv_scanGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_minionPosition = UnitGetPosition(lp_minionIndex);
    lv_scanGroup = UnitGroupEmpty();

    // Implementation
    lv_scanGroup = UnitGroupSearch(null, UnitGetOwner(lp_minionIndex), lv_minionPosition, lp_range, libAIAI_gv_uF_MinionAI_EnemyMinions, 0);
    if ((UnitGroupCount(lv_scanGroup, c_unitCountAlive) <= 0)) {
        return null;
    }

    return UnitGroupClosestToPoint(lv_scanGroup, lv_minionPosition);
}

unit libAIAI_gf_SupportAIGetNearestEnemyMinionSummonInRangeOfUnit (unit lp_minionIndex, fixed lp_range) {
    // Variable Declarations
    point lv_minionPosition;
    unitgroup lv_scanGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_minionPosition = UnitGetPosition(lp_minionIndex);
    lv_scanGroup = UnitGroupEmpty();

    // Implementation
    lv_scanGroup = UnitGroupSearch(null, UnitGetOwner(lp_minionIndex), lv_minionPosition, lp_range, libAIAI_gv_uF_MinionAI_EnemyMinions, 0);
    UnitGroupAddUnitGroup(lv_scanGroup, UnitGroupSearch(null, UnitGetOwner(lp_minionIndex), lv_minionPosition, lp_range, libAIAI_gv_uF_MinionAI_AnyEnemyMinions2, 0));
    if ((UnitGroupCount(lv_scanGroup, c_unitCountAlive) <= 0)) {
        return null;
    }

    return UnitGroupClosestToPoint(lv_scanGroup, lv_minionPosition);
}

unit libAIAI_gf_SupportAIGetNearestEnemySummonInRangeOfUnit (unit lp_minionIndex, fixed lp_range) {
    // Variable Declarations
    point lv_minionPosition;
    unitgroup lv_scanGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_minionPosition = UnitGetPosition(lp_minionIndex);
    lv_scanGroup = UnitGroupEmpty();

    // Implementation
    lv_scanGroup = UnitGroupSearch(null, UnitGetOwner(lp_minionIndex), lv_minionPosition, lp_range, libAIAI_gv_uF_MinionAI_AnyEnemyMinions2, 0);
    if ((UnitGroupCount(lv_scanGroup, c_unitCountAlive) <= 0)) {
        return null;
    }

    return UnitGroupClosestToPoint(lv_scanGroup, lv_minionPosition);
}

unit libAIAI_gf_SupportAIGetNearestEnemyStructureInRangeOfUnit (unit lp_minionIndex, fixed lp_range) {
    // Variable Declarations
    point lv_minionPosition;
    unitgroup lv_scanGroup;

    // Automatic Variable Declarations
    unitgroup auto360492E3_g;
    int auto360492E3_u;
    unit auto360492E3_var;

    // Variable Initialization
    lv_minionPosition = UnitGetPosition(lp_minionIndex);
    lv_scanGroup = UnitGroupEmpty();

    // Implementation
    lv_scanGroup = UnitGroupSearch(null, UnitGetOwner(lp_minionIndex), lv_minionPosition, lp_range, libAIAI_gv_uF_MinionAI_EnemyStructure, 0);
    auto360492E3_g = lv_scanGroup;
    auto360492E3_u = UnitGroupCount(auto360492E3_g, c_unitCountAll);
    for (;; auto360492E3_u -= 1) {
        auto360492E3_var = UnitGroupUnitFromEnd(auto360492E3_g, auto360492E3_u);
        if (auto360492E3_var == null) { break; }
        if ((UnitTypeTestFlag(UnitGetType(auto360492E3_var), c_unitFlagTownStructureWall) == true)) {
            UnitGroupRemove(lv_scanGroup, auto360492E3_var);
        }
    }
    if ((UnitGroupCount(lv_scanGroup, c_unitCountAlive) <= 0)) {
        return null;
    }

    return UnitGroupClosestToPoint(lv_scanGroup, lv_minionPosition);
}

unit libAIAI_gf_SupportAIGetNearestEnemyHeroInRangeOfUnit (unit lp_minionIndex, fixed lp_range) {
    // Variable Declarations
    point lv_minionPosition;
    unitgroup lv_scanGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_minionPosition = UnitGetPosition(lp_minionIndex);
    lv_scanGroup = UnitGroupEmpty();

    // Implementation
    lv_scanGroup = UnitGroupSearch(null, UnitGetOwner(lp_minionIndex), lv_minionPosition, lp_range, libAIAI_gv_uF_MinionAI_EnemyHero, 0);
    if ((UnitGroupCount(lv_scanGroup, c_unitCountAlive) <= 0)) {
        return null;
    }

    return UnitGroupClosestToPoint(lv_scanGroup, lv_minionPosition);
}

point libAIAI_gf_SupportAIGetClosestPointFromLaneForUnit (int lp_lane, unit lp_unit) {
    // Variable Declarations
    int lv_maxpointsCount;
    point lv_closestPoint;
    int lv_i;

    // Automatic Variable Declarations
    int autoE5E8E47E_ae;

    // Variable Initialization

    // Implementation
    lv_closestPoint = libGame_gv_laneInfo.lv_lanePoints[lp_lane][1];
    autoE5E8E47E_ae = libGame_gv_laneInfo.lv_lanePointsCount[lp_lane];
    lv_i = 1;
    for ( ; lv_i <= autoE5E8E47E_ae ; lv_i += 1 ) {
        if ((DistanceBetweenPoints(UnitGetPosition(lp_unit), libGame_gv_laneInfo.lv_lanePoints[lp_lane][lv_i]) < DistanceBetweenPoints(UnitGetPosition(lp_unit), lv_closestPoint))) {
            lv_closestPoint = libGame_gv_laneInfo.lv_lanePoints[lp_lane][lv_i];
        }
    }
    return lv_closestPoint;
}

int libAIAI_gf_SupportAIGetNumberofClosestPointFromLaneForUnit (int lp_lane, unit lp_unit) {
    // Variable Declarations
    int lv_maxpointsCount;
    point lv_closestPoint;
    int lv_i;
    int lv_number;

    // Automatic Variable Declarations
    int auto6CF332B4_n;
    int auto6CF332B4_i;

    // Variable Initialization
    lv_maxpointsCount = libGame_gv_laneInfo.lv_lanePointsCount[lp_lane];

    // Implementation
    lv_closestPoint = libGame_gv_laneInfo.lv_lanePoints[lp_lane][1];
    lv_number = 1;
    auto6CF332B4_n = lv_maxpointsCount;
    for (auto6CF332B4_i = 1; auto6CF332B4_i <= auto6CF332B4_n; auto6CF332B4_i += 1) {
        lv_i += 1;
        if ((DistanceBetweenPoints(UnitGetPosition(lp_unit), libGame_gv_laneInfo.lv_lanePoints[lp_lane][lv_i]) < DistanceBetweenPoints(UnitGetPosition(lp_unit), lv_closestPoint))) {
            lv_closestPoint = libGame_gv_laneInfo.lv_lanePoints[lp_lane][lv_i];
            lv_number = lv_i;
        }

    }
    return lv_number;
}

int libAIAI_gf_SupportAIGetClosestLaneForUnit (unit lp_unit) {
    // Variable Declarations
    int lv_i;
    int lv_closestLane;
    point lv_closestPointLaneTop;
    point lv_closestPointLaneMid;
    point lv_closestPointLaneBot;
    fixed lv_distanceUnitandTop;
    fixed lv_distanceUnitandMid;
    fixed lv_distanceUnitandBot;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_closestPointLaneTop = libAIAI_gf_SupportAIGetClosestPointFromLaneForUnit(1, lp_unit);
    lv_closestPointLaneMid = libAIAI_gf_SupportAIGetClosestPointFromLaneForUnit(2, lp_unit);
    lv_closestPointLaneBot = libAIAI_gf_SupportAIGetClosestPointFromLaneForUnit(3, lp_unit);
    lv_distanceUnitandTop = DistanceBetweenPoints(UnitGetPosition(lp_unit), lv_closestPointLaneTop);
    lv_distanceUnitandMid = DistanceBetweenPoints(UnitGetPosition(lp_unit), lv_closestPointLaneMid);
    lv_distanceUnitandBot = DistanceBetweenPoints(UnitGetPosition(lp_unit), lv_closestPointLaneBot);
    if ((lv_distanceUnitandTop <= lv_distanceUnitandMid) && (lv_distanceUnitandTop <= lv_distanceUnitandBot)) {
        lv_closestLane = 1;
    }
    else if ((lv_distanceUnitandMid <= lv_distanceUnitandTop) && (lv_distanceUnitandMid <= lv_distanceUnitandBot)) {
        lv_closestLane = 2;
    }
    else if ((lv_distanceUnitandBot <= lv_distanceUnitandMid) && (lv_distanceUnitandBot <= lv_distanceUnitandTop)) {
        lv_closestLane = 3;
    }
    return lv_closestLane;
}

int libAIAI_gf_SupportAIGetClosestSpawnPointLANE (unit lp_unit) {
    // Variable Declarations
    int lv_team;
    int lv_i;
    int lv_closestLane;
    point lv_closestPointLaneTop;
    point lv_closestPointLaneMid;
    point lv_closestPointLaneBot;
    fixed lv_distanceUnitandTop;
    fixed lv_distanceUnitandMid;
    fixed lv_distanceUnitandBot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_closestPointLaneTop = libAIAI_gf_SupportAIGetClosestPointFromLaneForUnit(1, lp_unit);
    lv_closestPointLaneMid = libAIAI_gf_SupportAIGetClosestPointFromLaneForUnit(2, lp_unit);
    lv_closestPointLaneBot = libAIAI_gf_SupportAIGetClosestPointFromLaneForUnit(3, lp_unit);

    // Implementation
    if ((UnitGetOwner(EventUnit()) == libCore_gv_cOMPUTER_Blue)) {
        lv_team = libGame_gv_teamOrderIndex_C;
    }
    else {
        lv_team = libGame_gv_teamChaosIndex_C;
    }
    lv_closestPointLaneTop = libGame_gv_laneInfo.lv_laneMinionSpawn[lv_team][1];
    lv_closestPointLaneMid = libGame_gv_laneInfo.lv_laneMinionSpawn[lv_team][2];
    lv_closestPointLaneBot = libGame_gv_laneInfo.lv_laneMinionSpawn[lv_team][3];
    lv_distanceUnitandTop = DistanceBetweenPoints(UnitGetPosition(lp_unit), lv_closestPointLaneTop);
    lv_distanceUnitandMid = DistanceBetweenPoints(UnitGetPosition(lp_unit), lv_closestPointLaneMid);
    lv_distanceUnitandBot = DistanceBetweenPoints(UnitGetPosition(lp_unit), lv_closestPointLaneBot);
    if ((lv_distanceUnitandTop < lv_distanceUnitandMid) && (lv_distanceUnitandTop < lv_distanceUnitandBot)) {
        lv_closestLane = 1;
    }
    else if ((lv_distanceUnitandMid < lv_distanceUnitandTop) && (lv_distanceUnitandMid < lv_distanceUnitandBot)) {
        lv_closestLane = 2;
    }
    else if ((lv_distanceUnitandBot < lv_distanceUnitandMid) && (lv_distanceUnitandBot < lv_distanceUnitandTop)) {
        lv_closestLane = 3;
    }
    return lv_closestLane;
}

point libAIAI_gf_SupportAIGetClosestPointFromLaneFromPointForTeam (int lp_team, int lp_lane, point lp_point) {
    // Variable Declarations
    int lv_closestDistance;
    int lv_itDistance;
    point lv_closestPoint;
    int lv_i;

    // Automatic Variable Declarations
    int autoA1F62D38_ae;

    // Variable Initialization

    // Implementation
    lv_closestDistance = PointPathingCost(lp_point, libGame_gv_laneInfo.lv_lanePointsForTeam[lp_team][lp_lane][1]);
    autoA1F62D38_ae = libGame_gv_laneInfo.lv_lanePointsCount[lp_lane];
    lv_i = 2;
    for ( ; lv_i <= autoA1F62D38_ae ; lv_i += 1 ) {
        lv_itDistance = PointPathingCost(lp_point, libGame_gv_laneInfo.lv_lanePointsForTeam[lp_team][lp_lane][lv_i]);
        if ((lv_itDistance < lv_closestDistance)) {
            lv_closestPoint = libGame_gv_laneInfo.lv_lanePointsForTeam[lp_team][lp_lane][lv_i];
            lv_closestDistance = PointPathingCost(lp_point, lv_closestPoint);
        }
    }
    return lv_closestPoint;
}

int libAIAI_gf_SupportAIGetNumberofClosestPointofLaneFromPointForTeam (int lp_team, int lp_lane, point lp_point) {
    // Variable Declarations
    int lv_closestDistance;
    int lv_itDistance;
    point lv_closestPoint;
    int lv_i;
    int lv_pointNumber;

    // Automatic Variable Declarations
    int autoE7B015C6_ae;

    // Variable Initialization

    // Implementation
    lv_closestPoint = libGame_gv_laneInfo.lv_lanePointsForTeam[lp_team][lp_lane][1];
    lv_closestDistance = PointPathingCost(lp_point, lv_closestPoint);
    lv_pointNumber = 1;
    autoE7B015C6_ae = libGame_gv_laneInfo.lv_lanePointsCount[lp_lane];
    lv_i = 2;
    for ( ; lv_i <= autoE7B015C6_ae ; lv_i += 1 ) {
        lv_itDistance = PointPathingCost(lp_point, libGame_gv_laneInfo.lv_lanePointsForTeam[lp_team][lp_lane][lv_i]);
        if ((lv_itDistance < lv_closestDistance)) {
            lv_closestPoint = libGame_gv_laneInfo.lv_lanePointsForTeam[lp_team][lp_lane][lv_i];
            lv_closestDistance = lv_itDistance;
            lv_pointNumber = lv_i;
        }
    }
    return lv_pointNumber;
}

bool libAIAI_gf_SupportAIRegionAnyEnemyMapObjectInRegionforUnit (unit lp_minionIndex, region lp_region) {
    // Variable Declarations
    unitgroup lv_enemyMinions;
    int lv_team;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyMinions = UnitGroupEmpty();

    // Implementation
    lv_team = libGame_gf_PlayerGetPlayerTeam(UnitGetOwner(EventUnit()));
    lv_enemyMinions = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(lp_minionIndex), c_unitAllianceEnemy, lp_region, UnitFilter((1 << c_targetFilterUser1), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_enemyMinions, c_unitCountAlive) > 0)) {
        return true;
    }

    return false;
}

bool libAIAI_gf_SupportAIRegionAnyEnemySummonsInRegionforUnit (unit lp_minionIndex, region lp_region) {
    // Variable Declarations
    unitgroup lv_enemyMinions;

    // Automatic Variable Declarations
    playergroup auto21B0F64C_g;
    int auto21B0F64C_var;

    // Variable Initialization
    lv_enemyMinions = UnitGroupEmpty();

    // Implementation
    auto21B0F64C_g = libGame_gv_teams[libGame_gf_EnemyTeamNumberOfPlayer(UnitGetOwner(lp_minionIndex))].lv_teamPlayerGroupNoNPCPlayers;
    auto21B0F64C_var = -1;
    while (true) {
        auto21B0F64C_var = PlayerGroupNextPlayer(auto21B0F64C_g, auto21B0F64C_var);
        if (auto21B0F64C_var < 0) { break; }
        lv_enemyMinions = UnitGroup(null, auto21B0F64C_var, lp_region, libAIAI_gv_uF_MinionAI_AnyEnemyMinions2, 0);
        if ((UnitGroupCount(lv_enemyMinions, c_unitCountAlive) > 0)) {
            return true;
        }

    }
    return false;
}

bool libAIAI_gf_SupportAIRegionAnyEnemyStructuresInRegionforUnit (unit lp_minionIndex, region lp_region) {
    // Variable Declarations
    unitgroup lv_enemyMinions;

    // Automatic Variable Declarations
    playergroup auto3F1E0A7A_g;
    int auto3F1E0A7A_var;

    // Variable Initialization
    lv_enemyMinions = UnitGroupEmpty();

    // Implementation
    auto3F1E0A7A_g = libGame_gv_teams[libGame_gf_EnemyTeamNumberOfPlayer(UnitGetOwner(lp_minionIndex))].lv_teamPlayerGroupNoNPCPlayers;
    auto3F1E0A7A_var = -1;
    while (true) {
        auto3F1E0A7A_var = PlayerGroupNextPlayer(auto3F1E0A7A_g, auto3F1E0A7A_var);
        if (auto3F1E0A7A_var < 0) { break; }
        lv_enemyMinions = UnitGroup(null, auto3F1E0A7A_var, lp_region, libAIAI_gv_uF_MinionAI_EnemyStructure, 0);
        if ((UnitGroupCount(lv_enemyMinions, c_unitCountAlive) > 0)) {
            return true;
        }

    }
    return false;
}

bool libAIAI_gf_SupportAIRegionAnyEnemyHeroInRegionforUnit (unit lp_minionIndex, region lp_region) {
    // Variable Declarations
    unitgroup lv_scanGroup;

    // Automatic Variable Declarations
    playergroup auto3E1660A9_g;
    int auto3E1660A9_var;

    // Variable Initialization
    lv_scanGroup = UnitGroupEmpty();

    // Implementation
    auto3E1660A9_g = libGame_gv_teams[libGame_gf_EnemyTeamNumberOfPlayer(UnitGetOwner(lp_minionIndex))].lv_teamPlayerGroupNoNPCPlayers;
    auto3E1660A9_var = -1;
    while (true) {
        auto3E1660A9_var = PlayerGroupNextPlayer(auto3E1660A9_g, auto3E1660A9_var);
        if (auto3E1660A9_var < 0) { break; }
        lv_scanGroup = UnitGroup(null, auto3E1660A9_var, lp_region, libAIAI_gv_uF_MinionAI_EnemyHero, 0);
        if ((UnitGroupCount(lv_scanGroup, c_unitCountAlive) > 0)) {
            return true;
        }

    }
    return false;
}

unit libAIAI_gf_SupportAIRegionGetNearestEnemyMapObjectInRegionforUnit (region lp_region, unit lp_minionIndex) {
    // Variable Declarations
    unitgroup lv_scanGroup;
    unitgroup lv_mainGroup;

    // Automatic Variable Declarations
    unitgroup auto37D8DDF9_g;
    int auto37D8DDF9_u;
    unit auto37D8DDF9_var;

    // Variable Initialization
    lv_scanGroup = UnitGroupEmpty();
    lv_mainGroup = UnitGroupEmpty();

    // Implementation
    lv_mainGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(lp_minionIndex), c_unitAllianceEnemy, lp_region, UnitFilter((1 << c_targetFilterUser1), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_mainGroup, c_unitCountAlive) > 0)) {
        auto37D8DDF9_g = lv_mainGroup;
        auto37D8DDF9_u = UnitGroupCount(auto37D8DDF9_g, c_unitCountAll);
        for (;; auto37D8DDF9_u -= 1) {
            auto37D8DDF9_var = UnitGroupUnitFromEnd(auto37D8DDF9_g, auto37D8DDF9_u);
            if (auto37D8DDF9_var == null) { break; }
            if ((UnitGetOwner(auto37D8DDF9_var) == UnitGetOwner(lp_minionIndex))) {
                UnitGroupRemove(lv_mainGroup, auto37D8DDF9_var);
            }

        }
        return UnitGroupClosestToPoint(lv_mainGroup, UnitGetPosition(lp_minionIndex));
    }

    return null;
}

unit libAIAI_gf_SupportAIRegionGetNearestEnemyHeroesInRegionforUnit (region lp_region, unit lp_minionIndex) {
    // Variable Declarations
    unitgroup lv_scanGroup;
    unitgroup lv_mainGroup;

    // Automatic Variable Declarations
    playergroup auto25F7A1FE_g;
    int auto25F7A1FE_var;

    // Variable Initialization
    lv_scanGroup = UnitGroupEmpty();
    lv_mainGroup = UnitGroupEmpty();

    // Implementation
    auto25F7A1FE_g = libGame_gv_teams[libGame_gf_EnemyTeamNumberOfPlayer(UnitGetOwner(lp_minionIndex))].lv_teamPlayerGroupNoNPCPlayers;
    auto25F7A1FE_var = -1;
    while (true) {
        auto25F7A1FE_var = PlayerGroupNextPlayer(auto25F7A1FE_g, auto25F7A1FE_var);
        if (auto25F7A1FE_var < 0) { break; }
        lv_scanGroup = UnitGroup(null, auto25F7A1FE_var, lp_region, libAIAI_gv_uF_MinionAI_EnemyHero, 0);
        UnitGroupAddUnitGroup(lv_mainGroup, lv_scanGroup);
    }
    if ((UnitGroupCount(lv_mainGroup, c_unitCountAlive) > 0)) {
        return UnitGroupClosestToPoint(lv_mainGroup, UnitGetPosition(lp_minionIndex));
    }

    return null;
}

unit libAIAI_gf_SupportAIRegionGetNearestEnemySummonsInRegionforUnit (region lp_region, unit lp_minionIndex) {
    // Variable Declarations
    unitgroup lv_scanGroup;
    unitgroup lv_mainGroup;

    // Automatic Variable Declarations
    playergroup auto64F2DDF4_g;
    int auto64F2DDF4_var;

    // Variable Initialization
    lv_scanGroup = UnitGroupEmpty();
    lv_mainGroup = UnitGroupEmpty();

    // Implementation
    auto64F2DDF4_g = libGame_gv_teams[libGame_gf_EnemyTeamNumberOfPlayer(UnitGetOwner(lp_minionIndex))].lv_teamPlayerGroupNoNPCPlayers;
    auto64F2DDF4_var = -1;
    while (true) {
        auto64F2DDF4_var = PlayerGroupNextPlayer(auto64F2DDF4_g, auto64F2DDF4_var);
        if (auto64F2DDF4_var < 0) { break; }
        lv_scanGroup = UnitGroup(null, auto64F2DDF4_var, lp_region, libAIAI_gv_uF_MinionAI_AnyEnemyMinions2, 0);
        UnitGroupAddUnitGroup(lv_mainGroup, lv_scanGroup);
    }
    if ((UnitGroupCount(lv_mainGroup, c_unitCountAlive) > 0)) {
        return UnitGroupClosestToPoint(lv_mainGroup, UnitGetPosition(lp_minionIndex));
    }

    return null;
}

unit libAIAI_gf_SupportAIRegionGetNearestEnemyStructuresInRegionforUnit (region lp_region, unit lp_minionIndex) {
    // Variable Declarations
    unitgroup lv_scanGroup;
    unitgroup lv_mainGroup;

    // Automatic Variable Declarations
    playergroup auto8196DECA_g;
    int auto8196DECA_var;

    // Variable Initialization
    lv_scanGroup = UnitGroupEmpty();
    lv_mainGroup = UnitGroupEmpty();

    // Implementation
    auto8196DECA_g = libGame_gv_teams[libGame_gf_EnemyTeamNumberOfPlayer(UnitGetOwner(lp_minionIndex))].lv_teamPlayerGroupNoNPCPlayers;
    auto8196DECA_var = -1;
    while (true) {
        auto8196DECA_var = PlayerGroupNextPlayer(auto8196DECA_g, auto8196DECA_var);
        if (auto8196DECA_var < 0) { break; }
        lv_scanGroup = UnitGroup(null, auto8196DECA_var, lp_region, libAIAI_gv_uF_MinionAI_EnemyStructure, 0);
        UnitGroupAddUnitGroup(lv_mainGroup, lv_scanGroup);
    }
    if ((UnitGroupCount(lv_mainGroup, c_unitCountAlive) > 0)) {
        return UnitGroupClosestToPoint(lv_mainGroup, UnitGetPosition(lp_minionIndex));
    }

    return null;
}

bool libAIAI_gf_SupportAISourceandTargetareBehindorInFrontoftheGate (unit lp_targetUnit, unit lp_sourceUnit) {
    // Variable Declarations
    fixed lv_distance_Source_Target;
    fixed lv_distance_Source_Gate_Front;
    fixed lv_distance_Source_Gate_Behind;
    fixed lv_distance_Target_Gate_Front;
    fixed lv_distance_Target_Gate_Behind;
    unitgroup lv_scanGroup;
    point lv_sourcePos;
    point lv_targetPos;
    fixed lv_gateFacing;
    unit lv_gateUnit;
    point lv_gatePos;
    point lv_inFrontOfGate;
    point lv_behindOfGate;
    bool lv_targetBehindTheGate;
    bool lv_sourceBehindTheGate;

    // Automatic Variable Declarations
    unitgroup autoE7185CDD_g;
    int autoE7185CDD_u;
    unit autoE7185CDD_var;

    // Variable Initialization
    lv_scanGroup = UnitGroupEmpty();

    // Implementation
    lv_targetPos = UnitGetPosition(lp_targetUnit);
    lv_scanGroup = UnitGroup(null, c_playerAny, RegionCircle(lv_targetPos, 5.0), libAIAI_gv_uF_MinionAI_EnemyStructure, 0);
    autoE7185CDD_g = lv_scanGroup;
    autoE7185CDD_u = UnitGroupCount(autoE7185CDD_g, c_unitCountAll);
    for (;; autoE7185CDD_u -= 1) {
        autoE7185CDD_var = UnitGroupUnitFromEnd(autoE7185CDD_g, autoE7185CDD_u);
        if (autoE7185CDD_var == null) { break; }
        if ((UnitTypeTestFlag(UnitGetType(autoE7185CDD_var), c_unitFlagTownStructureGate) == true)) {
            lv_gateUnit = autoE7185CDD_var;
            break;
        }
    }
    if ((lv_gateUnit == null)) {
        return true;
    }
    lv_sourcePos = UnitGetPosition(lp_sourceUnit);
    lv_gatePos = UnitGetPosition(lv_gateUnit);
    lv_inFrontOfGate = PointWithOffsetPolar(lv_gatePos, -1.0, UnitGetFacing(lv_gateUnit));
    lv_behindOfGate = PointWithOffsetPolar(lv_gatePos, 1.0, UnitGetFacing(lv_gateUnit));
    lv_distance_Target_Gate_Front = DistanceBetweenPoints(lv_inFrontOfGate, lv_targetPos);
    lv_distance_Target_Gate_Behind = DistanceBetweenPoints(lv_behindOfGate, lv_targetPos);
    lv_distance_Source_Gate_Front = DistanceBetweenPoints(lv_inFrontOfGate, lv_sourcePos);
    lv_distance_Source_Gate_Behind = DistanceBetweenPoints(lv_behindOfGate, lv_sourcePos);
    if ((lv_distance_Target_Gate_Behind < lv_distance_Target_Gate_Front)) {
        lv_targetBehindTheGate = true;
    }
    if ((lv_distance_Source_Gate_Behind < lv_distance_Source_Gate_Front)) {
        lv_sourceBehindTheGate = true;
    }
    if ((lv_targetBehindTheGate == lv_sourceBehindTheGate)) {
        return true;
    }
    return false;
}

bool libAIAI_gf_UnitIsGate (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "Building_Gate15_BLUR") || (UnitGetType(lp_unit) == "Building_Gate15BRUL") || (UnitGetType(lp_unit) == "Building_GateBLUR") || (UnitGetType(lp_unit) == "Building_GateBRUL") || (UnitGetType(lp_unit) == "Building_GateVertical") || (UnitGetType(lp_unit) == "Building_GateVertical_180"))) {
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_UnitIsWall (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "Building_Wall_0") || (UnitGetType(lp_unit) == "Building_Wall_1") || (UnitGetType(lp_unit) == "Building_Wall_2") || (UnitGetType(lp_unit) == "Building_Wall_3") || (UnitGetType(lp_unit) == "Building_Wall_4") || (UnitGetType(lp_unit) == "Building_Wall_5") || (UnitGetType(lp_unit) == "Building_Wall_6") || (UnitGetType(lp_unit) == "Building_Wall_7") || (UnitGetType(lp_unit) == "Building_Wall_8") || (UnitGetType(lp_unit) == "Building_Wall_9") || (UnitGetType(lp_unit) == "Building_Wall_10") || (UnitGetType(lp_unit) == "Building_Wall_11") || (UnitGetType(lp_unit) == "Building_Wall_12") || (UnitGetType(lp_unit) == "Building_Wall_13") || (UnitGetType(lp_unit) == "Building_Wall_14") || (UnitGetType(lp_unit) == "Building_Wall_15") || (UnitGetType(lp_unit) == "Building_Wall_16") || (UnitGetType(lp_unit) == "Building_Wall_17") || (UnitGetType(lp_unit) == "Building_Wall_18") || (UnitGetType(lp_unit) == "Building_Wall_19") || (UnitGetType(lp_unit) == "Building_Wall_20") || (UnitGetType(lp_unit) == "Building_Wall_21") || (UnitGetType(lp_unit) == "Building_Wall_22") || (UnitGetType(lp_unit) == "Building_Wall_23"))) {
        return true;
    }
    else {
        return false;
    }
}

void libAIAI_gf_MinionAIFreeMinionIndex (int lp_minionIndex) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto3D48E347_ae = 1;
    const int auto3D48E347_ai = -1;

    // Variable Initialization

    // Implementation
    if ((lp_minionIndex <= 0)) {
        return ;
    }

    UnitSetCustomValue(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_MinionIndex), 0.0);
    libAIAI_gv_minionInfo[lp_minionIndex].lv_minionIsAlive = false;
    libAIAI_gv_minionInfo[lp_minionIndex].lv_minionNextPoint = null;
    libAIAI_gv_minionInfo[lp_minionIndex].lv_minionPreviousPoint = null;
    libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit = null;
    libAIAI_gv_minionInfo[lp_minionIndex].lv_targetUnit = null;
    libAIAI_gv_minionInfo[lp_minionIndex].lv_minionPosition = null;
    libAIAI_gv_minionInfo[lp_minionIndex].lv_numberofNextPoint = 3;
    libAIAI_gv_minionInfo[lp_minionIndex].lv_numberofPreviousPoint = 2;
    libAIAI_gv_minionInfo[lp_minionIndex].lv_leashing = false;
    libAIAI_gv_minionInfo[lp_minionIndex].lv_battleStandardPoint = null;
    libAIAI_gv_minionInfo[lp_minionIndex].lv_battleStandardLastUpdate = 0.0;
    libAIAI_gv_minionInfo[lp_minionIndex].lv_state222222222 = libAIAI_ge_AIStates_HoldPosition;
    libAIAI_gv_minionInfo[lp_minionIndex].lv_lane = 0;
    libAIAI_gv_minionInfo[lp_minionIndex].lv_team = 0;
    libAIAI_gv_minionInfo[lp_minionIndex].lv_monitoringText = null;
    if ((lp_minionIndex == libAIAI_gv_minionAIActiveMinionsUpperBound)) {
        lv_i = (libAIAI_gv_minionAIActiveMinionsUpperBound - 1);
        for ( ; ( (auto3D48E347_ai >= 0 && lv_i <= auto3D48E347_ae) || (auto3D48E347_ai < 0 && lv_i >= auto3D48E347_ae) ) ; lv_i += auto3D48E347_ai ) {
            if ((libAIAI_gv_minionInfo[lv_i].lv_minionIsAlive == true)) {
                libAIAI_gv_minionAIActiveMinionsUpperBound = lv_i;
                return ;
            }

        }
    }

}

void libAIAI_gf_MinionAIChangeAttackState () {
    // Automatic Variable Declarations
}

bool libAIAI_gf_MinionAIIsValidTarget (int lp_minionIndex, unit lp_targetUnit) {
    // Variable Declarations
    order lv_order;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_order = OrderTargetingUnit(AbilityCommand("AttackAlly", 0), lp_targetUnit);
    if ((UnitOrderIsValid(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit, lv_order) == true)) {
        return true;
    }
    else {
        return false;
    }
}

unit libAIAI_gf_MinionAIGetHerotoFollow (int lp_minionIndex) {
    // Variable Declarations
    int lv_owningPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitGetOwner(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit) <= libCore_gv_bALMaxPlayers)) {
        lv_owningPlayer = UnitGetOwner(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit);
        if ((UnitIsValid(libGame_gv_players[lv_owningPlayer].lv_heroUnit) == true)) {
            return libGame_gv_players[lv_owningPlayer].lv_heroUnit;
        }
    }
    return null;
}

void libAIAI_gf_MinionAIUpdateBattleStandardDataForMinion (int lp_minionIndex) {
    // Variable Declarations
    fixed lv_missionTime;
    point lv_minionPosition;
    point lv_nextWaypoint;
    point lv_previousWaypoint;
    fixed lv_distanceBetweenWaypoints;
    fixed lv_angleBetweenPreviousPointandMinionPosition;
    fixed lv_battleStandardDistance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libAIAI_gv_minionInfo[lp_minionIndex].lv_lane > libGame_gv_laneInfo.lv_laneCount)) {
        return ;
    }

    lv_missionTime = GameGetMissionTime();
    if ((libAIAI_gv_minionInfo[lp_minionIndex].lv_battleStandardLastUpdate >= lv_missionTime)) {
        return ;
    }

    lv_minionPosition = libAIAI_gv_minionInfo[lp_minionIndex].lv_minionPosition;
    lv_nextWaypoint = libAIAI_gf_MinionAIGetNextWaypointForMinion(lp_minionIndex);
    lv_previousWaypoint = libAIAI_gf_MinionAIGetPreviousWaypointForMinion(lp_minionIndex);
    lv_distanceBetweenWaypoints = DistanceBetweenPoints(lv_previousWaypoint, lv_nextWaypoint);
    lv_angleBetweenPreviousPointandMinionPosition = (AngleBetweenPoints(lv_previousWaypoint, lv_minionPosition) * AngleBetweenPoints(lv_previousWaypoint, lv_nextWaypoint));
    lv_battleStandardDistance = (Cos(lv_angleBetweenPreviousPointandMinionPosition) * DistanceBetweenPoints(lv_previousWaypoint, lv_minionPosition));
    if ((lv_battleStandardDistance < 0.0)) {
        lv_battleStandardDistance = 0.0;
    }

    libAIAI_gv_minionInfo[lp_minionIndex].lv_battleStandardPoint = libNtve_gf_PointOffsetTowardsPoint(lv_previousWaypoint, lv_battleStandardDistance, lv_nextWaypoint);
    libAIAI_gv_minionInfo[lp_minionIndex].lv_battleStandardLastUpdate = lv_missionTime;
}

void libAIAI_gf_MinionAIAdvanceMinionToNextWaypoint (int lp_minionIndex) {
    // Variable Declarations
    int lv_nextWaypoint;
    int lv_waypointCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_nextWaypoint = libAIAI_gv_minionInfo[lp_minionIndex].lv_numberofNextPoint;
    libAIAI_gv_minionInfo[lp_minionIndex].lv_battleStandardPoint = libAIAI_gf_MinionAIGetNextWaypointForMinion(lp_minionIndex);
    libAIAI_gv_minionInfo[lp_minionIndex].lv_battleStandardLastUpdate = GameGetMissionTime();
    lv_waypointCount = libAIAI_gf_MinionAIGetWaypointCount(lp_minionIndex);
    if ((libAIAI_gv_minionInfo[lp_minionIndex].lv_team == libGame_gv_teamOrderIndex_C)) {
        if ((lv_nextWaypoint < (lv_waypointCount - 1))) {
            lv_nextWaypoint += 1;
            libAIAI_gv_minionInfo[lp_minionIndex].lv_numberofNextPoint = lv_nextWaypoint;
        }
    }
    else {
        if ((lv_nextWaypoint == 0)) {
            libAIAI_gv_minionInfo[lp_minionIndex].lv_numberofNextPoint = lv_waypointCount;
        }
        else {
            if ((lv_nextWaypoint > 2)) {
                lv_nextWaypoint -= 1;
                libAIAI_gv_minionInfo[lp_minionIndex].lv_numberofNextPoint = lv_nextWaypoint;
            }
        }
    }
}

point libAIAI_gf_MinionAIGetWaypointForMinion (int lp_minionIndex, int lp_waypointIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gf_LaneIndexisValid(libAIAI_gv_minionInfo[lp_minionIndex].lv_lane) == true)) {
        return libGame_gv_laneInfo.lv_lanePoints[libAIAI_gv_minionInfo[lp_minionIndex].lv_lane][lp_waypointIndex];
    }
    else {
        return null;
    }
}

int libAIAI_gf_MinionAIGetWaypointCount (int lp_minionIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((libAIAI_gv_minionInfo[lp_minionIndex].lv_lane > 0)) {
        return libGame_gv_laneInfo.lv_lanePointsCount[libAIAI_gv_minionInfo[lp_minionIndex].lv_lane];
    }
    return 0;
}

int libAIAI_gf_MinionAIGetWaypointIndexForMinion (int lp_minionIndex) {
    // Automatic Variable Declarations
    // Implementation
    return libAIAI_gv_minionInfo[lp_minionIndex].lv_numberofNextPoint;
}

point libAIAI_gf_MinionAIGetNextWaypointForMinion (int lp_minionIndex) {
    // Automatic Variable Declarations
    // Implementation
    return libAIAI_gf_MinionAIGetWaypointForMinion(lp_minionIndex, libAIAI_gv_minionInfo[lp_minionIndex].lv_numberofNextPoint);
}

point libAIAI_gf_MinionAIGetPreviousWaypointForMinion (int lp_minionIndex) {
    // Automatic Variable Declarations
    // Implementation
    return libAIAI_gf_MinionAIGetWaypointForMinion(lp_minionIndex, libAIAI_gv_minionInfo[lp_minionIndex].lv_numberofPreviousPoint);
}

bool libAIAI_gf_MinionAIWithinLeashingDistanceofLane (int lp_minionIntext) {
    // Variable Declarations
    fixed lv_distanceToBattleStandard;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libAIAI_gf_MinionAIUpdateBattleStandardDataForMinion(lp_minionIntext);
    lv_distanceToBattleStandard = DistanceBetweenPoints(libAIAI_gv_minionInfo[lp_minionIntext].lv_minionPosition, libAIAI_gv_minionInfo[lp_minionIntext].lv_battleStandardPoint);
    if ((lv_distanceToBattleStandard <= libAIAI_gv_aILeashOffDistance)) {
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_MinionAITestPastNextWaypoints (int lp_minionIndex) {
    // Variable Declarations
    point lv_minionPosition;
    point lv_nextWaypoint;
    point lv_previousWaypoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_minionPosition = libAIAI_gv_minionInfo[lp_minionIndex].lv_minionPosition;
    lv_nextWaypoint = libAIAI_gf_MinionAIGetNextWaypointForMinion(lp_minionIndex);
    lv_previousWaypoint = libAIAI_gf_MinionAIGetPreviousWaypointForMinion(lp_minionIndex);
    return (DistanceSquaredBetweenPoints(lv_minionPosition, lv_previousWaypoint) >= (DistanceSquaredBetweenPoints(lv_minionPosition, lv_nextWaypoint) + DistanceSquaredBetweenPoints(lv_previousWaypoint, lv_nextWaypoint)));
}

int libAIAI_gf_MinionAIGetMinionIndex (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_MinionIndex, lp_unit);
}

int libAIAI_gf_MinionAIGetMinionLane (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return libAIAI_gv_minionInfo[libAIAI_gf_MinionAIGetMinionIndex(lp_unit)].lv_lane;
}

bool libAIAI_gf_MinionAICompareBuildingandMinionLane (int lp_minionLane, unit lp_building) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_building) == "Building_Fort") || (UnitGetType(lp_building) == "Building_Keep") || (UnitGetType(lp_building) == "Building_Tower") || (UnitGetType(lp_building) == "Building_Tower_Standalone"))) {
        if ((libAIAI_gv_towerInfo[libAIAI_gf_TowerAIGetTowerIndex(lp_building)].lv_lane == lp_minionLane)) {
            return true;
        }
        else {
            return false;
        }
    }

    return true;
}

void libAIAI_gf_MinionAICheckIndex (unit lp_minionUnit, int lp_lane, bool lp_lockStructureTarget) {
    // Variable Declarations
    int lv_index;
    fixed lv_scaling_Value;

    // Automatic Variable Declarations
    int auto38F1951E_ae;
    string autoE024D102_val;

    // Variable Initialization

    // Implementation
    auto38F1951E_ae = libAIAI_gv_minionMax;
    lv_index = 1;
    for ( ; lv_index <= auto38F1951E_ae ; lv_index += 1 ) {
        if ((libAIAI_gv_minionInfo[lv_index].lv_minionIsAlive == false)) {
            autoE024D102_val = UnitGetType(lp_minionUnit);
            if (autoE024D102_val == "Minion_Psionic") {
                lv_scaling_Value = libCore_gv_scaling_Minion_Psionic_Value;
            }
            else if (autoE024D102_val == "Minion_Melee") {
                lv_scaling_Value = libCore_gv_scaling_Minion_Melee_Value;
            }
            else if (autoE024D102_val == "Minion_Ranged") {
                lv_scaling_Value = libCore_gv_scaling_Minion_Ranged_Value;
            }
            else {
            }
            libAIAI_gv_minionInfo[lv_index].lv_minionIsAlive = true;
            UnitSetCustomValue(lp_minionUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_MinionIndex), FixedToInt(lv_index));
            libAIAI_gv_minionInfo[lv_index].lv_minionUnit = lp_minionUnit;
            libAIAI_gv_minionInfo[lv_index].lv_exp = (libCore_gf_DataXPXPForUnit(lp_minionUnit) + (libGame_gv_minionScalingNumber * lv_scaling_Value));
            libAIAI_gv_minionInfo[lv_index].lv_lane = lp_lane;
            libAIAI_gv_minionInfo[lv_index].lv_owner = UnitGetOwner(lp_minionUnit);
            libAIAI_gv_minionInfo[lv_index].lv_team = libGame_gf_PlayerGetPlayerTeam(libAIAI_gv_minionInfo[lv_index].lv_owner);
            libAIAI_gv_minionInfo[lv_index].lv_lockStructureTargetUnit = lp_lockStructureTarget;
            libAIAI_gv_minionInfo[lv_index].lv_attackRange = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogWeapon, UnitWeaponGet(lp_minionUnit, 1), "Range", c_playerAny);
            if ((libAIAI_gv_minionInfo[lv_index].lv_attackRange < libAIAI_gv_aIRangedMinionSearchRadius)) {
                libAIAI_gv_minionInfo[lv_index].lv_attackRange = libAIAI_gv_aIRangedMinionSearchRadius;
            }
            UnitXPSetCurrentLevel(lp_minionUnit, null, libGame_gv_minionScalingNumber);
            if ((lv_index > libAIAI_gv_minionAIActiveMinionsUpperBound)) {
                libAIAI_gv_minionAIActiveMinionsUpperBound = lv_index;
            }
            return ;
        }

    }
}

void libAIAI_gf_MinionAIFunctionAttack2D182D0BED187D182D0BED0BFD18BD182D0B0D0BBD181D18FD0BFD0BED0B4D185D0BED182D181D0BFD0B5D180D0B5D0B4D0B5D0BBD0B0D182D18C (int lp_minionIndex) {
    // Variable Declarations
    unit lv_minion;
    fixed lv_distance;
    int lv_numberofPreviousPoint;
    int lv_numberofNextPoint;
    int lv_team;
    int lv_lane;
    point lv_nextPoint;
    point lv_previousPoint;

    // Automatic Variable Declarations
    playergroup auto8CD7AA5B_g;
    int auto8CD7AA5B_var;

    // Variable Initialization
    lv_minion = libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit;
    lv_distance = 2.5;
    lv_team = libAIAI_gv_minionInfo[lp_minionIndex].lv_team;
    lv_lane = libAIAI_gv_minionInfo[lp_minionIndex].lv_lane;

    // Implementation
    if ((UnitIsAlive(lv_minion) == true)) {
        if ((UnitHasBehavior2(lv_minion, "MinionProtoss_WarpingInvulnerable") == true)) {
            return ;
        }

        lv_numberofNextPoint = libAIAI_gv_minionInfo[lp_minionIndex].lv_numberofNextPoint;
        lv_numberofPreviousPoint = libAIAI_gv_minionInfo[lp_minionIndex].lv_numberofPreviousPoint;
        libAIAI_gv_minionInfo[lp_minionIndex].lv_minionPosition = UnitGetPosition(lv_minion);
        if ((DistanceBetweenPoints(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionPosition, libGame_gv_laneInfo.lv_lanePointsForTeam[lv_team][lv_lane][lv_numberofNextPoint]) < 5.0) && (lv_numberofNextPoint < libGame_gv_laneInfo.lv_lanePointsCount[lv_lane])) {
            libAIAI_gv_minionInfo[lp_minionIndex].lv_numberofNextPoint += 1;
            libAIAI_gv_minionInfo[lp_minionIndex].lv_numberofPreviousPoint += 1;
            lv_numberofNextPoint = libAIAI_gv_minionInfo[lp_minionIndex].lv_numberofNextPoint;
            lv_numberofPreviousPoint = libAIAI_gv_minionInfo[lp_minionIndex].lv_numberofPreviousPoint;
        }
        if ((libAIAI_gv_minionInfo[lp_minionIndex].lv_leashing == true) && (libAIAI_gf_MinionAIFunctionAttackWithinLeashingDistanceofLane(lp_minionIndex) == true)) {
            libAIAI_gv_minionInfo[lp_minionIndex].lv_leashing = false;
        }
        libAIAI_gv_minionInfo[lp_minionIndex].lv_minionNextPoint = libGame_gv_laneInfo.lv_lanePointsForTeam[lv_team][lv_lane][lv_numberofNextPoint];
        libAIAI_gv_minionInfo[lp_minionIndex].lv_minionPreviousPoint = libGame_gv_laneInfo.lv_lanePointsForTeam[lv_team][lv_lane][lv_numberofPreviousPoint];
        libAIAI_gf_MinionAIFunctionAttackBattleStandard(lp_minionIndex);
        libAIAI_gf_MinionAIFunctionAttackSet(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionNextPoint, libAIAI_gv_minionInfo[lp_minionIndex].lv_minionPreviousPoint, lp_minionIndex);
        libAIAI_gf_MinionAIFunctionAttackSwitchNEW(lp_minionIndex);

        auto8CD7AA5B_g = libCore_gv_dEBUGAdminTeam;
        auto8CD7AA5B_var = -1;
        while (true) {
            auto8CD7AA5B_var = PlayerGroupNextPlayer(auto8CD7AA5B_g, auto8CD7AA5B_var);
            if (auto8CD7AA5B_var < 0) { break; }
            if ((UnitIsValid(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit) == true) && (UnitIsSelected(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit, auto8CD7AA5B_var) == true)) {
                UIClearMessages(libCore_gv_playerGroupFromPlayer[auto8CD7AA5B_var], c_messageAreaChat);
                UIDisplayMessage(libCore_gv_playerGroupFromPlayer[auto8CD7AA5B_var], c_messageAreaChat, libAIAI_gv_minionInfo[lp_minionIndex].lv_monitoringText);
            }
        }
    }

}

void libAIAI_gf_MinionAIFunctionAttackSet (point lp_nextPoint, point lp_previousPoint, int lp_minionIndex) {
    // Variable Declarations
    fixed lv_range;
    unit lv_targetUnit;
    fixed lv_pathingCostToBattleStandard;
    unit lv_closestMinion;
    unit lv_closestStructure;
    text lv_text;
    unit lv_minionUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_range = libAIAI_gv_aIMinionSearchHeroRadius;
    lv_minionUnit = libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit;

    // Implementation
    if (((UnitIsAlive(lv_minionUnit) == false) || (libCore_gv_gameOver == true))) {
        return ;
    }
    lv_text = (StringExternal("Param/Value/lib_AIAI_72506C54") + IntToText(lp_minionIndex));
    lv_text = (lv_text + (StringExternal("Param/Value/lib_AIAI_CCF24683") + IntToText(libAIAI_gv_minionInfo[lp_minionIndex].lv_lane)));
    lv_text = (lv_text + (StringExternal("Param/Value/lib_AIAI_2A364138") + IntToText(libAIAI_gv_minionInfo[lp_minionIndex].lv_numberofPreviousPoint)));
    lv_text = (lv_text + (StringExternal("Param/Value/lib_AIAI_745B499C") + IntToText(libAIAI_gv_minionInfo[lp_minionIndex].lv_numberofNextPoint)));
    lv_text = (lv_text + (StringExternal("Param/Value/lib_AIAI_BC391A7C") + FixedToText(DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit), lp_nextPoint), 2)));
    lv_text = (lv_text + (StringExternal("Param/Value/lib_AIAI_DFD08CB0") + FixedToText(DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit), lp_previousPoint), 2)));
    lv_text = (lv_text + (StringExternal("Param/Value/lib_AIAI_D0056DF1") + FixedToText(DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit), libAIAI_gv_minionInfo[lp_minionIndex].lv_battleStandardPoint), 2)));
    if ((UnitIsValid(libAIAI_gv_minionInfo[lp_minionIndex].lv_targetUnit) == true) && (libGame_gf_LaneIndexisValid(libAIAI_gv_minionInfo[lp_minionIndex].lv_lane) == true) && (libAIAI_gv_minionInfo[lp_minionIndex].lv_leashing == false)) {
        libAIAI_gf_MinionAIFunctionAttackBattleStandard(lp_minionIndex);
        lv_pathingCostToBattleStandard = IntToFixed(PointPathingCost(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionPosition, libAIAI_gv_minionInfo[lp_minionIndex].lv_battleStandardPoint));
        if ((lv_pathingCostToBattleStandard >= libAIAI_gv_aIMaxPathDistance)) {
            lv_pathingCostToBattleStandard = DistanceBetweenPoints(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionPosition, libAIAI_gv_minionInfo[lp_minionIndex].lv_battleStandardPoint);
        }
        if ((lv_pathingCostToBattleStandard >= libAIAI_gv_aILeashOnDistance)) {
            libAIAI_gv_minionInfo[lp_minionIndex].lv_targetUnit = null;
            libAIAI_gv_minionInfo[lp_minionIndex].lv_leashing = true;
            libAIAI_gv_minionInfo[lp_minionIndex].lv_forceStateTransition = true;
            libAIAI_gv_minionInfo[lp_minionIndex].lv_state222222222 = libAIAI_ge_AIStates_Move;
            lv_text = (lv_text + (StringExternal("Param/Value/lib_AIAI_A592C289") + StringExternal("Param/Value/lib_AIAI_6EBEB3B6")));
        }
    }
    if ((UnitIsValid(libAIAI_gv_minionInfo[lp_minionIndex].lv_targetUnit) == true) && (libAIAI_gv_minionInfo[lp_minionIndex].lv_leashing == false) && (UnitTypeTestAttribute(UnitGetType(libAIAI_gv_minionInfo[lp_minionIndex].lv_targetUnit), c_unitAttributeStructure) == true) && (libAIAI_gv_minionInfo[lp_minionIndex].lv_lockStructureTargetUnit == true)) {
        lv_text = (lv_text + (StringExternal("Param/Value/lib_AIAI_92E2544F") + StringExternal("Param/Value/lib_AIAI_D3C86E30")));
    }
    else {
        if ((libAIAI_gv_minionInfo[lp_minionIndex].lv_leashing == true)) {
            lv_text = (lv_text + (StringExternal("Param/Value/lib_AIAI_3F5887AC") + StringExternal("Param/Value/lib_AIAI_6B77BEF1")));
        }
        else {
            if ((libAIAI_gf_SupportAIAnyEnemyMinionsInRangeOfUnit(lv_minionUnit, lv_range) == true)) {
                libAIAI_gv_minionInfo[lp_minionIndex].lv_targetUnit = libAIAI_gf_SupportAIGetNearestEnemyMinionInRangeOfUnit(lv_minionUnit, lv_range);
                libAIAI_gv_minionInfo[lp_minionIndex].lv_state222222222 = libAIAI_ge_AIStates_AttackMinion;
                lv_text = (lv_text + (StringExternal("Param/Value/lib_AIAI_57B9B228") + StringExternal("Param/Value/lib_AIAI_69DB540F")));
            }
            else {
                if ((libAIAI_gf_SupportAIAnyEnemySummonsInRangeOfUnit(lv_minionUnit, lv_range) == true)) {
                    libAIAI_gv_minionInfo[lp_minionIndex].lv_targetUnit = libAIAI_gf_SupportAIGetNearestEnemySummonInRangeOfUnit(lv_minionUnit, lv_range);
                    libAIAI_gv_minionInfo[lp_minionIndex].lv_state222222222 = libAIAI_ge_AIStates_AttackSummon;
                    lv_text = (lv_text + (StringExternal("Param/Value/lib_AIAI_0231E925") + StringExternal("Param/Value/lib_AIAI_856D1BE9")));
                }
                else {
                    if ((libAIAI_gf_SupportAIAnyEnemyStructuresInRangeOfUnit(lv_minionUnit, lv_range) == true)) {
                        lv_closestStructure = libAIAI_gf_SupportAIGetNearestEnemyStructureInRangeOfUnit(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit, lv_range);
                        if ((libAIAI_gf_MinionAICompareBuildingandMinionLane(libAIAI_gv_minionInfo[lp_minionIndex].lv_lane, lv_closestStructure) == true)) {
                            libAIAI_gv_minionInfo[lp_minionIndex].lv_targetUnit = lv_closestStructure;
                            libAIAI_gv_minionInfo[lp_minionIndex].lv_state222222222 = libAIAI_ge_AIStates_AttackStructure;
                            lv_text = (lv_text + (StringExternal("Param/Value/lib_AIAI_3127AB4D") + StringExternal("Param/Value/lib_AIAI_74434D4B")));
                        }
                        else {
                            if ((libAIAI_gf_SupportAIAnyEnemyHeroesInRangeOfUnit(lv_minionUnit, lv_range) == true)) {
                                libAIAI_gv_minionInfo[lp_minionIndex].lv_targetUnit = libAIAI_gf_SupportAIGetNearestEnemyHeroInRangeOfUnit(lv_minionUnit, lv_range);
                                libAIAI_gv_minionInfo[lp_minionIndex].lv_state222222222 = libAIAI_ge_AIStates_AttackHero;
                                lv_text = (lv_text + (StringExternal("Param/Value/lib_AIAI_9ADC7A8F") + StringExternal("Param/Value/lib_AIAI_1226D250")));
                            }
                            else {
                                libAIAI_gv_minionInfo[lp_minionIndex].lv_state222222222 = libAIAI_ge_AIStates_Move;
                                libAIAI_gv_minionInfo[lp_minionIndex].lv_minionNextPoint = lp_nextPoint;
                                lv_text = (lv_text + (StringExternal("Param/Value/lib_AIAI_5E1A781E") + StringExternal("Param/Value/lib_AIAI_38E6F118")));
                            }
                        }
                    }
                    else {
                        if ((libAIAI_gf_SupportAIAnyEnemyHeroesInRangeOfUnit(lv_minionUnit, lv_range) == true)) {
                            libAIAI_gv_minionInfo[lp_minionIndex].lv_targetUnit = libAIAI_gf_SupportAIGetNearestEnemyHeroInRangeOfUnit(lv_minionUnit, lv_range);
                            libAIAI_gv_minionInfo[lp_minionIndex].lv_state222222222 = libAIAI_ge_AIStates_AttackHero;
                            lv_text = (lv_text + (StringExternal("Param/Value/lib_AIAI_96825E69") + StringExternal("Param/Value/lib_AIAI_DAFB20A1")));
                        }
                        else {
                            libAIAI_gv_minionInfo[lp_minionIndex].lv_state222222222 = libAIAI_ge_AIStates_Move;
                            libAIAI_gv_minionInfo[lp_minionIndex].lv_minionNextPoint = lp_nextPoint;
                            lv_text = (lv_text + (StringExternal("Param/Value/lib_AIAI_F45DBD91") + StringExternal("Param/Value/lib_AIAI_3819D2F2")));
                        }
                    }
                }
            }
        }
    }
    libAIAI_gv_minionInfo[lp_minionIndex].lv_monitoringText = lv_text;
}

void libAIAI_gf_MinionAIFunctionAttackBattleStandard (int lp_minionIndex) {
    // Variable Declarations
    fixed lv_missionTime;
    point lv_minionPosition;
    point lv_nextWaypoint;
    point lv_previousWaypoint;
    fixed lv_distanceBetweenWaypoints;
    fixed lv_angleBetweenPreviousPointandMinionPosition;
    fixed lv_battleStandardDistance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libAIAI_gv_minionInfo[lp_minionIndex].lv_lane > libGame_gv_laneInfo.lv_laneCount)) {
        return ;
    }

    lv_missionTime = GameGetMissionTime();
    if ((libAIAI_gv_minionInfo[lp_minionIndex].lv_battleStandardLastUpdate >= lv_missionTime)) {
        return ;
    }

    lv_minionPosition = UnitGetPosition(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit);
    lv_nextWaypoint = libGame_gv_laneInfo.lv_lanePointsForTeam[libAIAI_gv_minionInfo[lp_minionIndex].lv_team][libAIAI_gv_minionInfo[lp_minionIndex].lv_lane][libAIAI_gv_minionInfo[lp_minionIndex].lv_numberofNextPoint];
    lv_previousWaypoint = libGame_gv_laneInfo.lv_lanePointsForTeam[libAIAI_gv_minionInfo[lp_minionIndex].lv_team][libAIAI_gv_minionInfo[lp_minionIndex].lv_lane][libAIAI_gv_minionInfo[lp_minionIndex].lv_numberofPreviousPoint];
    lv_distanceBetweenWaypoints = DistanceBetweenPoints(lv_previousWaypoint, lv_nextWaypoint);
    lv_angleBetweenPreviousPointandMinionPosition = (AngleBetweenPoints(lv_previousWaypoint, lv_minionPosition) * AngleBetweenPoints(lv_previousWaypoint, lv_nextWaypoint));
    lv_battleStandardDistance = (Cos(lv_angleBetweenPreviousPointandMinionPosition) * DistanceBetweenPoints(lv_previousWaypoint, lv_minionPosition));
    if ((lv_battleStandardDistance < 0.0)) {
        lv_battleStandardDistance = 0.0;
    }

    libAIAI_gv_minionInfo[lp_minionIndex].lv_battleStandardPoint = libNtve_gf_PointOffsetTowardsPoint(lv_previousWaypoint, lv_battleStandardDistance, lv_nextWaypoint);
    libAIAI_gv_minionInfo[lp_minionIndex].lv_battleStandardLastUpdate = lv_missionTime;
}

bool libAIAI_gf_MinionAIFunctionAttackWithinLeashingDistanceofLane (int lp_minionIndex) {
    // Variable Declarations
    fixed lv_distanceToBattleStandard;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libAIAI_gf_MinionAIFunctionAttackBattleStandard(lp_minionIndex);
    lv_distanceToBattleStandard = DistanceBetweenPoints(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionPosition, libAIAI_gv_minionInfo[lp_minionIndex].lv_battleStandardPoint);
    if ((lv_distanceToBattleStandard <= libAIAI_gv_aILeashOffDistance)) {
        return true;
    }
    else {
        return false;
    }
}

void libAIAI_gf_MinionAIFunctionAttackSet3 (point lp_nextPoint, point lp_previousPoint, unit lp_minion, int lp_index, int lp_lane) {
    // Variable Declarations
    unit lv_minion;
    unit lv_newTarget;
    int lv_lane;
    point lv_minionPos;
    point lv_battlePoint;
    unitgroup lv_scanGroup;
    unitgroup lv_minionGroup;
    unitgroup lv_summonedGroup;
    unitgroup lv_structureGroup;
    unitgroup lv_heroGroup;
    fixed lv_distanceBetweenMinionPosandNextWaypoint;
    fixed lv_distanceBetweenMinionPosandPreviousWaypoint;
    fixed lv_distanceBetweenNextWaypointandPreviousWaypoint;
    fixed lv_distanceBetweenBattleWaypointandMinionPos;
    fixed lv_distanceBetweenBattleWaypointandNextWaypoint;
    fixed lv_distanceBetweenBattleWaypointandPreviousWaypoint;
    order lv_minionOrder;
    abilcmd lv_minionAbilityCommand;
    int lv_oldState;
    int lv_newState;
    bool lv_leashing;
    text lv_text;
    region lv_regionTargetPrevious;
    region lv_regionTargetNext;
    region lv_regionMinionPrevious;
    region lv_regionMinionNext;

    // Automatic Variable Declarations
    unitgroup auto74B59DFF_g;
    int auto74B59DFF_u;
    unit auto74B59DFF_var;
    unitgroup auto3E890128_g;
    int auto3E890128_u;
    unit auto3E890128_var;
    int auto1D0DD95D_val;

    // Variable Initialization
    lv_scanGroup = UnitGroupEmpty();
    lv_minionGroup = UnitGroupEmpty();
    lv_summonedGroup = UnitGroupEmpty();
    lv_structureGroup = UnitGroupEmpty();
    lv_heroGroup = UnitGroupEmpty();
    lv_oldState = libAIAI_ge_AIStates_Nothing;
    lv_newState = libAIAI_ge_AIStates_Nothing;

    // Implementation
    lv_minion = libAIAI_gv_minionInfo[lp_index].lv_minionUnit;
    if (((UnitIsAlive(lv_minion) == false) || (UnitIsValid(lv_minion) == false) || (UnitHasBehavior2(lv_minion, "MinionProtoss_WarpingInvulnerable") == true))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_AIAI_55155E09"), true);
        return ;
    }
    lv_minionPos = UnitGetPosition(lv_minion);
    lv_oldState = libAIAI_gv_minionInfo[lp_index].lv_state222222222;
    lv_lane = lp_lane;
    lv_minionOrder = UnitOrder(lv_minion, 0);
    lv_minionAbilityCommand = OrderGetAbilityCommand(lv_minionOrder);
    lv_distanceBetweenNextWaypointandPreviousWaypoint = DistanceBetweenPoints(lp_nextPoint, lp_previousPoint);
    lv_regionMinionNext = RegionCircle(lp_nextPoint, (1.0 + (lv_distanceBetweenNextWaypointandPreviousWaypoint * 1.5)));
    lv_regionMinionPrevious = RegionCircle(lp_previousPoint, (1.0 + (lv_distanceBetweenNextWaypointandPreviousWaypoint * 1.5)));
    lv_regionTargetNext = RegionCircle(lp_nextPoint, (lv_distanceBetweenNextWaypointandPreviousWaypoint * 1.5));
    lv_regionTargetPrevious = RegionCircle(lp_previousPoint, (lv_distanceBetweenNextWaypointandPreviousWaypoint * 1.5));
    lv_text = (StringExternal("Param/Value/lib_AIAI_E50E987C") + (UnitGetName(lv_minion) + StringExternal("Param/Value/lib_AIAI_37493B6D")));
    lv_text = (lv_text + (StringExternal("Param/Value/lib_AIAI_0F544CEC") + (IntToText(lp_index) + StringExternal("Param/Value/lib_AIAI_2B89A467"))));
    lv_text = (lv_text + (StringExternal("Param/Value/lib_AIAI_3670BA2F") + (IntToText(lp_lane) + StringExternal("Param/Value/lib_AIAI_DE1297ED"))));
    if ((lv_minionOrder != null) && ((lv_minionAbilityCommand != AbilityCommand("move", 0)) || (lv_minionAbilityCommand != AbilityCommand("attack", 0)) || (lv_minionAbilityCommand != AbilityCommand("AttackAlly", 0)) || (lv_minionAbilityCommand != AbilityCommand("move", 2)))) {
        if (((UnitIsAlive(libAIAI_gv_minionInfo[lp_index].lv_targetUnit) == false) || (libAIAI_gv_minionInfo[lp_index].lv_targetUnit == null) || (UnitTypeTestAttribute(UnitGetType(libAIAI_gv_minionInfo[lp_index].lv_targetUnit), c_unitAttributeHeroic) == true) || ((libAIAI_gv_minionInfo[lp_index].lv_lockStructureTargetUnit == false) && (UnitTypeTestAttribute(UnitGetType(libAIAI_gv_minionInfo[lp_index].lv_targetUnit), c_unitAttributeStructure) == true)))) {
            lv_scanGroup = UnitGroupSearch(null, UnitGetOwner(lv_minion), lv_minionPos, libAIAI_gv_aIRangedMinionWeaponRange, libAIAI_gv_uF_MinionAI_ScanGroup, 0);
            if ((UnitGroupCount(lv_scanGroup, c_unitCountAlive) > 0)) {
                lv_minionGroup = UnitGroupFilter(null, c_playerAny, lv_scanGroup, libAIAI_gv_uF_MinionAI_Required_Minion, 0);
                if ((UnitGroupCount(lv_minionGroup, c_unitCountAlive) > 0)) {
                    lv_newTarget = UnitGroupClosestToPoint(lv_minionGroup, lv_minionPos);
                    lv_newState = libAIAI_ge_AIStates_AttackMinion;
                }
                else {
                    lv_summonedGroup = UnitGroupFilter(null, c_playerAny, lv_scanGroup, libAIAI_gv_uF_MinionAI_Required_Summoned, 0);
                    if ((UnitGroupCount(lv_summonedGroup, c_unitCountAlive) > 0)) {
                        lv_newTarget = UnitGroupClosestToPoint(lv_summonedGroup, lv_minionPos);
                        lv_newState = libAIAI_ge_AIStates_AttackSummon;
                    }
                    else {
                        lv_structureGroup = UnitGroupFilter(null, c_playerAny, lv_scanGroup, libAIAI_gv_uF_MinionAI_Required_Structure, 0);
                        auto74B59DFF_g = lv_structureGroup;
                        auto74B59DFF_u = UnitGroupCount(auto74B59DFF_g, c_unitCountAll);
                        for (;; auto74B59DFF_u -= 1) {
                            auto74B59DFF_var = UnitGroupUnitFromEnd(auto74B59DFF_g, auto74B59DFF_u);
                            if (auto74B59DFF_var == null) { break; }
                            if ((libAIAI_gf_MinionAICompareBuildingandMinionLane(lv_lane, lv_minion) == false)) {
                                UnitGroupRemove(lv_structureGroup, auto74B59DFF_var);
                            }
                        }
                        if ((UnitGroupCount(lv_structureGroup, c_unitCountAlive) > 0)) {
                            lv_newTarget = UnitGroupClosestToPoint(lv_structureGroup, lv_minionPos);
                            lv_newState = libAIAI_ge_AIStates_AttackStructure;
                        }
                        else {
                            lv_heroGroup = UnitGroupFilter(null, c_playerAny, lv_scanGroup, libAIAI_gv_uF_MinionAI_Required_Heroic, 0);
                            auto3E890128_g = lv_heroGroup;
                            auto3E890128_u = UnitGroupCount(auto3E890128_g, c_unitCountAll);
                            for (;; auto3E890128_u -= 1) {
                                auto3E890128_var = UnitGroupUnitFromEnd(auto3E890128_g, auto3E890128_u);
                                if (auto3E890128_var == null) { break; }
                                if ((UnitFilterMatch(auto3E890128_var, UnitGetOwner(lv_minion), libAIAI_gv_uF_MinionAI_Required_Ignored) == true)) {
                                    UnitGroupRemove(lv_heroGroup, auto3E890128_var);
                                }
                            }
                            if ((UnitGroupCount(lv_heroGroup, c_unitCountAlive) > 0)) {
                                lv_newTarget = UnitGroupClosestToPoint(lv_heroGroup, lv_minionPos);
                                lv_newState = libAIAI_ge_AIStates_AttackHero;
                            }
                            else {
                                lv_newTarget = null;
                                lv_newState = libAIAI_ge_AIStates_Move;
                            }
                        }
                    }
                }
            }
            if ((lv_newTarget != null)) {
                if ((libAIAI_gv_minionInfo[lp_index].lv_targetUnit == lv_newTarget)) {
                    lv_battlePoint = lv_minionPos;
                    if ((libNtve_gf_UnitInRegion(lv_newTarget, lv_regionTargetPrevious) == true) && (libNtve_gf_UnitInRegion(lv_newTarget, lv_regionTargetNext) == true) && (libNtve_gf_UnitInRegion(lv_minion, lv_regionMinionNext) == true) && (libNtve_gf_UnitInRegion(lv_minion, lv_regionMinionPrevious) == true)) {
                    }
                    else {
                        lv_newState = libAIAI_ge_AIStates_Move;
                        lv_newTarget = null;
                        TimerStart(libAIAI_gv_minionInfo[lp_index].lv_leashDelay, libAIAI_gv_minionAI_LeashingTimeDelay_C, false, c_timeGame);
                        lv_leashing = true;
                    }
                }

            }
            else {
                lv_newTarget = null;
                lv_newState = libAIAI_ge_AIStates_Move;
            }
            libAIAI_gv_minionInfo[lp_index].lv_state222222222 = lv_newState;
            libAIAI_gv_minionInfo[lp_index].lv_targetUnit = lv_newTarget;
            libAIAI_gv_minionInfo[lp_index].lv_battleStandardPoint = lv_battlePoint;
        }

    }
    if (((lv_newState != lv_oldState) || ((lv_newState == libAIAI_ge_AIStates_Move) && (lv_oldState == libAIAI_ge_AIStates_Move)))) {
        libAIAI_gv_minionInfo[lp_index].lv_state222222222 = lv_newState;
        auto1D0DD95D_val = lv_newState;
        if (auto1D0DD95D_val == libAIAI_ge_AIStates_HoldPosition) {
            UnitIssueOrder(lv_minion, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        }
        else if (auto1D0DD95D_val == libAIAI_ge_AIStates_Move) {
            UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), lp_nextPoint), c_orderQueueReplace);
        }
        else if (auto1D0DD95D_val == libAIAI_ge_AIStates_Nothing) {
        }
        else if (auto1D0DD95D_val == libAIAI_ge_AIStates_AttackMinion) {
            UnitIssueOrder(lv_minion, OrderTargetingUnit(AbilityCommand("AttackAlly", 0), libAIAI_gv_minionInfo[lp_index].lv_targetUnit), c_orderQueueReplace);
        }
        else if (auto1D0DD95D_val == libAIAI_ge_AIStates_AttackSummon) {
            UnitIssueOrder(lv_minion, OrderTargetingUnit(AbilityCommand("AttackAlly", 0), lv_newTarget), c_orderQueueReplace);
        }
        else if (auto1D0DD95D_val == libAIAI_ge_AIStates_AttackStructure) {
            UnitIssueOrder(lv_minion, OrderTargetingUnit(AbilityCommand("AttackAlly", 0), lv_newTarget), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lv_minion, OrderTargetingUnit(AbilityCommand("AttackAlly", 0), lv_newTarget), c_orderQueueReplace);
        }
    }
    lv_text = (lv_text + (StringExternal("Param/Value/lib_AIAI_B5E7F9AD") + (FixedToText(lv_distanceBetweenNextWaypointandPreviousWaypoint, 2) + StringExternal("Param/Value/lib_AIAI_EA031035"))));
    lv_text = (lv_text + (StringExternal("Param/Value/lib_AIAI_BCD731E7") + (FixedToText(DistanceBetweenPoints(lv_minionPos, lp_previousPoint), 2) + StringExternal("Param/Value/lib_AIAI_788E12B9"))));
    lv_text = (lv_text + (StringExternal("Param/Value/lib_AIAI_602741EE") + (FixedToText(DistanceBetweenPoints(lp_nextPoint, lv_minionPos), 2) + StringExternal("Param/Value/lib_AIAI_F2DC2E90"))));
    lv_text = (lv_text + (StringExternal("Param/Value/lib_AIAI_D869DB3E") + (FixedToText(lv_distanceBetweenBattleWaypointandMinionPos, 2) + StringExternal("Param/Value/lib_AIAI_A0901142"))));
    lv_text = (lv_text + (StringExternal("Param/Value/lib_AIAI_2A1B5480") + (FixedToText(lv_distanceBetweenBattleWaypointandNextWaypoint, 2) + StringExternal("Param/Value/lib_AIAI_76903CB2"))));
    lv_text = (lv_text + (StringExternal("Param/Value/lib_AIAI_AB37597C") + (FixedToText(lv_distanceBetweenBattleWaypointandPreviousWaypoint, 2) + StringExternal("Param/Value/lib_AIAI_4FE4B648"))));
    lv_text = (lv_text + (StringExternal("Param/Value/lib_AIAI_3E6547F5") + (FixedToText((lv_distanceBetweenNextWaypointandPreviousWaypoint * 1.5), 2) + StringExternal("Param/Value/lib_AIAI_B7C318E9"))));
    libAIAI_gv_minionInfo[lp_index].lv_monitoringText = lv_text;
}

void libAIAI_gf_MinionAIFunctionAttackSwitch (unit lp_minion) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_index = libAIAI_gf_MinionAIGetMinionIndex(lp_minion);

    // Implementation
    if ((libCore_gv_gameOver == true)) {
        return ;
    }

    if ((libAIAI_gv_minionInfo[lv_index].lv_state222222222 == libAIAI_ge_AIStates_Move)) {
        UnitIssueOrder(lp_minion, OrderTargetingPoint(AbilityCommand("move", 0), libAIAI_gv_minionInfo[lv_index].lv_minionNextPoint), c_orderQueueReplace);
        return ;
    }
    else if ((libAIAI_gv_minionInfo[lv_index].lv_state222222222 == libAIAI_ge_AIStates_HoldPosition)) {
        UnitIssueOrder(lp_minion, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        return ;
    }
    UnitIssueOrder(lp_minion, OrderTargetingUnit(AbilityCommand("attack", 0), libAIAI_gv_minionInfo[lv_index].lv_targetUnit), c_orderQueueReplace);
}

void libAIAI_gf_MinionAIFunctionAttackSwitchNEW (int lp_minionIndex) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitIsAlive(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit) == false) || (libCore_gv_gameOver == true))) {
        return ;
    }
    if (((libAIAI_gv_minionInfo[lp_minionIndex].lv_state222222222 == libAIAI_ge_AIStates_AttackHero) || (libAIAI_gv_minionInfo[lp_minionIndex].lv_state222222222 == libAIAI_ge_AIStates_AttackMinion) || (libAIAI_gv_minionInfo[lp_minionIndex].lv_state222222222 == libAIAI_ge_AIStates_AttackStructure) || (libAIAI_gv_minionInfo[lp_minionIndex].lv_state222222222 == libAIAI_ge_AIStates_AttackSummon))) {
        UnitIssueOrder(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit, OrderTargetingUnit(AbilityCommand("attack", 0), libAIAI_gv_minionInfo[lp_minionIndex].lv_targetUnit), c_orderQueueReplace);
    }
    else if ((libAIAI_gv_minionInfo[lp_minionIndex].lv_state222222222 == libAIAI_ge_AIStates_Move)) {
        if ((libAIAI_gv_minionInfo[lp_minionIndex].lv_leashing == true)) {
            UnitIssueOrder(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit, OrderTargetingPoint(AbilityCommand("move", 0), libAIAI_gv_minionInfo[lp_minionIndex].lv_battleStandardPoint), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit, OrderTargetingPoint(AbilityCommand("move", 0), libAIAI_gv_minionInfo[lp_minionIndex].lv_minionNextPoint), c_orderQueueReplace);
        }
    }
    else if ((libAIAI_gv_minionInfo[lp_minionIndex].lv_state222222222 == libAIAI_ge_AIStates_HoldPosition)) {
        UnitIssueOrder(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
}

int libAIAI_gf_MinionAIDetermineState (int lp_minionIndex, int lp_oldState) {
    // Variable Declarations
    fixed lv_distancetoBattleStandard;
    unit lv_heroToFollow;
    int lv_attackState;

    // Automatic Variable Declarations
    int autoA8D7E856_val;

    // Variable Initialization

    // Implementation
    autoA8D7E856_val = lp_oldState;
    if (autoA8D7E856_val == libAIAI_ge_MinionAIStates_Advancing) {
        lv_attackState = libAIAI_gf_MinionAIDeterimeAttackStateAndTarget(lp_minionIndex);
        return lv_attackState;
    }
    else if (autoA8D7E856_val == libAIAI_ge_MinionAIStates_AttackingMinions) {
        lv_attackState = libAIAI_gf_MinionAIDeterimeAttackStateAndTarget(lp_minionIndex);
        return lv_attackState;
    }
    else if (autoA8D7E856_val == libAIAI_ge_MinionAIStates_AttackingMinions) {
        lv_attackState = libAIAI_gf_MinionAIDeterimeAttackStateAndTarget(lp_minionIndex);
        return lv_attackState;
    }
    else if (autoA8D7E856_val == libAIAI_ge_MinionAIStates_FollowHero) {
        if ((libGame_gf_LaneIndexisValid(libAIAI_gv_minionInfo[lp_minionIndex].lv_lane) == true) && (PointPathingIsConnected(UnitGetPosition(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit), libAIAI_gf_MinionAIGetNextWaypointForMinion(lp_minionIndex)) == true)) {
            return libAIAI_ge_MinionAIStates_Advancing;
        }
        lv_heroToFollow = libAIAI_gf_MinionAIGetHerotoFollow(lp_minionIndex);
        if (((UnitIsValid(lv_heroToFollow) == false) || (PointPathingIsConnected(UnitGetPosition(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit), UnitGetPosition(lv_heroToFollow)) == false))) {
            return libAIAI_ge_MinionAIStates_HoldPosition;
        }
    }
    else if (autoA8D7E856_val == libAIAI_ge_MinionAIStates_HoldPosition) {
        if ((libGame_gf_LaneIndexisValid(libAIAI_gv_minionInfo[lp_minionIndex].lv_lane) == true) && (PointPathingIsConnected(UnitGetPosition(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit), libAIAI_gf_MinionAIGetNextWaypointForMinion(lp_minionIndex)) == true)) {
            return libAIAI_ge_MinionAIStates_Advancing;
        }
        lv_heroToFollow = libAIAI_gf_MinionAIGetHerotoFollow(lp_minionIndex);
        if ((UnitIsValid(lv_heroToFollow) == false) && (PointPathingIsConnected(UnitGetPosition(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit), UnitGetPosition(lv_heroToFollow)) == true)) {
            return libAIAI_ge_MinionAIStates_FollowHero;
        }
    }
    else {
    }
    return lp_oldState;
}

int libAIAI_gf_MinionAIDeterimeAttackStateAndTarget (int lp_minionIndex) {
    // Variable Declarations
    order lv_minionOrder;
    unit lv_currentTarget;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_minionOrder = UnitOrder(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit, 0);
    if ((lv_minionOrder != null) && ((OrderGetAbilityCommand(lv_minionOrder) == AbilityCommand("attack", 0)) || (OrderGetAbilityCommand(lv_minionOrder) == AbilityCommand("AttackAlly", 0))) && (OrderGetTargetType(lv_minionOrder) == c_orderTargetUnit)) {
        lv_currentTarget = OrderGetTargetUnit(lv_minionOrder);
    }
    if ((libAIAI_gv_minionInfo[lp_minionIndex].lv_lockStructureTargetUnit == true)) {
        if ((libAIAI_gf_MinionAIShouldAttackStructure(lp_minionIndex, lv_currentTarget) == true)) {
            return libAIAI_ge_MinionAIStates_AttackingStructure;
        }
        else {
            if ((libAIAI_gf_MinionAIShouldAttackMinions(lp_minionIndex, lv_currentTarget) == true)) {
                return libAIAI_ge_MinionAIStates_AttackingMinions;
            }
            else {
                return libAIAI_gf_MinionAIAttackHeroState(lp_minionIndex, lv_currentTarget);
            }
        }
    }
    else {
        if ((libAIAI_gf_MinionAIShouldAttackMinions(lp_minionIndex, lv_currentTarget) == true)) {
            return libAIAI_ge_MinionAIStates_AttackingMinions;
        }
        else {
            if ((libAIAI_gf_MinionAIShouldAttackStructure(lp_minionIndex, lv_currentTarget) == true)) {
                return libAIAI_ge_MinionAIStates_AttackingStructure;
            }
            else {
                return libAIAI_gf_MinionAIAttackHeroState(lp_minionIndex, lv_currentTarget);
            }
        }
    }
}

bool libAIAI_gf_MinionAIShouldAttackStructure (int lp_minionIndex, unit lp_currentTarget) {
    // Variable Declarations
    unit lv_targetStructure;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitIsValid(lp_currentTarget) == true) && (UnitFilterMatch(lp_currentTarget, libAIAI_gv_minionInfo[lp_minionIndex].lv_owner, libAIAI_gv_uF_MinionAI_GetNearestAttackableEnemyStructure) == true)) {
        libAIAI_gv_minionInfo[lp_minionIndex].lv_targetUnit = lp_currentTarget;
        return true;
    }
    lv_targetStructure = libAIAI_gf_SupportAIGetNearestEnemyStructureInRangeOfUnit(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit, libAIAI_gv_minionInfo[lp_minionIndex].lv_attackRange);
    if ((UnitIsAlive(lv_targetStructure) == true)) {
        libAIAI_gv_minionInfo[lp_minionIndex].lv_forceStateTransition = true;
        libAIAI_gv_minionInfo[lp_minionIndex].lv_targetUnit = lv_targetStructure;
        return true;
    }
    return false;
}

bool libAIAI_gf_MinionAIShouldAttackMinions (int lp_minionIndex, unit lp_currentTarget) {
    // Variable Declarations
    unit lv_targetUnit;
    fixed lv_pathingCostToBattleStandard;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitIsValid(lp_currentTarget) == true) && (libGame_gf_LaneIndexisValid(libAIAI_gv_minionInfo[lp_minionIndex].lv_lane) == true) && (libAIAI_gv_minionInfo[lp_minionIndex].lv_leashing == false)) {
        libAIAI_gf_MinionAIUpdateBattleStandardDataForMinion(lp_minionIndex);
        lv_pathingCostToBattleStandard = IntToFixed(PointPathingCost(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionPosition, libAIAI_gv_minionInfo[lp_minionIndex].lv_battleStandardPoint));
        if ((lv_pathingCostToBattleStandard >= libAIAI_gv_aIMaxPathDistance)) {
            lv_pathingCostToBattleStandard = DistanceBetweenPoints(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionPosition, libAIAI_gv_minionInfo[lp_minionIndex].lv_battleStandardPoint);
        }
        if ((lv_pathingCostToBattleStandard >= libAIAI_gv_aILeashOnDistance)) {
            lv_targetUnit = null;
            libAIAI_gv_minionInfo[lp_minionIndex].lv_leashing = true;
            libAIAI_gv_minionInfo[lp_minionIndex].lv_forceStateTransition = true;
            return true;
        }
    }
    if ((UnitIsValid(lp_currentTarget) == true) && ((UnitTypeTestAttribute(UnitGetType(lp_currentTarget), c_unitAttributeBiological) == true) || (UnitTypeTestAttribute(UnitGetType(lp_currentTarget), c_unitAttributeSummoned) == true)) && (UnitInRangeAndAbleToAttackTarget(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit, lp_currentTarget) == true)) {
        libAIAI_gv_minionInfo[lp_minionIndex].lv_targetUnit = lp_currentTarget;
        return true;
    }
    lv_targetUnit = libAIAI_gf_SupportAIGetNearestEnemyMinionSummonInRangeOfUnit(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit, libAIAI_gv_minionInfo[lp_minionIndex].lv_attackRange);
    if ((UnitIsAlive(lv_targetUnit) == true)) {
        if ((lp_currentTarget != lv_targetUnit)) {
            libAIAI_gv_minionInfo[lp_minionIndex].lv_forceStateTransition = true;
        }
        libAIAI_gv_minionInfo[lp_minionIndex].lv_targetUnit = null;
        return true;
    }
    if ((UnitIsValid(lp_currentTarget) == true) && ((UnitTypeTestAttribute(UnitGetType(lp_currentTarget), c_unitAttributeBiological) == true) || (UnitTypeTestAttribute(UnitGetType(lp_currentTarget), c_unitAttributeSummoned) == true)) && (DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit), UnitGetPosition(lp_currentTarget)) <= libAIAI_gv_minionInfo[lp_minionIndex].lv_attackRange)) {
        libAIAI_gv_minionInfo[lp_minionIndex].lv_targetUnit = lp_currentTarget;
        return true;
    }
    return false;
}

int libAIAI_gf_MinionAIAttackHeroState (int lp_minionIndex, unit lp_currentTarget) {
    // Variable Declarations
    point lv_minionPosition;
    fixed lv_pathingCostToBattleStandard;
    unit lv_targetHero;
    unit lv_heroToFollow;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_minionPosition = UnitGetPosition(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit);
    if ((libAIAI_gv_minionInfo[lp_minionIndex].lv_leashing == false) && (UnitIsValid(lp_currentTarget) == true) && (UnitFilterMatch(lp_currentTarget, libAIAI_gv_minionInfo[lp_minionIndex].lv_owner, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) && (DistanceBetweenPoints(lv_minionPosition, UnitGetPosition(lp_currentTarget)) < (libAIAI_gv_minionInfo[lp_minionIndex].lv_attackHeroRange + libAIAI_gv_aIMinionSearchHeroRadiusBuffer))) {
        lv_targetHero = lp_currentTarget;
    }
    else {
        lv_targetHero = libAIAI_gf_SupportAIGetNearestEnemyHeroInRangeOfUnit(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit, libAIAI_gv_minionInfo[lp_minionIndex].lv_attackHeroRange);
    }
    if ((UnitIsValid(lv_targetHero) == true) && (libGame_gf_LaneIndexisValid(libAIAI_gv_minionInfo[lp_minionIndex].lv_lane) == true) && (libAIAI_gv_minionInfo[lp_minionIndex].lv_leashing == false)) {
        libAIAI_gf_MinionAIUpdateBattleStandardDataForMinion(lp_minionIndex);
        lv_pathingCostToBattleStandard = IntToFixed(PointPathingCost(lv_minionPosition, libAIAI_gv_minionInfo[lp_minionIndex].lv_battleStandardPoint));
        if ((lv_pathingCostToBattleStandard >= libAIAI_gv_aILeashOnDistance)) {
            lv_pathingCostToBattleStandard = DistanceBetweenPoints(lv_minionPosition, libAIAI_gv_minionInfo[lp_minionIndex].lv_battleStandardPoint);
        }
        if ((lv_pathingCostToBattleStandard >= libAIAI_gv_aILeashOffDistance)) {
            lv_targetHero = null;
            libAIAI_gv_minionInfo[lp_minionIndex].lv_leashing = true;
            libAIAI_gv_minionInfo[lp_minionIndex].lv_forceStateTransition = true;
        }
    }
    if ((UnitIsValid(lv_targetHero) == true)) {
        if ((libGame_gf_LaneIndexisValid(libAIAI_gv_minionInfo[lp_minionIndex].lv_lane) == true)) {
            if ((libAIAI_gv_minionInfo[lp_minionIndex].lv_leashing == false) && (UnitIsValid(lp_currentTarget) == true) && (UnitTypeTestAttribute(UnitGetType(lp_currentTarget), c_unitAttributeHeroic) == true) && (libAIAI_gf_MinionAIWithinLeashingDistanceofLane(lp_minionIndex) == true)) {
                libAIAI_gv_minionInfo[lp_minionIndex].lv_leashing = true;
                libAIAI_gv_minionInfo[lp_minionIndex].lv_forceStateTransition = true;
            }
            return libAIAI_ge_MinionAIStates_Advancing;
        }
        else {
            lv_heroToFollow = libAIAI_gf_MinionAIGetHerotoFollow(lp_minionIndex);
            if ((UnitIsValid(lv_heroToFollow) == true) && (PointPathingIsConnected(lv_minionPosition, UnitGetPosition(lv_heroToFollow)) == true)) {
                return libAIAI_ge_MinionAIStates_FollowHero;
            }
        }
        return libAIAI_ge_MinionAIStates_HoldPosition;
    }
    if ((lv_targetHero != lp_currentTarget)) {
        libAIAI_gv_minionInfo[lp_minionIndex].lv_forceStateTransition = true;
    }
    libAIAI_gv_minionInfo[lp_minionIndex].lv_targetUnit = lv_targetHero;
    return libAIAI_ge_MinionAIStates_AttackingHero;
}

void libAIAI_gf_MinionAITransitionMinionIntoState (int lp_minionIndex, int lp_state) {
    // Variable Declarations
    int lv_newState;
    point lv_previousPoint;
    point lv_nextWaypoint;
    point lv_heroPosition;
    point lv_offsetHeroPosition;

    // Automatic Variable Declarations
    int autoFCEEF5DD_val;

    // Variable Initialization

    // Implementation
    autoFCEEF5DD_val = lp_state;
    if (autoFCEEF5DD_val == libAIAI_ge_MinionAIStates_Advancing) {
        if ((libAIAI_gv_minionInfo[lp_minionIndex].lv_leashing == true)) {
            UnitIssueOrder(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit, OrderTargetingPoint(AbilityCommand("move", 0), libAIAI_gv_minionInfo[lp_minionIndex].lv_battleStandardPoint), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit, OrderTargetingPoint(AbilityCommand("AttackAlly", 0), libAIAI_gf_MinionAIGetNextWaypointForMinion(lp_minionIndex)), c_orderQueueReplace);
        }
    }
    else if (autoFCEEF5DD_val == libAIAI_ge_MinionAIStates_AttackingMinions) {
        UnitIssueOrder(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit, OrderTargetingUnit(AbilityCommand("AttackAlly", 0), libAIAI_gv_minionInfo[lp_minionIndex].lv_targetUnit), c_orderQueueReplace);
    }
    else if (autoFCEEF5DD_val == libAIAI_ge_MinionAIStates_AttackingStructure) {
        if ((UnitFilterMatch(libAIAI_gv_minionInfo[lp_minionIndex].lv_targetUnit, libAIAI_gv_minionInfo[lp_minionIndex].lv_owner, libAIAI_gv_uF_MinionAI_GetNearestAttackableEnemyStructure) == true) && (libAIAI_gf_MinionAIIsValidTarget(lp_minionIndex, libAIAI_gv_minionInfo[lp_minionIndex].lv_targetUnit) == true)) {
            UnitIssueOrder(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit, OrderTargetingUnit(AbilityCommand("AttackAlly", 0), libAIAI_gv_minionInfo[lp_minionIndex].lv_targetUnit), c_orderQueueReplace);
        }
        else {
            if ((OrderGetAbilityCommand(UnitOrder(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit, 0)) != AbilityCommand("move", 2))) {
                UnitIssueOrder(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
            }
        }
    }
    else if (autoFCEEF5DD_val == libAIAI_ge_MinionAIStates_AttackingHero) {
        UnitIssueOrder(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit, OrderTargetingUnit(AbilityCommand("AttackAlly", 0), libAIAI_gv_minionInfo[lp_minionIndex].lv_targetUnit), c_orderQueueReplace);
    }
    else if (autoFCEEF5DD_val == libAIAI_ge_MinionAIStates_FollowHero) {
        lv_heroPosition = UnitGetPosition(libAIAI_gf_MinionAIGetHerotoFollow(lp_minionIndex));
        if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit), lv_heroPosition) > 2.5)) {
            lv_offsetHeroPosition = libNtve_gf_PointOffsetTowardsPoint(lv_heroPosition, 2.0, UnitGetPosition(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit));
            UnitIssueOrder(libAIAI_gv_minionInfo[lp_minionIndex].lv_minionUnit, OrderTargetingPoint(AbilityCommand("AttackAlly", 0), lv_offsetHeroPosition), c_orderQueueReplace);
        }
    }
    else if (autoFCEEF5DD_val == libAIAI_ge_MinionAIStates_HoldPosition) {
    }
    else {
    }
    if ((lp_state != libAIAI_ge_MinionAIStates_Advancing)) {
        libAIAI_gv_minionInfo[lp_minionIndex].lv_initialWaypoint = 0;
    }
}

void libAIAI_gf_SummonedAIInitialAttackLogic (bool lp_attackCreatorsTarget, unit lp_summonedUnit, unit lp_creatorUnit, bool lp_continuousScan) {
    // Variable Declarations
    unit lv_targetUnit;
    abilcmd lv_attackAbility;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitAbilityExists(lp_summonedUnit, "AttackAlly") == true)) {
        lv_attackAbility = AbilityCommand("AttackAlly", 0);
    }
    else {
        lv_attackAbility = AbilityCommand("attack", 0);
    }
    if ((OrderGetAbilityCommand(UnitOrder(lp_creatorUnit, 0)) == AbilityCommand("attack", 0)) && (lp_attackCreatorsTarget == true)) {
        if ((OrderGetTargetPoint(UnitOrder(lp_creatorUnit, 0)) == null)) {
            lv_targetUnit = OrderGetTargetUnit(UnitOrder(lp_creatorUnit, 0));
            UnitIssueOrder(lp_summonedUnit, OrderTargetingUnit(lv_attackAbility, lv_targetUnit), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lp_summonedUnit, OrderTargetingPoint(lv_attackAbility, OrderGetTargetPoint(UnitOrder(lp_creatorUnit, 0))), c_orderQueueReplace);
        }
    }
    else {
        Wait(0.0625, c_timeGame);
        if ((UnitIsAlive(lp_summonedUnit) == true)) {
            UnitIssueOrder(lp_summonedUnit, OrderTargetingPoint(lv_attackAbility, UnitGetPosition(lp_summonedUnit)), c_orderQueueReplace);
        }

    }
    while ((UnitIsAlive(lp_summonedUnit) == true) && (OrderGetAbilityCommand(UnitOrder(lp_summonedUnit, 0)) == lv_attackAbility) && (UnitIsSelected(lp_summonedUnit, UnitGetOwner(lp_summonedUnit)) == false)) {
        Wait(0.125, c_timeGame);
        if ((lp_continuousScan == true) && (UnitIsAlive(lp_summonedUnit) == true) && ((lv_targetUnit == null) || (UnitIsAlive(lv_targetUnit) == false))) {
            UnitIssueOrder(lp_summonedUnit, OrderTargetingPoint(lv_attackAbility, UnitGetPosition(lp_summonedUnit)), c_orderQueueReplace);
        }

    }
    Wait(0.0625, c_timeGame);
    if ((UnitIsAlive(lp_summonedUnit) == true) && (UnitIsSelected(lp_summonedUnit, UnitGetOwner(lp_summonedUnit)) == false)) {
    }

}

int libAIAI_gf_SummonedAIGetSummonedIndex (unit lp_unit) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto33A6EC53_n = libAIAI_gv_summonedMax;
    int auto33A6EC53_i;

    // Variable Initialization

    // Implementation
    for (auto33A6EC53_i = 1; auto33A6EC53_i <= auto33A6EC53_n; auto33A6EC53_i += 1) {
        lv_i += 1;
        if ((libAIAI_gv_summonedInfo[lv_i].lv_summonedUnit == lp_unit)) {
            return lv_i;
        }

    }
    return -1;
}

void libAIAI_gf_SummonedAICheckIndex (unit lp_summonedUnit) {
    // Variable Declarations
    bool lv_trueFalse;
    int lv_index;

    // Automatic Variable Declarations
    int autoE274C1E2_ae;

    // Variable Initialization
    lv_index = 1;

    // Implementation
    autoE274C1E2_ae = libAIAI_gv_summonedMax;
    lv_index = 1;
    for ( ; lv_index <= autoE274C1E2_ae ; lv_index += 1 ) {
        if ((libAIAI_gv_summonedInfo[lv_index].lv_summonedIsAlive == false)) {
            libAIAI_gv_summonedInfo[lv_index].lv_summonedIsAlive = true;
            libAIAI_gv_summonedInfo[lv_index].lv_summonedUnit = lp_summonedUnit;
            libAIAI_gv_summonedInfo[lv_index].lv_lane = libAIAI_gf_SupportAIGetClosestLaneForUnit(lp_summonedUnit);
            libAIAI_gv_summonedInfo[lv_index].lv_nextPoint = libAIAI_gf_SupportAIGetClosestPointFromLaneForUnit(libAIAI_gv_summonedInfo[lv_index].lv_lane, lp_summonedUnit);
            libAIAI_gv_summonedInfo[lv_index].lv_weaponRange = UnitWeaponRange(lp_summonedUnit, 1);
            break;
        }
    }
}

void libAIAI_gf_SummonedAIFunctionAttack (unit lp_summoned) {
    // Variable Declarations
    int lv_index;
    fixed lv_distance;
    unitgroup lv_minonFromGroup;
    int lv_lane;
    int lv_redTeami;
    int lv_i;
    int lv_numberofpreviouspoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_index = libAIAI_gf_SummonedAIGetSummonedIndex(lp_summoned);
    lv_distance = 5.0;
    lv_minonFromGroup = libNtve_gf_ConvertUnitToUnitGroup(lp_summoned);
    lv_i = 1;

    // Implementation
    if ((UnitIsAlive(lp_summoned) == true)) {
        libAIAI_gv_summonedInfo[lv_index].lv_summonedPosition = UnitGetPosition(lp_summoned);
        lv_lane = libAIAI_gv_summonedInfo[lv_index].lv_lane;
        lv_i = libAIAI_gf_SupportAIGetNumberofClosestPointFromLaneForUnit(lv_lane, lp_summoned);
        lv_redTeami = libGame_gv_laneInfo.lv_lanePointsCount[lv_lane];
    }

    while (true) {
        Wait(0.0625, c_timeGame);
        if ((UnitIsAlive(lp_summoned) == true)) {
            libAIAI_gv_summonedInfo[lv_index].lv_summonedPosition = UnitGetPosition(lp_summoned);
            if ((PlayerGroupHasPlayer(libGame_gv_teams[1].lv_teamPlayerGroup, UnitGetOwner(lp_summoned)) == true)) {
                if ((DistanceBetweenPoints(libAIAI_gv_summonedInfo[lv_index].lv_summonedPosition, libGame_gv_laneInfo.lv_lanePoints[lv_lane][lv_i]) > lv_distance)) {
                    if ((lv_i == 1)) {
                        lv_numberofpreviouspoint = 1;
                    }

                    libAIAI_gf_SummonedAIFunctionAttackSet(libGame_gv_laneInfo.lv_lanePoints[lv_lane][lv_i], libGame_gv_laneInfo.lv_lanePoints[lv_lane][lv_numberofpreviouspoint], lp_summoned);
                    libAIAI_gf_SummonedAIFunctionAttackSwitch(lp_summoned);
                }
                else {
                    if ((lv_i < libGame_gv_laneInfo.lv_lanePointsCount[lv_lane])) {
                        lv_numberofpreviouspoint = (lv_numberofpreviouspoint + 1);
                        lv_i += 1;
                    }

                }
            }
            else {
                if ((DistanceBetweenPoints(UnitGetPosition(lp_summoned), libGame_gv_laneInfo.lv_lanePoints[lv_lane][lv_redTeami]) > lv_distance)) {
                    if ((lv_redTeami == libGame_gv_laneInfo.lv_lanePointsCount[lv_lane])) {
                        lv_numberofpreviouspoint = libGame_gv_laneInfo.lv_lanePointsCount[lv_lane];
                    }

                    libAIAI_gf_SummonedAIFunctionAttackSet(libGame_gv_laneInfo.lv_lanePoints[lv_lane][lv_redTeami], libGame_gv_laneInfo.lv_lanePoints[lv_lane][lv_numberofpreviouspoint], lp_summoned);
                    libAIAI_gf_SummonedAIFunctionAttackSwitch(lp_summoned);
                }
                else {
                    if ((lv_redTeami > 1)) {
                        lv_redTeami -= 1;
                    }

                }
            }
        }
        else {
            libAIAI_gv_summonedInfo[lv_index].lv_lane = 0;
            libAIAI_gv_summonedInfo[lv_index].lv_nextPoint = null;
            libAIAI_gv_summonedInfo[lv_index].lv_summonedUnit = null;
            libAIAI_gv_summonedInfo[lv_index].lv_targetUnit = null;
            libAIAI_gv_summonedInfo[lv_index].lv_summonedPosition = null;
            libAIAI_gv_summonedInfo[lv_index].lv_state = libAIAI_ge_AIStates_HoldPosition;
            libAIAI_gv_summonedInfo[lv_index].lv_summonedIsAlive = false;
            break;
        }
    }
}

void libAIAI_gf_SummonedAIFunctionAttackSet (point lp_nextPoint, point lp_previousPoint, unit lp_summonedUnit) {
    // Variable Declarations
    int lv_index;
    fixed lv_range;
    unitgroup lv_targetUnits;
    int lv_enemyTeam;
    point lv_summonedPosition;
    unit lv_closestUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_index = libAIAI_gf_SummonedAIGetSummonedIndex(lp_summonedUnit);
    lv_targetUnits = UnitGroupEmpty();

    // Implementation
    lv_enemyTeam = libGame_gf_EnemyTeamNumberOfPlayer(UnitGetOwner(lp_summonedUnit));
    lv_summonedPosition = libAIAI_gv_summonedInfo[lv_index].lv_summonedPosition;
    lv_range = libAIAI_gv_summonedInfo[lv_index].lv_weaponRange;
    UnitGroupAddUnitGroup(lv_targetUnits, UnitGroup(null, c_playerAny, RegionCircle(lv_summonedPosition, libAIAI_gv_aIRangedMinionWeaponRange), libAIAI_gv_uF_MinionAI_EnemyMinions, 0));
    UnitGroupAddUnitGroup(lv_targetUnits, UnitGroup(null, c_playerAny, RegionCircle(lv_summonedPosition, libAIAI_gv_aIRangedMinionWeaponRange), libAIAI_gv_uF_MinionAI_EnemyStructure, 0));
    UnitGroupAddUnitGroup(lv_targetUnits, UnitGroup(null, c_playerAny, RegionCircle(lv_summonedPosition, libAIAI_gv_aIRangedMinionWeaponRange), libAIAI_gv_uF_MinionAI_AnyEnemyMinions2, 0));
    UnitGroupAddUnitGroup(lv_targetUnits, UnitGroup(null, c_playerAny, RegionCircle(lv_summonedPosition, libAIAI_gv_aIRangedMinionWeaponRange), libAIAI_gv_uF_MinionAI_EnemyHero, 0));
    if ((UnitGroupCount(lv_targetUnits, c_unitCountAlive) >= 1)) {
        libAIAI_gv_summonedInfo[lv_index].lv_targetUnit = UnitGroupClosestToPoint(lv_targetUnits, lv_summonedPosition);
        libAIAI_gv_summonedInfo[lv_index].lv_state = libAIAI_ge_AIStates_AttackMinion;
    }
    else {
        libAIAI_gv_summonedInfo[lv_index].lv_state = libAIAI_ge_AIStates_Move;
    }
}

void libAIAI_gf_SummonedAIFunctionAttackSwitch (unit lp_summoned) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto1C74799A_val;

    // Variable Initialization
    lv_index = libAIAI_gf_SummonedAIGetSummonedIndex(lp_summoned);

    // Implementation
    auto1C74799A_val = libAIAI_gv_summonedInfo[lv_index].lv_state;
    if (auto1C74799A_val == libAIAI_ge_AIStates_Move) {
        UnitIssueOrder(lp_summoned, OrderTargetingPoint(AbilityCommand("move", 0), libAIAI_gv_summonedInfo[lv_index].lv_nextPoint), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(lp_summoned, OrderTargetingUnit(AbilityCommand("attack", 0), libAIAI_gv_summonedInfo[lv_index].lv_targetUnit), c_orderQueueReplace);
    }
}

void libAIAI_gf_TowerAICheckIndex (unit lp_tower) {
    // Variable Declarations
    int lv_team;
    int lv_lane;

    // Automatic Variable Declarations
    string autoB9FFDDF4_val;

    // Variable Initialization
    lv_lane = libAIAI_gf_SupportAIGetClosestLaneForUnit(lp_tower);

    // Implementation
    libAIAI_gv_towerInfoCurrentCount += 1;
    libAIAI_gv_towerInfo[libAIAI_gv_towerInfoCurrentCount].lv_towerUnit = lp_tower;
    libAIAI_gv_towerInfo[libAIAI_gv_towerInfoCurrentCount].lv_towerIsAlive = true;
    libAIAI_gv_towerInfo[libAIAI_gv_towerInfoCurrentCount].lv_lane = lv_lane;
    UnitSetCustomValue(libAIAI_gv_towerInfo[libAIAI_gv_towerInfoCurrentCount].lv_towerUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_TowerIndex), FixedToInt(libAIAI_gv_towerInfoCurrentCount));
    autoB9FFDDF4_val = UnitGetType(lp_tower);
    if (autoB9FFDDF4_val == "Building_Fort") {
        lv_team = libGame_gf_PlayerGetPlayerTeam(UnitGetOwner(lp_tower));
        libGame_gv_teams[lv_team].lv_towerFort[lv_lane] = lp_tower;
    }
    else if (autoB9FFDDF4_val == "Building_Keep") {
        lv_team = libGame_gf_PlayerGetPlayerTeam(UnitGetOwner(lp_tower));
        libGame_gv_teams[lv_team].lv_towerKeep[lv_lane] = lp_tower;
    }
    else {
    }
}

int libAIAI_gf_TowerAIGetTowerIndex (unit lp_tower) {
    // Automatic Variable Declarations
    // Implementation
    return libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_TowerIndex, lp_tower);
}

string libAIAI_gf_MercAIGetMercUnitTypefromDefenderUnitType (int lp_groupIndex, int lp_defIndex) {
    // Variable Declarations
    string lv_lanerType;

    // Automatic Variable Declarations
    string auto80270CE3_val;

    // Variable Initialization

    // Implementation
    auto80270CE3_val = libAIAI_gv_defenderGroupInfo[lp_groupIndex].lv_defenderUnitsTypeC2ABGameLinkC2BB[lp_defIndex];
    if (auto80270CE3_val == "MercenaryHybridMeleeDefender") {
        lv_lanerType = "MercenaryHybridMeleeLaner";
    }
    else if (auto80270CE3_val == "MercenaryHybridPsionicDefender") {
        lv_lanerType = "MercenaryHybridPsionicLaner";
    }
    else if (auto80270CE3_val == "MercHybridRangedDefender") {
        lv_lanerType = "MercenaryHybridRangedLaner";
    }
    else if (auto80270CE3_val == "MercenaryColossusDefender") {
        lv_lanerType = "MercenaryColossusLaner";
    }
    else {
    }
    return lv_lanerType;
}

int libAIAI_gf_MercAIGetMercIndex (unit lp_merc) {
    // Automatic Variable Declarations
    // Implementation
    return libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_MercIndex, lp_merc);
}

int libAIAI_gf_MercAIGetMercGroupIndex (unit lp_merc) {
    // Automatic Variable Declarations
    // Implementation
    return libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_MercGroupIndex, lp_merc);
}

int libAIAI_gf_MercAIGetMercGroupLane (unit lp_merc) {
    // Automatic Variable Declarations
    // Implementation
    return libAIAI_gv_mercsGroupInfo[libAIAI_gf_MercAIGetMercGroupIndex(lp_merc)].lv_lane;
}

bool libAIAI_gf_MercAICompareMercandBuildingLanes (int lp_mercLane, unit lp_building) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((UnitGetType(lp_building) == "Building_Fort") || (UnitGetType(lp_building) == "Building_Keep"))) {
        if ((libAIAI_gv_towerInfo[libAIAI_gf_TowerAIGetTowerIndex(lp_building)].lv_lane == lp_mercLane)) {
            return true;
        }
        else {
            return false;
        }
    }

    return true;
}

int libAIAI_gf_MercAIGetFreeMercGroup () {
    // Variable Declarations
    int lv_itMercGroup;

    // Automatic Variable Declarations
    int autoF38901B2_ae;

    // Variable Initialization

    // Implementation
    autoF38901B2_ae = libAIAI_gv_mercsMercsGroupsMaxCount;
    lv_itMercGroup = 1;
    for ( ; lv_itMercGroup <= autoF38901B2_ae ; lv_itMercGroup += 1 ) {
        if ((libAIAI_gv_mercsGroupInfo[lv_itMercGroup].lv_groupIsFree == true)) {
            libAIAI_gv_mercsGroupInfo[lv_itMercGroup].lv_groupIsFree = false;
            return lv_itMercGroup;
        }

    }
    return -1;
}

unit libAIAI_gf_MercAIGetMercGroupLeader (int lp_mercGroupIndex) {
    // Automatic Variable Declarations
    // Implementation
    return libAIAI_gv_mercsGroupInfo[lp_mercGroupIndex].lv_mercUnit[libAIAI_gv_mercsGroupInfo[lp_mercGroupIndex].lv_mercLeaderIndex];
}

bool libAIAI_gf_MercAIMercIsLeader (int lp_mercGroupIndex, int lp_mercIndex) {
    // Automatic Variable Declarations
    // Implementation
    return (libAIAI_gv_mercsGroupInfo[lp_mercGroupIndex].lv_mercLeaderIndex == lp_mercIndex);
}

bool libAIAI_gf_MercAIGroupHasMercLeader (int lp_mercGroupIndex) {
    // Automatic Variable Declarations
    // Implementation
    return (libAIAI_gv_mercsGroupInfo[lp_mercGroupIndex].lv_mercLeaderIndex > 0);
}

int libAIAI_gf_MercAIGetNumberofNextPointofMerc (int lp_groupindex, int lp_minionIndex) {
    // Automatic Variable Declarations
    // Implementation
    return libAIAI_gv_mercsGroupInfo[lp_groupindex].lv_mercNextPointNumber[lp_minionIndex];
}

int libAIAI_gf_MercAIGetNumberofPreviousPointofMerc (int lp_groupindex, int lp_minionIndex) {
    // Automatic Variable Declarations
    // Implementation
    return libAIAI_gv_mercsGroupInfo[lp_groupindex].lv_mercPreviousPointNumber[lp_minionIndex];
}

void libAIAI_gf_MercAICreateMercs (int lp_player, int lp_campNumber, int lp_scaleNumber) {
    // Variable Declarations
    int lv_team;
    int lv_freeGroup;
    int lv_itMercIndex;
    string lv_itMercenaryUnit;

    // Automatic Variable Declarations
    int autoCCA44004_ae;

    // Variable Initialization

    // Implementation
    lv_freeGroup = libAIAI_gf_MercAIGetFreeMercGroup();
    lv_team = libGame_gf_PlayerGetPlayerTeam(lp_player);
    libAIAI_gv_mercsGroupInfo[lv_freeGroup].lv_lane = libAIAI_gv_defenderGroupInfo[lp_campNumber].lv_lane;
    libAIAI_gv_mercsGroupInfo[lv_freeGroup].lv_campDiff = libAIAI_gv_defenderGroupInfo[lp_campNumber].lv_campDiff;
    libAIAI_gv_mercsGroupInfo[lv_freeGroup].lv_campPoint = libAIAI_gv_defenderGroupInfo[lp_campNumber].lv_captainPoint;
    autoCCA44004_ae = libAIAI_gv_defenderGroupInfo[lp_campNumber].lv_maxGroupSize;
    lv_itMercIndex = 1;
    for ( ; lv_itMercIndex <= autoCCA44004_ae ; lv_itMercIndex += 1 ) {
        lv_itMercenaryUnit = libAIAI_gf_MercAIGetMercUnitTypefromDefenderUnitType(lp_campNumber, lv_itMercIndex);
        libNtve_gf_CreateUnitsAtPoint2(1, lv_itMercenaryUnit, c_unitCreateIgnorePlacement, lp_player, libAIAI_gv_defenderGroupInfo[lp_campNumber].lv_defenderDefaultPoint[lv_itMercIndex]);
        UnitGroupAdd(libAIAI_gv_mercsGroupInfo[lv_freeGroup].lv_mercGroup, UnitLastCreated());
        UnitXPSetCurrentLevel(UnitLastCreated(), null, libAIAI_gv_defenderGroupInfo[lp_campNumber].lv_scale_Number);
        libAIAI_gf_MercAICheckIndex(UnitLastCreated(), lv_freeGroup, lv_itMercIndex, lp_campNumber);
        if ((libAIAI_gv_defenderGroupInfo[lp_campNumber].lv_campDiff == libAIAI_ge_JungleDefendersDifficulty_Boss)) {
            UnitBehaviorAddPlayer(UnitLastCreated(), "AI_AAIgnoreMinions", lp_player, 1);
            UnitBehaviorAddPlayer(UnitLastCreated(), "AI_AAIgnoreHeroes", lp_player, 1);
        }
    }
    if ((lv_freeGroup > libAIAI_gv_mercAIActiveCampsUpperBound)) {
        libAIAI_gv_mercAIActiveCampsUpperBound = lv_freeGroup;
    }

    libAIAI_gf_MercAICreateMercPath(libAIAI_gf_MercAIGetMercGroupLeader(lv_freeGroup), lv_freeGroup, libAIAI_gv_defenderGroupInfo[lp_campNumber].lv_firstTeamLanePointNumber[lv_team], true);
}

void libAIAI_gf_MercAICheckIndex (unit lp_merc, int lp_groupIndex, int lp_mercIndex, int lp_campNumber) {
    // Variable Declarations
    fixed lv_weaponRange;
    int lv_team;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercUnit[lp_mercIndex] = lp_merc;
    libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercIsAlive[lp_mercIndex] = true;
    UnitSetCustomValue(lp_merc, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_MercIndex), lp_mercIndex);
    UnitSetCustomValue(lp_merc, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_MercGroupIndex), lp_groupIndex);
    lv_weaponRange = UnitWeaponRange(lp_merc, 1);
    if ((lv_weaponRange < libAIAI_gv_aIRangedMinionSearchRadius)) {
        libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercWeaponRange[lp_mercIndex] = libAIAI_gv_aIRangedMinionSearchRadius;
    }
    else {
        libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercWeaponRange[lp_mercIndex] = lv_weaponRange;
    }
    lv_team = libGame_gf_PlayerGetPlayerTeam(UnitGetOwner(lp_merc));
    libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercNextPointNumber[lp_mercIndex] = libAIAI_gv_defenderGroupInfo[lp_campNumber].lv_firstTeamLanePointNumber[lv_team];
    libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercPreviousPointNumber[lp_mercIndex] = (libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercNextPointNumber[lp_mercIndex] - 1);
    if ((libAIAI_gf_MercAIGroupHasMercLeader(lp_groupIndex) == false)) {
        libAIAI_gf_MercAISetMercLeader(lp_groupIndex, lp_mercIndex);
    }
}

trigger auto_libAIAI_gf_MercAICreatePingAtCamp_Trigger = null;
point auto_libAIAI_gf_MercAICreatePingAtCamp_lp_point;
int auto_libAIAI_gf_MercAICreatePingAtCamp_lp_owner;

void libAIAI_gf_MercAICreatePingAtCamp (point lp_point, int lp_owner) {
    auto_libAIAI_gf_MercAICreatePingAtCamp_lp_point = lp_point;
    auto_libAIAI_gf_MercAICreatePingAtCamp_lp_owner = lp_owner;

    if (auto_libAIAI_gf_MercAICreatePingAtCamp_Trigger == null) {
        auto_libAIAI_gf_MercAICreatePingAtCamp_Trigger = TriggerCreate("auto_libAIAI_gf_MercAICreatePingAtCamp_TriggerFunc");
    }

    TriggerExecute(auto_libAIAI_gf_MercAICreatePingAtCamp_Trigger, false, false);
}

bool auto_libAIAI_gf_MercAICreatePingAtCamp_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_libAIAI_gf_MercAICreatePingAtCamp_lp_point;
    int lp_owner = auto_libAIAI_gf_MercAICreatePingAtCamp_lp_owner;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_owner == libCore_gv_cOMPUTER_Blue)) {
        MinimapPing(libGame_gv_teams[1].lv_teamPlayerGroupNoNPCPlayers, lp_point, 5.0, Color(0.00, 33.33, 100.00));
        MinimapPing(libGame_gv_teams[2].lv_teamPlayerGroupNoNPCPlayers, lp_point, 5.0, Color(100.00, 0.00, 0.00));
        MinimapPing(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_point, 5.0, Color(0.00, 33.33, 100.00));
        SoundPlayForPlayer(SoundLink("MercCampTaken_Ally", -1), libCore_gv_cOMPUTER_Blue, libGame_gv_teams[1].lv_teamPlayerGroupNoNPCPlayers, 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("MercCampTaken_Enemy", -1), libCore_gv_cOMPUTER_Blue, libGame_gv_teams[2].lv_teamPlayerGroupNoNPCPlayers, 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("MercCampTaken_Ally", -1), libCore_gv_cOMPUTER_Blue, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], 100.0, 0.0);
    }
    else {
        MinimapPing(libGame_gv_teams[2].lv_teamPlayerGroupNoNPCPlayers, lp_point, 5.0, Color(100.00, 0.00, 0.00));
        MinimapPing(libGame_gv_teams[2].lv_teamPlayerGroupNoNPCPlayers, lp_point, 5.0, Color(0.00, 33.33, 100.00));
        MinimapPing(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_point, 5.0, Color(100.00, 0.00, 0.00));
        SoundPlayForPlayer(SoundLink("MercCampTaken_Enemy", -1), libCore_gv_cOMPUTER_Red, libGame_gv_teams[1].lv_teamPlayerGroupNoNPCPlayers, 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("MercCampTaken_Ally", -1), libCore_gv_cOMPUTER_Red, libGame_gv_teams[2].lv_teamPlayerGroupNoNPCPlayers, 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("MercCampTaken_Enemy", -1), libCore_gv_cOMPUTER_Red, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], 100.0, 0.0);
    }
    return true;
}

void libAIAI_gf_MercAIFunctionAttack (int lp_groupIndex, int lp_mercIndex) {
    // Variable Declarations
    int lv_nextPointNumber;
    int lv_lane;
    int lv_team;
    unit lv_mercenaryUnit;
    point lv_itPosition;

    // Automatic Variable Declarations
    const int auto52EF5077_ae = libCore_gv_bALMaxMercenaryPathLayers;
    int auto52EF5077_var;

    // Variable Initialization
    lv_mercenaryUnit = libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercUnit[lp_mercIndex];

    // Implementation
    if (((libCore_gv_gameOver == true) || (UnitHasBehavior2(lv_mercenaryUnit, "MinionProtoss_WarpingInvulnerable") == true) || (libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercIsAlive[lp_mercIndex] == false) || (UnitIsAlive(libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercUnit[lp_mercIndex]) == false))) {
        return ;
    }

    lv_lane = libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_lane;
    lv_team = libGame_gf_PlayerGetPlayerTeam(UnitGetOwner(lv_mercenaryUnit));
    libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercPosition[lp_mercIndex] = UnitGetPosition(lv_mercenaryUnit);
    lv_itPosition = libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercPosition[lp_mercIndex];
    lv_nextPointNumber = libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercNextPointNumber[lp_mercIndex];
    libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercNextPoint[lp_mercIndex] = libGame_gv_laneInfo.lv_lanePointsForTeam[lv_team][lv_lane][lv_nextPointNumber];
    if ((libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercIsLeashing[lp_mercIndex] == true) && (libAIAI_gf_MercAIFunctionAttackWithinLeashingDistanceofLane(lp_groupIndex, lp_mercIndex) == true)) {
        libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercIsLeashing[lp_mercIndex] = false;
    }

    libAIAI_gf_MercAIFunctionAttackBattleStandard(lp_groupIndex, lp_mercIndex);
    if ((DistanceBetweenPoints(lv_itPosition, libGame_gv_laneInfo.lv_lanePointsForTeam[lv_team][lv_lane][lv_nextPointNumber]) < 3.5) && (libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercIsLeashing[lp_mercIndex] == false)) {
        if ((lv_nextPointNumber < libGame_gv_laneInfo.lv_lanePointsCount[lv_lane])) {
            libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercNextPointNumber[lp_mercIndex] += 1;
            libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercPreviousPointNumber[lp_mercIndex] += 1;
            if ((libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercPreviousPointCampPoint[lp_mercIndex] == true)) {
                libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercPreviousPointCampPoint[lp_mercIndex] = false;
            }
            if ((libAIAI_gf_MercAIMercIsLeader(lp_groupIndex, lp_mercIndex) == true) && (libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_havePath == true)) {
                auto52EF5077_var = 1;
                for ( ; auto52EF5077_var <= auto52EF5077_ae; auto52EF5077_var += 1 ) {
                    PathClearWayPoints(libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercLeaderPath[auto52EF5077_var]);
                }
                libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_havePath = false;
            }
        }

    }
    if ((libAIAI_gf_MercAIGroupHasMercLeader(lp_groupIndex) == false)) {
        libAIAI_gf_MercAISetMercLeader(lp_groupIndex, lp_mercIndex);
    }
    if ((libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_havePath == false) && (libAIAI_gf_MercAIMercIsLeader(lp_groupIndex, lp_mercIndex) == true)) {
        libAIAI_gf_MercAICreateMercPath(lv_mercenaryUnit, lp_groupIndex, lv_nextPointNumber, false);
        libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_havePath = true;
    }
    libAIAI_gf_MercAIFunctionAttackSet(lp_groupIndex, lp_mercIndex, lv_lane);
    libAIAI_gf_MercAIFunctionAttackSwitch(lp_groupIndex, lp_mercIndex);
}

void libAIAI_gf_MercAIFunctionAttackBattleStandard (int lp_mercGroupIndex, int lp_mercIndex) {
    // Variable Declarations
    fixed lv_missionTime;
    point lv_mercenaryPosition;
    point lv_nextWaypoint;
    point lv_previousWaypoint;
    fixed lv_distanceBetweenWaypoints;
    fixed lv_angleBetweenPreviousPointandMinionPosition;
    fixed lv_battleStandardDistance;
    int lv_team;
    int lv_lane;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libAIAI_gv_mercsGroupInfo[lp_mercGroupIndex].lv_lane > libGame_gv_laneInfo.lv_laneCount)) {
        return ;
    }

    lv_missionTime = GameGetMissionTime();
    if ((libAIAI_gv_mercsGroupInfo[lp_mercGroupIndex].lv_mercBattleStandardLastUpdate[lp_mercIndex] >= lv_missionTime)) {
        return ;
    }

    lv_team = libGame_gf_PlayerGetPlayerTeam(UnitGetOwner(libAIAI_gv_mercsGroupInfo[lp_mercGroupIndex].lv_mercUnit[lp_mercIndex]));
    lv_lane = libAIAI_gv_mercsGroupInfo[lp_mercGroupIndex].lv_lane;
    lv_mercenaryPosition = UnitGetPosition(libAIAI_gv_mercsGroupInfo[lp_mercGroupIndex].lv_mercUnit[lp_mercIndex]);
    lv_nextWaypoint = libGame_gv_laneInfo.lv_lanePointsForTeam[lv_team][lv_lane][libAIAI_gv_minionInfo[lp_mercIndex].lv_numberofNextPoint];
    if ((libAIAI_gv_mercsGroupInfo[lp_mercGroupIndex].lv_mercPreviousPointCampPoint[lp_mercIndex] == true)) {
        lv_previousWaypoint = libAIAI_gv_mercsGroupInfo[lp_mercGroupIndex].lv_campPoint;
    }
    else {
        lv_previousWaypoint = libGame_gv_laneInfo.lv_lanePointsForTeam[lv_team][lv_lane][libAIAI_gv_minionInfo[lp_mercIndex].lv_numberofPreviousPoint];
    }
    lv_distanceBetweenWaypoints = DistanceBetweenPoints(lv_previousWaypoint, lv_nextWaypoint);
    lv_angleBetweenPreviousPointandMinionPosition = (AngleBetweenPoints(lv_previousWaypoint, lv_mercenaryPosition) * AngleBetweenPoints(lv_previousWaypoint, lv_nextWaypoint));
    lv_battleStandardDistance = (Cos(lv_angleBetweenPreviousPointandMinionPosition) * DistanceBetweenPoints(lv_previousWaypoint, lv_mercenaryPosition));
    if ((lv_battleStandardDistance < 0.0)) {
        lv_battleStandardDistance = 0.0;
    }

    libAIAI_gv_minionInfo[lp_mercIndex].lv_battleStandardPoint = libNtve_gf_PointOffsetTowardsPoint(lv_previousWaypoint, lv_battleStandardDistance, lv_nextWaypoint);
    libAIAI_gv_minionInfo[lp_mercIndex].lv_battleStandardLastUpdate = lv_missionTime;
}

bool libAIAI_gf_MercAIFunctionAttackWithinLeashingDistanceofLane (int lp_mercGroupIndex, int lp_mercIndex) {
    // Variable Declarations
    fixed lv_distanceToBattleStandard;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libAIAI_gf_MercAIFunctionAttackBattleStandard(lp_mercGroupIndex, lp_mercIndex);
    lv_distanceToBattleStandard = DistanceBetweenPoints(libAIAI_gv_mercsGroupInfo[lp_mercGroupIndex].lv_mercPosition[lp_mercIndex], libAIAI_gv_mercsGroupInfo[lp_mercGroupIndex].lv_mercBattleStandardPoint[lp_mercIndex]);
    if ((lv_distanceToBattleStandard <= libAIAI_gv_aILeashOffDistance)) {
        return true;
    }
    else {
        return false;
    }
}

void libAIAI_gf_MercAIFunctionAttackSet (int lp_groupIndex, int lp_mercIndex, int lp_lane) {
    // Variable Declarations
    unit lv_mercenary;
    fixed lv_range;
    fixed lv_pathingCostToBattleStandard;
    unit lv_newTarget;
    unit lv_oldTarget;
    int lv_distanceOldTargetMercenary;
    order lv_currentOrder;
    abilcmd lv_currentAbilityCommand;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mercenary = libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercUnit[lp_mercIndex];
    lv_range = libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercWeaponRange[lp_mercIndex];

    // Implementation
    lv_oldTarget = libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercTargetUnit[lp_mercIndex];
    if (((lv_oldTarget != null) || (UnitIsValid(lv_oldTarget) == true))) {
        lv_distanceOldTargetMercenary = PointPathingCost(UnitGetPosition(lv_oldTarget), UnitGetPosition(lv_mercenary));
    }
    if ((lv_currentOrder != null) && ((lv_currentAbilityCommand != AbilityCommand("stop", 0)) || (lv_currentAbilityCommand != AbilityCommand("move", 0)) || (lv_currentAbilityCommand != AbilityCommand("move", 4)) || (lv_currentAbilityCommand != AbilityCommand("attack", 0)) || (lv_currentAbilityCommand != AbilityCommand("AttackAlly", 0)) || (lv_currentAbilityCommand != AbilityCommand("move", 2)))) {
        return ;
    }
    if ((libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercIsLeashing[lp_mercIndex] == false) && (UnitIsValid(libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercTargetUnit[lp_mercIndex]) == true) && (UnitIsValid(libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercUnit[lp_mercIndex]) == true)) {
        libAIAI_gf_MercAIFunctionAttackBattleStandard(lp_groupIndex, lp_mercIndex);
        lv_pathingCostToBattleStandard = IntToFixed(PointPathingCost(libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercPosition[lp_mercIndex], libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercBattleStandardPoint[lp_mercIndex]));
        if ((lv_pathingCostToBattleStandard >= libAIAI_gv_aIMaxPathDistance)) {
            lv_pathingCostToBattleStandard = DistanceBetweenPoints(libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercPosition[lp_mercIndex], libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercBattleStandardPoint[lp_mercIndex]);
        }
        if ((lv_pathingCostToBattleStandard >= libAIAI_gv_aILeashOnDistance)) {
            libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercTargetUnit[lp_mercIndex] = null;
            libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercIsLeashing[lp_mercIndex] = true;
            libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercState[lp_mercIndex] = libAIAI_ge_AIStates_Move;
        }
    }
    if ((libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercIsLeashing[lp_mercIndex] == true)) {
        libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercTargetUnit[lp_mercIndex] = null;
        libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercState[lp_mercIndex] = libAIAI_ge_AIStates_Move;
        return ;
    }
    libAIAI_gf_MercAIFunctionAbility(lv_mercenary);
    if ((libAIAI_gf_SupportAIAnyEnemyMinionsInRangeOfUnit(lv_mercenary, lv_range) == true) && (UnitHasBehavior2(lv_mercenary, "AI_AAIgnoreMinions") == false)) {
        lv_newTarget = libAIAI_gf_SupportAIGetNearestEnemyMinionInRangeOfUnit(lv_mercenary, lv_range);
        if ((libAIAI_gf_SupportAISourceandTargetareBehindorInFrontoftheGate(lv_newTarget, lv_mercenary) == true)) {
            if (((lv_oldTarget != null) || (UnitIsValid(lv_oldTarget) == false))) {
                if ((UnitTypeTestAttribute(UnitGetType(libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercTargetUnit[lp_mercIndex]), c_unitAttributeBiological) == true) && (UnitIsValid(libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercTargetUnit[lp_mercIndex]) == true) && (lv_distanceOldTargetMercenary < PointPathingCost(UnitGetPosition(lv_mercenary), UnitGetPosition(lv_newTarget)))) {
                    return ;
                }
            }
            libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercTargetUnit[lp_mercIndex] = lv_newTarget;
            libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercState[lp_mercIndex] = libAIAI_ge_AIStates_AttackMinion;
            return ;
        }
    }

    if ((libAIAI_gf_SupportAIAnyEnemyStructuresInRangeOfUnit(lv_mercenary, lv_range) == true)) {
        lv_newTarget = libAIAI_gf_SupportAIGetNearestEnemyStructureInRangeOfUnit(lv_mercenary, lv_range);
        if ((libAIAI_gf_MercAICompareMercandBuildingLanes(lp_lane, libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercTargetUnit[lp_mercIndex]) == true)) {
            if ((lv_oldTarget != null)) {
                if ((UnitTypeTestAttribute(UnitGetType(libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercTargetUnit[lp_mercIndex]), c_unitAttributeStructure) == true) && (UnitIsValid(libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercTargetUnit[lp_mercIndex]) == true) && (lv_distanceOldTargetMercenary < PointPathingCost(UnitGetPosition(lv_mercenary), UnitGetPosition(lv_newTarget))) && (lv_oldTarget != null)) {
                    return ;
                }
            }
            libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercTargetUnit[lp_mercIndex] = lv_newTarget;
            libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercState[lp_mercIndex] = libAIAI_ge_AIStates_AttackStructure;
            return ;
        }

    }

    if ((libAIAI_gf_SupportAIAnyEnemyHeroesInRangeOfUnit(lv_mercenary, lv_range) == true) && (UnitHasBehavior2(lv_mercenary, "AI_AAIgnoreHeroes") == false)) {
        lv_newTarget = libAIAI_gf_SupportAIGetNearestEnemyHeroInRangeOfUnit(lv_mercenary, lv_range);
        if ((UnitTypeTestAttribute(UnitGetType(libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercTargetUnit[lp_mercIndex]), c_unitAttributeHeroic) == true) && (UnitIsValid(libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercTargetUnit[lp_mercIndex]) == true) && (lv_distanceOldTargetMercenary < PointPathingCost(UnitGetPosition(lv_mercenary), UnitGetPosition(lv_newTarget)))) {
            return ;
        }
        libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercTargetUnit[lp_mercIndex] = lv_newTarget;
        libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercState[lp_mercIndex] = libAIAI_ge_AIStates_AttackHero;
        return ;
    }

    libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercTargetUnit[lp_mercIndex] = null;
    libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercState[lp_mercIndex] = libAIAI_ge_AIStates_Move;
}

void libAIAI_gf_MercAIFunctionAbility (unit lp_mercenary) {
    // Variable Declarations
    unitgroup lv_scanGroup;

    // Automatic Variable Declarations
    string autoB345BA86_val;

    // Variable Initialization
    lv_scanGroup = UnitGroupEmpty();

    // Implementation
    autoB345BA86_val = UnitGetType(lp_mercenary);
    if (autoB345BA86_val == "MercenaryColossusLaner") {
        if ((UnitGetCooldown(lp_mercenary, "Abil/Mercenary_Colossus_ChargedBlast") <= 0.0)) {
            lv_scanGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(lp_mercenary), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mercenary), 7.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
            if ((UnitGroupCount(lv_scanGroup, c_unitCountAlive) >= 1)) {
                UnitIssueOrder(lp_mercenary, OrderTargetingPoint(AbilityCommand("Mercenary_Colossus_ChargedBlast", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_scanGroup, UnitGetPosition(lp_mercenary)))), c_orderQueueReplace);
                return ;
            }
        }
        if ((UnitGetCooldown(lp_mercenary, "Abil/Mercenary_Colossus_FireBeam") <= 0.0)) {
            lv_scanGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(lp_mercenary), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mercenary), 7.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
            if ((UnitGroupCount(lv_scanGroup, c_unitCountAlive) >= 1)) {
                UnitIssueOrder(lp_mercenary, Order(AbilityCommand("Mercenary_Colossus_FireBeam", 0)), c_orderQueueReplace);
            }
        }
    }
    else {
    }
}

void libAIAI_gf_MercAIFunctionAttackSwitch (int lp_mercGroup, int lp_mercIndex) {
    // Variable Declarations
    unit lv_itMerc;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_itMerc = libAIAI_gv_mercsGroupInfo[lp_mercGroup].lv_mercUnit[lp_mercIndex];

    // Implementation
    if ((libAIAI_gv_mercsGroupInfo[lp_mercGroup].lv_mercState[lp_mercIndex] == libAIAI_ge_AIStates_Move)) {
        UnitIssueOrder(lv_itMerc, OrderTargetingPoint(AbilityCommand("move", 0), libAIAI_gv_mercsGroupInfo[lp_mercGroup].lv_mercNextPoint[lp_mercIndex]), c_orderQueueReplace);
        return ;
    }
    else if ((libAIAI_gv_mercsGroupInfo[lp_mercGroup].lv_mercState[lp_mercIndex] == libAIAI_ge_AIStates_HoldPosition)) {
        UnitIssueOrder(lv_itMerc, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        return ;
    }
    UnitIssueOrder(lv_itMerc, OrderTargetingUnit(AbilityCommand("AttackAlly", 0), libAIAI_gv_mercsGroupInfo[lp_mercGroup].lv_mercTargetUnit[lp_mercIndex]), c_orderQueueReplace);
}

void libAIAI_gf_MercAICreateMercPath (unit lp_merc, int lp_groupIndex, int lp_firstPointNumber, bool lp_newPath) {
    // Variable Declarations
    int lv_itPointNumber;
    int lv_team;
    int lv_lane;
    int lv_itPoint;
    int lv_itPath;
    point lv_pointToAdd;
    point lv_pointNext;

    // Automatic Variable Declarations
    int auto57367CDA_ae;
    int autoBA0009F4_ae;
    int autoD7C49797_ae;

    // Variable Initialization

    // Implementation
    lv_team = libGame_gf_PlayerGetPlayerTeam(UnitGetOwner(lp_merc));
    lv_lane = libAIAI_gf_MercAIGetMercGroupLane(lp_merc);
    if ((libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercLeaderPath[1] == 0) && (libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercLeaderPath[2] == 0) && (libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercLeaderPath[3] == 0)) {
        libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_havePath = true;
        PathCreateForUnit(libGame_gv_teams[1].lv_teamPlayerGroup, lp_merc);
        libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercLeaderPath[1] = PathLastCreated();
        PathCreateForUnit(libGame_gv_teams[2].lv_teamPlayerGroup, lp_merc);
        libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercLeaderPath[2] = PathLastCreated();
        PathCreateForUnit(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_merc);
        libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercLeaderPath[3] = PathLastCreated();
        if ((UnitGetOwner(lp_merc) == libCore_gv_cOMPUTER_Blue)) {
            PathSetColor(libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercLeaderPath[1], c_pathLocationMinimap, ColorWithAlpha(0.00, 50.20, 100.00, 89.41));
            PathSetColor(libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercLeaderPath[2], c_pathLocationMinimap, ColorWithAlpha(100.00, 24.71, 24.71, 89.02));
            PathSetColor(libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercLeaderPath[3], c_pathLocationMinimap, ColorWithAlpha(0.00, 50.20, 100.00, 89.41));
        }
        else {
            PathSetColor(libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercLeaderPath[1], c_pathLocationMinimap, ColorWithAlpha(100.00, 24.71, 24.71, 89.02));
            PathSetColor(libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercLeaderPath[2], c_pathLocationMinimap, ColorWithAlpha(0.00, 50.20, 100.00, 89.41));
            PathSetColor(libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercLeaderPath[3], c_pathLocationMinimap, ColorWithAlpha(100.00, 24.71, 24.71, 89.02));
        }
    }

    auto57367CDA_ae = libCore_gv_bALMaxMercenaryPathLayers;
    lv_itPath = 1;
    for ( ; lv_itPath <= auto57367CDA_ae ; lv_itPath += 1 ) {
        PathSetSourceUnit(libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercLeaderPath[lv_itPath], lp_merc);
        PathSetDestinationUnit(libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercLeaderPath[lv_itPath], libGame_gv_teams[libGame_gf_EnemyTeamNumberOfTeam(lv_team)].lv_core);
        PathSetVisible(libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercLeaderPath[lv_itPath], c_pathLocationWorld, false);
        PathSetVisible(libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercLeaderPath[lv_itPath], c_pathLocationMinimap, true);
    }
    autoBA0009F4_ae = libGame_gv_laneInfo.lv_lanePointsCount[lv_lane];
    lv_itPointNumber = lp_firstPointNumber;
    for ( ; lv_itPointNumber <= autoBA0009F4_ae ; lv_itPointNumber += 1 ) {
        autoD7C49797_ae = libCore_gv_bALMaxMercenaryPathLayers;
        lv_itPath = 1;
        for ( ; lv_itPath <= autoD7C49797_ae ; lv_itPath += 1 ) {
            lv_pointToAdd = libGame_gv_laneInfo.lv_lanePointsForTeam[lv_team][lv_lane][lv_itPointNumber];
            PathAddWayPoint(libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercLeaderPath[lv_itPath], lv_pointToAdd);
            if ((lp_newPath == true)) {
                lv_pointNext = libGame_gv_laneInfo.lv_lanePointsForTeam[lv_team][lv_lane][(lv_itPointNumber - 1)];
                if ((UnitGetOwner(lp_merc) == libCore_gv_cOMPUTER_Blue)) {
                    libNtve_gf_CreatePingFacingAngle(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, "StormPingArrow", lv_pointToAdd, ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 1.0, AngleBetweenPoints(lv_pointToAdd, lv_pointNext));
                    PingSetScale(PingLastCreated(), 0.3);
                    libNtve_gf_CreatePingFacingAngle(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, "StormPingArrow", lv_pointToAdd, ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 1.0, AngleBetweenPoints(lv_pointToAdd, lv_pointNext));
                    PingSetScale(PingLastCreated(), 0.3);
                    libNtve_gf_CreatePingFacingAngle(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "StormPingArrow", lv_pointToAdd, ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 1.0, AngleBetweenPoints(lv_pointToAdd, lv_pointNext));
                    PingSetScale(PingLastCreated(), 0.3);
                }
                else {
                    libNtve_gf_CreatePingFacingAngle(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, "StormPingArrow", lv_pointToAdd, ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 1.0, AngleBetweenPoints(lv_pointToAdd, lv_pointNext));
                    PingSetScale(PingLastCreated(), 0.3);
                    libNtve_gf_CreatePingFacingAngle(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, "StormPingArrow", lv_pointToAdd, ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 1.0, AngleBetweenPoints(lv_pointToAdd, lv_pointNext));
                    PingSetScale(PingLastCreated(), 0.3);
                    libNtve_gf_CreatePingFacingAngle(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "StormPingArrow", lv_pointToAdd, ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 1.0, AngleBetweenPoints(lv_pointToAdd, lv_pointNext));
                    PingSetScale(PingLastCreated(), 0.3);
                }
            }
        }
    }
}

void libAIAI_gf_MercAISetMercLeader (int lp_mercGroupIndex, int lp_mercIndex) {
    // Variable Declarations
    unit lv_mercenaryUnit;

    // Automatic Variable Declarations
    int autoE86119E7_val;

    // Variable Initialization

    // Implementation
    libAIAI_gv_mercsGroupInfo[lp_mercGroupIndex].lv_mercLeaderIndex = lp_mercIndex;
    lv_mercenaryUnit = libAIAI_gv_mercsGroupInfo[lp_mercGroupIndex].lv_mercUnit[lp_mercIndex];
    libNtve_gf_SendActorMessageToUnit(lv_mercenaryUnit, "MinimapIconScale 0.750000");
    libNtve_gf_SendActorMessageToUnit(lv_mercenaryUnit, "SetMinimapVisibility 1");
    autoE86119E7_val = libAIAI_gv_mercsGroupInfo[lp_mercGroupIndex].lv_campDiff;
    if (autoE86119E7_val == libAIAI_ge_JungleDefendersDifficulty_Boss) {
        libNtve_gf_SendActorMessageToUnit(lv_mercenaryUnit, "MinimapIcon assets\\Textures\\UI_MinimapIcon_Merc_Unit_Boss.dds");
        ActorSendAsText(libNtve_gf_MainActorofUnit(lv_mercenaryUnit), TextExpressionAssemble("Param/Expression/lib_AIAI_11BF6F1C"));
    }
    else if (autoE86119E7_val == libAIAI_ge_JungleDefendersDifficulty_Elite) {
        libNtve_gf_SendActorMessageToUnit(lv_mercenaryUnit, "MinimapIcon assets\\Textures\\UI_MinimapIcon_Merc_Unit_Elite.dds");
        ActorSendAsText(libNtve_gf_MainActorofUnit(lv_mercenaryUnit), TextExpressionAssemble("Param/Expression/lib_AIAI_1527E8E7"));
    }
    else if (autoE86119E7_val == libAIAI_ge_JungleDefendersDifficulty_Medium) {
        libNtve_gf_SendActorMessageToUnit(lv_mercenaryUnit, "MinimapIcon assets\\Textures\\UI_MinimapIcon_Merc_Unit_Easy.dds");
        ActorSendAsText(libNtve_gf_MainActorofUnit(lv_mercenaryUnit), TextExpressionAssemble("Param/Expression/lib_AIAI_06091000"));
    }
    else {
    }
}

void libAIAI_gf_MercAIClearInfo (int lp_groupIndex, int lp_mercIndex) {
    // Variable Declarations
    unit lv_mercenaryUnit;
    int lv_itUnitIndex;
    int lv_itPath;

    // Automatic Variable Declarations
    int auto83B2443E_ae;

    // Variable Initialization

    // Implementation
    if ((lp_groupIndex <= 0) && (lp_mercIndex <= 0)) {
        return ;
    }
    if ((libAIAI_gf_MercAIMercIsLeader(lp_groupIndex, lp_mercIndex) == true)) {
        auto83B2443E_ae = libCore_gv_bALMaxMercenaryPathLayers;
        lv_itPath = 1;
        for ( ; lv_itPath <= auto83B2443E_ae ; lv_itPath += 1 ) {
            PathDestroy(libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercLeaderPath[lv_itPath]);
            libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercLeaderPath[lv_itPath] = 0;
        }
        libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercLeaderIndex = 0;
        libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_havePath = false;
    }
    libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercIsAlive[lp_mercIndex] = false;
    libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercBattleStandardLastUpdate[lp_mercIndex] = 0.0;
    libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercBattleStandardPoint[lp_mercIndex] = null;
    libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercIsLeashing[lp_mercIndex] = false;
    libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercNextPoint[lp_mercIndex] = null;
    libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercNextPointNumber[lp_mercIndex] = 0;
    libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercPosition[lp_mercIndex] = null;
    libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercPreviousPointNumber[lp_mercIndex] = 0;
    libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercState[lp_mercIndex] = libAIAI_ge_AIStates_Nothing;
    libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercTargetUnit[lp_mercIndex] = null;
    libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercUnit[lp_mercIndex] = null;
    libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercWeaponRange[lp_mercIndex] = 0.0;
    libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercPreviousPointCampPoint[lp_mercIndex] = true;
    lv_mercenaryUnit = libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercUnit[lp_mercIndex];
    UnitGroupRemove(libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercGroup, lv_mercenaryUnit);
    UnitSetCustomValue(lv_mercenaryUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_MercIndex), 0.0);
    UnitSetCustomValue(lv_mercenaryUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_MercGroupIndex), 0.0);
    if ((UnitGroupCount(libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_mercGroup, c_unitCountAlive) <= 0)) {
        libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_lane = 0;
        libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_campPoint = null;
        libAIAI_gv_mercsGroupInfo[lp_groupIndex].lv_groupIsFree = true;
        libAIAI_gf_MercAILowdownUpperBound(lp_groupIndex);
    }
}

void libAIAI_gf_MercAILowdownUpperBound (int lp_campNumber) {
    // Variable Declarations
    int lv_itMercGroup;

    // Automatic Variable Declarations
    const int auto5B85756B_ae = 1;
    const int auto5B85756B_ai = -1;

    // Variable Initialization

    // Implementation
    if ((lp_campNumber <= 0)) {
        return ;
    }
    if ((lp_campNumber == libAIAI_gv_mercAIActiveCampsUpperBound)) {
        lv_itMercGroup = (libAIAI_gv_mercAIActiveCampsUpperBound - 1);
        for ( ; ( (auto5B85756B_ai >= 0 && lv_itMercGroup <= auto5B85756B_ae) || (auto5B85756B_ai < 0 && lv_itMercGroup >= auto5B85756B_ae) ) ; lv_itMercGroup += auto5B85756B_ai ) {
            if ((libAIAI_gv_mercsGroupInfo[lv_itMercGroup].lv_groupIsFree == false)) {
                libAIAI_gv_mercAIActiveCampsUpperBound = lv_itMercGroup;
                return ;
            }
        }
        libAIAI_gv_mercAIActiveCampsUpperBound = 0;
    }
}

trigger auto_libAIAI_gf_DefenderAISpawnDefenderCamp_Trigger = null;
int auto_libAIAI_gf_DefenderAISpawnDefenderCamp_lp_campNumber;
fixed auto_libAIAI_gf_DefenderAISpawnDefenderCamp_lp_respawnTime;

void libAIAI_gf_DefenderAISpawnDefenderCamp (int lp_campNumber, fixed lp_respawnTime) {
    auto_libAIAI_gf_DefenderAISpawnDefenderCamp_lp_campNumber = lp_campNumber;
    auto_libAIAI_gf_DefenderAISpawnDefenderCamp_lp_respawnTime = lp_respawnTime;

    if (auto_libAIAI_gf_DefenderAISpawnDefenderCamp_Trigger == null) {
        auto_libAIAI_gf_DefenderAISpawnDefenderCamp_Trigger = TriggerCreate("auto_libAIAI_gf_DefenderAISpawnDefenderCamp_TriggerFunc");
    }

    TriggerExecute(auto_libAIAI_gf_DefenderAISpawnDefenderCamp_Trigger, false, false);
}

bool auto_libAIAI_gf_DefenderAISpawnDefenderCamp_TriggerFunc (bool testConds, bool runActions) {
    int lp_campNumber = auto_libAIAI_gf_DefenderAISpawnDefenderCamp_lp_campNumber;
    fixed lp_respawnTime = auto_libAIAI_gf_DefenderAISpawnDefenderCamp_lp_respawnTime;

    // Variable Declarations
    timer lv_itTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_itTimer = TimerCreate();

    // Implementation
    TimerStart(lv_itTimer, lp_respawnTime, false, c_timeGame);
    while ((TimerGetRemaining(lv_itTimer) > 0.0)) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_jCIInfo[lp_campNumber].lv_campTimerLabel, TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(lv_itTimer))), libCore_gv_activeHumanPlayers);
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_SetDialogItemText(libUIUI_gv_jCIInfo[lp_campNumber].lv_campTimerLabel, TextTimeFormat(StringToText("<min2/>:<sec2/>"), 0), libCore_gv_activeHumanPlayers);
    libAIAI_gf_DefenderAISpawnDefenders(libAIAI_gv_defenderGroupInfo[lp_campNumber].lv_campDiff, lp_campNumber);
    libUIUI_gf_JCIChangeOwner(libCore_gv_cOMPUTER_Neutral, lp_campNumber);
    return true;
}

void libAIAI_gf_DefenderAISpawnDefenders (int lp_campDiff, int lp_campNumber) {
    // Variable Declarations
    int lv_defenderIndex;

    // Automatic Variable Declarations
    int autoF5033A5A_val;
    int auto701185A1_ae;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gv_defenderGroupInfo[lp_campNumber].lv_captainUnit == null)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "JungleCampIconUnitTeamColor", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, libAIAI_gv_defenderGroupInfo[lp_campNumber].lv_captainPoint);
        libAIAI_gv_defenderGroupInfo[lp_campNumber].lv_captainUnit = UnitLastCreated();
        autoF5033A5A_val = lp_campDiff;
        if (autoF5033A5A_val == libAIAI_ge_JungleDefendersDifficulty_Boss) {
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "MinimapIcon assets\\Textures\\UI_MinimapIcon_Merc_Camp_Boss.dds");
            libNtve_gf_SetDialogItemText(libUIUI_gv_jCIInfo[lp_campNumber].lv_campDescriptionLabel, StringExternal("Param/Value/lib_AIAI_2EB85818"), PlayerGroupAll());
        }
        else if (autoF5033A5A_val == libAIAI_ge_JungleDefendersDifficulty_Elite) {
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "MinimapIcon assets\\Textures\\UI_MinimapIcon_Merc_Camp_Elite.dds");
            libNtve_gf_SetDialogItemText(libUIUI_gv_jCIInfo[lp_campNumber].lv_campDescriptionLabel, StringExternal("Param/Value/lib_AIAI_1FEA6A1A"), PlayerGroupAll());
        }
        else if (autoF5033A5A_val == libAIAI_ge_JungleDefendersDifficulty_Medium) {
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "MinimapIcon assets\\Textures\\UI_MinimapIcon_Merc_Camp_Easy.dds");
            libNtve_gf_SetDialogItemText(libUIUI_gv_jCIInfo[lp_campNumber].lv_campDescriptionLabel, StringExternal("Param/Value/lib_AIAI_FF04F414"), PlayerGroupAll());
        }
        else {
        }
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "MinimapIconScale 0.750000");
    }
    UnitSetOwner(libAIAI_gv_defenderGroupInfo[lp_campNumber].lv_captainUnit, libCore_gv_cOMPUTER_Neutral, true);
    if ((libAIAI_gv_defenderGroupInfo[lp_campNumber].lv_scale_Number_Skipped > 0)) {
        libAIAI_gv_defenderGroupInfo[lp_campNumber].lv_scale_Number += libAIAI_gv_defenderGroupInfo[lp_campNumber].lv_scale_Number_Skipped;
        libAIAI_gv_defenderGroupInfo[lp_campNumber].lv_scale_Number_Skipped = 0;
    }
    auto701185A1_ae = libAIAI_gv_defenderGroupInfo[lp_campNumber].lv_maxGroupSize;
    lv_defenderIndex = 1;
    for ( ; lv_defenderIndex <= auto701185A1_ae ; lv_defenderIndex += 1 ) {
        libNtve_gf_CreateUnitsAtPoint2(1, libAIAI_gv_defenderGroupInfo[lp_campNumber].lv_defenderUnitsTypeC2ABGameLinkC2BB[lv_defenderIndex], c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Hostile, libAIAI_gv_defenderGroupInfo[lp_campNumber].lv_defenderDefaultPoint[lv_defenderIndex]);
        libAIAI_gf_DefenderAICheckIndex(UnitLastCreated(), lp_campNumber, lv_defenderIndex);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(libAIAI_gv_defenderGroupInfo[lp_campNumber].lv_defenderDefaultPoint[lv_defenderIndex], 1.0, PointGetFacing(libAIAI_gv_defenderGroupInfo[lp_campNumber].lv_defenderDefaultPoint[lv_defenderIndex]))), c_orderQueueReplace);
    }
}

void libAIAI_gf_DefenderAICheckIndex (unit lp_defenderUnit, int lp_groupIndex, int lp_defenderNumber) {
    // Variable Declarations
    bool lv_trueFalse;
    int lv_i;
    fixed lv_scalingdefendervalue;
    int lv_itUnit;
    int lv_indexGroup;
    fixed lv_expValue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libAIAI_gv_defenderGroupInfo[lp_groupIndex].lv_defenderUnit[lp_defenderNumber] = lp_defenderUnit;
    libAIAI_gv_defenderGroupInfo[lp_groupIndex].lv_currentGroupSize += 1;
    UnitGroupAdd(libAIAI_gv_defenderGroupInfo[lp_groupIndex].lv_defendersGroup, lp_defenderUnit);
    libAIAI_gv_defenderGroupInfo[lp_groupIndex].lv_defenderIsAlive[lp_defenderNumber] = true;
    UnitSetCustomValue(lp_defenderUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_DefenderIndex), lp_defenderNumber);
    UnitSetCustomValue(lp_defenderUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_DefenderGroupIndex), lp_groupIndex);
    UnitXPSetCurrentLevel(lp_defenderUnit, null, libAIAI_gv_defenderGroupInfo[lp_defenderNumber].lv_scale_Number);
    if ((libCore_gv_dEBUGMinionTooltipsEnabled == true)) {
        TextTagCreate(((StringExternal("Param/Value/lib_AIAI_D14AED26") + IntToText(lp_defenderNumber)) + StringExternal("Param/Value/lib_AIAI_1FE339D8") + (StringExternal("Param/Value/lib_AIAI_5BEE6772") + IntToText(lp_groupIndex))), 24, UnitGetPosition(lp_defenderUnit), 1.0, true, false, PlayerGroupAll());
        while (!((UnitIsAlive(lp_defenderUnit) == false))) {
            Wait(1.0, c_timeGame);
        }
        TextTagDestroy(TextTagLastCreated());
    }

}

void libAIAI_gf_DefenderAIClearDefenderInfo (int lp_defenderGroupIndex, int lp_defenderIndex) {
    // Variable Declarations
    unit lv_locDefenderUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_locDefenderUnit = libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderUnit[lp_defenderIndex];

    // Implementation
    libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderIsAlive[lp_defenderIndex] = false;
    UnitSetCustomValue(lv_locDefenderUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_DefenderIndex), 0.0);
    UnitSetCustomValue(lv_locDefenderUnit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_DefenderGroupIndex), 0.0);
    UnitGroupRemove(libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defendersGroup, lv_locDefenderUnit);
    libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderTarget[lp_defenderIndex] = null;
    libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_currentGroupSize -= 1;
    if ((UnitGroupCount(libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defendersGroup, c_unitCountAlive) <= 0)) {
        libGame_gf_CapturePointEnable(lp_defenderGroupIndex);
        libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_groupIsFighting = false;
        libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_groupisCapturing = true;
        UnitGroupClear(libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defendersGroup);
        libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_currentGroupSize = 0;
    }
}

void libAIAI_gf_CampGrantXPForCampForTeam (int lp_campId, int lp_team) {
    // Variable Declarations
    fixed lv_xPValue;

    // Automatic Variable Declarations
    playergroup auto5F9A002E_g;
    int auto5F9A002E_var;

    // Variable Initialization

    // Implementation
    lv_xPValue = libAIAI_gv_defenderGroupInfo[lp_campId].lv_eXP_Camp_Default;
    libGame_gv_teams[lp_team].lv_xPTotals2 += lv_xPValue;
    libGame_gv_teams[lp_team].lv_xPTotals += lv_xPValue;
    UnitXPAddXP(libGame_gv_teams[lp_team].lv_core, "TeamVeterancyBehavior", lv_xPValue);
    auto5F9A002E_g = libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers;
    auto5F9A002E_var = -1;
    while (true) {
        auto5F9A002E_var = PlayerGroupNextPlayer(auto5F9A002E_g, auto5F9A002E_var);
        if (auto5F9A002E_var < 0) { break; }
        libGame_gv_players[auto5F9A002E_var].lv_eXPPoints += lv_xPValue;
        libGame_gv_scoreValues[auto5F9A002E_var].lv_individualTalentPointsEarned[lp_team] += lv_xPValue;
        libUIUI_gf_UIFloatingCombatTextCreateTextTag2(auto5F9A002E_var, libUIUI_gv_floatingCombatTextInsaneDuration, (StringExternal("Param/Value/lib_AIAI_21BE1FB0") + FixedToText(lv_xPValue, 0) + StringExternal("Param/Value/lib_AIAI_D4729799")), libAIAI_gv_defenderGroupInfo[lp_campId].lv_captainUnit, 2.0, RandomFixed(0.0001, 0.2), "FCT_XP_Crit");
    }
}

bool libAIAI_gf_DefenderAIGolemCanUseAbility (int lp_golemIndex, int lp_groupIndex) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = libAIAI_gv_defenderGroupInfo[lp_groupIndex].lv_defenderUnit[lp_golemIndex];

    // Implementation
    if ((UnitGetType(lv_unit) == "JungleGraveGolemDefender") && (libAIAI_gv_defenderGroupInfo[lp_groupIndex].lv_defenderIsCastingAbility[lp_golemIndex] == false) && (((libAIAI_gv_defenderGroupInfo[lp_groupIndex].lv_defenderHasCDAbility[lp_golemIndex][1] == false) && (UnitGetCooldown(lv_unit, "Abil/UnderworldBossStun") <= 0.0) && (UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_unit), 5.0), UnitFilter((1 << c_targetFilterHeroic) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) || ((UnitGetCooldown(lv_unit, "Abil/UnderworldBossRoots") <= 0.0) && (UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_unit), 9.0), UnitFilter((1 << c_targetFilterHeroic) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) && (libAIAI_gv_defenderGroupInfo[lp_groupIndex].lv_defenderHasCDAbility[lp_golemIndex][2] == false)))) {
        return true;
    }

    return false;
}

bool libAIAI_gf_DefenderAISorcererCanUseAbility (int lp_sorcererIndex, int lp_groupIndex) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = libAIAI_gv_defenderGroupInfo[lp_groupIndex].lv_defenderUnit[lp_sorcererIndex];

    // Implementation
    if ((UnitGetType(lv_unit) == "MercDefenderRangedOgre") && (libAIAI_gv_defenderGroupInfo[lp_groupIndex].lv_defenderIsCastingAbility[lp_sorcererIndex] == false) && (libAIAI_gv_defenderGroupInfo[lp_groupIndex].lv_defenderHasCDAbility[lp_sorcererIndex][1] == false) && (UnitGroupCount(libAIAI_gv_defenderGroupInfo[lp_groupIndex].lv_defendersGroup, c_unitCountAlive) > 1) && (UnitGetCooldown(lv_unit, "Abil/MercDefenderOgreBuffAbility") <= 0.0)) {
        return true;
    }

    return false;
}

unitgroup libAIAI_gf_DefenderAIGetAllEnemyUnitsInRegionOfDefender (region lp_region) {
    // Variable Declarations
    unitgroup lv_enemyMinions;
    unitgroup lv_scanGroup;

    // Automatic Variable Declarations
    const int autoC223E6D8_ae = libCore_gv_bALMaxPlayers;
    int autoC223E6D8_var;
    unitgroup autoA79C3749_g;
    int autoA79C3749_u;
    unit autoA79C3749_var;

    // Variable Initialization
    lv_enemyMinions = UnitGroupEmpty();
    lv_scanGroup = UnitGroupEmpty();

    // Implementation
    autoC223E6D8_var = 1;
    for ( ; autoC223E6D8_var <= autoC223E6D8_ae; autoC223E6D8_var += 1 ) {
        lv_scanGroup = UnitGroup(null, autoC223E6D8_var, lp_region, libAIAI_gv_uF_DefenderAI_Enemy, 0);
        UnitGroupAddUnitGroup(lv_enemyMinions, lv_scanGroup);
    }
    autoA79C3749_g = lv_enemyMinions;
    autoA79C3749_u = UnitGroupCount(autoA79C3749_g, c_unitCountAll);
    for (;; autoA79C3749_u -= 1) {
        autoA79C3749_var = UnitGroupUnitFromEnd(autoA79C3749_g, autoA79C3749_u);
        if (autoA79C3749_var == null) { break; }
        if ((InShrub(UnitGetPosition(autoA79C3749_var)) == true)) {
            UnitGroupRemove(lv_enemyMinions, autoA79C3749_var);
        }
    }
    return lv_enemyMinions;
}

unit libAIAI_gf_DefenderAIGetClosestEnemyUnitInRegionOfDefender (region lp_region, unit lp_minionIndex) {
    // Variable Declarations
    unitgroup lv_scanGroup;
    unitgroup lv_mainGroup;

    // Automatic Variable Declarations
    const int autoBC6D15D3_ae = libCore_gv_bALMaxPlayers;
    int autoBC6D15D3_var;
    unitgroup auto928A2E94_g;
    int auto928A2E94_u;
    unit auto928A2E94_var;

    // Variable Initialization
    lv_scanGroup = UnitGroupEmpty();
    lv_mainGroup = UnitGroupEmpty();

    // Implementation
    autoBC6D15D3_var = 1;
    for ( ; autoBC6D15D3_var <= autoBC6D15D3_ae; autoBC6D15D3_var += 1 ) {
        lv_scanGroup = UnitGroup(null, autoBC6D15D3_var, lp_region, libAIAI_gv_uF_DefenderAI_Enemy, 0);
        UnitGroupAddUnitGroup(lv_mainGroup, lv_scanGroup);
    }
    auto928A2E94_g = lv_mainGroup;
    auto928A2E94_u = UnitGroupCount(auto928A2E94_g, c_unitCountAll);
    for (;; auto928A2E94_u -= 1) {
        auto928A2E94_var = UnitGroupUnitFromEnd(auto928A2E94_g, auto928A2E94_u);
        if (auto928A2E94_var == null) { break; }
        if ((InShrub(UnitGetPosition(auto928A2E94_var)) == true)) {
            UnitGroupRemove(lv_mainGroup, auto928A2E94_var);
        }
    }
    return UnitGroupClosestToPoint(lv_mainGroup, UnitGetPosition(lp_minionIndex));
}

bool libAIAI_gf_DefenderAIAnyEnemyInRegionOfDefender (region lp_region) {
    // Variable Declarations
    unitgroup lv_enemyMinions;

    // Automatic Variable Declarations
    const int auto963AC6CA_ae = libCore_gv_bALMaxPlayers;
    int auto963AC6CA_var;
    unitgroup auto3F5C54AC_g;
    int auto3F5C54AC_u;
    unit auto3F5C54AC_var;

    // Variable Initialization
    lv_enemyMinions = UnitGroupEmpty();

    // Implementation
    auto963AC6CA_var = 1;
    for ( ; auto963AC6CA_var <= auto963AC6CA_ae; auto963AC6CA_var += 1 ) {
        lv_enemyMinions = UnitGroup(null, auto963AC6CA_var, lp_region, libAIAI_gv_uF_DefenderAI_Enemy, 0);
        auto3F5C54AC_g = lv_enemyMinions;
        auto3F5C54AC_u = UnitGroupCount(auto3F5C54AC_g, c_unitCountAll);
        for (;; auto3F5C54AC_u -= 1) {
            auto3F5C54AC_var = UnitGroupUnitFromEnd(auto3F5C54AC_g, auto3F5C54AC_u);
            if (auto3F5C54AC_var == null) { break; }
            if ((InShrub(UnitGetPosition(auto3F5C54AC_var)) == true)) {
                UnitGroupRemove(lv_enemyMinions, auto3F5C54AC_var);
            }
        }
        if ((UnitGroupCount(lv_enemyMinions, c_unitCountAlive) > 0)) {
            return true;
        }

    }
    return false;
}

int libAIAI_gf_DefenderAIGetDefenderIndex (unit lp_defender) {
    // Automatic Variable Declarations
    // Implementation
    return libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_DefenderIndex, lp_defender);
}

int libAIAI_gf_DefenderAIGetDefenderGroupIndex (unit lp_defender) {
    // Automatic Variable Declarations
    // Implementation
    return libGame_gf_CustomValueGetAsInteger(libGame_ge_CustomValueIndexes_DefenderGroupIndex, lp_defender);
}

fixed libAIAI_gf_DefGetCampDifficultyRespawnTime (int lp_difficulty) {
    // Variable Declarations
    fixed lv_time;

    // Automatic Variable Declarations
    int autoCA9C28B1_val;

    // Variable Initialization

    // Implementation
    autoCA9C28B1_val = lp_difficulty;
    if (autoCA9C28B1_val == libAIAI_ge_JungleDefendersDifficulty_Easy) {
        lv_time = libAIAI_gv_defRespawnTimers.lv_easy;
    }
    else if (autoCA9C28B1_val == libAIAI_ge_JungleDefendersDifficulty_Medium) {
        lv_time = libAIAI_gv_defRespawnTimers.lv_medium;
    }
    else if (autoCA9C28B1_val == libAIAI_ge_JungleDefendersDifficulty_Elite) {
        lv_time = libAIAI_gv_defRespawnTimers.lv_elite;
    }
    else if (autoCA9C28B1_val == libAIAI_ge_JungleDefendersDifficulty_Boss) {
        lv_time = libAIAI_gv_defRespawnTimers.lv_boss;
    }
    else {
    }
    return lv_time;
}

fixed libAIAI_gf_DefGetCampRespawnTime (int lp_campIndex) {
    // Automatic Variable Declarations
    // Implementation
    return libAIAI_gv_defenderGroupInfo[lp_campIndex].lv_respawnTimer;
}

void libAIAI_gf_DefenderAITransitionIntoState (int lp_state, int lp_defenderGroupIndex, int lp_defenderIndex) {
    // Variable Declarations
    unit lv_defenderUnit;
    int lv_oldState;

    // Automatic Variable Declarations
    int autoAA9C40FB_val;

    // Variable Initialization
    lv_defenderUnit = libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderUnit[lp_defenderIndex];

    // Implementation
    lv_oldState = libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_state;
    libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_state = lp_state;
    autoAA9C40FB_val = lp_state;
    if (autoAA9C40FB_val == libAIAI_ge_DefenderAIState_Idle) {
        UnitBehaviorRemove(lv_defenderUnit, "JungleCreepHardLeashing", 1);
        UnitBehaviorRemove(lv_defenderUnit, "JungleCreepSoftLeashing", 1);
        UnitBehaviorRemove(lv_defenderUnit, "JungleCreepSoftLeashingNoHeal", 1);
        libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_leashCount -= 1;
    }
    else if (autoAA9C40FB_val == libAIAI_ge_DefenderAIState_Fighting) {
        if ((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_fightStartTime <= 0.0)) {
            libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_fightStartTime = TimerGetElapsed(libCore_gv_gameTimer);
        }
        UnitBehaviorRemove(lv_defenderUnit, "JungleCreepPassive", 1);
        UnitBehaviorRemove(lv_defenderUnit, "JungleCreepHardLeashing", 1);
        UnitBehaviorRemove(lv_defenderUnit, "JungleCreepSoftLeashing", 1);
        UnitBehaviorRemove(lv_defenderUnit, "JungleCreepSoftLeashingNoHeal", 1);
    }
    else if (autoAA9C40FB_val == libAIAI_ge_DefenderAIState_Leashing) {
        if ((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_leashCount < libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_currentGroupSize)) {
            libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_leashCount += 1;
        }
        if ((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_healOnLeash == true)) {
            UnitBehaviorAddPlayer(lv_defenderUnit, "JungleCreepSoftLeashing", libCore_gv_cOMPUTER_Hostile, 1);
            if ((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_leashCount >= libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_currentGroupSize)) {
                UnitSetPropertyFixed(lv_defenderUnit, c_unitPropLifePercent, 100.0);
            }
        }
        else {
            UnitBehaviorAddPlayer(lv_defenderUnit, "JungleCreepSoftLeashingNoHeal", libCore_gv_cOMPUTER_Hostile, 1);
        }
        if ((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_leashCount >= libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_currentGroupSize)) {
            UnitBehaviorAddPlayer(lv_defenderUnit, "JungleCreepHardLeashing", libCore_gv_cOMPUTER_Hostile, 1);
        }
        UnitBehaviorAddPlayer(lv_defenderUnit, "JungleCreepPassive", libCore_gv_cOMPUTER_Hostile, 1);
        UnitIssueOrder(lv_defenderUnit, OrderTargetingPoint(AbilityCommand("move", 0), libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderDefaultPoint[lp_defenderIndex]), c_orderQueueReplace);
        UnitIssueOrder(lv_defenderUnit, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderDefaultPoint[lp_defenderIndex], 1.0, PointGetFacing(libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderDefaultPoint[lp_defenderIndex]))), c_orderQueueAddToEnd);
    }
    else {
    }
}

void libAIAI_gf_DefenderAITransitionIntoState2 (int lp_state, int lp_defenderGroupIndex) {
    // Variable Declarations
    unit lv_defenderUnit;
    int lv_oldState;
    int lv_defenderIndex;

    // Automatic Variable Declarations
    int auto3761A3ED_val;
    unitgroup auto9BCA1ACF_g;
    int auto9BCA1ACF_u;
    unitgroup auto0EDBADBE_g;
    int auto0EDBADBE_u;
    int autoAF62E786_ae;

    // Variable Initialization

    // Implementation
    lv_oldState = libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_state;
    libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_state = lp_state;
    auto3761A3ED_val = lp_state;
    if (auto3761A3ED_val == libAIAI_ge_DefenderAIState_Idle) {
        auto9BCA1ACF_g = libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defendersGroup;
        auto9BCA1ACF_u = UnitGroupCount(auto9BCA1ACF_g, c_unitCountAll);
        for (;; auto9BCA1ACF_u -= 1) {
            lv_defenderUnit = UnitGroupUnitFromEnd(auto9BCA1ACF_g, auto9BCA1ACF_u);
            if (lv_defenderUnit == null) { break; }
            UnitBehaviorRemove(lv_defenderUnit, "JungleCreepHardLeashing", 1);
            UnitBehaviorRemove(lv_defenderUnit, "JungleCreepSoftLeashing", 1);
            UnitBehaviorRemove(lv_defenderUnit, "JungleCreepSoftLeashingNoHeal", 1);
        }
        libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_leashCount = 0;
    }
    else if (auto3761A3ED_val == libAIAI_ge_DefenderAIState_Fighting) {
        libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_fightStartTime = TimerGetElapsed(libCore_gv_gameTimer);
        auto0EDBADBE_g = libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defendersGroup;
        auto0EDBADBE_u = UnitGroupCount(auto0EDBADBE_g, c_unitCountAll);
        for (;; auto0EDBADBE_u -= 1) {
            lv_defenderUnit = UnitGroupUnitFromEnd(auto0EDBADBE_g, auto0EDBADBE_u);
            if (lv_defenderUnit == null) { break; }
            UnitBehaviorRemove(lv_defenderUnit, "JungleCreepPassive", 1);
            UnitBehaviorRemove(lv_defenderUnit, "JungleCreepHardLeashing", 1);
            UnitBehaviorRemove(lv_defenderUnit, "JungleCreepSoftLeashing", 1);
            UnitBehaviorRemove(lv_defenderUnit, "JungleCreepSoftLeashingNoHeal", 1);
        }
    }
    else if (auto3761A3ED_val == libAIAI_ge_DefenderAIState_Leashing) {
        if ((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_leashCount < libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_currentGroupSize)) {
            libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_leashCount += 1;
        }
        autoAF62E786_ae = libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_maxGroupSize;
        lv_defenderIndex = 1;
        for ( ; lv_defenderIndex <= autoAF62E786_ae ; lv_defenderIndex += 1 ) {
            lv_defenderUnit = libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderUnit[lv_defenderIndex];
            if ((UnitIsAlive(lv_defenderUnit) == true)) {
                if ((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_healOnLeash == true)) {
                    UnitBehaviorAddPlayer(lv_defenderUnit, "JungleCreepSoftLeashing", libCore_gv_cOMPUTER_Hostile, 1);
                    if ((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_leashCount >= libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_currentGroupSize)) {
                        UnitSetPropertyFixed(lv_defenderUnit, c_unitPropLifePercent, 100.0);
                    }
                }
                else {
                    UnitBehaviorAddPlayer(lv_defenderUnit, "JungleCreepSoftLeashingNoHeal", libCore_gv_cOMPUTER_Hostile, 1);
                }
                if ((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_leashCount >= libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_currentGroupSize)) {
                    UnitBehaviorAddPlayer(lv_defenderUnit, "JungleCreepHardLeashing", libCore_gv_cOMPUTER_Hostile, 1);
                }
                UnitBehaviorAddPlayer(lv_defenderUnit, "JungleCreepPassive", libCore_gv_cOMPUTER_Hostile, 1);
                UnitIssueOrder(lv_defenderUnit, OrderTargetingPoint(AbilityCommand("move", 0), libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderDefaultPoint[lv_defenderIndex]), c_orderQueueReplace);
                UnitIssueOrder(lv_defenderUnit, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderDefaultPoint[lv_defenderIndex], 1.0, PointGetFacing(libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderDefaultPoint[lv_defenderIndex]))), c_orderQueueAddToEnd);
            }
        }
    }
    else {
    }
    if ((lv_oldState == libAIAI_ge_DefenderAIState_Idle) && (lp_state == libAIAI_ge_DefenderAIState_Fighting)) {
        libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_minAgroTime = (TimerGetElapsed(libCore_gv_gameTimer) + libAIAI_gv_defenderAIMinAgroTime);
    }
    if ((lv_oldState == libAIAI_ge_DefenderAIState_Fighting) && (lp_state == libAIAI_ge_DefenderAIState_Leashing)) {
        libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_lastAnnouncedLeashing = TimerGetElapsed(libCore_gv_gameTimer);
    }
}

int libAIAI_gf_DefenderAIDetermineState (int lp_defenderGroupIndex, int lp_oldState) {
    // Variable Declarations
    int lv_itDefender;
    bool lv_defendersFinishedLeashing;
    unit lv_defenderUnit;

    // Automatic Variable Declarations
    int auto5ABAD066_val;
    unitgroup autoFABC4BE9_g;
    int autoFABC4BE9_u;
    unit autoFABC4BE9_var;
    unitgroup auto3C6D272D_g;
    int auto3C6D272D_u;
    unit auto3C6D272D_var;
    int auto78274C6D_ae;
    int auto46B3D0A5_ae;

    // Variable Initialization

    // Implementation
    auto5ABAD066_val = lp_oldState;
    if (auto5ABAD066_val == libAIAI_ge_DefenderAIState_Idle) {
        if ((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_groupIsFighting == true) && (UnitGroupCount(libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_targetUnitGroup, c_unitCountAlive) > 0)) {
            return libAIAI_ge_DefenderAIState_Fighting;
        }
        if ((lp_defenderGroupIndex <= 0)) {
            autoFABC4BE9_g = libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defendersGroup;
            autoFABC4BE9_u = UnitGroupCount(autoFABC4BE9_g, c_unitCountAll);
            for (;; autoFABC4BE9_u -= 1) {
                autoFABC4BE9_var = UnitGroupUnitFromEnd(autoFABC4BE9_g, autoFABC4BE9_u);
                if (autoFABC4BE9_var == null) { break; }
                if ((UnitIsAlive(autoFABC4BE9_var) == true) && (libNtve_gf_UnitInRegion(autoFABC4BE9_var, libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_region) == false)) {
                    libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_groupIsFighting = false;
                    return libAIAI_ge_DefenderAIState_Leashing;
                }
            }
        }
    }
    else if (auto5ABAD066_val == libAIAI_ge_DefenderAIState_Fighting) {
        if ((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_minAgroTime > TimerGetElapsed(libCore_gv_gameTimer))) {
            auto3C6D272D_g = libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defendersGroup;
            auto3C6D272D_u = UnitGroupCount(auto3C6D272D_g, c_unitCountAll);
            for (;; auto3C6D272D_u -= 1) {
                auto3C6D272D_var = UnitGroupUnitFromEnd(auto3C6D272D_g, auto3C6D272D_u);
                if (auto3C6D272D_var == null) { break; }
                if ((UnitIsAlive(auto3C6D272D_var) == true) && (libNtve_gf_UnitInRegion(auto3C6D272D_var, libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_region) == true)) {
                    libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_groupIsFighting = true;
                    return libAIAI_ge_DefenderAIState_Fighting;
                }
            }
            auto78274C6D_ae = libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_maxGroupSize;
            lv_itDefender = 1;
            for ( ; lv_itDefender <= auto78274C6D_ae ; lv_itDefender += 1 ) {
                if ((UnitGroupCount(libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_targetUnitGroup, c_unitCountAlive) <= 0)) {
                    libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_groupIsFighting = false;
                    libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_minLeashTime = (TimerGetElapsed(libCore_gv_gameTimer) + libAIAI_gv_defenderAIMinLeashTime);
                    return libAIAI_ge_DefenderAIState_Leashing;
                }
            }
        }
    }
    else if (auto5ABAD066_val == libAIAI_ge_DefenderAIState_Leashing) {
        libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_groupIsFighting = false;
        lv_defendersFinishedLeashing = true;
        if ((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_minLeashTime > TimerGetElapsed(libCore_gv_gameTimer))) {
            lv_defendersFinishedLeashing = false;
        }
        else {
            auto46B3D0A5_ae = libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_maxGroupSize;
            lv_itDefender = 1;
            for ( ; lv_itDefender <= auto46B3D0A5_ae ; lv_itDefender += 1 ) {
                lv_defenderUnit = libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderUnit[lv_itDefender];
                if ((UnitIsAlive(lv_defenderUnit) == true) && ((UnitTestState(lv_defenderUnit, c_unitStateIdle) == false) || (DistanceBetweenPoints(UnitGetPosition(lv_defenderUnit), libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderDefaultPoint[lv_itDefender]) <= libAIAI_gv_defenderAIClosetoPointDistance) || ((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_healOnLeash == true) && (UnitGetPropertyFixed(libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderUnit[lv_itDefender], c_unitPropLifePercent, c_unitPropCurrent) <= 95.0)))) {
                    lv_defendersFinishedLeashing = false;
                    break;
                }
            }
        }
        if ((lv_defendersFinishedLeashing == false)) {
            return libAIAI_ge_DefenderAIState_Idle;
        }
        else {
            if ((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_lastAnnouncedLeashing < (TimerGetElapsed(libCore_gv_gameTimer) - libAIAI_gv_defenderAILeashReAnnounceTime))) {
                libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_lastAnnouncedLeashing = TimerGetElapsed(libCore_gv_gameTimer);
            }
        }
    }
    else {
    }
    return lp_oldState;
}

void libAIAI_gf_DefenderAIStateLogic (int lp_defenderGroupIndex) {
    // Variable Declarations
    int lv_defenderIndex;
    unit lv_defenderUnit;
    order lv_currentOrder;
    abilcmd lv_currentAbilityCommand;

    // Automatic Variable Declarations
    int autoD6E6E01D_val;
    int autoD3F931E2_ae;
    int auto55F95ABE_ae;

    // Variable Initialization

    // Implementation
    autoD6E6E01D_val = libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_state;
    if (autoD6E6E01D_val == libAIAI_ge_DefenderAIState_Idle) {
    }
    else if (autoD6E6E01D_val == libAIAI_ge_DefenderAIState_Fighting) {
        autoD3F931E2_ae = libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_maxGroupSize;
        lv_defenderIndex = 1;
        for ( ; lv_defenderIndex <= autoD3F931E2_ae ; lv_defenderIndex += 1 ) {
            if ((UnitIsAlive(libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderUnit[lp_defenderGroupIndex]) == true)) {
                libAIAI_gf_DefenderAIAttack(lp_defenderGroupIndex, lv_defenderIndex);
            }
        }
    }
    else if (autoD6E6E01D_val == libAIAI_ge_DefenderAIState_Leashing) {
        auto55F95ABE_ae = libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_maxGroupSize;
        lv_defenderIndex = 1;
        for ( ; lv_defenderIndex <= auto55F95ABE_ae ; lv_defenderIndex += 1 ) {
            lv_defenderUnit = libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderUnit[lp_defenderGroupIndex];
            if ((UnitIsAlive(libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderUnit[lp_defenderGroupIndex]) == true) && (DistanceBetweenPoints(UnitGetPosition(lv_defenderUnit), libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderDefaultPoint[lv_defenderIndex]) > libAIAI_gv_defenderAIClosetoPointDistance)) {
                lv_currentOrder = UnitOrder(lv_defenderUnit, 0);
                lv_currentAbilityCommand = OrderGetAbilityCommand(lv_currentOrder);
                if (((lv_currentOrder == null) || (lv_currentAbilityCommand != AbilityCommand("move", 0)) || (OrderGetTargetType(lv_currentOrder) != c_orderTargetPoint) || (OrderGetTargetPoint(lv_currentOrder) != libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderDefaultPoint[lv_defenderIndex]))) {
                    UnitIssueOrder(lv_defenderUnit, OrderTargetingPoint(AbilityCommand("move", 0), libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderDefaultPoint[lv_defenderIndex]), c_orderQueueReplace);
                    UnitIssueOrder(lv_defenderUnit, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderDefaultPoint[lv_defenderIndex], 1.0, PointGetFacing(libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderDefaultPoint[lv_defenderIndex]))), c_orderQueueAddToEnd);
                }
            }
        }
    }
    else {
    }
}

void libAIAI_gf_DefenderAIAttack (int lp_defenderGroupIndex, int lp_defenderIndex) {
    // Variable Declarations
    order lv_currentOrder;
    unit lv_currentOrderTarget;
    unit lv_defenderUnit;
    unitgroup lv_enemyGroup;
    unit lv_newOrderTarget;

    // Automatic Variable Declarations
    string auto98960AD2_val;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    lv_defenderUnit = libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderUnit[lp_defenderIndex];
    lv_currentOrderTarget = OrderGetTargetUnit(UnitOrder(lv_defenderUnit, 0));
    libAIAI_gv_defenderAINeedsNewOrder = true;
    if ((UnitWeaponPeriodRemaining(lv_defenderUnit, 1) > 2.0)) {
        libAIAI_gv_defenderAINeedsNewOrder = false;
    }
    if ((libAIAI_gv_defenderAINeedsNewOrder == true)) {
    }
    if ((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_state == libAIAI_ge_DefenderAIState_Fighting) && ((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_fightStartTime + libAIAI_gv_defenderAIMinTimeBeforeCasting) < TimerGetElapsed(libCore_gv_gameTimer))) {
        auto98960AD2_val = libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderUnitsTypeC2ABGameLinkC2BB[lp_defenderIndex];
        if (auto98960AD2_val == "MercDefender_SlaynElemental") {
            if ((UnitGetCooldown(lv_defenderUnit, "Abil/MercDefender_Elemental_EssenceLeech") <= 0.0)) {
                lv_enemyGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(lv_defenderUnit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_defenderUnit), 10.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
                if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1)) {
                    UnitIssueOrder(lv_defenderUnit, Order(AbilityCommand("MercDefender_SlaynElemental_EssenceLeech", 0)), c_orderQueueReplace);
                    libAIAI_gv_defenderAINeedsNewOrder = false;
                }
            }
        }
        else {
        }
    }
    if ((libAIAI_gv_defenderAINeedsNewOrder == true)) {
        lv_currentOrder = UnitOrder(lv_defenderUnit, 0);
        if (((lv_currentOrder == null) || (OrderGetAbilityCommand(lv_currentOrder) == AbilityCommand("move", 0)) || (OrderGetAbilityCommand(lv_currentOrder) == AbilityCommand("move", 4)) || (OrderGetAbilityCommand(lv_currentOrder) == AbilityCommand("attack", 0)) || (OrderGetAbilityCommand(lv_currentOrder) == AbilityCommand("AttackAlly", 0)))) {
            lv_newOrderTarget = UnitGroupClosestToPoint(libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_targetUnitGroup, UnitGetPosition(lv_defenderUnit));
            if ((lv_newOrderTarget == null)) {
                UnitIssueOrder(lv_defenderUnit, OrderTargetingPoint(AbilityCommand("attack", 0), libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderDefaultPoint[lp_defenderIndex]), c_orderQueueReplace);
                UnitIssueOrder(lv_defenderUnit, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderDefaultPoint[lp_defenderIndex], 1.0, PointGetFacing(libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderDefaultPoint[lp_defenderIndex]))), c_orderQueueAddToEnd);
            }
            else {
                if ((libNtve_gf_UnitInRegion(lv_newOrderTarget, libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_region) == true) && ((lv_newOrderTarget != lv_currentOrderTarget) || ((OrderGetAbilityCommand(lv_currentOrder) != AbilityCommand("attack", 0)) && (OrderGetAbilityCommand(lv_currentOrder) != AbilityCommand("AttackAlly", 0))))) {
                    UnitIssueOrder(lv_defenderUnit, OrderTargetingUnit(AbilityCommand("attack", 0), lv_newOrderTarget), c_orderQueueReplace);
                }
            }
        }
    }
}

void libAIAI_gf_DefenderAIFunctionAttackNEW (int lp_groupIndex) {
    // Variable Declarations
    int lv_itDefender;
    int lv_oldState;
    int lv_newState;
    region lv_region;
    order lv_currentOrder;
    abilcmd lv_currentAbilityCommand;

    // Automatic Variable Declarations
    int auto9438806A_ae;

    // Variable Initialization
    lv_region = libAIAI_gv_defenderGroupInfo[lp_groupIndex].lv_region;

    // Implementation
    auto9438806A_ae = libAIAI_gv_defenderGroupInfo[lp_groupIndex].lv_maxGroupSize;
    lv_itDefender = 1;
    for ( ; lv_itDefender <= auto9438806A_ae ; lv_itDefender += 1 ) {
        if ((UnitIsAlive(libAIAI_gv_defenderGroupInfo[lp_groupIndex].lv_defenderUnit[lv_itDefender]) == false)) {
            continue;
        }
        if ((libAIAI_gv_defenderGroupInfo[lp_groupIndex].lv_currentGroupSize == 1)) {
            lv_currentOrder = UnitOrder(libAIAI_gv_defenderGroupInfo[lp_groupIndex].lv_defenderUnit[lv_itDefender], 0);
            lv_currentAbilityCommand = OrderGetAbilityCommand(lv_currentOrder);
            if (((lv_currentOrder != null) || (lv_currentAbilityCommand != AbilityCommand("move", 0)) || (lv_currentAbilityCommand != AbilityCommand("attack", 0)) || (lv_currentAbilityCommand != AbilityCommand("AttackAlly", 0)) || (lv_currentAbilityCommand != AbilityCommand("move", 2)))) {
                continue;
            }
        }
        lv_oldState = libAIAI_gv_defenderGroupInfo[lp_groupIndex].lv_state;
        if (((lv_oldState == libAIAI_ge_DefenderAIState_Fighting) || (lv_oldState == libAIAI_ge_DefenderAIState_Idle))) {
            libAIAI_gv_defenderGroupInfo[lp_groupIndex].lv_targetUnitGroup = libAIAI_gf_DefenderAIGetAllEnemyUnitsInRegionOfDefender(libAIAI_gv_defenderGroupInfo[lp_groupIndex].lv_region);
        }
        lv_newState = libAIAI_gf_DefenderAIDetermineState(lp_groupIndex, lv_oldState);
        if ((lv_oldState != lv_newState)) {
            libAIAI_gf_DefenderAITransitionIntoState2(lv_newState, lp_groupIndex);
        }
        libAIAI_gf_DefenderAIStateLogic(lp_groupIndex);
    }
}

void libAIAI_gf_DefenderAICheckAbilityCDonDefender (int lp_defenderIndex, int lp_groupIndex) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    string auto3CAE532C_val;

    // Variable Initialization
    lv_unit = libAIAI_gv_defenderGroupInfo[lp_groupIndex].lv_defenderUnit[lp_defenderIndex];

    // Implementation
    if ((UnitIsAlive(lv_unit) == false)) {
        return ;
    }

    auto3CAE532C_val = UnitGetType(lv_unit);
    if (auto3CAE532C_val == "MercDefenderRangedOgre") {
        if ((UnitGetCooldown(lv_unit, "Abil/MercDefenderOgreBuffAbility") <= 0.0) && (UnitGroupCount(libAIAI_gv_defenderGroupInfo[lp_groupIndex].lv_defendersGroup, c_unitCountAlive) > 1)) {
            libAIAI_gv_defenderGroupInfo[lp_groupIndex].lv_defenderHasCDAbility[lp_defenderIndex][1] = false;
        }
        else {
            libAIAI_gv_defenderGroupInfo[lp_groupIndex].lv_defenderHasCDAbility[lp_defenderIndex][1] = true;
        }
    }
    else if (auto3CAE532C_val == "JungleGraveGolemDefender") {
        if ((UnitGetCooldown(lv_unit, "Abil/UnderworldBossStun") <= 0.0)) {
            libAIAI_gv_defenderGroupInfo[lp_groupIndex].lv_defenderHasCDAbility[lp_defenderIndex][1] = false;
        }

        if ((UnitGetCooldown(lv_unit, "Abil/UnderworldBossRoots") <= 0.0)) {
            libAIAI_gv_defenderGroupInfo[lp_groupIndex].lv_defenderHasCDAbility[lp_defenderIndex][2] = false;
        }

    }
    else {
    }
}

bool libAIAI_gf_DefenderAICheckDefenderAndTargetRegionMain (int lp_defenderIndex, int lp_groupIndex) {
    // Variable Declarations
    unit lv_defenderUnit;
    unit lv_defenderTarget;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_defenderUnit = libAIAI_gv_defenderGroupInfo[lp_groupIndex].lv_defenderUnit[lp_defenderIndex];
    lv_defenderTarget = libAIAI_gv_defenderGroupInfo[lp_groupIndex].lv_defenderTarget[lp_defenderIndex];

    // Implementation
    if (((lv_defenderUnit == null) || (UnitIsAlive(lv_defenderUnit) == false))) {
        return false;
    }
    else if ((lv_defenderTarget == null) && (libNtve_gf_UnitInRegion(lv_defenderUnit, libAIAI_gv_defenderGroupInfo[lp_groupIndex].lv_region) == false)) {
        return false;
    }
    else if ((lv_defenderTarget != null) && ((libNtve_gf_UnitInRegion(lv_defenderUnit, libAIAI_gv_defenderGroupInfo[lp_groupIndex].lv_region) == false) || (libNtve_gf_UnitInRegion(lv_defenderTarget, libAIAI_gv_defenderGroupInfo[lp_groupIndex].lv_region) == false))) {
        return false;
    }
    return true;
}

void libAIAI_gf_DefenderAIFunctionAttackNYNEW (int lp_defenderGroupIndex) {
    int init_i;

    // Variable Declarations
    int lv_defenderIndex;
    region lv_defenderRegion;
    unit lv_itDefenderUnit;
    order lv_currentOrder;
    abilcmd lv_currentAbilityCommand;
    unit lv_newTarget;
    unitgroup lv_enemyGroup;
    bool lv_needsNewOrder;
    int[libAIAI_gv_jungleMaxUnitsperGroup + 1] lv_oldState;
    text[libAIAI_gv_jungleMaxUnitsperGroup + 1] lv_debugText;
    bool[libAIAI_gv_jungleMaxUnitsperGroup + 1] lv_leashingFinished;
    int lv_damagedAndNotInCombat;

    // Automatic Variable Declarations
    int auto60288352_ae;
    int autoD1B0C36D_val;
    int auto43E1B831_ae;
    int auto7FD99E44_val;
    string auto59C129E5_val;
    int auto69176BE4_ae;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();
    for (init_i = 0; init_i <= libAIAI_gv_jungleMaxUnitsperGroup; init_i += 1) {
        lv_leashingFinished[init_i] = true;
    }

    // Implementation
    lv_defenderRegion = libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_region;
    auto60288352_ae = libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_maxGroupSize;
    lv_defenderIndex = 1;
    for ( ; lv_defenderIndex <= auto60288352_ae ; lv_defenderIndex += 1 ) {
        lv_itDefenderUnit = libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderUnit[lv_defenderIndex];
        if ((UnitIsAlive(lv_itDefenderUnit) == false)) {
            continue;
        }
        lv_currentOrder = UnitOrder(lv_itDefenderUnit, 0);
        lv_currentAbilityCommand = OrderGetAbilityCommand(lv_currentOrder);
        lv_oldState[lv_defenderIndex] = libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderState[lv_defenderIndex];
        if ((lv_currentOrder != null) && ((lv_currentAbilityCommand != AbilityCommand("stop", 0)) || (lv_currentAbilityCommand != AbilityCommand("move", 0)) || (lv_currentAbilityCommand != AbilityCommand("move", 4)) || (lv_currentAbilityCommand != AbilityCommand("attack", 0)) || (lv_currentAbilityCommand != AbilityCommand("AttackAlly", 0)) || (lv_currentAbilityCommand != AbilityCommand("move", 2)))) {
            continue;
        }
        TextExpressionSetToken("Param/Expression/lib_AIAI_F158FEB5", "A", IntToText(lp_defenderGroupIndex));
        TextExpressionSetToken("Param/Expression/lib_AIAI_F158FEB5", "B", IntToText(lv_defenderIndex));
        TextExpressionSetToken("Param/Expression/lib_AIAI_F158FEB5", "C", UnitGetName(lv_itDefenderUnit));
        TextExpressionSetToken("Param/Expression/lib_AIAI_F158FEB5", "D", IntToText((lv_oldState[lv_defenderIndex])));
        lv_debugText[lv_defenderIndex] = TextExpressionAssemble("Param/Expression/lib_AIAI_F158FEB5");
        autoD1B0C36D_val = lv_oldState[lv_defenderIndex];
        if (autoD1B0C36D_val == libAIAI_ge_DefenderAIState_Idle) {
            if ((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_groupIsFighting == true) && (libNtve_gf_UnitInRegion(lv_itDefenderUnit, libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_region) == true) && (libAIAI_gf_DefenderAIAnyEnemyInRegionOfDefender(lv_defenderRegion) == true)) {
                libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderState[lv_defenderIndex] = libAIAI_ge_DefenderAIState_Fighting;
                libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderMinAgroTime[lv_defenderIndex] = (TimerGetElapsed(libCore_gv_gameTimer) + libAIAI_gv_defenderAIMinAgroTime);
                TextExpressionSetToken("Param/Expression/lib_AIAI_90A13AE0", "A", IntToText((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderState[lv_defenderIndex])));
                lv_debugText[lv_defenderIndex] = (lv_debugText[lv_defenderIndex] + TextExpressionAssemble("Param/Expression/lib_AIAI_90A13AE0"));
                continue;
            }
            if ((DistanceBetweenPoints(UnitGetPosition(lv_itDefenderUnit), libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderDefaultPoint[lv_defenderIndex]) > libAIAI_gv_defenderAIClosetoPointDistance)) {
                libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderState[lv_defenderIndex] = libAIAI_ge_DefenderAIState_Leashing;
                libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderMinLeashTime[lv_defenderIndex] = (TimerGetElapsed(libCore_gv_gameTimer) + libAIAI_gv_defenderAIMinLeashTime);
                libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderTarget[lv_defenderIndex] = null;
                libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_leashCount += 1;
                TextExpressionSetToken("Param/Expression/lib_AIAI_09353A7E", "A", IntToText((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderState[lv_defenderIndex])));
                lv_debugText[lv_defenderIndex] = (lv_debugText[lv_defenderIndex] + TextExpressionAssemble("Param/Expression/lib_AIAI_09353A7E"));
                continue;
            }
            if ((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_groupIsFighting == true) && (libNtve_gf_UnitInRegion(lv_itDefenderUnit, libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_region) == true) && (libAIAI_gf_DefenderAIAnyEnemyInRegionOfDefender(lv_defenderRegion) == false)) {
                lv_damagedAndNotInCombat += 1;
            }
        }
        else if (autoD1B0C36D_val == libAIAI_ge_DefenderAIState_Fighting) {
            if ((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderMinAgroTime[lv_defenderIndex] > TimerGetElapsed(libCore_gv_gameTimer)) && (libNtve_gf_UnitInRegion(lv_itDefenderUnit, libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_region) == true) && (libAIAI_gf_DefenderAIAnyEnemyInRegionOfDefender(lv_defenderRegion) == true) && (libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_groupIsFighting == true)) {
                libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderState[lv_defenderIndex] = libAIAI_ge_DefenderAIState_Fighting;
                libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderMinAgroTime[lv_defenderIndex] = (TimerGetElapsed(libCore_gv_gameTimer) + libAIAI_gv_defenderAIMinAgroTime);
                TextExpressionSetToken("Param/Expression/lib_AIAI_6B9EE3CF", "A", IntToText((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderState[lv_defenderIndex])));
                lv_debugText[lv_defenderIndex] = (lv_debugText[lv_defenderIndex] + TextExpressionAssemble("Param/Expression/lib_AIAI_6B9EE3CF"));
                continue;
            }
            if (((libAIAI_gf_DefenderAIAnyEnemyInRegionOfDefender(lv_defenderRegion) == false) || (libNtve_gf_UnitInRegion(lv_itDefenderUnit, lv_defenderRegion) == false) || (libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderTarget[lv_defenderIndex] == null))) {
                libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderMinLeashTime[lv_defenderIndex] = (TimerGetElapsed(libCore_gv_gameTimer) + libAIAI_gv_defenderAIMinLeashTime);
                libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderState[lv_defenderIndex] = libAIAI_ge_DefenderAIState_Leashing;
                libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_leashCount += 1;
                libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderTarget[lv_defenderIndex] = null;
                TextExpressionSetToken("Param/Expression/lib_AIAI_C25C9DBD", "A", IntToText((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderState[lv_defenderIndex])));
                lv_debugText[lv_defenderIndex] = (lv_debugText[lv_defenderIndex] + TextExpressionAssemble("Param/Expression/lib_AIAI_C25C9DBD"));
                continue;
            }
        }
        else if (autoD1B0C36D_val == libAIAI_ge_DefenderAIState_Leashing) {
            lv_leashingFinished[lv_defenderIndex] = true;
            if ((libAIAI_gf_DefenderAIAnyEnemyInRegionOfDefender(lv_defenderRegion) == true) && (libNtve_gf_UnitInRegion(lv_itDefenderUnit, lv_defenderRegion) == true) && (libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_groupIsFighting == true)) {
                libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderState[lv_defenderIndex] = libAIAI_ge_DefenderAIState_Fighting;
                libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderMinAgroTime[lv_defenderIndex] = (TimerGetElapsed(libCore_gv_gameTimer) + libAIAI_gv_defenderAIMinAgroTime);
                libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_leashCount -= 1;
                continue;
            }
            if ((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderMinLeashTime[lv_defenderIndex] > TimerGetElapsed(libCore_gv_gameTimer))) {
                lv_leashingFinished[lv_defenderIndex] = false;
            }
            else {
                if (((UnitTestState(lv_itDefenderUnit, c_unitStateIdle) == false) || (DistanceBetweenPoints(UnitGetPosition(lv_itDefenderUnit), libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderDefaultPoint[lv_defenderIndex]) > libAIAI_gv_defenderAIClosetoPointDistance) || ((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_healOnLeash == true) && (UnitGetPropertyFixed(lv_itDefenderUnit, c_unitPropLifePercent, c_unitPropCurrent) <= 95.0)))) {
                    lv_leashingFinished[lv_defenderIndex] = false;
                }
            }
            if ((lv_leashingFinished[lv_defenderIndex] == true)) {
                libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderState[lv_defenderIndex] = libAIAI_ge_DefenderAIState_Idle;
                libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_leashCount -= 1;
                libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderTarget[lv_defenderIndex] = null;
                TextExpressionSetToken("Param/Expression/lib_AIAI_3EF49091", "A", IntToText((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderState[lv_defenderIndex])));
                lv_debugText[lv_defenderIndex] = (lv_debugText[lv_defenderIndex] + TextExpressionAssemble("Param/Expression/lib_AIAI_3EF49091"));
            }
            else {
                if ((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderLastAnnouncedLeashing[lv_defenderIndex] > (TimerGetElapsed(libCore_gv_gameTimer) - libAIAI_gv_defenderAILeashReAnnounceTime))) {
                    libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderLastAnnouncedLeashing[lv_defenderIndex] = TimerGetElapsed(libCore_gv_gameTimer);
                    TextExpressionSetToken("Param/Expression/lib_AIAI_4EE03C92", "A", IntToText((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderState[lv_defenderIndex])));
                    lv_debugText[lv_defenderIndex] = (lv_debugText[lv_defenderIndex] + TextExpressionAssemble("Param/Expression/lib_AIAI_4EE03C92"));
                }
            }
        }
        else {
        }
    }
    auto43E1B831_ae = libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_maxGroupSize;
    lv_defenderIndex = 1;
    for ( ; lv_defenderIndex <= auto43E1B831_ae ; lv_defenderIndex += 1 ) {
        lv_itDefenderUnit = libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderUnit[lv_defenderIndex];
        if ((UnitIsAlive(lv_itDefenderUnit) == false)) {
            continue;
        }
        auto7FD99E44_val = libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderState[lv_defenderIndex];
        if (auto7FD99E44_val == libAIAI_ge_DefenderAIState_Fighting) {
            UnitBehaviorRemove(lv_itDefenderUnit, "JungleCreepPassive", 1);
            UnitBehaviorRemove(lv_itDefenderUnit, "JungleCreepHardLeashing", 1);
            UnitBehaviorRemove(lv_itDefenderUnit, "JungleCreepSoftLeashing", 1);
            UnitBehaviorRemove(lv_itDefenderUnit, "JungleCreepSoftLeashingNoHeal", 1);
            if ((lv_oldState[lv_defenderIndex] != libAIAI_ge_DefenderAIState_Fighting)) {
                libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderFightStartTime[lv_defenderIndex] = TimerGetElapsed(libCore_gv_gameTimer);
                UnitBehaviorRemove(lv_itDefenderUnit, "Benign", 1);
                if ((UnitGetType(lv_itDefenderUnit) == "MercDefender_SlaynElemental")) {
                    UnitBehaviorAddPlayer(lv_itDefenderUnit, "MercDefender_SlaynElemental_WeaponRangeIndicator", libCore_gv_cOMPUTER_Hostile, 1);
                }
            }
            lv_needsNewOrder = true;
            if (((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderFightStartTime[lv_defenderIndex] + libAIAI_gv_defenderAIMinTimeBeforeCasting) < TimerGetElapsed(libCore_gv_gameTimer))) {
                auto59C129E5_val = libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderUnitsTypeC2ABGameLinkC2BB[lv_defenderIndex];
                if (auto59C129E5_val == "MercDefender_SlaynElemental") {
                    if ((UnitGetCooldown(lv_itDefenderUnit, "Abil/MercDefender_SlaynElemental_EssenceLeech") <= 0.0)) {
                        lv_enemyGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(lv_itDefenderUnit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_itDefenderUnit), 10.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
                        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1)) {
                            UnitIssueOrder(lv_itDefenderUnit, Order(AbilityCommand("MercDefender_SlaynElemental_EssenceLeech", 0)), c_orderQueueReplace);
                            lv_needsNewOrder = false;
                            libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderIsCastingAbility[lv_defenderIndex] = true;
                        }
                    }
                }
                else if (auto59C129E5_val == "MercenaryColossusDefender") {
                    if ((UnitGetCooldown(lv_itDefenderUnit, "Abil/Mercenary_Colossus_ChargedBlast") <= 0.0)) {
                        lv_enemyGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(lv_itDefenderUnit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_itDefenderUnit), 7.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
                        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1)) {
                            UnitIssueOrder(lv_itDefenderUnit, OrderTargetingPoint(AbilityCommand("Mercenary_Colossus_ChargedBlast", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_enemyGroup, UnitGetPosition(lv_itDefenderUnit)))), c_orderQueueReplace);
                            lv_needsNewOrder = false;
                        }
                    }
                    if ((lv_needsNewOrder == true) && (UnitGetCooldown(lv_itDefenderUnit, "Abil/Mercenary_Colossus_FireBeam") <= 0.0)) {
                        lv_enemyGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(lv_itDefenderUnit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_itDefenderUnit), 7.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
                        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1)) {
                            UnitIssueOrder(lv_itDefenderUnit, Order(AbilityCommand("Mercenary_Colossus_FireBeam", 0)), c_orderQueueReplace);
                            lv_needsNewOrder = false;
                        }
                    }
                }
                else {
                }
            }
            if ((lv_needsNewOrder == true)) {
                lv_newTarget = libAIAI_gf_DefenderAIGetClosestEnemyUnitInRegionOfDefender(lv_defenderRegion, lv_itDefenderUnit);
                if ((lv_newTarget == null)) {
                    libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderState[lv_defenderIndex] = libAIAI_ge_DefenderAIState_Leashing;
                    UnitIssueOrder(lv_itDefenderUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                    libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderTarget[lv_defenderIndex] = null;
                    if ((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_healOnLeash == true)) {
                        UnitBehaviorAddPlayer(lv_itDefenderUnit, "JungleCreepSoftLeashing", libCore_gv_cOMPUTER_Hostile, 1);
                    }
                    else {
                        UnitBehaviorAddPlayer(lv_itDefenderUnit, "JungleCreepSoftLeashingNoHeal", libCore_gv_cOMPUTER_Hostile, 1);
                    }
                    if ((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_leashCount >= libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_currentGroupSize)) {
                        UnitBehaviorAddPlayer(lv_itDefenderUnit, "JungleCreepHardLeashing", libCore_gv_cOMPUTER_Hostile, 1);
                    }
                    UnitBehaviorAddPlayer(lv_itDefenderUnit, "JungleCreepPassive", libCore_gv_cOMPUTER_Hostile, 1);
                    UnitIssueOrder(lv_itDefenderUnit, OrderTargetingPoint(AbilityCommand("move", 0), libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderDefaultPoint[lv_defenderIndex]), c_orderQueueReplace);
                    UnitIssueOrder(lv_itDefenderUnit, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderDefaultPoint[lv_defenderIndex], 1.0, PointGetFacing(libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderDefaultPoint[lv_defenderIndex]))), c_orderQueueAddToEnd);
                    libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_leashCount += 1;
                }
                else {
                    UnitIssueOrder(lv_itDefenderUnit, OrderTargetingUnit(AbilityCommand("attack", 0), lv_newTarget), c_orderQueueReplace);
                }
                libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderTarget[lv_defenderIndex] = lv_newTarget;
                lv_newTarget = null;
            }
        }
        else if (auto7FD99E44_val == libAIAI_ge_DefenderAIState_Leashing) {
            if ((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_leashCount < libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_currentGroupSize) && (lv_oldState[lv_defenderIndex] != libAIAI_ge_DefenderAIState_Leashing)) {
            }
            UnitIssueOrder(lv_itDefenderUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderTarget[lv_defenderIndex] = null;
            if ((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_healOnLeash == true)) {
                UnitBehaviorAddPlayer(lv_itDefenderUnit, "JungleCreepSoftLeashing", libCore_gv_cOMPUTER_Hostile, 1);
            }
            else {
                UnitBehaviorAddPlayer(lv_itDefenderUnit, "JungleCreepSoftLeashingNoHeal", libCore_gv_cOMPUTER_Hostile, 1);
            }
            UnitIssueOrder(lv_itDefenderUnit, OrderTargetingPoint(AbilityCommand("move", 0), libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderDefaultPoint[lv_defenderIndex]), c_orderQueueReplace);
            UnitIssueOrder(lv_itDefenderUnit, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderDefaultPoint[lv_defenderIndex], 1.0, PointGetFacing(libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderDefaultPoint[lv_defenderIndex]))), c_orderQueueAddToEnd);
        }
        else if (auto7FD99E44_val == libAIAI_ge_DefenderAIState_Idle) {
            if ((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_scale_Number_Skipped > 0)) {
                libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_scale_Number += 1;
                libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_scale_Number_AfterDeath += 1;
                libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_scale_Number_Skipped = 0;
                UnitXPSetCurrentLevel(lv_itDefenderUnit, null, libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_scale_Number);
            }
            libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderTarget[lv_defenderIndex] = null;
            if ((UnitGetPropertyFixed(lv_itDefenderUnit, c_unitPropLifePercent, c_unitPropCurrent) < 100.0)) {
                UnitBehaviorRemove(lv_itDefenderUnit, "JungleCreepHardLeashing", 1);
                UnitBehaviorRemove(lv_itDefenderUnit, "JungleCreepSoftLeashing", 1);
                UnitBehaviorRemove(lv_itDefenderUnit, "JungleCreepSoftLeashingNoHeal", 1);
            }
            UnitBehaviorAdd(lv_itDefenderUnit, "Benign", lv_itDefenderUnit, 1);
        }
        else {
        }
    }
    if (((libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_leashCount >= libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_currentGroupSize) || (lv_damagedAndNotInCombat >= libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_currentGroupSize)) && (libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_groupIsFighting == true)) {
        libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_groupIsFighting = false;
        lv_debugText[lv_defenderIndex] = (lv_debugText[lv_defenderIndex] + StringExternal("Param/Value/lib_AIAI_0F46A0F0"));
    }
    auto69176BE4_ae = libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_maxGroupSize;
    lv_defenderIndex = 1;
    for ( ; lv_defenderIndex <= auto69176BE4_ae ; lv_defenderIndex += 1 ) {
        lv_itDefenderUnit = libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderUnit[lv_defenderIndex];
        if ((UnitIsAlive(lv_itDefenderUnit) == true) && (UnitIsSelected(lv_itDefenderUnit, 1) == true)) {
            TriggerDebugOutput(1, lv_debugText[lv_defenderIndex], true);
            libAIAI_gv_defenderGroupInfo[lp_defenderGroupIndex].lv_defenderDebugText = lv_debugText[lv_defenderIndex];
        }
    }
}

trigger auto_libAIAI_gf_MapMAIRegisterUnit_Trigger = null;
unit auto_libAIAI_gf_MapMAIRegisterUnit_lp_unit;
region auto_libAIAI_gf_MapMAIRegisterUnit_lp_region;
int auto_libAIAI_gf_MapMAIRegisterUnit_lp_lane;
int auto_libAIAI_gf_MapMAIRegisterUnit_lp_level;

void libAIAI_gf_MapMAIRegisterUnit (unit lp_unit, region lp_region, int lp_lane, int lp_level) {
    auto_libAIAI_gf_MapMAIRegisterUnit_lp_unit = lp_unit;
    auto_libAIAI_gf_MapMAIRegisterUnit_lp_region = lp_region;
    auto_libAIAI_gf_MapMAIRegisterUnit_lp_lane = lp_lane;
    auto_libAIAI_gf_MapMAIRegisterUnit_lp_level = lp_level;

    if (auto_libAIAI_gf_MapMAIRegisterUnit_Trigger == null) {
        auto_libAIAI_gf_MapMAIRegisterUnit_Trigger = TriggerCreate("auto_libAIAI_gf_MapMAIRegisterUnit_TriggerFunc");
    }

    TriggerExecute(auto_libAIAI_gf_MapMAIRegisterUnit_Trigger, false, false);
}

bool auto_libAIAI_gf_MapMAIRegisterUnit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_libAIAI_gf_MapMAIRegisterUnit_lp_unit;
    region lp_region = auto_libAIAI_gf_MapMAIRegisterUnit_lp_region;
    int lp_lane = auto_libAIAI_gf_MapMAIRegisterUnit_lp_lane;
    int lp_level = auto_libAIAI_gf_MapMAIRegisterUnit_lp_level;

    // Variable Declarations
    bool lv_trueFalse;
    int lv_i;
    fixed lv_scalingminionvalue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    while ((lv_trueFalse == false)) {
        if ((libAIAI_gv_mapMAIUnitInfo[lv_i].lv_unitIsAlive == false)) {
            libAIAI_gv_mapMAIUnitInfo[lv_i].lv_unit = lp_unit;
            libAIAI_gv_mapMAIUnitInfo[lv_i].lv_unitIsAlive = true;
            UnitSetCustomValue(lp_unit, (libGame_ge_CustomValueIndexes_MapMUnitIndex), FixedToInt(lv_i));
            libAIAI_gv_mapMAIUnitInfo[lv_i].lv_lane = lp_lane;
            libAIAI_gv_mapMAIUnitInfo[lv_i].lv_region = lp_region;
            libAIAI_gv_mapMAIUnitInfo[lv_i].lv_unitType = UnitGetType(lp_unit);
            libAIAI_gv_mapMAIUnitInfo[lv_i].lv_team = libGame_gf_PlayerGetPlayerTeam(UnitGetOwner(lp_unit));
            if ((lv_i > libAIAI_gv_mapMAICurrentUnitsCount)) {
                libAIAI_gv_mapMAICurrentUnitsCount = lv_i;
            }

            lv_trueFalse = true;
        }
        else {
            lv_i += 1;
        }
    }
    return true;
}

void libAIAI_gf_MapMAIFunction (int lp_mapMUnitIndex) {
    // Automatic Variable Declarations
    string auto0673887C_val;

    // Implementation
    if ((UnitIsAlive(libAIAI_gv_mapMAIUnitInfo[lp_mapMUnitIndex].lv_unit) == false)) {
        return ;
    }

    auto0673887C_val = libAIAI_gv_mapMAIUnitInfo[lp_mapMUnitIndex].lv_unitType;
    if (auto0673887C_val == "MapM_BattleForSlayn_VoidThrasher") {
        libAIAI_gf_MapMAIVoidThrasherFunc(lp_mapMUnitIndex);
    }
    else if (auto0673887C_val == "MapM_BattleForSlayn_VoidMinion") {
        libAIAI_gf_MapMAIVoidThrasherMinionFunc(lp_mapMUnitIndex);
    }
    else {
    }
}

void libAIAI_gf_MapMAIFreeUnitIndex (int lp_mapMUnitIndex) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto45D5BF53_ae = 1;
    const int auto45D5BF53_ai = -1;

    // Variable Initialization

    // Implementation
    if ((lp_mapMUnitIndex <= 0)) {
        return ;
    }

    libAIAI_gv_mapMAIUnitInfo[lp_mapMUnitIndex].lv_unitIsAlive = false;
    libAIAI_gv_mapMAIUnitInfo[lp_mapMUnitIndex].lv_unitTarget = null;
    libAIAI_gv_mapMAIUnitInfo[lp_mapMUnitIndex].lv_unitType = null;
    libAIAI_gv_mapMAIUnitInfo[lp_mapMUnitIndex].lv_region = null;
    libAIAI_gv_mapMAIUnitInfo[lp_mapMUnitIndex].lv_state = libAIAI_ge_AIStates_HoldPosition;
    libAIAI_gv_mapMAIUnitInfo[lp_mapMUnitIndex].lv_unit = null;
    libAIAI_gv_mapMAIUnitInfo[lp_mapMUnitIndex].lv_lane = 0;
    libAIAI_gv_mapMAIUnitInfo[lp_mapMUnitIndex].lv_team = 0;
    TextTagDestroy(libAIAI_gv_mapMAIUnitInfo[lp_mapMUnitIndex].lv_debugTextTag);
    libAIAI_gv_mapMAIUnitInfo[lp_mapMUnitIndex].lv_debugTextTag = c_textTagNone;
    UnitSetCustomValue(libAIAI_gv_mapMAIUnitInfo[lp_mapMUnitIndex].lv_unit, (libGame_ge_CustomValueIndexes_MapMUnitIndex), 0.0);
    if ((lp_mapMUnitIndex == libAIAI_gv_mapMAICurrentUnitsCount)) {
        lv_i = (libAIAI_gv_mapMAICurrentUnitsCount - 1);
        for ( ; ( (auto45D5BF53_ai >= 0 && lv_i <= auto45D5BF53_ae) || (auto45D5BF53_ai < 0 && lv_i >= auto45D5BF53_ae) ) ; lv_i += auto45D5BF53_ai ) {
            if (((libAIAI_gv_mapMAIUnitInfo[lv_i].lv_unitIsAlive == true) || (lv_i == 0))) {
                libAIAI_gv_mapMAICurrentUnitsCount = lv_i;
                break;
            }

        }
    }

}

void libAIAI_gf_MapMAIVoidThrasherFunc (int lp_mapMIndex) {
    // Variable Declarations
    unit lv_itUnit;
    unit lv_itTarget;
    text lv_text;

    // Automatic Variable Declarations
    int auto9325AE6E_val;

    // Variable Initialization
    lv_itUnit = libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_unit;

    // Implementation
    if ((libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_unitTarget == null)) {
        libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_state = libAIAI_ge_AIStates_HoldPosition;
        lv_itTarget = libAIAI_gf_MapMAIClosestUnitfromFortKeepRegionCore(lp_mapMIndex);
        libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_unitTarget = lv_itTarget;
    }
    else if ((libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_unitTarget != null) && (UnitIsAlive(libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_unitTarget) == false)) {
        libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_unitTarget = null;
        libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_state = libAIAI_ge_AIStates_HoldPosition;
    }
    else if ((libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_unitTarget != null) && (UnitIsAlive(libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_unitTarget) == true)) {
        if ((UnitHasBehavior2(libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_unitTarget, "GateTower_TowerController_AfterDeathBehavior") == true)) {
            libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_unitTarget = null;
            libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_state = libAIAI_ge_AIStates_HoldPosition;
        }
        else {
            libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_state = libAIAI_ge_AIStates_AttackStructure;
            lv_itTarget = libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_unitTarget;
        }
    }
    auto9325AE6E_val = libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_state;
    if (auto9325AE6E_val == libAIAI_ge_AIStates_HoldPosition) {
        UnitIssueOrder(lv_itUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        lv_text = StringExternal("Param/Value/lib_AIAI_4C5CBB91");
    }
    else if (auto9325AE6E_val == libAIAI_ge_AIStates_AttackStructure) {
        UnitIssueOrder(lv_itUnit, OrderTargetingUnit(AbilityCommand("MapM_BattleForSlayn_VoidThrasher_AttackAbil", 0), lv_itTarget), c_orderQueueReplace);
        lv_text = StringExternal("Param/Value/lib_AIAI_04ED637F");
    }
    else {
    }
    if ((libCore_gv_dEBUGHelpTextTagsEnabled == true) && (UnitIsAlive(lv_itUnit) == true)) {
        if ((libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_debugTextTag == c_textTagNone)) {
            TextTagCreate(StringToText(""), 24, UnitGetPosition(lv_itUnit), 1.0, true, true, PlayerGroupAll());
            TextTagAttachToUnit(TextTagLastCreated(), lv_itUnit, 1.0);
            libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_debugTextTag = TextTagLastCreated();
        }
        else {
            TextTagSetText(libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_debugTextTag, (StringExternal("Param/Value/lib_AIAI_520799C6") + UnitGetName(lv_itTarget) + StringExternal("Param/Value/lib_AIAI_FB5594FF") + StringExternal("Param/Value/lib_AIAI_7B5C6890") + lv_text));
        }
    }
    else {
        if ((libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_debugTextTag != c_textTagNone)) {
            TextTagDestroy(libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_debugTextTag);
            libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_debugTextTag = c_textTagNone;
        }

    }
}

void libAIAI_gf_MapMAIVoidThrasherMinionFunc (int lp_mapMIndex) {
    // Variable Declarations
    fixed lv_weaponRange;
    unit lv_itUnit;
    region lv_itUnitRegion;
    unit lv_itTarget;
    text lv_text;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_itUnit = libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_unit;
    lv_itUnitRegion = libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_region;

    // Implementation
    if ((UnitIsAlive(libMapM_gv_mMBattleForSlaynData.lv_voidThrasher[libGame_gf_PlayerGetPlayerTeam(UnitGetOwner(lv_itUnit))]) == false)) {
        UnitKill(lv_itUnit);
        return ;
    }
    else {
        lv_weaponRange = (UnitWeaponRange(lv_itUnit, 1)+2.0);
    }
    if ((libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_unitTarget == null)) {
        if ((libAIAI_gf_SupportAIRegionAnyEnemySummonsInRegionforUnit(lv_itUnit, lv_itUnitRegion) == true)) {
            lv_itTarget = libAIAI_gf_SupportAIRegionGetNearestEnemySummonsInRegionforUnit(lv_itUnitRegion, lv_itUnit);
            libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_unitTarget = lv_itTarget;
            libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_state = libAIAI_ge_AIStates_AttackSummon;
            lv_text = StringExternal("Param/Value/lib_AIAI_BB3ADBB8");
            return ;
        }

        if ((libAIAI_gf_SupportAIRegionAnyEnemyHeroInRegionforUnit(lv_itUnit, lv_itUnitRegion) == true)) {
            lv_itTarget = libAIAI_gf_SupportAIRegionGetNearestEnemyHeroesInRegionforUnit(lv_itUnitRegion, lv_itUnit);
            libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_unitTarget = lv_itTarget;
            libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_state = libAIAI_ge_AIStates_AttackHero;
            lv_text = StringExternal("Param/Value/lib_AIAI_F83F0261");
            return ;
        }

    }
    else if ((UnitIsValid(libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_unitTarget) == false)) {
        libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_unitTarget = null;
        return ;
    }
    else if ((libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_unitTarget != null) && (UnitIsAlive(libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_unitTarget) == true)) {
        if ((libNtve_gf_UnitInRegion(libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_unitTarget, lv_itUnitRegion) == true)) {
            lv_itTarget = libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_unitTarget;
        }
        else {
            libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_unitTarget = null;
        }
    }
    if ((lv_itTarget != null)) {
        UnitIssueOrder(lv_itUnit, OrderTargetingUnit(AbilityCommand("AttackAlly", 0), lv_itTarget), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(lv_itUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    if ((libCore_gv_dEBUGHelpTextTagsEnabled == true) && (UnitIsAlive(lv_itUnit) == true)) {
        if ((libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_debugTextTag == c_textTagNone)) {
            TextTagCreate(StringToText(""), 24, UnitGetPosition(lv_itUnit), 1.0, true, true, PlayerGroupAll());
            TextTagAttachToUnit(TextTagLastCreated(), lv_itUnit, 1.0);
            libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_debugTextTag = TextTagLastCreated();
        }
        else {
            TextTagSetText(libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_debugTextTag, (StringExternal("Param/Value/lib_AIAI_D6F3CBEB") + UnitGetName(libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_unitTarget)));
        }
    }
    else {
        if ((libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_debugTextTag != c_textTagNone)) {
            TextTagDestroy(libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_debugTextTag);
            libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_debugTextTag = c_textTagNone;
        }

    }
}

unit libAIAI_gf_MapMAIClosestUnitfromFortKeepRegionCore (int lp_mapMIndex) {
    // Variable Declarations
    int lv_itLane;
    int lv_itLaneCaster;
    int lv_itTeam;
    unit lv_mapMUnit;
    int lv_enemyTeam;
    unitgroup lv_towerGateGroup;
    unitgroup lv_gateGroup;

    // Automatic Variable Declarations
    unitgroup auto99D21651_g;
    int auto99D21651_u;
    unit auto99D21651_var;
    int auto814E8D9C_ae;
    unitgroup auto6B6D0814_g;
    int auto6B6D0814_u;
    unit auto6B6D0814_var;
    unitgroup autoC107EFB5_g;
    int autoC107EFB5_u;
    unit autoC107EFB5_var;
    int auto4CE8CECF_ae;
    unitgroup autoC8DCA2B4_g;
    int autoC8DCA2B4_u;
    unit autoC8DCA2B4_var;

    // Variable Initialization
    lv_itLaneCaster = libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_lane;
    lv_itTeam = libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_team;
    lv_mapMUnit = libAIAI_gv_mapMAIUnitInfo[lp_mapMIndex].lv_unit;
    lv_towerGateGroup = UnitGroupEmpty();
    lv_gateGroup = UnitGroupEmpty();

    // Implementation
    lv_enemyTeam = libGame_gf_EnemyTeamNumberOfTeam(lv_itTeam);
    if ((UnitGroupCount(libGame_gv_teams[lv_enemyTeam].lv_fortRegionGROUP[lv_itLaneCaster], c_unitCountAlive) >= 1)) {
        auto99D21651_g = libGame_gv_teams[lv_enemyTeam].lv_fortRegionGROUP[lv_itLaneCaster];
        auto99D21651_u = UnitGroupCount(auto99D21651_g, c_unitCountAll);
        for (;; auto99D21651_u -= 1) {
            auto99D21651_var = UnitGroupUnitFromEnd(auto99D21651_g, auto99D21651_u);
            if (auto99D21651_var == null) { break; }
            if ((UnitHasBehavior2(auto99D21651_var, "GateTower_TowerController_AfterDeathBehavior") == false) && ((UnitTypeTestFlag(UnitGetType(auto99D21651_var), c_unitFlagTownStructureCannonTower) == true) || (UnitTypeTestFlag(UnitGetType(auto99D21651_var), c_unitFlagTownStructureGate) == true))) {
                UnitGroupAdd(lv_towerGateGroup, auto99D21651_var);
            }
        }
        if ((UnitGroupCount(lv_towerGateGroup, c_unitCountAlive) > 0)) {
            return UnitGroupClosestToPoint(lv_towerGateGroup, UnitGetPosition(lv_mapMUnit));
        }
        else {
            return UnitGroupClosestToPoint(libGame_gv_teams[lv_enemyTeam].lv_fortRegionGROUP[lv_itLaneCaster], UnitGetPosition(lv_mapMUnit));
        }
    }

    auto814E8D9C_ae = libGame_gv_laneInfo.lv_laneCount;
    lv_itLane = 1;
    for ( ; lv_itLane <= auto814E8D9C_ae ; lv_itLane += 1 ) {
        if ((lv_itLane != lv_itLaneCaster) && (UnitGroupCount(libGame_gv_teams[lv_enemyTeam].lv_fortRegionGROUP[lv_itLane], c_unitCountAlive) >= 1)) {
            auto6B6D0814_g = libGame_gv_teams[lv_enemyTeam].lv_fortRegionGROUP[lv_itLane];
            auto6B6D0814_u = UnitGroupCount(auto6B6D0814_g, c_unitCountAll);
            for (;; auto6B6D0814_u -= 1) {
                auto6B6D0814_var = UnitGroupUnitFromEnd(auto6B6D0814_g, auto6B6D0814_u);
                if (auto6B6D0814_var == null) { break; }
                if ((UnitHasBehavior2(auto6B6D0814_var, "GateTower_TowerController_AfterDeathBehavior") == false) && ((UnitTypeTestFlag(UnitGetType(auto6B6D0814_var), c_unitFlagTownStructureCannonTower) == true) || (UnitTypeTestFlag(UnitGetType(auto6B6D0814_var), c_unitFlagTownStructureGate) == true))) {
                    UnitGroupAdd(lv_towerGateGroup, auto6B6D0814_var);
                }
            }
            if ((UnitGroupCount(lv_towerGateGroup, c_unitCountAlive) > 0)) {
                return UnitGroupClosestToPoint(lv_towerGateGroup, UnitGetPosition(lv_mapMUnit));
            }
            else {
                return UnitGroupClosestToPoint(libGame_gv_teams[lv_enemyTeam].lv_fortRegionGROUP[lv_itLane], UnitGetPosition(lv_mapMUnit));
            }
        }

    }
    if ((UnitGroupCount(libGame_gv_teams[lv_enemyTeam].lv_keepRegionGROUP[lv_itLaneCaster], c_unitCountAlive) >= 1)) {
        autoC107EFB5_g = libGame_gv_teams[lv_enemyTeam].lv_keepRegionGROUP[lv_itLaneCaster];
        autoC107EFB5_u = UnitGroupCount(autoC107EFB5_g, c_unitCountAll);
        for (;; autoC107EFB5_u -= 1) {
            autoC107EFB5_var = UnitGroupUnitFromEnd(autoC107EFB5_g, autoC107EFB5_u);
            if (autoC107EFB5_var == null) { break; }
            if ((UnitHasBehavior2(autoC107EFB5_var, "GateTower_TowerController_AfterDeathBehavior") == false) && ((UnitTypeTestFlag(UnitGetType(autoC107EFB5_var), c_unitFlagTownStructureCannonTower) == true) || (UnitTypeTestFlag(UnitGetType(autoC107EFB5_var), c_unitFlagTownStructureGate) == true))) {
                UnitGroupAdd(lv_towerGateGroup, autoC107EFB5_var);
            }
        }
        if ((UnitGroupCount(lv_towerGateGroup, c_unitCountAlive) > 0)) {
            return UnitGroupClosestToPoint(lv_towerGateGroup, UnitGetPosition(lv_mapMUnit));
        }
        else {
            return UnitGroupClosestToPoint(libGame_gv_teams[lv_enemyTeam].lv_keepRegionGROUP[lv_itLaneCaster], UnitGetPosition(lv_mapMUnit));
        }
    }

    auto4CE8CECF_ae = libGame_gv_laneInfo.lv_laneCount;
    lv_itLane = 1;
    for ( ; lv_itLane <= auto4CE8CECF_ae ; lv_itLane += 1 ) {
        if ((lv_itLane != lv_itLaneCaster) && (UnitGroupCount(libGame_gv_teams[lv_enemyTeam].lv_keepRegionGROUP[lv_itLane], c_unitCountAlive) >= 1)) {
            autoC8DCA2B4_g = libGame_gv_teams[lv_enemyTeam].lv_keepRegionGROUP[lv_itLane];
            autoC8DCA2B4_u = UnitGroupCount(autoC8DCA2B4_g, c_unitCountAll);
            for (;; autoC8DCA2B4_u -= 1) {
                autoC8DCA2B4_var = UnitGroupUnitFromEnd(autoC8DCA2B4_g, autoC8DCA2B4_u);
                if (autoC8DCA2B4_var == null) { break; }
                if ((UnitHasBehavior2(autoC8DCA2B4_var, "GateTower_TowerController_AfterDeathBehavior") == false) && ((UnitTypeTestFlag(UnitGetType(autoC8DCA2B4_var), c_unitFlagTownStructureCannonTower) == true) || (UnitTypeTestFlag(UnitGetType(autoC8DCA2B4_var), c_unitFlagTownStructureGate) == true))) {
                    UnitGroupAdd(lv_towerGateGroup, autoC8DCA2B4_var);
                }
            }
            if ((UnitGroupCount(lv_towerGateGroup, c_unitCountAlive) > 0)) {
                return UnitGroupClosestToPoint(lv_towerGateGroup, UnitGetPosition(lv_mapMUnit));
            }
            else {
                return UnitGroupClosestToPoint(libGame_gv_teams[lv_enemyTeam].lv_keepRegionGROUP[lv_itLane], UnitGetPosition(lv_mapMUnit));
            }
        }

    }
    return libGame_gv_teams[lv_enemyTeam].lv_core;
}

int libAIAI_gf_MapMAIGetMapMUnitIndex (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_unit, libGame_gf_CustomValueIndex(libGame_ge_CustomValueIndexes_MapMUnitIndex)));
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Run AI System
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_RunAISystem_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSAIEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libAIAI_gt_TowerAICycle, true);
    TriggerEnable(libAIAI_gt_CycleMinions2, true);
    TriggerEnable(libAIAI_gt_CycleDefenders, true);
    TriggerEnable(libAIAI_gt_CycleMercs, true);
    TriggerEnable(libAIAI_gt_CycleMapMAI, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_RunAISystem_Init () {
    libAIAI_gt_RunAISystem = TriggerCreate("libAIAI_gt_RunAISystem_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Towers and Towns
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_InitializeTowersandTowns_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_nPC;
    int lv_laneNumber;

    // Automatic Variable Declarations
    unitgroup autoA3A20356_g;
    int autoA3A20356_u;
    unit autoA3A20356_var;
    unitgroup auto8198ADA8_g;
    int auto8198ADA8_u;
    unit auto8198ADA8_var;
    unitgroup autoDECD4003_g;
    int autoDECD4003_u;
    unit autoDECD4003_var;
    unitgroup autoE8393207_g;
    int autoE8393207_u;
    unit autoE8393207_var;
    unitgroup auto77ACB585_g;
    int auto77ACB585_u;
    unit auto77ACB585_var;

    // Variable Initialization
    lv_nPC = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    autoA3A20356_g = UnitGroup("Building_Core", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    autoA3A20356_u = UnitGroupCount(autoA3A20356_g, c_unitCountAll);
    for (;; autoA3A20356_u -= 1) {
        autoA3A20356_var = UnitGroupUnitFromEnd(autoA3A20356_g, autoA3A20356_u);
        if (autoA3A20356_var == null) { break; }
        libAIAI_gf_TowerAICheckIndex(autoA3A20356_var);
    }
    auto8198ADA8_g = UnitGroup("Building_Fort", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto8198ADA8_u = UnitGroupCount(auto8198ADA8_g, c_unitCountAll);
    for (;; auto8198ADA8_u -= 1) {
        auto8198ADA8_var = UnitGroupUnitFromEnd(auto8198ADA8_g, auto8198ADA8_u);
        if (auto8198ADA8_var == null) { break; }
        libAIAI_gf_TowerAICheckIndex(auto8198ADA8_var);
    }
    autoDECD4003_g = UnitGroup("Building_Keep", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    autoDECD4003_u = UnitGroupCount(autoDECD4003_g, c_unitCountAll);
    for (;; autoDECD4003_u -= 1) {
        autoDECD4003_var = UnitGroupUnitFromEnd(autoDECD4003_g, autoDECD4003_u);
        if (autoDECD4003_var == null) { break; }
        libAIAI_gf_TowerAICheckIndex(autoDECD4003_var);
    }
    autoE8393207_g = UnitGroup("Building_Tower", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    autoE8393207_u = UnitGroupCount(autoE8393207_g, c_unitCountAll);
    for (;; autoE8393207_u -= 1) {
        autoE8393207_var = UnitGroupUnitFromEnd(autoE8393207_g, autoE8393207_u);
        if (autoE8393207_var == null) { break; }
        libAIAI_gf_TowerAICheckIndex(autoE8393207_var);
    }
    auto77ACB585_g = UnitGroup("Building_Tower_Standalone", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto77ACB585_u = UnitGroupCount(auto77ACB585_g, c_unitCountAll);
    for (;; auto77ACB585_u -= 1) {
        auto77ACB585_var = UnitGroupUnitFromEnd(auto77ACB585_g, auto77ACB585_u);
        if (auto77ACB585_var == null) { break; }
        libAIAI_gf_TowerAICheckIndex(auto77ACB585_var);
    }
    TriggerEnable(libGame_gt_TowerDiesPeriodicFortKeepDead, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_InitializeTowersandTowns_Init () {
    libAIAI_gt_InitializeTowersandTowns = TriggerCreate("libAIAI_gt_InitializeTowersandTowns_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cycle (Minions) 2
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_CycleMinions2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minionIndex;

    // Automatic Variable Declarations
    int auto3F7FB6DE_ae;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSMinionsAIEnabled == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto3F7FB6DE_ae = libAIAI_gv_minionAIActiveMinionsUpperBound;
    lv_minionIndex = 1;
    for ( ; lv_minionIndex <= auto3F7FB6DE_ae ; lv_minionIndex += 1 ) {
        libAIAI_gf_MinionAIFunctionAttack2D182D0BED187D182D0BED0BFD18BD182D0B0D0BBD181D18FD0BFD0BED0B4D185D0BED182D181D0BFD0B5D180D0B5D0B4D0B5D0BBD0B0D182D18C(lv_minionIndex);
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_CycleMinions2_Init () {
    libAIAI_gt_CycleMinions2 = TriggerCreate("libAIAI_gt_CycleMinions2_Func");
    TriggerEnable(libAIAI_gt_CycleMinions2, false);
    TriggerAddEventTimePeriodic(libAIAI_gt_CycleMinions2, 0.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cycle (Defenders)
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_CycleDefenders_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itCamp;
    int lv_itMerc;

    // Automatic Variable Declarations
    int auto01B9DCB7_ae;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSMinionsAIEnabled == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto01B9DCB7_ae = libMapM_gv_mapMMaxCampsForMapCurrent;
    lv_itCamp = 1;
    for ( ; lv_itCamp <= auto01B9DCB7_ae ; lv_itCamp += 1 ) {
        libAIAI_gf_DefenderAIFunctionAttackNYNEW(lv_itCamp);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_CycleDefenders_Init () {
    libAIAI_gt_CycleDefenders = TriggerCreate("libAIAI_gt_CycleDefenders_Func");
    TriggerEnable(libAIAI_gt_CycleDefenders, false);
    TriggerAddEventTimePeriodic(libAIAI_gt_CycleDefenders, 0.125, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cycle (Mercs)
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_CycleMercs_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itCamp;
    int lv_itMerc;

    // Automatic Variable Declarations
    int auto488AC01F_ae;
    unitgroup autoDCD39FAD_g;
    int autoDCD39FAD_u;
    unit autoDCD39FAD_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSMinionsAIEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto488AC01F_ae = libAIAI_gv_mercAIActiveCampsUpperBound;
    lv_itCamp = 1;
    for ( ; lv_itCamp <= auto488AC01F_ae ; lv_itCamp += 1 ) {
        if ((libAIAI_gv_mercsGroupInfo[lv_itCamp].lv_groupIsFree == false)) {
            autoDCD39FAD_g = libAIAI_gv_mercsGroupInfo[lv_itCamp].lv_mercGroup;
            autoDCD39FAD_u = UnitGroupCount(autoDCD39FAD_g, c_unitCountAll);
            for (;; autoDCD39FAD_u -= 1) {
                autoDCD39FAD_var = UnitGroupUnitFromEnd(autoDCD39FAD_g, autoDCD39FAD_u);
                if (autoDCD39FAD_var == null) { break; }
                lv_itMerc = libAIAI_gf_MercAIGetMercIndex(autoDCD39FAD_var);
                if ((libAIAI_gv_mercsGroupInfo[lv_itCamp].lv_mercIsAlive[lv_itMerc] == true)) {
                    libAIAI_gf_MercAIFunctionAttack(lv_itCamp, lv_itMerc);
                }
            }
        }

    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_CycleMercs_Init () {
    libAIAI_gt_CycleMercs = TriggerCreate("libAIAI_gt_CycleMercs_Func");
    TriggerEnable(libAIAI_gt_CycleMercs, false);
    TriggerAddEventTimePeriodic(libAIAI_gt_CycleMercs, 0.125, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cycle (MapM AI)
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_CycleMapMAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itMapMUnit;

    // Automatic Variable Declarations
    int auto6B1FDBD1_ae;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto6B1FDBD1_ae = libAIAI_gv_mapMAICurrentUnitsCount;
    lv_itMapMUnit = 1;
    for ( ; lv_itMapMUnit <= auto6B1FDBD1_ae ; lv_itMapMUnit += 1 ) {
        libAIAI_gf_MapMAIFunction(lv_itMapMUnit);
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_CycleMapMAI_Init () {
    libAIAI_gt_CycleMapMAI = TriggerCreate("libAIAI_gt_CycleMapMAI_Func");
    TriggerEnable(libAIAI_gt_CycleMapMAI, false);
    TriggerAddEventTimePeriodic(libAIAI_gt_CycleMapMAI, 0.125, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MinionAI - Cycle
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_MinionAICycle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minionIndex;
    unit lv_minion;
    int lv_state;
    order lv_minionOrder;
    abilcmd lv_minionAbilityCommand;
    int lv_oldState;
    int lv_newState;

    // Automatic Variable Declarations
    int auto59F2045A_ae;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto59F2045A_ae = libAIAI_gv_minionAIActiveMinionsUpperBound;
    lv_minionIndex = 1;
    for ( ; lv_minionIndex <= auto59F2045A_ae ; lv_minionIndex += 1 ) {
        lv_minion = libAIAI_gv_minionInfo[lv_minionIndex].lv_minionUnit;
        if (((UnitIsAlive(lv_minion) == false) || (UnitIsValid(lv_minion) == false) || (UnitHasBehavior2(lv_minion, "MinionProtoss_WarpingInvulnerable") == true))) {
            continue;
        }
        if ((libGame_gf_LaneIndexisValid(libAIAI_gv_minionInfo[lv_minionIndex].lv_lane) == true) && ((DistanceBetweenPoints(libAIAI_gv_minionInfo[lv_minionIndex].lv_minionPosition, libAIAI_gf_MinionAIGetNextWaypointForMinion(lv_minionIndex)) <= libAIAI_gv_aIWaypointAdvanceDistance) || (libAIAI_gf_MinionAITestPastNextWaypoints(lv_minionIndex) == true))) {
            libAIAI_gf_MinionAIAdvanceMinionToNextWaypoint(lv_minionIndex);
        }
        if ((libAIAI_gv_minionInfo[lv_minionIndex].lv_leashing == true) && (libAIAI_gf_MinionAIWithinLeashingDistanceofLane(lv_minionIndex) == true)) {
            libAIAI_gv_minionInfo[lv_minionIndex].lv_leashing = false;
        }
        lv_oldState = libAIAI_gv_minionInfo[lv_minionIndex].lv_state;
        lv_newState = libAIAI_gf_MinionAIDetermineState(lv_minionIndex, lv_oldState);
        if (((lv_minionOrder == null) || (lv_minionAbilityCommand == AbilityCommand("move", 2)))) {
            if ((libAIAI_gv_minionInfo[lv_minionIndex].lv_leashing == false)) {
                if (((lv_minionAbilityCommand != AbilityCommand("move", 0)) || (OrderGetTargetType(lv_minionOrder) != c_orderTargetPoint) || (OrderGetTargetPosition(lv_minionOrder) == libAIAI_gv_minionInfo[lv_minionIndex].lv_battleStandardPoint))) {
                    libAIAI_gv_minionInfo[lv_minionIndex].lv_forceStateTransition = true;
                }
            }
            else {
                if ((lv_minionAbilityCommand != AbilityCommand("attack", 0)) && (lv_minionAbilityCommand != AbilityCommand("AttackAlly", 0))) {
                    libAIAI_gv_minionInfo[lv_minionIndex].lv_forceStateTransition = true;
                }
                else {
                    if ((OrderGetTargetType(lv_minionOrder) == c_orderTargetUnit)) {
                    }
                    else {
                        if (((OrderGetTargetType(lv_minionOrder) != c_orderTargetPoint) || (OrderGetTargetPosition(lv_minionOrder) != libAIAI_gf_MinionAIGetNextWaypointForMinion(lv_minionIndex)))) {
                            libAIAI_gv_minionInfo[lv_minionIndex].lv_forceStateTransition = true;
                        }
                    }
                }
            }
        }
        if (((lv_oldState != lv_newState) || (libAIAI_gv_minionInfo[lv_minionIndex].lv_forceStateTransition == true))) {
            libAIAI_gv_minionInfo[lv_minionIndex].lv_state = lv_newState;
            libAIAI_gv_minionInfo[lv_minionIndex].lv_forceStateTransition = false;
            libAIAI_gf_MinionAIUpdateBattleStandardDataForMinion(lv_minionIndex);
            libAIAI_gf_MinionAITransitionMinionIntoState(lv_minionIndex, lv_newState);
        }
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_MinionAICycle_Init () {
    libAIAI_gt_MinionAICycle = TriggerCreate("libAIAI_gt_MinionAICycle_Func");
    TriggerEnable(libAIAI_gt_MinionAICycle, false);
    TriggerAddEventTimePeriodic(libAIAI_gt_MinionAICycle, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TowerAI - Cycle
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_TowerAICycle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_towerCount;
    int lv_towerIndex;
    unit lv_towerUnit;
    unit lv_currentTarget;
    fixed lv_scanRange;
    point lv_towerPosition;
    unitgroup lv_scanGroup;
    unitgroup lv_minionGroup;
    unitgroup lv_summonedGroup;
    unitgroup lv_heroicGroup;
    unitgroup lv_towerPriority1UnitsInRange;
    unit lv_towerPriority1Unit;
    unitgroup lv_towerPriority2UnitsInRange;
    unit lv_towerPriority2Unit;
    order lv_towerOrder;

    // Automatic Variable Declarations
    int autoE4BD0743_ae;
    unitgroup auto1AAC83B9_g;
    int auto1AAC83B9_u;
    unitgroup autoF3959885_g;
    int autoF3959885_u;
    unit autoF3959885_var;

    // Variable Initialization
    lv_scanGroup = UnitGroupEmpty();
    lv_minionGroup = UnitGroupEmpty();
    lv_summonedGroup = UnitGroupEmpty();
    lv_heroicGroup = UnitGroupEmpty();
    lv_towerPriority1UnitsInRange = UnitGroupEmpty();
    lv_towerPriority2UnitsInRange = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCore_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE4BD0743_ae = libAIAI_gv_towerInfoCurrentCount;
    lv_towerIndex = 1;
    for ( ; lv_towerIndex <= autoE4BD0743_ae ; lv_towerIndex += 1 ) {
        lv_towerUnit = libAIAI_gv_towerInfo[lv_towerIndex].lv_towerUnit;
        lv_currentTarget = null;
        if ((UnitIsAlive(lv_towerUnit) == true) && (UnitBehaviorCount(lv_towerUnit, "GateTower_TowerController_DeadBehavior") == 0)) {
            lv_towerPosition = UnitGetPosition(lv_towerUnit);
            lv_currentTarget = libAIAI_gv_towerInfo[lv_towerIndex].lv_targetUnit;
            if (((UnitGetType(lv_towerUnit) == "Building_Fort") || (UnitGetType(lv_towerUnit) == "Building_Keep") || (UnitGetType(lv_towerUnit) == "Building_Core"))) {
                lv_scanRange = (libAIAI_gv_townSearchRadius_C + 0.25);
            }
            else {
                lv_scanRange = (libAIAI_gv_towerSearchRadius_C + 0.25);
            }
            if (((lv_currentTarget != null) || (DistanceBetweenPoints(lv_towerPosition, UnitGetPosition(lv_currentTarget)) > lv_scanRange))) {
                if (((UnitIsAlive(lv_currentTarget) == false) || (UnitFilterMatch(lv_currentTarget, UnitGetOwner(lv_towerUnit), libAIAI_gv_uF_TowerAI_Required_Invulnerable) == true) || (UnitFilterMatch(lv_currentTarget, UnitGetOwner(lv_towerUnit), libAIAI_gv_uF_TowerAI_Required_Stasis) == true) || (UnitFilterMatch(lv_currentTarget, UnitGetOwner(lv_towerUnit), libAIAI_gv_uF_TowerAI_Required_Visible) == false) || (UnitFilterMatch(lv_currentTarget, UnitGetOwner(lv_towerUnit), libAIAI_gv_uF_TowerAI_Required_Ignored) == true))) {
                    libAIAI_gv_towerInfo[lv_towerIndex].lv_targetUnit = null;
                    lv_currentTarget = null;
                    UnitIssueOrder(lv_towerUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                }
                else {
                    libAIAI_gv_towerInfo[lv_towerIndex].lv_targetUnit = null;
                    UnitIssueOrder(lv_towerUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                }
            }
            if (((lv_currentTarget == null) || (UnitTypeTestAttribute(UnitGetType(lv_currentTarget), c_unitAttributeHeroic) == true))) {
                lv_scanGroup = UnitGroupSearch(null, UnitGetOwner(lv_towerUnit), lv_towerPosition, lv_scanRange, libAIAI_gv_uF_TowerAI_ScanGroup, 0);
                if ((UnitGroupCount(lv_scanGroup, c_unitCountAlive) > 0)) {
                    auto1AAC83B9_g = lv_scanGroup;
                    auto1AAC83B9_u = UnitGroupCount(auto1AAC83B9_g, c_unitCountAll);
                    for (;; auto1AAC83B9_u -= 1) {
                        lv_towerPriority1Unit = UnitGroupUnitFromEnd(auto1AAC83B9_g, auto1AAC83B9_u);
                        if (lv_towerPriority1Unit == null) { break; }
                        if ((UnitHasBehavior2(lv_towerPriority1Unit, "TowerAIPrioritizedTarget1") == true)) {
                            UnitGroupAdd(lv_towerPriority1UnitsInRange, lv_towerPriority1Unit);
                        }
                    }
                    if ((UnitGroupCount(lv_towerPriority1UnitsInRange, c_unitCountAlive) > 0)) {
                        libAIAI_gv_towerInfo[lv_towerIndex].lv_targetUnit = UnitGroupClosestToPoint(lv_towerPriority1UnitsInRange, lv_towerPosition);
                    }
                    else {
                        lv_minionGroup = UnitGroupFilter(null, c_playerAny, lv_scanGroup, libAIAI_gv_uF_TowerAI_Required_Minion, 0);
                        if ((UnitGroupCount(lv_minionGroup, c_unitCountAlive) > 0)) {
                            libAIAI_gv_towerInfo[lv_towerIndex].lv_targetUnit = UnitGroupClosestToPoint(lv_minionGroup, lv_towerPosition);
                        }
                        else {
                            lv_summonedGroup = UnitGroupFilter(null, c_playerAny, lv_scanGroup, libAIAI_gv_uF_TowerAI_Required_Summoned, 0);
                            if ((UnitGroupCount(lv_summonedGroup, c_unitCountAlive) > 0)) {
                                libAIAI_gv_towerInfo[lv_towerIndex].lv_targetUnit = UnitGroupClosestToPoint(lv_summonedGroup, lv_towerPosition);
                            }
                            else {
                                if ((libAIAI_gv_towerInfo[lv_towerIndex].lv_targetUnit == null)) {
                                    lv_heroicGroup = UnitGroupFilter(null, c_playerAny, lv_scanGroup, libAIAI_gv_uF_TowerAI_Required_Heroic, 0);
                                    autoF3959885_g = lv_heroicGroup;
                                    autoF3959885_u = UnitGroupCount(autoF3959885_g, c_unitCountAll);
                                    for (;; autoF3959885_u -= 1) {
                                        autoF3959885_var = UnitGroupUnitFromEnd(autoF3959885_g, autoF3959885_u);
                                        if (autoF3959885_var == null) { break; }
                                        if ((UnitFilterMatch(autoF3959885_var, UnitGetOwner(lv_towerUnit), libAIAI_gv_uF_TowerAI_Required_Ignored) == true)) {
                                            UnitGroupRemove(lv_heroicGroup, autoF3959885_var);
                                        }
                                    }
                                    if ((UnitGroupCount(lv_heroicGroup, c_unitCountAlive) > 0)) {
                                        libAIAI_gv_towerInfo[lv_towerIndex].lv_targetUnit = UnitGroupClosestToPoint(lv_heroicGroup, lv_towerPosition);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if ((libAIAI_gv_towerInfo[lv_towerIndex].lv_targetUnit != null)) {
                lv_towerOrder = UnitOrder(lv_towerUnit, 0);
                if (((lv_towerOrder == null) || (OrderGetAbilityCommand(lv_towerOrder) != AbilityCommand("attack", 0)) || (OrderGetTargetType(lv_towerOrder) != c_orderTargetUnit) || (OrderGetTargetUnit(lv_towerOrder) != libAIAI_gv_towerInfo[lv_towerIndex].lv_targetUnit))) {
                    UnitIssueOrder(lv_towerUnit, OrderTargetingUnit(AbilityCommand("attack", 0), libAIAI_gv_towerInfo[lv_towerIndex].lv_targetUnit), c_orderQueueReplace);
                }
            }
            else {
                UnitIssueOrder(lv_towerUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            }
            if ((libCore_gv_dEBUGHelpTextTagsEnabled == true)) {
                if ((libAIAI_gv_towerInfo[lv_towerIndex].lv_textTag == c_textTagNone)) {
                    TextTagCreate(StringToText(""), 24, lv_towerPosition, 1.0, true, true, libCore_gv_activeHumanPlayers);
                    libAIAI_gv_towerInfo[lv_towerIndex].lv_textTag = TextTagLastCreated();
                }
                if ((libAIAI_gv_towerInfo[lv_towerIndex].lv_targetUnit == null)) {
                    TextTagSetText(libAIAI_gv_towerInfo[lv_towerIndex].lv_textTag, StringExternal("Param/Value/lib_AIAI_B9E3027F"));
                }
                else {
                    TextTagSetText(libAIAI_gv_towerInfo[lv_towerIndex].lv_textTag, (StringExternal("Param/Value/lib_AIAI_10408586") + UnitGetName(libAIAI_gv_towerInfo[lv_towerIndex].lv_targetUnit)));
                }
            }
            else {
                if ((libAIAI_gv_towerInfo[lv_towerIndex].lv_textTag != c_textTagNone)) {
                    TextTagDestroy(libAIAI_gv_towerInfo[lv_towerIndex].lv_textTag);
                }
            }
        }
        else {
            if ((libAIAI_gv_towerInfo[lv_towerIndex].lv_towerIsAlive == true)) {
                libAIAI_gv_towerInfo[lv_towerIndex].lv_towerIsAlive = false;
                libAIAI_gv_towerInfo[lv_towerIndex].lv_towerUnit = null;
                UnitIssueOrder(lv_towerUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            }
            if ((libAIAI_gv_towerInfoCurrentCount == lv_towerIndex)) {
                libAIAI_gv_towerInfoCurrentCount -= 1;
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_TowerAICycle_Init () {
    libAIAI_gt_TowerAICycle = TriggerCreate("libAIAI_gt_TowerAICycle_Func");
    TriggerEnable(libAIAI_gt_TowerAICycle, false);
    TriggerAddEventTimePeriodic(libAIAI_gt_TowerAICycle, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vision Is Taken
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_VisionIsTaken_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_number;
    int lv_playerPlayer;

    // Automatic Variable Declarations
    int auto7693F244_val;
    int auto7D133A83_val;
    int auto30CB9614_val;

    // Variable Initialization
    lv_player = libGame_gf_CapturePointChangesOwnerOwner();
    lv_number = libGame_gf_CapturePointChangesOwnerCapturePointIndex();

    // Conditions
    if (testConds) {
        if (!(((lv_number == 7) || (lv_number == 8)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_player == libCore_gv_cOMPUTER_Blue)) {
        auto7693F244_val = lv_number;
        if (auto7693F244_val == 7) {
            VisRevealerEnable(libAIAI_gv_revealerVision[1][1], true);
            VisRevealerEnable(libAIAI_gv_revealerVision[2][1], false);
            UnitSetOwner(libAIAI_gv_vision[1], libCore_gv_cOMPUTER_Blue, true);
            libNtve_gf_SendActorMessageToUnit(libAIAI_gv_vision[1], "AnimGroupApply Stand,Work Stand,Work,Start Stand,Work,End");
        }
        else if (auto7693F244_val == 8) {
            VisRevealerEnable(libAIAI_gv_revealerVision[1][2], true);
            VisRevealerEnable(libAIAI_gv_revealerVision[2][2], false);
            UnitSetOwner(libAIAI_gv_vision[2], libCore_gv_cOMPUTER_Blue, true);
            libNtve_gf_SendActorMessageToUnit(libAIAI_gv_vision[2], "AnimGroupApply Stand,Work Stand,Work,Start Stand,Work,End");
        }
        else {
        }
    }
    else if ((lv_player == libCore_gv_cOMPUTER_Red)) {
        auto7D133A83_val = lv_number;
        if (auto7D133A83_val == 7) {
            VisRevealerEnable(libAIAI_gv_revealerVision[2][1], true);
            VisRevealerEnable(libAIAI_gv_revealerVision[1][1], false);
            UnitSetOwner(libAIAI_gv_vision[1], libCore_gv_cOMPUTER_Red, true);
            libNtve_gf_SendActorMessageToUnit(libAIAI_gv_vision[1], "AnimGroupApply Stand,Work Stand,Work,Start Stand,Work,End");
        }
        else if (auto7D133A83_val == 8) {
            VisRevealerEnable(libAIAI_gv_revealerVision[2][2], true);
            VisRevealerEnable(libAIAI_gv_revealerVision[1][2], false);
            UnitSetOwner(libAIAI_gv_vision[2], libCore_gv_cOMPUTER_Red, true);
            libNtve_gf_SendActorMessageToUnit(libAIAI_gv_vision[2], "AnimGroupApply Stand,Work Stand,Work,Start Stand,Work,End");
        }
        else {
        }
    }
    else if ((lv_player == libCore_gv_cOMPUTER_Hostile)) {
        auto30CB9614_val = lv_number;
        if (auto30CB9614_val == 7) {
            VisRevealerEnable(libAIAI_gv_revealerVision[1][1], false);
            VisRevealerEnable(libAIAI_gv_revealerVision[2][1], false);
            UnitSetOwner(libAIAI_gv_vision[1], libCore_gv_cOMPUTER_Neutral, true);
            libNtve_gf_SendActorMessageToUnit(libAIAI_gv_vision[1], "AnimGroupRemove Stand,Work");
        }
        else if (auto30CB9614_val == 8) {
            VisRevealerEnable(libAIAI_gv_revealerVision[1][2], false);
            VisRevealerEnable(libAIAI_gv_revealerVision[2][2], false);
            UnitSetOwner(libAIAI_gv_vision[2], libCore_gv_cOMPUTER_Neutral, true);
            libNtve_gf_SendActorMessageToUnit(libAIAI_gv_vision[2], "AnimGroupRemove Stand,Work");
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_VisionIsTaken_Init () {
    libAIAI_gt_VisionIsTaken = TriggerCreate("libAIAI_gt_VisionIsTaken_Func");
    TriggerEnable(libAIAI_gt_VisionIsTaken, false);
    libGame_gf_CapturePointBecomesFullyOverCaptured(libAIAI_gt_VisionIsTaken);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defender Takes Damage 3
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_DefenderTakesDamage3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itGroupIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_itGroupIndex = libAIAI_gf_DefenderAIGetDefenderGroupIndex(EventUnit());

    // Conditions
    if (testConds) {
        if (!((lv_itGroupIndex >= 1))) {
            return false;
        }

        if (!((lv_itGroupIndex <= libMapM_gv_mapMMaxCampsForMapCurrent))) {
            return false;
        }

        if (!((libAIAI_gv_defenderGroupInfo[lv_itGroupIndex].lv_groupIsFighting == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gv_defenderGroupInfo[lv_itGroupIndex].lv_groupIsFighting = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_DefenderTakesDamage3_Init () {
    libAIAI_gt_DefenderTakesDamage3 = TriggerCreate("libAIAI_gt_DefenderTakesDamage3_Func");
    TriggerAddEventUnitDamaged(libAIAI_gt_DefenderTakesDamage3, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Camp is taken
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_Campistaken_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_aIOwner;
    int lv_pointNumber;
    int lv_newPlayerOwner;
    int lv_xP;
    int lv_i;
    int lv_team;
    int lv_hybridIncreasingValue;
    int lv_itTeam;
    int lv_itPlayer;

    // Automatic Variable Declarations
    int auto04B6CF53_ae;
    playergroup auto8A9C51C6_g;
    int autoD440A8AD_ae;
    int auto96AD34CC_val;
    string autoD353E23F_val;
    playergroup autoB4D76A91_g;
    string auto2E0C82F8_val;

    // Variable Initialization
    lv_aIOwner = libGame_gf_CapturePointChangesOwnerOwner();
    lv_pointNumber = libGame_gf_CapturePointChangesOwnerCapturePointIndex();
    lv_newPlayerOwner = libGame_gf_CapturePointChangesOwnerOwner2();
    lv_hybridIncreasingValue = 2;

    // Conditions
    if (testConds) {
        if (!((lv_pointNumber >= 1))) {
            return false;
        }

        if (!((lv_pointNumber <= libGame_gv_capturePointMaxCount_C))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_team = libGame_gf_PlayerGetPlayerTeam(lv_aIOwner);
    libAIAI_gv_defenderGroupInfo[lv_pointNumber].lv_groupisCapturing = false;
    libAIAI_gf_MercAICreatePingAtCamp(libAIAI_gv_defenderGroupInfo[lv_pointNumber].lv_captainPoint, lv_aIOwner);
    UnitSetOwner(libAIAI_gv_defenderGroupInfo[lv_pointNumber].lv_captainUnit, lv_aIOwner, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RegenGlobe", 0, lv_aIOwner, libAIAI_gv_defenderGroupInfo[lv_pointNumber].lv_captainPoint);
    libUIUI_gf_JCIChangeOwner(lv_newPlayerOwner, lv_pointNumber);
    libGame_gf_CapturePointDisable(lv_pointNumber);
    auto04B6CF53_ae = libCore_gv_bALMaxTeams;
    lv_itTeam = 1;
    for ( ; lv_itTeam <= auto04B6CF53_ae ; lv_itTeam += 1 ) {
        auto8A9C51C6_g = libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto8A9C51C6_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((PlayerGroupHasPlayer(libGame_gv_teams[lv_itTeam].lv_teamPlayerGroup, lv_aIOwner) == true)) {
                libGame_gf_AnnRegisterEvent(libCore_ge_AnnouncerVOEvents_AlliesCaptureMercCamp, lv_itPlayer, 0, 0, false);
            }
            else {
                libGame_gf_AnnRegisterEvent(libCore_ge_AnnouncerVOEvents_EnemiesCaptureMercCamp, lv_itPlayer, 0, 0, false);
            }
        }
    }
    TextTagDestroy(libAIAI_gv_defenderGroupInfo[lv_pointNumber].lv_textTagLevel);
    libAIAI_gf_DefenderAISpawnDefenderCamp(lv_pointNumber, libAIAI_gv_defenderGroupInfo[lv_pointNumber].lv_respawnTimer);
    autoD440A8AD_ae = libAIAI_gv_defenderGroupInfo[lv_pointNumber].lv_maxGroupSize;
    lv_i = 1;
    for ( ; lv_i <= autoD440A8AD_ae ; lv_i += 1 ) {
        libAIAI_gv_defenderGroupInfo[lv_pointNumber].lv_defenderUnit[lv_i] = null;
    }
    libAIAI_gf_CampGrantXPForCampForTeam(lv_pointNumber, lv_team);
    auto96AD34CC_val = libAIAI_gv_defenderGroupInfo[lv_pointNumber].lv_campType;
    if (auto96AD34CC_val == libAIAI_ge_JungleDefendersCampType_CapturetoPushLanes) {
        libAIAI_gf_MercAICreateMercs(lv_aIOwner, lv_pointNumber, libAIAI_gv_defenderGroupInfo[lv_pointNumber].lv_scale_Number_AfterDeath);
    }
    else if (auto96AD34CC_val == libAIAI_ge_JungleDefendersCampType_CapturetoGainBonuses) {
        SoundPlayForPlayer(SoundLink("MercDefender_ElementalCamp_Captured", 0), c_maxPlayers, libCore_gv_activeHumanPlayers, 100.0, 0.0);
        autoD353E23F_val = libAIAI_gv_defenderGroupInfo[lv_pointNumber].lv_defenderUnitsTypeC2ABGameLinkC2BB[1];
        if (autoD353E23F_val == "MercDefender_SlaynElemental") {
            autoB4D76A91_g = libGame_gv_teams[lv_team].lv_teamPlayerGroupNoNPCPlayers;
            lv_itPlayer = -1;
            while (true) {
                lv_itPlayer = PlayerGroupNextPlayer(autoB4D76A91_g, lv_itPlayer);
                if (lv_itPlayer < 0) { break; }
                UnitBehaviorAddPlayer(libGame_gv_players[lv_itPlayer].lv_heroUnit, "MercDefender_SlaynElemental_ElementalPower", lv_itPlayer, 1);
            }
        }
        else {
        }
    }
    else if (auto96AD34CC_val == libAIAI_ge_JungleDefendersCampType_CapturetoReplaceMinions) {
        auto2E0C82F8_val = libAIAI_gv_defenderGroupInfo[lv_pointNumber].lv_defenderUnitsTypeC2ABGameLinkC2BB[1];
        if (auto2E0C82F8_val == "MercenaryHybridMeleeDefender") {
            libGame_gv_teams[lv_team].lv_mercsMinionsRemainingSpawnCounts[libAIAI_ge_JungleMercenaryMinionNumberType_HybridMelee] += lv_hybridIncreasingValue;
            libGame_gv_teams[lv_team].lv_mercsMinionsUnitType[libAIAI_ge_JungleMercenaryMinionNumberType_HybridMelee] = "MercenaryHybridMeleeLaner";
        }
        else if (auto2E0C82F8_val == "MercenaryHybridPsionicDefender") {
            libGame_gv_teams[lv_team].lv_mercsMinionsRemainingSpawnCounts[libAIAI_ge_JungleMercenaryMinionNumberType_HybridWizard] += lv_hybridIncreasingValue;
            libGame_gv_teams[lv_team].lv_mercsMinionsUnitType[libAIAI_ge_JungleMercenaryMinionNumberType_HybridWizard] = "MercenaryHybridPsionicLaner";
        }
        else if (auto2E0C82F8_val == "MercHybridRangedDefender") {
            libGame_gv_teams[lv_team].lv_mercsMinionsRemainingSpawnCounts[libAIAI_ge_JungleMercenaryMinionNumberType_HybridRanged] += lv_hybridIncreasingValue;
            libGame_gv_teams[lv_team].lv_mercsMinionsUnitType[libAIAI_ge_JungleMercenaryMinionNumberType_HybridRanged] = "MercenaryHybridRangedLaner";
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_Campistaken_Init () {
    libAIAI_gt_Campistaken = TriggerCreate("libAIAI_gt_Campistaken_Func");
    libGame_gf_CapturePointChangesOwner(libAIAI_gt_Campistaken);
}

void libAIAI_InitTriggers () {
    libAIAI_gt_RunAISystem_Init();
    libAIAI_gt_InitializeTowersandTowns_Init();
    libAIAI_gt_CycleMinions2_Init();
    libAIAI_gt_CycleDefenders_Init();
    libAIAI_gt_CycleMercs_Init();
    libAIAI_gt_CycleMapMAI_Init();
    libAIAI_gt_MinionAICycle_Init();
    libAIAI_gt_TowerAICycle_Init();
    libAIAI_gt_VisionIsTaken_Init();
    libAIAI_gt_DefenderTakesDamage3_Init();
    libAIAI_gt_Campistaken_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libAIAI_InitLib_completed = false;

void libAIAI_InitLib () {
    if (libAIAI_InitLib_completed) {
        return;
    }

    libAIAI_InitLib_completed = true;

    libAIAI_InitLibraries();
    libAIAI_InitVariables();
    libAIAI_InitTriggers();
}

include "LibCore"
include "LibGame"
include "LibMapM"
include "LibUIUI"


include "TriggerLibs/NativeLib"
include "LibAIAI_h"
include "LibGame_h"
include "LibGDHL_h"
include "LibMapM_h"
include "LibUIUI_h"

include "LibCore_h"

//--------------------------------------------------------------------------------------------------
// Library: Core
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libCore_InitLibraries () {
    libNtve_InitVariables();
    libAIAI_InitVariables();
    libGame_InitVariables();
    libGDHL_InitVariables();
    libMapM_InitVariables();
    libUIUI_InitVariables();
}

// Variable Initialization
bool libCore_InitVariables_completed = false;

void libCore_InitVariables () {
    int init_i;
    int init_i1;
    int init_j1;
    int init_i2;
    int init_j2;

    if (libCore_InitVariables_completed) {
        return;
    }

    libCore_InitVariables_completed = true;

    libCore_gv_sYSAIEnabled = true;
    libCore_gv_sYSMinionsAIEnabled = true;
    libCore_gv_sYSTowerAI = true;
    libCore_gv_sYSEventsEnabled = true;
    libCore_gv_dEBUGAdminTeam = PlayerGroupEmpty();
    libCore_gv_dEBUGCombatTextEnabled = true;
    libCore_gv_mAPCurrentMap = libCore_ge_MAPName_None;
    libCore_gv_openTheGatesTimer = TimerCreate();
    libCore_gv_timerBeforeGameStart = TimerCreate();
    libCore_gv_gameTimer = TimerCreate();
    for (init_i = 0; init_i <= libCore_gv_dataMountsMaxMountCount; init_i += 1) {
        libCore_gv_dataMountsMountData[init_i].lv_mountModel = "CyberWolf";
        for (init_i1 = 0; init_i1 <= libCore_gv_dataMountsMaxActorMessageCount; init_i1 += 1) {
            libCore_gv_dataMountsMountData[init_i].lv_actorMessageArray[init_i1] = "";
        }
    }
    libCore_gv_allHeroPlayersPlusObserver = PlayerGroupEmpty();
    libCore_gv_teamOrder = PlayerGroupEmpty();
    libCore_gv_teamChaos = PlayerGroupEmpty();
    libCore_gv_activeHumanPlayers = PlayerGroupEmpty();
    libCore_gv_nPCPlayers = PlayerGroupEmpty();
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libCore_gv_playerGroupFromPlayer[init_i] = PlayerGroupEmpty();
    }
    for (init_i = 0; init_i <= libCore_gv_dataAnnouncerVOMaxNumberOfAnnouncerEvents; init_i += 1) {
        libCore_gv_dataAnnouncerVODataFieldMap[init_i] = "";
    }
    for (init_i = 0; init_i <= libCore_gv_dataAnnouncerVONumberOfAnnouncerPacks; init_i += 1) {
        for (init_i1 = 0; init_i1 <= libCore_gv_dataAnnouncerVOMaxNumberOfAnnouncerEvents; init_i1 += 1) {
            libCore_gv_dataAnnouncerVOPacks[init_i].lv_sounds[init_i1] = SoundLink("EditorDefaultSound", -1);
        }
        libCore_gv_dataAnnouncerVOPacks[init_i].lv_stringName = "";
    }
    libCore_gv_behaviorsQuestCurrentMaxCount = -1;
    libCore_gv_cOLORPlayerColor = Color(0,0,0);
    libCore_gv_cOLORAllyColor = Color(0,0,0);
    libCore_gv_cOLOREnemyColor = Color(0,0,0);
    libCore_gv_cOLORNeutralColor = Color(0,0,0);
    libCore_gv_cOLORJungleCreepColor = Color(23.53, 0.00, 35.69);
    for (init_i = 0; init_i <= libCore_gv_dataHeroesMaxHeroCount; init_i += 1) {
        for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxTalentsTiers; init_i1 += 1) {
            for (init_j1 = 0; init_j1 <= libCore_gv_dataHeroesMaxTalentsperTier; init_j1 += 1) {
                libCore_gv_heroData[init_i].lv_talentsData[init_i1][init_j1].lv_talentType = libCore_ge_HeroTalentType_None;
            }
        }
        for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxAbilties; init_i1 += 1) {
            libCore_gv_heroData[init_i].lv_abilitiesData[init_i1].lv_abilityType = libCore_ge_HeroAbilityType_None;
            libCore_gv_heroData[init_i].lv_abilitiesData[init_i1].lv_abilitySlot = libCore_ge_HeroAbilitySlot_None;
        }
    }
    libCore_gv_bALCancelDelay = 1.5;
    libCore_gv_bALHeroKillCreditTimeWindow = 5.0;
    libCore_gv_bALMaxSwapsRespecs = 1;
    for (init_i = 0; init_i <= libCore_gv_talents_MaxTalentEntryCount_C; init_i += 1) {
        for (init_i2 = 0; init_i2 <= libCore_gv_talents_MaxModifedAbilitiesPerTalent_C; init_i2 += 1) {
            for (init_j2 = 0; init_j2 <= libCore_gv_dataMaxCatalogChangesPerAbility; init_j2 += 1) {
                libCore_gv_talents_TalentData[init_i].lv_abilityModificationData.lv_catalog[init_i2][init_j2] = c_gameCatalogUnit;
            }
        }
        for (init_i2 = 0; init_i2 <= libCore_gv_talents_MaxModifedAbilitiesPerTalent_C; init_i2 += 1) {
            for (init_j2 = 0; init_j2 <= libCore_gv_dataMaxCatalogChangesPerAbility; init_j2 += 1) {
                libCore_gv_talents_TalentData[init_i].lv_abilityModificationData.lv_entry[init_i2][init_j2] = "";
            }
        }
        for (init_i2 = 0; init_i2 <= libCore_gv_talents_MaxModifedAbilitiesPerTalent_C; init_i2 += 1) {
            for (init_j2 = 0; init_j2 <= libCore_gv_dataMaxCatalogChangesPerAbility; init_j2 += 1) {
                libCore_gv_talents_TalentData[init_i].lv_abilityModificationData.lv_field[init_i2][init_j2] = "";
            }
        }
        for (init_i2 = 0; init_i2 <= libCore_gv_talents_MaxModifedAbilitiesPerTalent_C; init_i2 += 1) {
            for (init_j2 = 0; init_j2 <= libCore_gv_dataMaxCatalogChangesPerAbility; init_j2 += 1) {
                libCore_gv_talents_TalentData[init_i].lv_abilityModificationData.lv_stringReplacementValue[init_i2][init_j2] = "";
            }
        }
        for (init_i2 = 0; init_i2 <= libCore_gv_talents_MaxModifedAbilitiesPerTalent_C; init_i2 += 1) {
            for (init_j2 = 0; init_j2 <= libCore_gv_dataMaxCatalogChangesPerAbility; init_j2 += 1) {
                libCore_gv_talents_TalentData[init_i].lv_abilityModificationData.lv_catalogReplaceFrom[init_i2][init_j2] = "";
            }
        }
        for (init_i2 = 0; init_i2 <= libCore_gv_talents_MaxModifedAbilitiesPerTalent_C; init_i2 += 1) {
            for (init_j2 = 0; init_j2 <= libCore_gv_dataMaxCatalogChangesPerAbility; init_j2 += 1) {
                libCore_gv_talents_TalentData[init_i].lv_abilityModificationData.lv_catalogChangeTo[init_i2][init_j2] = "";
            }
        }
    }
    libCore_gv_talents_HardenedFocus_Value_C = (0.0625 * libCore_gv_talents_HardenedFocus_Percent_C);
    libCore_gv_talents_RelentlessCCReduction20_C = 0.2;
    libCore_gv_talents_RelentlessCCReduction40_C = 0.4;
    libCore_gv_talents_RelentlessCCReduction60_C = 0.6;
    libCore_gv_talents_RelentlessCCReduction75_C = 0.75;
    libCore_gv_talents_FuryOfTheStormBounceDamagePercent_C = 0.5;
}

// Presets
string libCore_ge_AnnouncerVOEvents_Ident (int lp_val) {
         if (lp_val == libCore_ge_AnnouncerVOEvents_Null) { return "Null"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_ChooseYourHero) { return "ChooseYourHero"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_CountdownRemain) { return "CountdownRemain"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Countdown30) { return "Countdown30"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Countdown10) { return "Countdown10"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Countdown5) { return "Countdown5"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Countdown4) { return "Countdown4"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Countdown3) { return "Countdown3"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Countdown2) { return "Countdown2"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Countdown1) { return "Countdown1"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_GameStart) { return "GameStart"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_HeroSlain) { return "HeroSlain"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_HeroSlainObserver) { return "HeroSlainObserver"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_AllyKilled) { return "AllyKilled"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_EnemyKilledNonparticipants) { return "EnemyKilledNonparticipants"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_EnemyKilledParticipants) { return "EnemyKilledParticipants"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_DoubleKill) { return "DoubleKill"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_TripleKill) { return "TripleKill"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_QuadraKill) { return "QuadraKill"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_PentaKill) { return "PentaKill"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_TeamKill) { return "TeamKill"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_BlueTeamKilled) { return "BlueTeamKilled"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_RedTeamKilled) { return "RedTeamKilled"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_AllyFirstBlood) { return "AllyFirstBlood"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_BlueTeamFirstBlood) { return "BlueTeamFirstBlood"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_RedTeamFirstBlood) { return "RedTeamFirstBlood"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_KillingSpreeStart) { return "KillingSpreeStart"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_KillingSpreeEndYou) { return "KillingSpreeEndYou"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_KillingSpreeEndAlly) { return "KillingSpreeEndAlly"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade1Mayhem) { return "KillingSpreeUpgrade1Mayhem"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade2Rampage) { return "KillingSpreeUpgrade2Rampage"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade3Untouchable) { return "KillingSpreeUpgrade3Untouchable"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade4AllStar) { return "KillingSpreeUpgrade4AllStar"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_APlayerHasLeftTheGame) { return "APlayerHasLeftTheGame"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_APlayerHasRejoinedTheGame) { return "APlayerHasRejoinedTheGame"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_GravestoneRevive) { return "GravestoneRevive"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Gravestomp) { return "Gravestomp"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_GravestompObserver) { return "GravestompObserver"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_AlliedFortDestroyed) { return "AlliedFortDestroyed"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_EnemyFortDestroyed) { return "EnemyFortDestroyed"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_AlliedKeepDestroyed) { return "AlliedKeepDestroyed"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_EnemyKeepDestroyed) { return "EnemyKeepDestroyed"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_BlueTeamDestroysFort) { return "BlueTeamDestroysFort"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_RedTeamDestroysFort) { return "RedTeamDestroysFort"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_BlueTeamDestroysKeep) { return "BlueTeamDestroysKeep"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_RedTeamDestroysKeep) { return "RedTeamDestroysKeep"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_AlliedCoreUnderAttack) { return "AlliedCoreUnderAttack"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_BlueTeamCoreUnderAttack) { return "BlueTeamCoreUnderAttack"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_RedTeamCoreUnderAttack) { return "RedTeamCoreUnderAttack"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Victory) { return "Victory"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Defeat) { return "Defeat"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_BlueTeamWins) { return "BlueTeamWins"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_RedTeamWins) { return "RedTeamWins"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_LegendaryEventStart) { return "LegendaryEventStart"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_LegendaryEventEnd) { return "LegendaryEventEnd"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_AlliesCaptureMercCamp) { return "AlliesCaptureMercCamp"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_EnemiesCaptureMercCamp) { return "EnemiesCaptureMercCamp"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_BlueTeamCapturesMercCamp) { return "BlueTeamCapturesMercCamp"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_RedTeamCapturesMercCamp) { return "RedTeamCapturesMercCamp"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_TalentUnlocked) { return "TalentUnlocked"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_EventCount) { return "EventCount"; }
    else if (lp_val == -1) { return "GamePaused"; }
    else if (lp_val == -1) { return "GameResumed"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_EventStarts) { return "EventStarts"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_EventContinues) { return "EventContinues"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_EventEnds) { return "EventEnds"; }
    return null;
}

// Functions
int libCore_gf_DataMountGetMountIndexFromMountLink (string lp_mountLink) {
    // Variable Declarations
    int lv_itMount;

    // Automatic Variable Declarations
    int auto86B78EE3_ae;
    const int auto86B78EE3_ai = 1;

    // Variable Initialization

    // Implementation
    auto86B78EE3_ae = libCore_gv_dataMountsMountCount;
    lv_itMount = 1;
    for ( ; ( (auto86B78EE3_ai >= 0 && lv_itMount <= auto86B78EE3_ae) || (auto86B78EE3_ai < 0 && lv_itMount >= auto86B78EE3_ae) ) ; lv_itMount += auto86B78EE3_ai ) {
        if ((lp_mountLink == libCore_gv_dataMountsMountData[lv_itMount].lv_mountID)) {
            return lv_itMount;
        }

    }
    return 0;
}

int libCore_gf_BehaviorsQuestFreeIndex () {
    // Automatic Variable Declarations
    const int autoB0D2E2E6_ae = libCore_gv_behaviorsQuestMaxCount;
    int autoB0D2E2E6_var;

    // Implementation
    autoB0D2E2E6_var = 0;
    for ( ; autoB0D2E2E6_var <= autoB0D2E2E6_ae; autoB0D2E2E6_var += 1 ) {
        if ((libCore_gv_behaviorsQuestData[autoB0D2E2E6_var].lv_behavior == null)) {
            return autoB0D2E2E6_var;
        }
    }
    return -1;
}

int libCore_gf_BehaviorsQuestBehaviorIndex (string lp_behavior) {
    // Variable Declarations
    int lv_itBehavior;

    // Automatic Variable Declarations
    int auto11FE11A5_ae;

    // Variable Initialization

    // Implementation
    auto11FE11A5_ae = libCore_gv_behaviorsQuestCurrentMaxCount;
    lv_itBehavior = 0;
    for ( ; lv_itBehavior <= auto11FE11A5_ae ; lv_itBehavior += 1 ) {
        if ((libCore_gv_behaviorsQuestData[lv_itBehavior].lv_behavior == lp_behavior)) {
            return lv_itBehavior;
        }
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Core_2186A600"), true);
    return -1;
}

bool libCore_gf_BehaviorsQuestBehaviorExist (string lp_behavior) {
    // Variable Declarations
    int lv_itBehavior;

    // Automatic Variable Declarations
    int auto4F860878_ae;

    // Variable Initialization

    // Implementation
    auto4F860878_ae = libCore_gv_behaviorsQuestCurrentMaxCount;
    lv_itBehavior = 0;
    for ( ; lv_itBehavior <= auto4F860878_ae ; lv_itBehavior += 1 ) {
        if ((libCore_gv_behaviorsQuestData[lv_itBehavior].lv_behavior == lp_behavior)) {
            return true;
        }
    }
    return false;
}

bool libCore_gf_BehaviorsQuestValidToCreateIncreaseFX (int lp_player, int lp_behaviorIndex, int lp_stacksCountCurrent) {
    // Variable Declarations
    int lv_itStack;
    int lv_stacksCountOld;

    // Automatic Variable Declarations
    int autoA07249F3_ae;

    // Variable Initialization

    // Implementation
    lv_stacksCountOld = libCore_gv_behaviorsQuestData[lp_behaviorIndex].lv_lastUpdatedStackCount[lp_player];
    libCore_gv_behaviorsQuestData[lp_behaviorIndex].lv_lastUpdatedStackCount[lp_player] = lp_stacksCountCurrent;
    if ((libCore_gv_behaviorsQuestData[lp_behaviorIndex].lv_questUpdatePerStackCount == 1)) {
        return true;
    }
    else {
        if ((ModI(lp_stacksCountCurrent, libCore_gv_behaviorsQuestData[lp_behaviorIndex].lv_questUpdatePerStackCount) == 0)) {
            return true;
        }
        else {
            autoA07249F3_ae = lp_stacksCountCurrent;
            lv_itStack = lv_stacksCountOld;
            for ( ; lv_itStack <= autoA07249F3_ae ; lv_itStack += 1 ) {
                if ((ModI(lv_itStack, libCore_gv_behaviorsQuestData[lp_behaviorIndex].lv_questUpdatePerStackCount) == 0)) {
                    return true;
                }
            }
        }
    }
    return false;
}

bool libCore_gf_BehaviorCategoriesBehaviorExist (int lp_category, string lp_behaviorLink) {
    // Variable Declarations
    int lv_itBehavior;

    // Automatic Variable Declarations
    int autoF1E4EAA6_ae;

    // Variable Initialization

    // Implementation
    autoF1E4EAA6_ae = libCore_gv_behaviorCategoriesMaximumBehaviorsPerCategory;
    lv_itBehavior = 1;
    for ( ; lv_itBehavior <= autoF1E4EAA6_ae ; lv_itBehavior += 1 ) {
        if ((libCore_gv_behaviorCategories[(lp_category)].lv_categoryBehaviors[lv_itBehavior] == lp_behaviorLink)) {
            return true;
        }
    }
    return false;
}

void libCore_gf_BehaviorCategoriesIncludeBehaviorInList (int lp_category, string lp_behavior) {
    // Variable Declarations
    int lv_category;
    int lv_behaviorIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_category = (lp_category);

    // Implementation
    if ((libCore_gv_behaviorCategories[lv_category].lv_currentBehaviorsCount < libCore_gv_behaviorCategoriesMaximumBehaviorsPerCategory)) {
        libCore_gv_behaviorCategories[lv_category].lv_currentBehaviorsCount += 1;
        lv_behaviorIndex = libCore_gv_behaviorCategories[lv_category].lv_currentBehaviorsCount;
        libCore_gv_behaviorCategories[lv_category].lv_categoryBehaviors[lv_behaviorIndex] = lp_behavior;
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Core_10DD428C"), true);
    }
}

void libCore_gf_BehaviorCategoriesRemoveAllBehaviorsByCategoryFromUnit (int lp_behaviorCategory, unit lp_unit) {
    // Variable Declarations
    int lv_itBehavior;
    int lv_category;

    // Automatic Variable Declarations
    int autoCA592295_ae;

    // Variable Initialization
    lv_category = (lp_behaviorCategory);

    // Implementation
    if ((libCore_gv_behaviorCategories[lv_category].lv_currentBehaviorsCount > 0)) {
        autoCA592295_ae = libCore_gv_behaviorCategories[lv_itBehavior].lv_currentBehaviorsCount;
        lv_itBehavior = 1;
        for ( ; lv_itBehavior <= autoCA592295_ae ; lv_itBehavior += 1 ) {
            if ((UnitHasBehavior2(lp_unit, libCore_gv_behaviorCategories[lv_category].lv_categoryBehaviors[lv_itBehavior]) == true)) {
                UnitBehaviorRemove(lp_unit, libCore_gv_behaviorCategories[lv_category].lv_categoryBehaviors[lv_itBehavior], 1);
            }
        }
    }
}

void libCore_gf_BehaviorCategoriesRemoveAllBehaviorsByCategoryControllerFromUnit (string lp_categoryController, unit lp_unit) {
    // Variable Declarations
    int lv_itCategory;
    int lv_itBehavior;

    // Automatic Variable Declarations
    int autoAC289A1D_ae;
    int auto22708AEF_ae;

    // Variable Initialization

    // Implementation
    autoAC289A1D_ae = libCore_gv_behaviorCategoriesMaximumCategories;
    lv_itCategory = 1;
    for ( ; lv_itCategory <= autoAC289A1D_ae ; lv_itCategory += 1 ) {
        if ((libCore_gv_behaviorCategories[lv_itCategory].lv_categoryController == lp_categoryController) && (libCore_gv_behaviorCategories[lv_itCategory].lv_currentBehaviorsCount > 0)) {
            auto22708AEF_ae = libCore_gv_behaviorCategories[lv_itCategory].lv_currentBehaviorsCount;
            lv_itBehavior = 1;
            for ( ; lv_itBehavior <= auto22708AEF_ae ; lv_itBehavior += 1 ) {
                UnitBehaviorRemove(lp_unit, libCore_gv_behaviorCategories[lv_itCategory].lv_categoryBehaviors[lv_itBehavior], 0);
            }
            return ;
        }
    }
}

void libCore_gf_BehaviorCategoriesSetBehaviorCategoryController (int lp_category, string lp_behavior) {
    // Automatic Variable Declarations
    // Implementation
    libCore_gv_behaviorCategories[(lp_category)].lv_categoryController = lp_behavior;
}

void libCore_gf_BehaviorCategoriesRemoveCategoryFromUnit (int lp_behaviorCategory, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorRemove(lp_unit, libCore_gv_behaviorCategories[(lp_behaviorCategory)].lv_categoryController, 1);
}

int libCore_gf_BehaviorCategoriesCommandersCategoryPresetOfBehavior (string lp_behavior) {
    // Variable Declarations
    int lv_itCategory;
    int lv_itBehaviorInList;

    // Automatic Variable Declarations
    int auto261B8DE6_ae;
    int auto2B918D49_ae;

    // Variable Initialization

    // Implementation
    auto261B8DE6_ae = libCore_gv_behaviorCategoriesMaximumCategories;
    lv_itCategory = 1;
    for ( ; lv_itCategory <= auto261B8DE6_ae ; lv_itCategory += 1 ) {
        if ((libCore_gv_behaviorCategories[lv_itCategory].lv_categoryController == lp_behavior)) {
            return libCore_gf_BehaviorCategoriesCategoryPresetFromInteger(lv_itCategory);
        }
        auto2B918D49_ae = libCore_gv_behaviorCategories[lv_itCategory].lv_currentBehaviorsCount;
        lv_itBehaviorInList = 1;
        for ( ; lv_itBehaviorInList <= auto2B918D49_ae ; lv_itBehaviorInList += 1 ) {
            if ((libCore_gv_behaviorCategories[lv_itCategory].lv_categoryBehaviors[lv_itBehaviorInList] == lp_behavior)) {
                return libCore_gf_BehaviorCategoriesCategoryPresetFromInteger(lv_itCategory);
            }
        }
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Core_BECF5B64"), true);
    return libCore_ge_BehaviorCategories_None;
}

int libCore_gf_BehaviorCategoriesCommandersCategoryIntegerOfBehavior (string lp_behavior) {
    // Variable Declarations
    int lv_itCategory;
    int lv_itBehaviorInList;

    // Automatic Variable Declarations
    int auto2C7B2A44_ae;
    int auto70F587BD_ae;

    // Variable Initialization

    // Implementation
    auto2C7B2A44_ae = libCore_gv_behaviorCategoriesMaximumCategories;
    lv_itCategory = 1;
    for ( ; lv_itCategory <= auto2C7B2A44_ae ; lv_itCategory += 1 ) {
        if ((libCore_gv_behaviorCategories[lv_itCategory].lv_categoryController == lp_behavior)) {
            return lv_itCategory;
        }
        auto70F587BD_ae = libCore_gv_behaviorCategories[lv_itCategory].lv_currentBehaviorsCount;
        lv_itBehaviorInList = 1;
        for ( ; lv_itBehaviorInList <= auto70F587BD_ae ; lv_itBehaviorInList += 1 ) {
            if ((libCore_gv_behaviorCategories[lv_itCategory].lv_categoryBehaviors[lv_itBehaviorInList] == lp_behavior)) {
                return lv_itCategory;
            }
        }
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Core_001E24F4"), true);
    return -1;
}

int libCore_gf_BehaviorCategoriesCategoryPresetFromInteger (int lp_categoryNumber) {
    // Variable Declarations
    int lv_category;

    // Automatic Variable Declarations
    int autoCA386EC5_val;

    // Variable Initialization

    // Implementation
    autoCA386EC5_val = lp_categoryNumber;
    if (autoCA386EC5_val == (libCore_ge_BehaviorCategories_None)) {
        lv_category = libCore_ge_BehaviorCategories_None;
    }
    else if (autoCA386EC5_val == (libCore_ge_BehaviorCategories_TemporaryCloak)) {
        lv_category = libCore_ge_BehaviorCategories_TemporaryCloak;
    }
    else if (autoCA386EC5_val == (libCore_ge_BehaviorCategories_PersistentCloak)) {
        lv_category = libCore_ge_BehaviorCategories_PersistentCloak;
    }
    else if (autoCA386EC5_val == (libCore_ge_BehaviorCategories_UnrevealableCloak)) {
        lv_category = libCore_ge_BehaviorCategories_UnrevealableCloak;
    }
    else {
    }
    return lv_category;
}

trigger auto_libCore_gf_GameStartSpawnHero_Trigger = null;
int auto_libCore_gf_GameStartSpawnHero_lp_player;
int auto_libCore_gf_GameStartSpawnHero_lp_spawnDelay;

void libCore_gf_GameStartSpawnHero (int lp_player, int lp_spawnDelay) {
    auto_libCore_gf_GameStartSpawnHero_lp_player = lp_player;
    auto_libCore_gf_GameStartSpawnHero_lp_spawnDelay = lp_spawnDelay;

    if (auto_libCore_gf_GameStartSpawnHero_Trigger == null) {
        auto_libCore_gf_GameStartSpawnHero_Trigger = TriggerCreate("auto_libCore_gf_GameStartSpawnHero_TriggerFunc");
    }

    TriggerExecute(auto_libCore_gf_GameStartSpawnHero_Trigger, false, false);
}

bool auto_libCore_gf_GameStartSpawnHero_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCore_gf_GameStartSpawnHero_lp_player;
    int lp_spawnDelay = auto_libCore_gf_GameStartSpawnHero_lp_spawnDelay;

    // Variable Declarations
    int lv_playerTeam;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerTeam = libGame_gf_PlayerGetPlayerTeam(lp_player);

    // Implementation
    Wait(IntToFixed(lp_spawnDelay), c_timeGame);
    libCore_gf_CommandersActivateRandomSkinForPlayerHero(lp_player);
    libNtve_gf_CreateUnitsAtPoint2(1, libCore_gv_heroData[libGame_gv_players[lp_player].lv_heroIndex].lv_heroUnitType, 0, lp_player, libGame_gv_players[lp_player].lv_spawnPoint);
    libGame_gv_players[lp_player].lv_heroUnit = UnitLastCreated();
    libGame_gv_players[lp_player].lv_selectedUnit = libGame_gv_players[lp_player].lv_heroUnit;
    libGame_gv_players[lp_player].lv_heroName = UnitGetName(libGame_gv_players[lp_player].lv_heroUnit);
    UnitGroupAdd(libGame_gv_players[lp_player].lv_heroUnitGroup, UnitLastCreated());
    libGDHL_gf_HearthstoneChangeHeroModel(lp_player, libGame_gv_players[lp_player].lv_heroUnit);
    libNtve_gf_SendActorMessageToUnit(libGame_gv_players[lp_player].lv_heroUnit, "Signal Respawn");
    libNtve_gf_HideGameUI(true, libCore_gv_playerGroupFromPlayer[lp_player]);
    UISetMode(libCore_gv_playerGroupFromPlayer[lp_player], c_uiModeConsole, c_transitionDurationImmediate);
    UnitSelect(libGame_gv_players[lp_player].lv_heroUnit, lp_player, true);
    libUIUI_gf_UIHeroConsoleSetUpForPlayer(lp_player, libGame_gv_players[lp_player].lv_heroUnit);
    libUIUI_gf_UIHeroConsoleShowHideForPlayer(true, lp_player);
    libUIUI_gf_UITopPanelSetUpPlayerHero(lp_player);
    libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(libGame_gv_players[lp_player].lv_heroUnit, lp_player);
    libUIUI_gf_UIUnitStatusFramesShowUnitNameLabelForUnit(libGame_gv_players[lp_player].lv_heroUnit);
    libUIUI_gf_UIMyCustomLeaderBoardTalentsSetUpPlayerHeroNameForPlayer(lp_player, lp_player);
    libUIUI_gf_UIMyCustomLeaderBoardTalentsSetUpPlayerHeroImageOfPlayer(lp_player);
    libUIUI_gf_UIMyCustomLeaderBoardTalentsPlayerClicksOnTalentHeroIconSelectionDialogItem(lp_player, libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_heroSelectionButtonTeamAlly[libGame_gv_players[lp_player].lv_playerAllySlot]);

    libUIUI_gf_UIMyTalentsPanelTierButtonPressedbyPlayer(lp_player, 1);
    CameraLockInput(lp_player, false);
    libCore_gf_PrestigeAbilitiesAddAbilityForPlayerToSlotGameStart("PrestigeCleanse", lp_player, 1);
    libCore_gf_PrestigeAbilitiesAddAbilityForPlayerToSlotGameStart("PrestigeStoneSkin", lp_player, 2);
    libCore_gv_numberofPlayerstoSpawnHeroes += 1;
    libCore_gf_ChangeCollisionToTeamForPlayerHero(lp_player);
    libUIUI_gf_UIMyCustomLeaderBoardSetUpPlayeronLeaderBoard(lp_player);
    if ((UnitInventoryItem(libGame_gv_players[lp_player].lv_heroUnit, 1) == null) && (UnitInventoryItem(libGame_gv_players[lp_player].lv_heroUnit, 2) == null) && (UnitInventoryItem(libGame_gv_players[lp_player].lv_heroUnit, 3) == null) && (UnitInventoryItem(libGame_gv_players[lp_player].lv_heroUnit, 4) == null) && (UnitInventoryItem(libGame_gv_players[lp_player].lv_heroUnit, 5) == null) && (UnitInventoryItem(libGame_gv_players[lp_player].lv_heroUnit, 6) == null)) {
        UISetFrameVisible(libCore_gv_playerGroupFromPlayer[lp_player], c_syncFrameTypeInventoryPanel, false);
    }
    return true;
}

text libCore_gf_AbilityTalentHotkeyText (text lp_hotkeyText, int lp_type) {
    // Variable Declarations
    text lv_itText;

    // Automatic Variable Declarations
    int auto1567A99C_val;

    // Variable Initialization
    lv_itText = lp_hotkeyText;

    // Implementation
    auto1567A99C_val = lp_type;
    if (auto1567A99C_val == libCore_ge_HeroTalentType_Heroic) {
        if ((lv_itText == null)) {
            return StringExternal("Param/Value/lib_Core_83704217");
        }
        else {
            return (StringExternal("Param/Value/lib_Core_45AED828") + lp_hotkeyText + StringExternal("Param/Value/lib_Core_0425D4E1"));
        }
    }
    else if (auto1567A99C_val == libCore_ge_HeroTalentType_Trait) {
        if ((lv_itText == null)) {
            return StringExternal("Param/Value/lib_Core_619D541B");
        }
        else {
            return (StringExternal("Param/Value/lib_Core_8D294F6F") + lp_hotkeyText + StringExternal("Param/Value/lib_Core_01E6CC7C"));
        }
    }
    else if (auto1567A99C_val == libCore_ge_HeroTalentType_Active) {
        return StringExternal("Param/Value/lib_Core_522D89DA");
    }
    else if (auto1567A99C_val == libCore_ge_HeroTalentType_Passive) {
        return StringExternal("Param/Value/lib_Core_C80B0B57");
    }
    else {
        return lp_hotkeyText;
    }
}

void libCore_gf_DataInitializeAbilitiesDataForHero (int lp_heroID) {
    // Variable Declarations
    int lv_itAbil;
    string lv_heroUnitType;
    string lv_heroUnitTypeAlternate;
    string lv_heroLink;
    string lv_itAbilButtonLink;
    text lv_itHotkeyText;

    // Automatic Variable Declarations
    int autoB1E47689_ae;

    // Variable Initialization

    // Implementation
    lv_heroLink = libCore_gv_heroData[lp_heroID].lv_heroCatalogLink;
    lv_heroUnitType = libCore_gv_heroData[lp_heroID].lv_heroUnitType;
    lv_heroUnitTypeAlternate = libCore_gv_heroData[lp_heroID].lv_heroUnitTypeAlternate;
    if ((CatalogFieldValueCount(c_gameCatalogHero, lv_heroLink, "HeroAbilArray", c_playerAny) <= 0)) {
        TextExpressionSetToken("Param/Expression/lib_Core_57B39C89", "A", StringExternal(CatalogFieldValueGet(c_gameCatalogHero, lv_heroLink, "Name", c_playerAny)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_57B39C89"), true);
        return ;
    }

    libCore_gv_heroData[lp_heroID].lv_abilitiesCount = CatalogFieldValueCount(c_gameCatalogHero, lv_heroLink, "HeroAbilArray", c_playerAny);
    autoB1E47689_ae = libCore_gv_heroData[lp_heroID].lv_abilitiesCount;
    lv_itAbil = 1;
    for ( ; lv_itAbil <= autoB1E47689_ae ; lv_itAbil += 1 ) {
        libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itAbil].lv_isAffectedByCooldownReduction = (CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroLink, "HeroAbilArray[" + IntToString((lv_itAbil-1)) + "].Flags[" + IntToString(libCore_ge_HeroDataAbililitesFlags_AffectedbyCDR) + "]", c_playerAny) == 1);
        libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itAbil].lv_isAlternateHeroUnitAbility = (CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroLink, "HeroAbilArray[" + IntToString((lv_itAbil-1)) + "].Flags[" + IntToString(libCore_ge_HeroDataAbililitesFlags_ReplacementMount) + "]", c_playerAny) == 1);
        libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itAbil].lv_isHeroic = (CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroLink, "HeroAbilArray[" + IntToString((lv_itAbil-1)) + "].Flags[" + IntToString(libCore_ge_HeroDataAbililitesFlags_Heroic) + "]", c_playerAny) == 1);
        libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itAbil].lv_isHeroSelectionVisibility = (CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroLink, "HeroAbilArray[" + IntToString((lv_itAbil-1)) + "].Flags[" + IntToString(libCore_ge_HeroDataAbililitesFlags_ShowHeroSelection) + "]", c_playerAny) == 1);
        libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itAbil].lv_isPassive = (CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroLink, "HeroAbilArray[" + IntToString((lv_itAbil-1)) + "].Flags[" + IntToString(libCore_ge_HeroDataAbililitesFlags_HideHotkey) + "]", c_playerAny) == 1);
        libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itAbil].lv_isTrait = (CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroLink, "HeroAbilArray[" + IntToString((lv_itAbil-1)) + "].Flags[" + IntToString(libCore_ge_HeroDataAbililitesFlags_Trait) + "]", c_playerAny) == 1);
        libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itAbil].lv_isUsesCharges = (CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroLink, "HeroAbilArray[" + IntToString((lv_itAbil-1)) + "].Flags[" + IntToString(libCore_ge_HeroDataAbililitesFlags_UsesCharges) + "]", c_playerAny) == 1);
        if ((CatalogFieldValueGet(c_gameCatalogHero, lv_heroLink, "HeroAbilArray[" + IntToString((lv_itAbil-1)) + "].Unit", c_playerAny) != null)) {
            libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itAbil].lv_isInventoryAbility = true;
            libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itAbil].lv_inentoryUnitType = (CatalogFieldValueGet(c_gameCatalogHero, lv_heroLink, "HeroAbilArray[" + IntToString((lv_itAbil-1)) + "].Unit", c_playerAny));
        }
        lv_itAbilButtonLink = (CatalogFieldValueGet(c_gameCatalogHero, lv_heroLink, "HeroAbilArray[" + IntToString((lv_itAbil-1)) + "].Button", c_playerAny));
        libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itAbil].lv_abilityLink = (CatalogFieldValueGet(c_gameCatalogHero, lv_heroLink, "HeroAbilArray[" + IntToString((lv_itAbil-1)) + "].Abil", c_playerAny));
        libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itAbil].lv_abilityButtonLink = lv_itAbilButtonLink;
        libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itAbil].lv_abilityName = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_itAbilButtonLink, "Name", c_playerAny));
        libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itAbil].lv_abilityIcon = (CatalogFieldValueGet(c_gameCatalogButton, lv_itAbilButtonLink, "Icon", c_playerAny));
        libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itAbil].lv_abilitySimpleText = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_itAbilButtonLink, "SimpleDisplayText", c_playerAny));
        libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itAbil].lv_abilityTooltipText = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_itAbilButtonLink, "Tooltip", c_playerAny));
        libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itAbil].lv_abilityInfo = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_itAbilButtonLink, "TooltipCooldownOverrideText", c_playerAny));
        if ((libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itAbil].lv_isPassive == true)) {
            lv_itHotkeyText = null;
        }
        else {
            if ((libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itAbil].lv_isAlternateHeroUnitAbility == true)) {
                lv_itHotkeyText = StringExternalHotkey(libCore_gf_UnitAbilityHotkeyPath(lv_heroUnitTypeAlternate, lv_itAbilButtonLink));
            }
            else {
                lv_itHotkeyText = StringExternalHotkey(libCore_gf_UnitAbilityHotkeyPath(lv_heroUnitType, lv_itAbilButtonLink));
            }
        }
        if ((libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itAbil].lv_isTrait == false) && (libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itAbil].lv_isHeroic == false)) {
            libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itAbil].lv_abilityType = libCore_ge_HeroAbilityType_Basic;
            libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itAbil].lv_abilityHotkey = libCore_gf_AbilityTalentHotkeyText(lv_itHotkeyText, libCore_ge_HeroTalentType_Basic);
        }
        else if ((libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itAbil].lv_isTrait == true)) {
            libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itAbil].lv_abilityType = libCore_ge_HeroAbilityType_Trait;
            libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itAbil].lv_abilityHotkey = libCore_gf_AbilityTalentHotkeyText(lv_itHotkeyText, libCore_ge_HeroTalentType_Trait);
        }
        else if ((libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itAbil].lv_isHeroic == true)) {
            libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itAbil].lv_abilityType = libCore_ge_HeroAbilityType_Heroic;
            libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itAbil].lv_abilityHotkey = libCore_gf_AbilityTalentHotkeyText(lv_itHotkeyText, libCore_ge_HeroTalentType_Heroic);
        }
    }
}

void libCore_gf_DataInitializeTalentsDataForHero (int lp_heroID) {
    // Variable Declarations
    int lv_itTalentTier;
    int lv_itTalentNumber;
    int lv_itTalentColumn;
    int lv_itHeroAbility;
    int lv_itBehaviorPerTalent;
    int lv_itPlayer;
    string lv_heroUnitType;
    string lv_heroUnitTypeAlternate;
    string lv_heroLink;
    string lv_itAbilButtonLink;
    string lv_behaviorLink;
    string lv_itTalentLink;
    string lv_itTalentButtonLink;
    text lv_itHotkeyText;

    // Automatic Variable Declarations
    int auto6E65DCC3_ae;
    int auto1C5F70CE_ae;
    int auto667B06EB_ae;
    int auto239A3AF8_ae;

    // Variable Initialization

    // Implementation
    lv_heroLink = libCore_gv_heroData[lp_heroID].lv_heroCatalogLink;
    lv_heroUnitType = libCore_gv_heroData[lp_heroID].lv_heroUnitType;
    lv_heroUnitTypeAlternate = libCore_gv_heroData[lp_heroID].lv_heroUnitTypeAlternate;
    auto6E65DCC3_ae = (libCore_gv_dataHeroesMaxTalentsCount-1);
    lv_itTalentNumber = 0;
    for ( ; lv_itTalentNumber <= auto6E65DCC3_ae ; lv_itTalentNumber += 1 ) {
        if ((CatalogFieldValueGet(c_gameCatalogHero, lv_heroLink, "TalentTreeArray[" + IntToString(lv_itTalentNumber) + "].Talent", c_playerAny) == null)) {
            continue;
        }
        libCore_gv_heroData[lp_heroID].lv_talentsCountPerTier[lv_itTalentTier] += 1;
        lv_itTalentTier = CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroLink, "TalentTreeArray[" + IntToString(lv_itTalentNumber) + "].Tier", c_playerAny);
        lv_itTalentColumn = CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroLink, "TalentTreeArray[" + IntToString(lv_itTalentNumber) + "].Column", c_playerAny);
        libCore_gv_heroData[lp_heroID].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_talentLink = (CatalogFieldValueGet(c_gameCatalogHero, lv_heroLink, "TalentTreeArray[" + IntToString(lv_itTalentNumber) + "].Talent", c_playerAny));
        lv_itTalentLink = libCore_gv_heroData[lp_heroID].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_talentLink;
        libCore_gv_heroData[lp_heroID].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_talentButtonLink = (CatalogFieldValueGet(c_gameCatalogTalent, lv_itTalentLink, "Face", c_playerAny));
        lv_itTalentButtonLink = libCore_gv_heroData[lp_heroID].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_talentButtonLink;
        libCore_gv_heroData[lp_heroID].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_talentIcon = (CatalogFieldValueGet(c_gameCatalogButton, lv_itTalentButtonLink, "Icon", c_playerAny));
        libCore_gv_heroData[lp_heroID].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_talentName = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_itTalentButtonLink, "Name", c_playerAny));
        libCore_gv_heroData[lp_heroID].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_talentSimpleText = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_itTalentButtonLink, "SimpleDisplayText", c_playerAny));
        auto1C5F70CE_ae = libCore_gv_bALMaxEnginePlayerCount;
        lv_itPlayer = 0;
        for ( ; lv_itPlayer <= auto1C5F70CE_ae ; lv_itPlayer += 1 ) {
            libCore_gv_heroData[lp_heroID].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_talentTooltipText[lv_itPlayer] = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_itTalentButtonLink, "Tooltip", lv_itPlayer));
        }
        libCore_gv_heroData[lp_heroID].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_isActive = (CatalogFieldValueGetAsInt(c_gameCatalogTalent, lv_itTalentLink, "Active", c_playerAny) == 1);
        libCore_gv_heroData[lp_heroID].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_isTrait = (CatalogFieldValueGetAsInt(c_gameCatalogTalent, lv_itTalentLink, "Trait", c_playerAny) == 1);
        if ((StringContains(CatalogFieldValueGet(c_gameCatalogHero, lv_heroLink, "TalentTreeArray[" + IntToString(lv_itTalentNumber) + "].Talent", c_playerAny), "_Stacks", c_stringAnywhere, c_stringCase) == true)) {
            libCore_gv_heroData[lp_heroID].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_isQuest = true;
        }
        if (((CatalogFieldValueGet(c_gameCatalogButton, CatalogFieldValueGet(c_gameCatalogTalent, lv_itTalentLink, "Face", c_playerAny), "TooltipCooldownOverrideText", c_playerAny)) != null)) {
            libCore_gv_heroData[lp_heroID].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_talentInfoText = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_itTalentButtonLink, "TooltipCooldownOverrideText", c_playerAny));
        }

        lv_itHotkeyText = null;
        if ((libCore_gv_heroData[lp_heroID].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_isActive == true)) {
            libCore_gv_heroData[lp_heroID].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_talentType = libCore_ge_HeroTalentType_Active;
            libCore_gv_heroData[lp_heroID].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_talentHotkey = libCore_gf_AbilityTalentHotkeyText(lv_itHotkeyText, libCore_ge_HeroTalentType_Active);
        }
        auto667B06EB_ae = libCore_gv_heroData[lp_heroID].lv_abilitiesCount;
        lv_itHeroAbility = 1;
        for ( ; lv_itHeroAbility <= auto667B06EB_ae ; lv_itHeroAbility += 1 ) {
            lv_itAbilButtonLink = libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itHeroAbility].lv_abilityButtonLink;
            if ((lv_itAbilButtonLink == (CatalogFieldValueGet(c_gameCatalogButton, lv_itTalentButtonLink, "HotkeyAlias", c_playerAny))) && (libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itHeroAbility].lv_isTrait == true) && (libCore_gv_heroData[lp_heroID].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_isTrait == true)) {
                if ((libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itHeroAbility].lv_isPassive == false)) {
                    if ((libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itHeroAbility].lv_isAlternateHeroUnitAbility == true)) {
                        lv_itHotkeyText = StringExternalHotkey(libCore_gf_UnitAbilityHotkeyPath(lv_heroUnitTypeAlternate, lv_itAbilButtonLink));
                    }
                    else {
                        lv_itHotkeyText = StringExternalHotkey(libCore_gf_UnitAbilityHotkeyPath(lv_heroUnitType, lv_itAbilButtonLink));
                    }
                }
                libCore_gv_heroData[lp_heroID].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_talentType = libCore_ge_HeroTalentType_Trait;
                libCore_gv_heroData[lp_heroID].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_talentHotkey = libCore_gf_AbilityTalentHotkeyText(lv_itHotkeyText, libCore_ge_HeroTalentType_Trait);
                break;
            }
            else if ((lv_itAbilButtonLink == (CatalogFieldValueGet(c_gameCatalogButton, lv_itTalentButtonLink, "HotkeyAlias", c_playerAny))) && (libCore_gv_heroData[lp_heroID].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_isActive == false) && (libCore_gv_heroData[lp_heroID].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_isTrait == false)) {
                if ((libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itHeroAbility].lv_isPassive == false)) {
                    if ((libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itHeroAbility].lv_isAlternateHeroUnitAbility == true)) {
                        lv_itHotkeyText = StringExternalHotkey(libCore_gf_UnitAbilityHotkeyPath(lv_heroUnitTypeAlternate, lv_itAbilButtonLink));
                    }
                    else {
                        lv_itHotkeyText = StringExternalHotkey(libCore_gf_UnitAbilityHotkeyPath(lv_heroUnitType, lv_itAbilButtonLink));
                    }
                }
                if ((libCore_gv_heroData[lp_heroID].lv_abilitiesData[lv_itHeroAbility].lv_isHeroic == true)) {
                    libCore_gv_heroData[lp_heroID].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_talentType = libCore_ge_HeroTalentType_Heroic;
                    libCore_gv_heroData[lp_heroID].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_talentHotkey = libCore_gf_AbilityTalentHotkeyText(lv_itHotkeyText, libCore_ge_HeroTalentType_Heroic);
                }
                else {
                    libCore_gv_heroData[lp_heroID].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_talentType = libCore_ge_HeroTalentType_Basic;
                    libCore_gv_heroData[lp_heroID].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_talentHotkey = libCore_gf_AbilityTalentHotkeyText(lv_itHotkeyText, libCore_ge_HeroTalentType_Basic);
                }
                break;
            }
        }
        if ((libCore_gv_heroData[lp_heroID].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_talentType == libCore_ge_HeroTalentType_None)) {
            libCore_gv_heroData[lp_heroID].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_talentType = libCore_ge_HeroTalentType_Passive;
            libCore_gv_heroData[lp_heroID].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_talentHotkey = libCore_gf_AbilityTalentHotkeyText(lv_itHotkeyText, libCore_ge_HeroTalentType_Passive);
        }
        if ((CatalogFieldValueGet(c_gameCatalogTalent, lv_itTalentLink, "RankArray[" + IntToString(0) + "].Item", c_playerAny) != null)) {
            libCore_gv_heroData[lp_heroID].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_talentItem = (CatalogFieldValueGet(c_gameCatalogTalent, lv_itTalentLink, "RankArray[" + IntToString(0) + "].Item", c_playerAny));
        }

        if ((CatalogFieldValueGet(c_gameCatalogTalent, lv_itTalentLink, "RankArray[" + IntToString(0) + "].Upgrade", c_playerAny) != null)) {
            libCore_gv_heroData[lp_heroID].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_talentUpgrade = (CatalogFieldValueGet(c_gameCatalogTalent, lv_itTalentLink, "RankArray[" + IntToString(0) + "].Upgrade", c_playerAny));
        }

        if ((CatalogFieldValueCount(c_gameCatalogTalent, lv_itTalentLink, "RankArray[" + IntToString(0) + "].BehaviorArray", c_playerAny) > libCore_gv_dataHeroesMaxBehaviorsPerTalent)) {
            TextExpressionSetToken("Param/Expression/lib_Core_1D6D2F24", "A", StringExternal(CatalogFieldValueGet(c_gameCatalogHero, lv_heroLink, "Name", c_playerAny)));
            TextExpressionSetToken("Param/Expression/lib_Core_1D6D2F24", "B", StringExternal(CatalogFieldValueGet(c_gameCatalogTalent, lv_itTalentLink, "Name", c_playerAny)));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_1D6D2F24"), true);
            continue;
        }

        auto239A3AF8_ae = libCore_gv_dataHeroesMaxBehaviorsPerTalent;
        lv_itBehaviorPerTalent = 0;
        for ( ; lv_itBehaviorPerTalent <= auto239A3AF8_ae ; lv_itBehaviorPerTalent += 1 ) {
            if ((CatalogFieldValueGet(c_gameCatalogTalent, lv_itTalentLink, "RankArray[" + IntToString(0) + "].BehaviorArray[" + IntToString(lv_itBehaviorPerTalent) + "]", c_playerAny) != null)) {
                lv_behaviorLink = (CatalogFieldValueGet(c_gameCatalogTalent, lv_itTalentLink, "RankArray[" + IntToString(0) + "].BehaviorArray[" + IntToString(lv_itBehaviorPerTalent) + "]", c_playerAny));
                if ((libCore_gv_heroData[lp_heroID].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_isQuest == true) && (UnitBehaviorHasFlag(lv_behaviorLink, c_unitBehaviorFlagPassive) == true)) {
                    if ((libCore_gv_heroData[lp_heroID].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_questBehaviorLink != null)) {
                        TextExpressionSetToken("Param/Expression/lib_Core_21F30C55", "A", StringExternal(CatalogFieldValueGet(c_gameCatalogHero, lv_heroLink, "Name", c_playerAny)));
                        TextExpressionSetToken("Param/Expression/lib_Core_21F30C55", "B", StringExternal(CatalogFieldValueGet(c_gameCatalogTalent, lv_itTalentLink, "Name", c_playerAny)));
                        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_21F30C55"), true);
                        continue;
                    }
                    libCore_gv_heroData[lp_heroID].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_questBehaviorLink = lv_behaviorLink;
                    libCore_gv_heroData[lp_heroID].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_questBehaviorMaxStacks = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, lv_behaviorLink, "MaxStackCount", c_playerAny);
                }
                else {
                    libCore_gv_heroData[lp_heroID].lv_talentsData[lv_itTalentTier][lv_itTalentColumn].lv_talentBehavior[lv_itBehaviorPerTalent] = lv_behaviorLink;
                }
            }
            else {
                break;
            }
        }
    }
}

void libCore_gf_DataInitializePrestigeData () {
    // Variable Declarations
    int lv_itPrestigeIndex;

    // Automatic Variable Declarations
    int auto389E3AEA_ae;

    // Variable Initialization

    // Implementation
    libCore_gv_heroPrestigeData[1].lv_abilityLink[1] = "PrestigeBloodForBlood@Slot1";
    libCore_gv_heroPrestigeData[1].lv_abilityLink[2] = "PrestigeBloodForBlood@Slot2";
    libCore_gv_heroPrestigeData[2].lv_abilityLink[1] = "PrestigeBoltOfTheStorms@Slot1";
    libCore_gv_heroPrestigeData[2].lv_abilityLink[2] = "PrestigeBoltOfTheStorms@Slot2";
    libCore_gv_heroPrestigeData[3].lv_abilityLink[1] = "PrestigeCleanse@Slot1";
    libCore_gv_heroPrestigeData[3].lv_abilityLink[2] = "PrestigeCleanse@Slot2";
    libCore_gv_heroPrestigeData[4].lv_abilityLink[1] = "PrestigeIceBlock@Slot1";
    libCore_gv_heroPrestigeData[4].lv_abilityLink[2] = "PrestigeIceBlock@Slot2";
    libCore_gv_heroPrestigeData[5].lv_abilityLink[1] = "PrestigePoisonDart@Slot1";
    libCore_gv_heroPrestigeData[5].lv_abilityLink[2] = "PrestigePoisonDart@Slot2";
    libCore_gv_heroPrestigeData[6].lv_abilityLink[1] = "PrestigeShrinkRay@Slot1";
    libCore_gv_heroPrestigeData[6].lv_abilityLink[2] = "PrestigeShrinkRay@Slot2";
    libCore_gv_heroPrestigeData[7].lv_abilityLink[1] = "PrestigeSprint@Slot1";
    libCore_gv_heroPrestigeData[7].lv_abilityLink[2] = "PrestigeSprint@Slot2";
    libCore_gv_heroPrestigeData[8].lv_abilityLink[1] = "PrestigeStoneSkin@Slot1";
    libCore_gv_heroPrestigeData[8].lv_abilityLink[2] = "PrestigeStoneSkin@Slot2";
    auto389E3AEA_ae = libCore_gv_dataHeroesMaxPrestigeAbilities;
    lv_itPrestigeIndex = 1;
    for ( ; lv_itPrestigeIndex <= auto389E3AEA_ae ; lv_itPrestigeIndex += 1 ) {
        libCore_gv_heroPrestigeData[lv_itPrestigeIndex].lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, libCore_gv_heroPrestigeData[1].lv_abilityLink[1], "Cost[" + IntToString(0) + "].Cooldown.Link", c_playerAny);
    }
}

int libCore_gf_RoleGetHeroRoleofHeroPreset (string lp_hero) {
    // Variable Declarations
    string lv_roleString;

    // Automatic Variable Declarations
    string auto7A20E10F_val;

    // Variable Initialization
    lv_roleString = CatalogFieldValueGet(c_gameCatalogHero, lp_hero, "Role", c_playerAny);

    // Implementation
    auto7A20E10F_val = lv_roleString;
    if (auto7A20E10F_val == "Damage") {
        return libCore_ge_HeroDataHeroRole_Assasin1;
    }
    else if (auto7A20E10F_val == "Warrior") {
        return libCore_ge_HeroDataHeroRole_Warrior;
    }
    else if (auto7A20E10F_val == "Support") {
        return libCore_ge_HeroDataHeroRole_Support;
    }
    else if (auto7A20E10F_val == "Specialist") {
        return libCore_ge_HeroDataHeroRole_Specialist;
    }
    else {
        return libCore_ge_HeroDataHeroRole_None;
    }
}

text libCore_gf_RoleGetHeroRoleofHeroText (string lp_hero) {
    // Automatic Variable Declarations
    int autoE5DC1621_val;

    // Implementation
    autoE5DC1621_val = libCore_gf_RoleGetHeroRoleofHeroPreset(lp_hero);
    if (autoE5DC1621_val == libCore_ge_HeroDataHeroRole_Warrior) {
        return StringExternal("HeroSelection/Role/Warrior");
    }
    else if (autoE5DC1621_val == libCore_ge_HeroDataHeroRole_Support) {
        return StringExternal("HeroSelection/Role/Support");
    }
    else if (autoE5DC1621_val == libCore_ge_HeroDataHeroRole_Specialist) {
        return StringExternal("HeroSelection/Role/Specialist");
    }
    else if (autoE5DC1621_val == libCore_ge_HeroDataHeroRole_Assasin1) {
        return StringExternal("HeroSelection/Role/Assassin");
    }
    else if (autoE5DC1621_val == libCore_ge_HeroDataHeroRole_Assasin2) {
        return StringExternal("HeroSelection/Role/Assassin");
    }
    else {
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Core_C2FC6662"), true);
    return null;
}

int libCore_gf_UniverseGetHeroUniverse (string lp_hero) {
    // Variable Declarations
    string lv_roleString;

    // Automatic Variable Declarations
    string auto5FE96B47_val;

    // Variable Initialization
    lv_roleString = CatalogFieldValueGet(c_gameCatalogHero, lp_hero, "Universe", c_playerAny);

    // Implementation
    auto5FE96B47_val = lv_roleString;
    if (auto5FE96B47_val == "StarCraft") {
        return libCore_ge_HeroDataUniverse_StarCraft;
    }
    else if (auto5FE96B47_val == "WarCraft") {
        return libCore_ge_HeroDataUniverse_WarCraft;
    }
    else if (auto5FE96B47_val == "Diablo") {
        return libCore_ge_HeroDataUniverse_Diablo;
    }
    else {
        return libCore_ge_HeroDataUniverse_None;
    }
}

int libCore_gf_HeroicAbilityIndexOfHero (int lp_heroIndex) {
    // Variable Declarations
    int lv_itAbilityIndex;

    // Automatic Variable Declarations
    int auto1E26E218_ae;

    // Variable Initialization

    // Implementation
    auto1E26E218_ae = libCore_gv_heroData[lp_heroIndex].lv_abilitiesCount;
    lv_itAbilityIndex = 1;
    for ( ; lv_itAbilityIndex <= auto1E26E218_ae ; lv_itAbilityIndex += 1 ) {
        if ((libCore_gv_heroData[lp_heroIndex].lv_abilitiesData[lv_itAbilityIndex].lv_abilityType == libCore_ge_HeroAbilityType_Heroic)) {
            return lv_itAbilityIndex;
        }
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Core_54B843C9"), true);
    return -1;
}

void libCore_gf_CommandersActivateSkinForPlayerHero (bool lp_activate, string lp_pSkin, int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    string lv_heroInstance;
    string lv_heroSkinLink;
    string lv_heroSkinUpgradeLink;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libGame_gv_players[lp_player].lv_heroCurrentSkin != "")) {
        PlayerApplySkin(lp_player, libGame_gv_players[lp_player].lv_heroCurrentSkin, false);
    }
    if ((libGame_gv_players[lp_player].lv_heroCurrentSkinUpgrade != "")) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, libGame_gv_players[lp_player].lv_heroCurrentSkinUpgrade, 0);
    }
    if ((lp_activate == false)) {
        return ;
    }
    lv_heroIndex = libCore_gf_CommandersGetHeroIndexOfPlayerHero(lp_player);
    lv_heroInstance = UserDataInstance("DataIngame_Heroes", lv_heroIndex);
    lv_heroSkinLink = UserDataGetGameLink(UserDataGetUserType("DataIngame_Heroes", lv_heroInstance, "Skins", 1), lp_pSkin, "Skin Link", 1);
    lv_heroSkinUpgradeLink = UserDataGetGameLink(UserDataGetUserType("DataIngame_Heroes", lv_heroInstance, "Skins", 1), lp_pSkin, "Skin Upgrade Link", 1);
    if ((lv_heroSkinLink != null)) {
        PlayerApplySkin(lp_player, lv_heroSkinLink, lp_activate);
    }
    if ((lv_heroSkinUpgradeLink != null)) {
        TechTreeUpgradeAddLevel(lp_player, lv_heroSkinUpgradeLink, 1);
    }
}

void libCore_gf_CommandersActivateRandomSkinForPlayerHero (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;
    string lv_heroInstance;
    int lv_skinIndex;
    string lv_skinInstance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_heroIndex = libCore_gf_CommandersGetHeroIndexOfPlayerHero(lp_player);
    lv_heroInstance = UserDataInstance("DataIngame_Heroes", lv_heroIndex);
    lv_skinIndex = RandomInt(1, UserDataInstanceCount(UserDataGetUserType("DataIngame_Heroes", lv_heroInstance, "Skins", 1)));
    lv_skinInstance = UserDataInstance(UserDataGetUserType("DataIngame_Heroes", lv_heroInstance, "Skins", 1), lv_skinIndex);
    libCore_gf_CommandersActivateSkinForPlayerHero(true, lv_skinInstance, lp_player);
}

void libCore_gf_SetNewHeroUnitOfCurrentHeroForPlayer (int lp_player, unit lp_newHeroUnit) {
    // Variable Declarations
    unit lv_currentHeroUnit;
    string lv_itBehavior;

    // Automatic Variable Declarations
    unit auto5342A544_u;
    int auto5342A544_i;
    unitgroup auto632A0D3F_g;
    int auto632A0D3F_u;
    unit auto632A0D3F_var;

    // Variable Initialization

    // Implementation
    if ((libCore_gf_CommandersGetHeroIndexOfUnitType(UnitGetType(lp_newHeroUnit)) != libCore_gf_CommandersGetHeroIndexOfPlayerHero(lp_player))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Core_6600D43E"), true);
    }
    lv_currentHeroUnit = libGame_gv_players[lp_player].lv_heroUnit;
    libGame_gv_players[lp_player].lv_heroUnit = lp_newHeroUnit;
    UnitCreateEffectUnit(lv_currentHeroUnit, "HeroGenericCleanseRemoveCCBehaviorCategoriesExpandedTarget", lv_currentHeroUnit);
    auto5342A544_u = lv_currentHeroUnit;
    auto5342A544_i = 1;
    for ( ; auto5342A544_i <= UnitBehaviorCountAll(auto5342A544_u) ; auto5342A544_i += BoolToInt(lv_itBehavior == UnitBehaviorGet(auto5342A544_u, auto5342A544_i)) ) {
        lv_itBehavior = UnitBehaviorGet(auto5342A544_u, auto5342A544_i);
        if ((UnitHasBehavior2(lp_newHeroUnit, lv_itBehavior) == false)) {
            UnitBehaviorTransfer(lv_currentHeroUnit, lp_newHeroUnit, lv_itBehavior, 65535);
        }
    }
    if ((UnitGroupCount(UnitGetTrackedUnitGroup(lv_currentHeroUnit, "CommandersHeroSummonedUnitTracker"), c_unitCountAlive) >= 1)) {
        auto632A0D3F_g = UnitGetTrackedUnitGroup(lv_currentHeroUnit, "CommandersHeroSummonedUnitTracker");
        auto632A0D3F_u = UnitGroupCount(auto632A0D3F_g, c_unitCountAll);
        for (;; auto632A0D3F_u -= 1) {
            auto632A0D3F_var = UnitGroupUnitFromEnd(auto632A0D3F_g, auto632A0D3F_u);
            if (auto632A0D3F_var == null) { break; }
            UnitCreateEffectUnit(lp_newHeroUnit, "CommandersAddSummonedUnitToTrackedList", auto632A0D3F_var);
        }
    }
    UnitAbilityAdd(lp_newHeroUnit, libCore_gv_prestigeAbilitiesPlayerCurrentPrestigeAbility[lp_player][1]);
    UnitAbilityAdd(lp_newHeroUnit, libCore_gv_prestigeAbilitiesPlayerCurrentPrestigeAbility[lp_player][2]);
    libUIUI_gf_UIHeroConsoleSetUpForPlayer(lp_player, lp_newHeroUnit);
    libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(lp_newHeroUnit, lp_player);
    libUIUI_gf_UIUnitStatusFramesShowUnitNameLabelForUnit(lp_newHeroUnit);
}

void libCore_gf_PrestigeAbilitiesAddAbilityForPlayerToSlot (string lp_prestigeAbility, int lp_player, int lp_slot) {
    // Variable Declarations
    string lv_stringToLink;
    string lv_linkToAdd;
    string lv_linkToRemove;
    string lv_presetSlotRemove;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_stringToLink = "";

    // Implementation
    lv_stringToLink = ((lp_prestigeAbility) + "@Slot" + IntToString(lp_slot));
    lv_linkToAdd = (lv_stringToLink);
    if ((lp_prestigeAbility == lv_presetSlotRemove)) {
        lv_linkToRemove = libCore_gf_PrestigeAbilitiesAbilityLinkOfPlayerFromSlot(lp_player, lp_slot);
        lv_presetSlotRemove = libCore_gf_PrestigeAbilitiesAbilityPreset(lv_linkToRemove);
        UnitAbilityRemove(libGame_gv_players[lp_player].lv_heroUnit, libCore_gf_PrestigeAbilitiesAbilityLinkOfPlayerFromSlot(lp_player, 1));
        UnitAbilityRemove(libGame_gv_players[lp_player].lv_heroUnit, libCore_gf_PrestigeAbilitiesAbilityLinkOfPlayerFromSlot(lp_player, 2));
        UnitAbilityAdd(libGame_gv_players[lp_player].lv_heroUnit, lv_linkToAdd);
        libCore_gv_prestigeAbilitiesPlayerCurrentPrestigeAbility[lp_player][lp_slot] = lv_linkToAdd;
        lv_stringToLink = ((lv_presetSlotRemove) + "@Slot" + IntToString(libCore_gf_PrestigeAbilitiesDifferentSlot(lp_slot)));
        lv_linkToAdd = (lv_stringToLink);
        UnitAbilityAdd(libGame_gv_players[lp_player].lv_heroUnit, lv_linkToAdd);
        libCore_gv_prestigeAbilitiesPlayerCurrentPrestigeAbility[lp_player][libCore_gf_PrestigeAbilitiesDifferentSlot(lp_slot)] = lv_linkToAdd;
    }
    else {
        UnitAbilityRemove(libGame_gv_players[lp_player].lv_heroUnit, libCore_gv_prestigeAbilitiesPlayerCurrentPrestigeAbility[lp_player][lp_slot]);
        UnitAbilityAdd(libGame_gv_players[lp_player].lv_heroUnit, lv_linkToAdd);
        libCore_gv_prestigeAbilitiesPlayerCurrentPrestigeAbility[lp_player][lp_slot] = lv_linkToAdd;
    }
}

void libCore_gf_PrestigeAbilitiesAddAbilityForPlayerToSlotGameStart (string lp_prestigeAbility, int lp_player, int lp_slot) {
    // Variable Declarations
    string lv_string;
    string lv_linkToAdd;
    string lv_presetSlotAdd;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_string = "";

    // Implementation
    lv_string = ((lp_prestigeAbility) + "@Slot" + IntToString(lp_slot));
    lv_linkToAdd = (lv_string);
    lv_presetSlotAdd = libCore_gf_PrestigeAbilitiesAbilityPreset(lv_linkToAdd);
    UnitAbilityAdd(libGame_gv_players[lp_player].lv_heroUnit, lv_linkToAdd);
    libCore_gv_prestigeAbilitiesPlayerCurrentPrestigeAbility[lp_player][lp_slot] = lv_linkToAdd;
    if ((lp_slot == 1)) {
        libUIUI_gf_UIMyCustomLeaderBoardPrestigeAbilitiesSetButtonSelectedUnselectedForPlayer(libCore_gf_PrestigeAbilitiesIndexOfAbility(lv_presetSlotAdd), libUIUI_ge_UIMyCustomLeaderBoardPrestigeAbilitiesSlot_SelectedSlot1, lp_player);
    }
    else if ((lp_slot == 2)) {
        libUIUI_gf_UIMyCustomLeaderBoardPrestigeAbilitiesSetButtonSelectedUnselectedForPlayer(libCore_gf_PrestigeAbilitiesIndexOfAbility(lv_presetSlotAdd), libUIUI_ge_UIMyCustomLeaderBoardPrestigeAbilitiesSlot_SelectedSlot2, lp_player);
    }
}

string libCore_gf_PrestigeAbilitiesAbilityPreset (string lp_abilityLink) {
    // Variable Declarations
    string lv_presetToReturn;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_abilityLink == "PrestigeBloodForBlood@Slot1") || (lp_abilityLink == "PrestigeBloodForBlood@Slot2"))) {
        lv_presetToReturn = "PrestigeBloodForBlood";
    }
    else if (((lp_abilityLink == "PrestigeBoltOfTheStorms@Slot1") || (lp_abilityLink == "PrestigeBoltOfTheStorms@Slot2"))) {
        lv_presetToReturn = "PrestigeBoltOfTheStorms";
    }
    else if (((lp_abilityLink == "PrestigeCleanse@Slot1") || (lp_abilityLink == "PrestigeCleanse@Slot2"))) {
        lv_presetToReturn = "PrestigeCleanse";
    }
    else if (((lp_abilityLink == "PrestigeIceBlock@Slot1") || (lp_abilityLink == "PrestigeIceBlock@Slot2"))) {
        lv_presetToReturn = "PrestigeIceBlock";
    }
    else if (((lp_abilityLink == "PrestigePoisonDart@Slot1") || (lp_abilityLink == "PrestigePoisonDart@Slot2"))) {
        lv_presetToReturn = "PrestigePoisonDart";
    }
    else if (((lp_abilityLink == "PrestigeShrinkRay@Slot1") || (lp_abilityLink == "PrestigeShrinkRay@Slot2"))) {
        lv_presetToReturn = "PrestigeShrinkRay";
    }
    else if (((lp_abilityLink == "PrestigeSprint@Slot1") || (lp_abilityLink == "PrestigeSprint@Slot2"))) {
        lv_presetToReturn = "PrestigeSprint";
    }
    else if (((lp_abilityLink == "PrestigeStoneSkin@Slot1") || (lp_abilityLink == "PrestigeStoneSkin@Slot2"))) {
        lv_presetToReturn = "PrestigeStoneSkin";
    }
    return lv_presetToReturn;
}

string libCore_gf_PrestigeAbilitiesAbilityLinkOfPlayerFromSlot (int lp_player, int lp_slot) {
    // Automatic Variable Declarations
    // Implementation
    return libCore_gv_prestigeAbilitiesPlayerCurrentPrestigeAbility[lp_player][lp_slot];
}

int libCore_gf_PrestigeAbilitiesDifferentSlot (int lp_slot) {
    // Automatic Variable Declarations
    // Implementation
    return (3 - lp_slot);
}

int libCore_gf_PrestigeAbilitiesIndexOfAbility (string lp_preset) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int autoB1FF59B6_ae;

    // Variable Initialization

    // Implementation
    autoB1FF59B6_ae = libCore_gv_dataHeroesMaxPrestigeAbilities;
    lv_itIndex = 1;
    for ( ; lv_itIndex <= autoB1FF59B6_ae ; lv_itIndex += 1 ) {
        if ((libCore_gf_PrestigeAbilitiesAbilityPreset(libCore_gv_heroPrestigeData[lv_itIndex].lv_abilityLink[1]) == lp_preset)) {
            return lv_itIndex;
        }
    }
    return -1;
}

string libCore_gf_PrestigeAbilitiesPrestigeFromIndex (int lp_abilityIndex) {
    // Automatic Variable Declarations
    // Implementation
    return libCore_gf_PrestigeAbilitiesAbilityPreset(libCore_gv_heroPrestigeData[lp_abilityIndex].lv_abilityLink[1]);
}

int libCore_gf_TalentsTalentIndexFromTalentLink (string lp_talentLink) {
    // Variable Declarations
    int lv_itTalent;

    // Automatic Variable Declarations
    int autoB664ACF3_ae;

    // Variable Initialization

    // Implementation
    autoB664ACF3_ae = libCore_gv_talents_TalentEntryCount;
    lv_itTalent = 1;
    for ( ; lv_itTalent <= autoB664ACF3_ae ; lv_itTalent += 1 ) {
        if ((libCore_gv_talents_TalentData[lv_itTalent].lv_talentCatalogLink == lp_talentLink)) {
            return lv_itTalent;
        }
    }
    return 0;
}

int libCore_gf_TalentsTalentProfileIndexFromTalentProfileLink (string lp_talentProfileLink) {
    // Variable Declarations
    int lv_itTalentProfile;

    // Automatic Variable Declarations
    int auto80A52DA2_ae;
    const int auto80A52DA2_ai = 1;

    // Variable Initialization

    // Implementation
    auto80A52DA2_ae = libCore_gv_talents_TalentProfileCount;
    lv_itTalentProfile = 1;
    for ( ; ( (auto80A52DA2_ai >= 0 && lv_itTalentProfile <= auto80A52DA2_ae) || (auto80A52DA2_ai < 0 && lv_itTalentProfile >= auto80A52DA2_ae) ) ; lv_itTalentProfile += auto80A52DA2_ai ) {
        if ((libCore_gv_talents_TalentProfiles[lv_itTalentProfile].lv_talentProfileCatalogLink == lp_talentProfileLink)) {
            return lv_itTalentProfile;
        }

    }
    return 0;
}

fixed libCore_gf_DataXPXPForUnit (unit lp_unit) {
    // Variable Declarations
    fixed lv_xPAmount;

    // Automatic Variable Declarations
    string autoA2100E9A_val;

    // Variable Initialization

    // Implementation
    autoA2100E9A_val = UnitGetType(lp_unit);
    if (autoA2100E9A_val == "MercenaryHybridMeleeDefender") {
        lv_xPAmount += libCore_gv_eXP_Mercenary_Hybrid_Value_C;
    }
    else if (autoA2100E9A_val == "MercenaryHybridPsionicDefender") {
        lv_xPAmount += libCore_gv_eXP_Mercenary_Hybrid_Value_C;
    }
    else if (autoA2100E9A_val == "MercHybridRangedDefender") {
        lv_xPAmount += libCore_gv_eXP_Mercenary_Hybrid_Value_C;
    }
    else if (autoA2100E9A_val == "MercDefender_SlaynElemental") {
        lv_xPAmount += libCore_gv_eXP_Mercenary_SlaynElemental_Value_C;
    }
    else if (autoA2100E9A_val == "MercenaryColossusDefender") {
        lv_xPAmount += libCore_gv_eXP_Mercenary_Colossus_Value_C;
    }
    else if (autoA2100E9A_val == "MercenaryHybridMeleeLaner") {
        lv_xPAmount += libCore_gv_eXP_Mercenary_Hybrid_Value_C;
    }
    else if (autoA2100E9A_val == "MercenaryHybridRangedLaner") {
        lv_xPAmount += libCore_gv_eXP_Mercenary_Hybrid_Value_C;
    }
    else if (autoA2100E9A_val == "MercenaryHybridRangedLaner") {
        lv_xPAmount += libCore_gv_eXP_Mercenary_Hybrid_Value_C;
    }
    else if (autoA2100E9A_val == "MercenaryColossusLaner") {
        lv_xPAmount += libCore_gv_eXP_Mercenary_Colossus_Value_C;
    }
    else if (autoA2100E9A_val == "Minion_Melee") {
        lv_xPAmount += libCore_gv_eXP_Minion_Melee_Value;
    }
    else if (autoA2100E9A_val == "Minion_Psionic") {
        lv_xPAmount += libCore_gv_eXP_Minion_Psionic_Value;
    }
    else if (autoA2100E9A_val == "Minion_Ranged") {
        lv_xPAmount += libCore_gv_eXP_Minion_Ranged_Value;
    }
    else if (autoA2100E9A_val == "Minion_Catapult") {
        lv_xPAmount += libCore_gv_eXP_Minion_Catapult_Value;
    }
    else if (autoA2100E9A_val == "Building_Keep") {
        lv_xPAmount += libCore_gv_eXP_Keep_Value;
    }
    else if (autoA2100E9A_val == "Building_Fort") {
        lv_xPAmount += libCore_gv_eXP_Fort_Value;
    }
    else if (autoA2100E9A_val == "Building_Tower") {
        lv_xPAmount += libCore_gv_eXP_Tower_Value;
    }
    else if (autoA2100E9A_val == "Building_Tower_Standalone") {
        lv_xPAmount += libCore_gv_eXP_Tower_Value;
    }
    else {
    }
    return lv_xPAmount;
}

fixed libCore_gf_DataXPXPForHero (unit lp_deadUnit) {
    // Variable Declarations
    int lv_levelOfAwardPlayer;
    int lv_levelOfDeadPlayer;
    int lv_levelGap;
    fixed lv_baseXP;
    fixed lv_levelGapMultiplier;
    fixed lv_finalXP;

    // Automatic Variable Declarations
    int autoFB914614_val;

    // Variable Initialization
    lv_levelGapMultiplier = 1.0;

    // Implementation
    if ((libGame_gv_players[UnitGetOwner(lp_deadUnit)].lv_team == 1)) {
        lv_levelOfAwardPlayer = libGame_gv_teams[2].lv_teamLevel;
        lv_levelOfDeadPlayer = libGame_gv_teams[1].lv_teamLevel;
    }
    else if ((libGame_gv_players[UnitGetOwner(lp_deadUnit)].lv_team == 2)) {
        lv_levelOfAwardPlayer = libGame_gv_teams[1].lv_teamLevel;
        lv_levelOfDeadPlayer = libGame_gv_teams[2].lv_teamLevel;
    }
    lv_levelGap = (lv_levelOfDeadPlayer - lv_levelOfAwardPlayer);
    lv_baseXP = (libCore_gv_data_XP_HeroValuePerLevel_C * IntToFixed((lv_levelOfDeadPlayer + libCore_gv_data_XP_HeroLevelModifier_C)));
    autoFB914614_val = lv_levelGap;
    if (autoFB914614_val == 1) {
        lv_levelGapMultiplier = (1.0 + libCore_gv_data_XP_Hero1LevelGapMultiplier_C);
    }
    else if (autoFB914614_val == 2) {
        lv_levelGapMultiplier = (1.0 + libCore_gv_data_XP_Hero2LevelGapMultiplier_C);
    }
    else if (autoFB914614_val == 3) {
        lv_levelGapMultiplier = (1.0 + libCore_gv_data_XP_Hero3LevelGapMultiplier_C);
    }
    else if (autoFB914614_val == 4) {
        lv_levelGapMultiplier = (1.0 + libCore_gv_data_XP_Hero4LevelGapMultiplier_C);
    }
    else if (autoFB914614_val == -1) {
        lv_levelGapMultiplier = MaxF((1.0 - libCore_gv_data_XP_Hero1LevelGapMultiplier_C), 0.0);
    }
    else if (autoFB914614_val == -2) {
        lv_levelGapMultiplier = MaxF((1.0 - libCore_gv_data_XP_Hero2LevelGapMultiplier_C), 0.0);
    }
    else if (autoFB914614_val == -3) {
        lv_levelGapMultiplier = MaxF((1.0 - libCore_gv_data_XP_Hero3LevelGapMultiplier_C), 0.0);
    }
    else if (autoFB914614_val == -4) {
        lv_levelGapMultiplier = MaxF((1.0 - libCore_gv_data_XP_Hero4LevelGapMultiplier_C), 0.0);
    }
    else {
        if ((lv_levelGap >= 5)) {
            lv_levelGapMultiplier = (1.0 + libCore_gv_data_XP_Hero5LevelGapMultiplier_C);
        }
        else {
            if ((lv_levelGap <= 5)) {
                lv_levelGapMultiplier = MaxF((1.0 - libCore_gv_data_XP_Hero5LevelGapMultiplier_C), 0.1);
            }

        }
    }
    lv_finalXP = (lv_baseXP * lv_levelGapMultiplier);
    return lv_finalXP;
}

fixed libCore_gf_DataXPXPScalingForDefender (unit lp_defenderUnit) {
    // Variable Declarations
    fixed lv_value;

    // Automatic Variable Declarations
    string auto4DA83454_val;

    // Variable Initialization

    // Implementation
    auto4DA83454_val = UnitGetType(lp_defenderUnit);
    if (auto4DA83454_val == "MercenaryColossusDefender") {
        lv_value = libCore_gv_scaling_Mercenary_BossColossus_Value;
    }
    else if (auto4DA83454_val == "MercenaryHybridMeleeDefender") {
        lv_value = libCore_gv_scaling_Mercenary_BruiserHybrid_Value;
    }
    else if (auto4DA83454_val == "MercenaryHybridPsionicDefender") {
        lv_value = libCore_gv_scaling_Mercenary_BruiserHybrid_Value;
    }
    else if (auto4DA83454_val == "MercHybridRangedDefender") {
        lv_value = libCore_gv_scaling_Mercenary_BruiserHybrid_Value;
    }
    else if (auto4DA83454_val == "MercDefender_SlaynElemental") {
        lv_value = libCore_gv_scaling_Mercenary_BossElemental_Value;
    }
    else {
    }
    return lv_value;
}

fixed libCore_gf_DataXPXPScalingForMercenary (unit lp_mercenaryUnit) {
    // Variable Declarations
    fixed lv_value;

    // Automatic Variable Declarations
    string auto8BDD9501_val;

    // Variable Initialization

    // Implementation
    auto8BDD9501_val = UnitGetType(lp_mercenaryUnit);
    if (auto8BDD9501_val == "MercenaryColossusLaner") {
        lv_value = libCore_gv_scaling_Mercenary_BossColossus_Value;
    }
    else if (auto8BDD9501_val == "MercenaryHybridMeleeLaner") {
        lv_value = libCore_gv_scaling_Mercenary_BruiserHybrid_Value;
    }
    else if (auto8BDD9501_val == "MercenaryHybridPsionicLaner") {
        lv_value = libCore_gv_scaling_Mercenary_BruiserHybrid_Value;
    }
    else if (auto8BDD9501_val == "MercenaryHybridRangedLaner") {
        lv_value = libCore_gv_scaling_Mercenary_BruiserHybrid_Value;
    }
    else {
    }
    return lv_value;
}

int libCore_gf_RandomIntfrom3Intswithexclude (int lp_var1, int lp_var2, int lp_var3, int lp_excludeVar) {
    // Variable Declarations
    int lv_itReturn;

    // Automatic Variable Declarations
    int auto395B2523_val;

    // Variable Initialization

    // Implementation
    auto395B2523_val = lp_excludeVar;
    if (auto395B2523_val == lp_var1) {
        lv_itReturn = RandomInt(lp_var2, lp_var3);
    }
    else if (auto395B2523_val == 2) {
        lv_itReturn = RandomInt(lp_var1, lp_var2);
        if ((lv_itReturn == lp_var1)) {
            lv_itReturn = lp_var1;
        }
        else {
            lv_itReturn = lp_var3;
        }
    }
    else if (auto395B2523_val == lp_var3) {
        lv_itReturn = RandomInt(lp_var1, lp_var2);
    }
    else {
    }
    return lv_itReturn;
}

int libCore_gf_RandomVariablefrom2vars (int lp_var1, int lp_var2) {
    // Variable Declarations
    int lv__1;
    int lv__2;
    int lv_itReturn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__1 = 1;
    lv__2 = 2;

    // Implementation
    lv_itReturn = RandomInt(lv__1, lv__2);
    if ((lv_itReturn == lv__1)) {
        return lp_var1;
    }

    return lp_var2;
}

playergroup libCore_gf_AlliedPlayerGroupOfPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_player < 0) || (lp_player > libCore_gv_bALMaxEnginePlayerCount))) {
        return PlayerGroupEmpty();
    }

    if ((PlayerGroupHasPlayer(libCore_gv_teamOrder, lp_player) == true)) {
        return libCore_gv_teamOrder;
    }

    if ((PlayerGroupHasPlayer(libCore_gv_teamChaos, lp_player) == true)) {
        return libCore_gv_teamChaos;
    }

    return PlayerGroupEmpty();
}

color libCore_gf_GetAllianceColorFromGameUIData (int lp_index) {
    // Variable Declarations
    color lv_neutralColor;
    string lv_fullColorString;
    int lv_commaPosition;
    string lv_rString;
    string lv_gString;
    string lv_bString;
    fixed lv_r;
    fixed lv_g;
    fixed lv_b;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_neutralColor = Color(0,0,0);
    lv_fullColorString = "";
    lv_rString = "";
    lv_gString = "";
    lv_bString = "";

    // Implementation
    lv_fullColorString = CatalogFieldValueGet(c_gameCatalogGameUI, "Dflt", ("OverrideColors[" + IntToString(lp_index) + "].Value[0]"), c_playerAny);
    lv_commaPosition = StringFind(lv_fullColorString, ",", c_stringCase);
    lv_rString = StringSub(lv_fullColorString, 1, (lv_commaPosition - 1));
    lv_fullColorString = StringSub(lv_fullColorString, (lv_commaPosition + 1), StringLength(lv_fullColorString));
    lv_commaPosition = StringFind(lv_fullColorString, ",", c_stringCase);
    lv_gString = StringSub(lv_fullColorString, 1, (lv_commaPosition - 1));
    lv_fullColorString = StringSub(lv_fullColorString, (lv_commaPosition + 1), StringLength(lv_fullColorString));
    lv_commaPosition = StringFind(lv_fullColorString, ",", c_stringCase);
    lv_bString = StringSub(lv_fullColorString, 1, (lv_commaPosition - 1));
    lv_r = (StringToFixed(lv_rString) * 100.0);
    lv_g = (StringToFixed(lv_gString) * 100.0);
    lv_b = (StringToFixed(lv_bString) * 100.0);
    return Color(lv_r, lv_g, lv_b);
}

fixed libCore_gf_GetWeaponDamageForUnit (unit lp_unit) {
    // Variable Declarations
    int lv_itWeapon;

    // Automatic Variable Declarations
    int autoCEE614CE_ae;
    const int autoCEE614CE_ai = 1;

    // Variable Initialization

    // Implementation
    autoCEE614CE_ae = UnitWeaponCount(lp_unit);
    lv_itWeapon = 1;
    for ( ; ( (autoCEE614CE_ai >= 0 && lv_itWeapon <= autoCEE614CE_ae) || (autoCEE614CE_ai < 0 && lv_itWeapon >= autoCEE614CE_ae) ) ; lv_itWeapon += autoCEE614CE_ai ) {
        if ((UnitWeaponGet(lp_unit, lv_itWeapon) != null) && (UnitWeaponIsEnabled(lp_unit, lv_itWeapon) == true)) {
            return UnitWeaponDamage(lp_unit, lv_itWeapon, c_unitAttributeNone, false);
        }

    }
    return 0.0;
}

fixed libCore_gf_GetWeaponAttackSpeedForUnit (unit lp_unit) {
    // Variable Declarations
    int lv_itWeapon;

    // Automatic Variable Declarations
    int auto853CC4D9_ae;
    const int auto853CC4D9_ai = 1;

    // Variable Initialization

    // Implementation
    auto853CC4D9_ae = UnitWeaponCount(lp_unit);
    lv_itWeapon = 1;
    for ( ; ( (auto853CC4D9_ai >= 0 && lv_itWeapon <= auto853CC4D9_ae) || (auto853CC4D9_ai < 0 && lv_itWeapon >= auto853CC4D9_ae) ) ; lv_itWeapon += auto853CC4D9_ai ) {
        if ((UnitWeaponGet(lp_unit, lv_itWeapon) != null) && (UnitWeaponIsEnabled(lp_unit, lv_itWeapon) == true)) {
            return (UnitWeaponSpeedMultiplier(lp_unit, lv_itWeapon)*UnitWeaponPeriod(lp_unit, 1)/16);
        }

    }
    return 0.0;
}

string libCore_gf_GetTimeStamp (fixed lp_time) {
    // Variable Declarations
    fixed lv_elapsedTime;
    fixed lv_minutesElapsed;
    fixed lv_secondsElapsed;
    fixed lv_loopsElapsed;
    string lv_tempString;
    string lv_timeElapsedString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tempString = "";
    lv_timeElapsedString = "";

    // Implementation
    lv_elapsedTime = lp_time;
    lv_loopsElapsed = (ModF(lv_elapsedTime, 1.0) * 16.0);
    lv_elapsedTime -= (lv_loopsElapsed / 16.0);
    if ((lv_loopsElapsed < 10.0)) {
        lv_tempString = ("0" + FixedToString(lv_loopsElapsed, 0));
    }
    else {
        lv_tempString = FixedToString(lv_loopsElapsed, 0);
    }
    lv_timeElapsedString = lv_tempString;
    lv_secondsElapsed = ModF(lv_elapsedTime, 60.0);
    lv_elapsedTime -= lv_secondsElapsed;
    if ((lv_secondsElapsed < 10.0)) {
        lv_tempString = ("0" + FixedToString(lv_secondsElapsed, 0));
    }
    else {
        lv_tempString = FixedToString(lv_secondsElapsed, 0);
    }
    lv_timeElapsedString = (lv_tempString + ":" + lv_timeElapsedString);
    lv_minutesElapsed = (lv_elapsedTime / 60.0);
    if ((lv_minutesElapsed < 10.0)) {
        lv_tempString = ("0" + FixedToString(lv_minutesElapsed, 0));
    }
    else {
        lv_tempString = FixedToString(lv_minutesElapsed, 0);
    }
    lv_timeElapsedString = (lv_tempString + ":" + lv_timeElapsedString);
    return lv_timeElapsedString;
}

bool libCore_gf_ToggleBoolean (bool lp_boolean) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_boolean == true)) {
        return false;
    }
    else {
        return true;
    }
}

void libCore_gf_CommandersAddHeroTalenttoPlayer (int lp_player, int lp_talentTier, int lp_talentColumn) {
    // Variable Declarations
    int lv_heroIndex;

    // Automatic Variable Declarations
    const int auto966BA926_ae = libCore_gv_dataHeroesMaxBehaviorsPerTalent;
    int auto966BA926_var;

    // Variable Initialization
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;

    // Implementation
    PlayerAddTalent(lp_player, libCore_gv_heroData[lv_heroIndex].lv_talentsData[lp_talentTier][lp_talentColumn].lv_talentLink);
    if ((libCore_gv_heroData[lv_heroIndex].lv_talentsData[lp_talentTier][lp_talentColumn].lv_talentUpgrade != null)) {
        TechTreeUpgradeAddLevel(lp_player, libCore_gv_heroData[lv_heroIndex].lv_talentsData[lp_talentTier][lp_talentColumn].lv_talentUpgrade, 1);
    }

    auto966BA926_var = 0;
    for ( ; auto966BA926_var <= auto966BA926_ae; auto966BA926_var += 1 ) {
        if ((libCore_gv_heroData[lv_heroIndex].lv_talentsData[lp_talentTier][lp_talentColumn].lv_talentBehavior[auto966BA926_var] != null)) {
            UnitBehaviorAddPlayer(libGame_gv_players[lp_player].lv_heroUnit, libCore_gv_heroData[lv_heroIndex].lv_talentsData[lp_talentTier][lp_talentColumn].lv_talentBehavior[auto966BA926_var], lp_player, 1);
        }
        else {
            break;
        }
    }
    if ((libCore_gv_heroData[lv_heroIndex].lv_talentsData[lp_talentTier][lp_talentColumn].lv_talentItem != null)) {
        if ((UIFrameVisible(lp_player, c_syncFrameTypeInventoryPanel) == false)) {
            UISetFrameVisible(libCore_gv_playerGroupFromPlayer[lp_player], c_syncFrameTypeInventoryPanel, true);
        }

        UnitInventoryCreate(libGame_gv_players[lp_player].lv_heroUnit, libCore_gv_heroData[libGame_gv_players[lp_player].lv_heroIndex].lv_talentsData[lp_talentTier][lp_talentColumn].lv_talentItem);
    }

}

int libCore_gf_CommandersGetHeroIndexOfUnitType (string lp_heroUnitType) {
    // Variable Declarations
    int lv_itHeroIndex;

    // Automatic Variable Declarations
    int autoAB9A5B87_ae;

    // Variable Initialization

    // Implementation
    autoAB9A5B87_ae = libCore_gv_dataHeroesNumberOfHeroes;
    lv_itHeroIndex = 1;
    for ( ; lv_itHeroIndex <= autoAB9A5B87_ae ; lv_itHeroIndex += 1 ) {
        if (((lp_heroUnitType == libCore_gv_heroData[lv_itHeroIndex].lv_heroUnitType) || (lp_heroUnitType == libCore_gv_heroData[lv_itHeroIndex].lv_heroUnitTypeAlternate))) {
            return lv_itHeroIndex;
        }

    }
    return -1;
}

int libCore_gf_CommandersGetHeroIndexOfHeroLink (string lp_heroLink) {
    // Variable Declarations
    int lv_itHeroIndex;

    // Automatic Variable Declarations
    int auto18637FF8_ae;

    // Variable Initialization

    // Implementation
    auto18637FF8_ae = libCore_gv_dataHeroesNumberOfHeroes;
    lv_itHeroIndex = 1;
    for ( ; lv_itHeroIndex <= auto18637FF8_ae ; lv_itHeroIndex += 1 ) {
        if ((lp_heroLink == libCore_gv_heroData[lv_itHeroIndex].lv_heroCatalogLink)) {
            return lv_itHeroIndex;
        }

    }
    return -1;
}

int libCore_gf_CommandersGetHeroIndexOfUnit (unit lp_hero) {
    // Automatic Variable Declarations
    // Implementation
    return libCore_gf_CommandersGetHeroIndexOfUnitType(UnitGetType(lp_hero));
}

int libCore_gf_CommandersGetHeroIndexOfPlayerHero (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libGame_gv_players[lp_player].lv_heroIndex;
}

bool libCore_gf_CommandersIsHeroOrVehicleUnit (unit lp_unit) {
    // Automatic Variable Declarations
    const int autoF9E21BF9_ae = libCore_gv_bALMaxPlayers;
    int autoF9E21BF9_var;

    // Implementation
    autoF9E21BF9_var = 1;
    for ( ; autoF9E21BF9_var <= autoF9E21BF9_ae; autoF9E21BF9_var += 1 ) {
        if (((lp_unit == libGame_gv_players[autoF9E21BF9_var].lv_heroUnit) || (lp_unit == libGame_gv_players[autoF9E21BF9_var].lv_activeVehicle))) {
            return true;
        }
    }
    return false;
}

unit libCore_gf_CommandersCurrentHeroOrVehicleOfPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_players[lp_player].lv_activeVehicle == null)) {
        return libGame_gv_players[lp_player].lv_heroUnit;
    }
    else {
        return libGame_gv_players[lp_player].lv_activeVehicle;
    }
}

bool libCore_gf_CheckValidatorOnUnit (string lp_validator, unit lp_sourceUnit, unit lp_targetUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((ValidatorExecute(lp_validator, lp_sourceUnit, lp_targetUnit) == 0)) {
        return true;
    }
    return false;
}

void libCore_gf_ResetRespawnTimerOfPlayerHero (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TimerStart(libGame_gv_players[lp_player].lv_respawnTimer, 0.0625, false, c_timeGame);
}

bool libCore_gf_AbilityCategory (string lp_ability, int lp_category) {
    // Automatic Variable Declarations
    // Implementation
    if ((CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "AbilityCategories[" + IntToString((lp_category)) + "]", c_playerAny) == "1")) {
        return true;
    }
    else {
        return false;
    }
}

void libCore_gf_CommandersRemoveBehaviorsByStackAlias (unit lp_unit, int lp_count, string lp_stackAlias, int lp_stackAliasPriority) {
    // Variable Declarations
    string lv_itBehavior;
    int lv_behaviorsCount;
    int lv_remainingCountToRemove;

    // Automatic Variable Declarations
    unit auto39B06FCD_u;
    int auto39B06FCD_i;

    // Variable Initialization

    // Implementation
    if ((lp_count > 0)) {
        lv_remainingCountToRemove = lp_count;
    }
    auto39B06FCD_u = lp_unit;
    auto39B06FCD_i = 1;
    for ( ; auto39B06FCD_i <= UnitBehaviorCountAll(auto39B06FCD_u) ; auto39B06FCD_i += BoolToInt(lv_itBehavior == UnitBehaviorGet(auto39B06FCD_u, auto39B06FCD_i)) ) {
        lv_itBehavior = UnitBehaviorGet(auto39B06FCD_u, auto39B06FCD_i);
        if ((CatalogFieldValueGet(c_gameCatalogBehavior, lv_itBehavior, "StackAlias", c_playerAny) == lp_stackAlias)) {
            if ((lp_stackAliasPriority != -2)) {
                if ((CatalogFieldValueGetAsInt(c_gameCatalogBehavior, lv_itBehavior, "StackAliasPriority", c_playerAny) != lp_stackAliasPriority)) {
                    continue;
                }
            }
            if ((lp_count == 0)) {
                UnitBehaviorRemove(lp_unit, lv_itBehavior, 0);
            }
            else {
                lv_behaviorsCount = UnitBehaviorCount(lp_unit, lv_itBehavior);
                if ((lv_behaviorsCount < lv_remainingCountToRemove)) {
                    lv_remainingCountToRemove -= lv_behaviorsCount;
                    UnitBehaviorRemove(lp_unit, lv_itBehavior, lv_behaviorsCount);
                }
                else {
                    UnitBehaviorRemove(lp_unit, lv_itBehavior, lv_behaviorsCount);
                    return ;
                }
            }
        }
    }
}

void libCore_gf_RegiserUnitDies (unit lp_unit, trigger lp_trigger) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventUnitDied(lp_trigger, UnitRefFromVariable("lp_unit"));
}

int libCore_gf_DamageType (string lp_effect, int lp_player) {
    // Variable Declarations
    string lv_type;
    int lv_return;

    // Automatic Variable Declarations
    string auto32BC5D69_val;

    // Variable Initialization
    lv_type = CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "Kind", lp_player);

    // Implementation
    auto32BC5D69_val = lv_type;
    if (auto32BC5D69_val == "Ranged") {
        lv_return = libCore_ge_CommandersCatalogDamageType_Kinetic;
    }
    else if (auto32BC5D69_val == "Melee") {
        lv_return = libCore_ge_CommandersCatalogDamageType_NonHero;
    }
    else if (auto32BC5D69_val == "Spell") {
        lv_return = libCore_ge_CommandersCatalogDamageType_Energetic;
    }
    else if (auto32BC5D69_val == "Splash") {
        lv_return = libCore_ge_CommandersCatalogDamageType_Storm;
    }
    else {
        lv_return = libCore_ge_CommandersCatalogDamageType_NoProc;
    }
    return lv_return;
}

void libCore_gf_DialogSetPositionRelativeToUnitWithAnchor (int lp_Dialog, unit lp_Unit, string lp_Attachment, int lp_Anchor, int lp_OffsetX, int lp_OffsetY) {
    // Automatic Variable Declarations
    // Implementation
    DialogSetPositionRelativeToUnitWithAnchor(lp_Dialog, lp_Unit, lp_Attachment, lp_Anchor, lp_OffsetX, lp_OffsetY);
}

void libCore_gf_SetDialogItemAnimationState (int lp_dialogItem, playergroup lp_players, string lp_animationStateName, string lp_eventName) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetAnimationState(lp_dialogItem, lp_players, lp_animationStateName, lp_eventName);
}

string libCore_gf_ConvertIntegerToStringDoubleDigit (int lp_integer) {
    // Variable Declarations
    string lv_integerString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_integerString = "";

    // Implementation
    lv_integerString = IntToString(lp_integer);
    if ((StringLength(lv_integerString) == 1)) {
        lv_integerString = ("0" + lv_integerString);
    }

    return lv_integerString;
}

void libCore_gf_ChangeCollisionToTeamForPlayerHero (int lp_player) {
    // Variable Declarations
    int lv_heroIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroIndex = libCore_gf_CommandersGetHeroIndexOfPlayerHero(lp_player);

    // Implementation
    if ((libGame_gf_PlayerGetPlayerTeam(lp_player) == libGame_gv_teamOrderIndex_C)) {
        libCore_gf_ChangeCollisionForPlayerForUnitType(lp_player, libCore_gv_heroData[lv_heroIndex].lv_heroUnitType, libCore_ge_CollisionTypes_Land03HeroTeam1andMinionTeam2, libCore_ge_CollisionOperationType_TurnOn);
        if ((libCore_gv_heroData[lv_heroIndex].lv_heroUnitTypeAlternate != null)) {
            libCore_gf_ChangeCollisionForPlayerForUnitType(lp_player, libCore_gv_heroData[lv_heroIndex].lv_heroUnitTypeAlternate, libCore_ge_CollisionTypes_Land03HeroTeam1andMinionTeam2, libCore_ge_CollisionOperationType_TurnOn);
        }
    }
    else {
        libCore_gf_ChangeCollisionForPlayerForUnitType(lp_player, UnitGetType(libGame_gv_players[lp_player].lv_heroUnit), libCore_ge_CollisionTypes_Land04HeroTeam2andMinionTeam1, libCore_ge_CollisionOperationType_TurnOn);
        if ((libCore_gv_heroData[lv_heroIndex].lv_heroUnitTypeAlternate != null)) {
            libCore_gf_ChangeCollisionForPlayerForUnitType(lp_player, libCore_gv_heroData[lv_heroIndex].lv_heroUnitTypeAlternate, libCore_ge_CollisionTypes_Land04HeroTeam2andMinionTeam1, libCore_ge_CollisionOperationType_TurnOn);
        }
    }
}

void libCore_gf_ChangeCollisionForPlayerForUnitType (int lp_player, string lp_unitType, int lp_collisionType, int lp_operation) {
    // Automatic Variable Declarations
    int auto16B194CE_val;

    // Implementation
    auto16B194CE_val = lp_operation;
    if (auto16B194CE_val == libCore_ge_CollisionOperationType_TurnOn) {
        CatalogFieldValueSet(c_gameCatalogUnit, lp_unitType, "Collide[" + IntToString((lp_collisionType)) + "]", lp_player, "1");
    }
    else if (auto16B194CE_val == libCore_ge_CollisionOperationType_TurnOff) {
        CatalogFieldValueSet(c_gameCatalogUnit, lp_unitType, "Collide[" + IntToString((lp_collisionType)) + "]", lp_player, "0");
    }
    else {
        if ((CatalogFieldValueGet(c_gameCatalogUnit, lp_unitType, "Collide[" + IntToString((lp_collisionType)) + "]", lp_player) == "0")) {
            CatalogFieldValueSet(c_gameCatalogUnit, lp_unitType, "Collide[" + IntToString((lp_collisionType)) + "]", lp_player, "1");
        }
        else {
            CatalogFieldValueSet(c_gameCatalogUnit, lp_unitType, "Collide[" + IntToString((lp_collisionType)) + "]", lp_player, "0");
        }
    }
}

playergroup libCore_gf_PlayerGroupExceptOfPlayer (playergroup lp_sourceGroup, int lp_exceptedPlayer) {
    // Variable Declarations
    playergroup lv_targetGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetGroup = PlayerGroupEmpty();

    // Implementation
    lv_targetGroup = PlayerGroupCopy(lp_sourceGroup);
    PlayerGroupRemove(lv_targetGroup, lp_exceptedPlayer);
    return lv_targetGroup;
}

bool libCore_gf_TalentsPlayerCanChooseTalentFromTierAndColumn (int lp_player, int lp_tier, int lp_column) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_players[lp_player].lv_eXPPoints >= libCore_gv_talentsTierInfo[lp_tier].lv_price) && (libGame_gv_players[lp_player].lv_talentsCurrentMaxTier >= lp_tier) && (libGame_gv_players[lp_player].lv_mYTalentsTalentPicked[lp_tier][lp_column] == false) && (libGame_gv_players[lp_player].lv_talentsNumberofPickedTalentsPerTier[lp_tier] < libCore_gv_talentsTierInfo[lp_tier].lv_maximumAvailiableTalents)) {
        return true;
    }
    return false;
}

string libCore_gf_UnitAbilityHotkeyPath (string lp_unitType, string lp_abilityButton) {
    // Variable Declarations
    int lv_row;
    int lv_column;
    int lv_buttonIndex;
    int lv_correctRow;
    int lv_correctColumn;
    string lv_hotkeyPath;

    // Automatic Variable Declarations
    int autoF6A9690C_ae;
    const int autoF6A9690C_ai = 1;

    // Variable Initialization
    lv_hotkeyPath = "";

    // Implementation
    autoF6A9690C_ae = CatalogFieldValueCount(c_gameCatalogUnit, lp_unitType, "CardLayouts[" + IntToString(0) + "].LayoutButtons", c_playerAny);
    lv_buttonIndex = 0;
    for ( ; ( (autoF6A9690C_ai >= 0 && lv_buttonIndex <= autoF6A9690C_ae) || (autoF6A9690C_ai < 0 && lv_buttonIndex >= autoF6A9690C_ae) ) ; lv_buttonIndex += autoF6A9690C_ai ) {
        if ((CatalogFieldValueGet(c_gameCatalogUnit, lp_unitType, "CardLayouts[" + IntToString(0) + "].LayoutButtons[" + IntToString(lv_buttonIndex) + "].Face", c_playerAny) == (lp_abilityButton))) {
            lv_row = StringToInt(CatalogFieldValueGet(c_gameCatalogUnit, lp_unitType, "CardLayouts[" + IntToString(0) + "].LayoutButtons[" + IntToString(lv_buttonIndex) + "].Row", c_playerAny));
            lv_column = StringToInt(CatalogFieldValueGet(c_gameCatalogUnit, lp_unitType, "CardLayouts[" + IntToString(0) + "].LayoutButtons[" + IntToString(lv_buttonIndex) + "].Column", c_playerAny));
            if ((lv_row == 0)) {
                lv_hotkeyPath = ("0" + IntToString(lv_column));
            }
            else if ((lv_row == 1)) {
                lv_row = ((lv_row*5)-1);
                lv_hotkeyPath = ("0" + IntToString(lv_row) + IntToString(lv_column));
            }
            else if ((lv_row == 2)) {
                lv_row = ((lv_row*5)-1);
                lv_hotkeyPath = (IntToString(lv_row) + IntToString(lv_column));
            }
            lv_hotkeyPath = ("UI/Hotkey/CommandButton" + lv_hotkeyPath);
            return lv_hotkeyPath;
        }

    }
    return "";
}

text libCore_gf_UnitAbilityHotkeyText (string lp_unitType, string lp_abilityButton) {
    // Variable Declarations
    int lv_row;
    int lv_column;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    int auto38AAD9DF_ae;
    const int auto38AAD9DF_ai = 1;

    // Variable Initialization

    // Implementation
    auto38AAD9DF_ae = CatalogFieldValueCount(c_gameCatalogUnit, lp_unitType, "CardLayouts[" + IntToString(0) + "].LayoutButtons", c_playerAny);
    lv_buttonIndex = 0;
    for ( ; ( (auto38AAD9DF_ai >= 0 && lv_buttonIndex <= auto38AAD9DF_ae) || (auto38AAD9DF_ai < 0 && lv_buttonIndex >= auto38AAD9DF_ae) ) ; lv_buttonIndex += auto38AAD9DF_ai ) {
        if ((CatalogFieldValueGet(c_gameCatalogUnit, lp_unitType, "CardLayouts[" + IntToString(0) + "].LayoutButtons[" + IntToString(lv_buttonIndex) + "].Face", c_playerAny) == (lp_abilityButton))) {
            lv_row = StringToInt(CatalogFieldValueGet(c_gameCatalogUnit, lp_unitType, "CardLayouts[" + IntToString(0) + "].LayoutButtons[" + IntToString(lv_buttonIndex) + "].Row", c_playerAny));
            lv_column = StringToInt(CatalogFieldValueGet(c_gameCatalogUnit, lp_unitType, "CardLayouts[" + IntToString(0) + "].LayoutButtons[" + IntToString(lv_buttonIndex) + "].Column", c_playerAny));
            TextExpressionSetToken("Param/Expression/lib_Core_279DA5E4", "ROW", IntToText(lv_row));
            TextExpressionSetToken("Param/Expression/lib_Core_279DA5E4", "COL", IntToText(lv_column));
            return TextExpressionAssemble("Param/Expression/lib_Core_279DA5E4");
        }

    }
    if ((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true)) {
        return StringExternal("Param/Value/lib_Core_4F14A95F");
    }

    return StringToText("");
}

void libCore_gf_UnitBehaviorRemoveChargeRegen (unit lp_inUnit, string lp_inBehavior, string lp_inCharge) {
    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorAddChargeRegen(lp_inUnit, lp_inBehavior, lp_inCharge, (-1.0 * UnitBehaviorGetChargeRegen(lp_inUnit, lp_inBehavior, lp_inCharge)));
}

void libCore_gf_UnitAbilityRemoveChargeRegen (unit lp_inUnit, string lp_inAbil, string lp_inCharge) {
    // Automatic Variable Declarations
    // Implementation
    UnitAbilityAddChargeRegen(lp_inUnit, lp_inAbil, lp_inCharge, (-1.0 * UnitAbilityGetChargeRegen(lp_inUnit, lp_inAbil, lp_inCharge)));
}

void libCore_gf_UnitRemoveChargeRegen (unit lp_inUnit, string lp_inCharge) {
    // Automatic Variable Declarations
    // Implementation
    UnitAddChargeRegen(lp_inUnit, lp_inCharge, (-1.0 * UnitGetChargeRegen(lp_inUnit, lp_inCharge)));
}

fixed libCore_gf_WeaponDamageOfUnit (unit lp_unit) {
    // Variable Declarations
    fixed lv_weaponDamage;
    string lv_damageEffect;
    string lv_itBehavior;
    fixed lv_remainingFractionModifiers;
    fixed lv_originalFractionModifiers;
    fixed lv_originalAmountModifiers;
    int lv_itEffect;
    fixed lv_totalDamageValue;
    fixed lv_calculation;

    // Automatic Variable Declarations
    unit autoAC53C112_u;
    int autoAC53C112_i;
    int autoE9E67EB9_ae;

    // Variable Initialization

    // Implementation
    if ((libCore_gf_CheckValidatorOnUnit("TargetIsBlinded", lp_unit, lp_unit) == true)) {
        return 0.0;
    }
    lv_weaponDamage = UnitWeaponDamage(lp_unit, 1, c_unitAttributeNone, false);
    lv_damageEffect = (CatalogFieldValueGet(c_gameCatalogWeapon, UnitWeaponGet(lp_unit, 1), "DisplayEffect", UnitGetOwner(lp_unit)));
    autoAC53C112_u = lp_unit;
    autoAC53C112_i = 1;
    for ( ; autoAC53C112_i <= UnitBehaviorCountAll(autoAC53C112_u) ; autoAC53C112_i += BoolToInt(lv_itBehavior == UnitBehaviorGet(autoAC53C112_u, autoAC53C112_i)) ) {
        lv_itBehavior = UnitBehaviorGet(autoAC53C112_u, autoAC53C112_i);
        if (((UnitBehaviorHasFlag(lv_itBehavior, c_unitBehaviorFlagTemporary) == false) || (UnitHasBehavior(lp_unit, lv_itBehavior) == false) || (CatalogFieldValueGet(c_gameCatalogBehavior, lv_itBehavior, "DamageResponse.Location", c_playerAny) != "Attacker") || (CatalogFieldValueGetAsInt(c_gameCatalogBehavior, lv_itBehavior, "DamageResponse.DamageType[" + IntToString(2) + "]", c_playerAny) != 1))) {
            continue;
        }
        if ((CatalogFieldValueCount(c_gameCatalogBehavior, lv_itBehavior, "DamageResponse.RequireEffectArray", c_playerAny) <= 0)) {
            if ((CatalogFieldValueGet(c_gameCatalogBehavior, lv_itBehavior, "DamageResponse.DamageValue", c_playerAny) == "Original")) {
                lv_originalAmountModifiers += (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, lv_itBehavior, "DamageResponse.ModifyAmount", c_playerAny)*UnitBehaviorCount(lp_unit, lv_itBehavior));
                if ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, lv_itBehavior, "DamageResponse.ModifyFraction", c_playerAny) > 1.0)) {
                    lv_calculation = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, lv_itBehavior, "DamageResponse.ModifyFraction", c_playerAny);
                    lv_calculation -= 1.0;
                    lv_calculation *= UnitBehaviorCount(lp_unit, lv_itBehavior);
                    lv_originalFractionModifiers += lv_calculation;
                }
                else if ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, lv_itBehavior, "DamageResponse.ModifyFraction", c_playerAny) < 1.0)) {
                    lv_calculation = (-libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, lv_itBehavior, "DamageResponse.ModifyFraction", c_playerAny));
                    lv_calculation -= 1.0;
                    lv_calculation *= UnitBehaviorCount(lp_unit, lv_itBehavior);
                    lv_originalFractionModifiers += lv_calculation;
                }
            }
        }
        else {
            autoE9E67EB9_ae = CatalogFieldValueCount(c_gameCatalogBehavior, lv_itBehavior, "DamageResponse.RequireEffectArray", c_playerAny);
            lv_itEffect = 0;
            for ( ; lv_itEffect <= autoE9E67EB9_ae ; lv_itEffect += 1 ) {
                if ((lv_damageEffect != null) && (lv_damageEffect == (CatalogFieldValueGet(c_gameCatalogBehavior, lv_itBehavior, "DamageResponse.RequireEffectArray[" + IntToString(lv_itEffect) + "]", c_playerAny)))) {
                    lv_originalAmountModifiers += (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, lv_itBehavior, "DamageResponse.ModifyAmount", c_playerAny)*UnitBehaviorCount(lp_unit, lv_itBehavior));
                    if ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, lv_itBehavior, "DamageResponse.ModifyFraction", c_playerAny) != 1)) {
                        lv_calculation = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, lv_itBehavior, "DamageResponse.ModifyFraction", c_playerAny);
                        lv_calculation -= 1.0;
                        lv_calculation *= UnitBehaviorCount(lp_unit, lv_itBehavior);
                        lv_originalFractionModifiers += lv_calculation;
                    }
                }
            }
        }
    }
    lv_remainingFractionModifiers = IntToFixed((libGame_gf_UnitStatsValidPowerValueOfUnit((libGame_ge_UnitStatsPowerType_PowerKinetic), lp_unit) + 100));
    lv_remainingFractionModifiers /= 100.0;
    lv_totalDamageValue = (lv_weaponDamage+lv_originalAmountModifiers+(lv_weaponDamage*lv_originalFractionModifiers));
    lv_totalDamageValue = (lv_remainingFractionModifiers * lv_totalDamageValue);
    return lv_totalDamageValue;
}

string libCore_gf__UnitDataName (int lp_type, unit lp_unit, int lp_index) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    int auto1FBE3EB6_val;

    // Variable Initialization
    lv_name = "";

    // Implementation
    auto1FBE3EB6_val = lp_type;
    if (auto1FBE3EB6_val == libCore_ge__UnitDataType_Actor) {
        lv_name = "UDACTOR_";
    }
    else if (auto1FBE3EB6_val == libCore_ge__UnitDataType_Integer) {
        lv_name = "UDINTEGER_";
    }
    else if (auto1FBE3EB6_val == libCore_ge__UnitDataType_Ping) {
        lv_name = "UDPING_";
    }
    else if (auto1FBE3EB6_val == libCore_ge__UnitDataType_Point) {
        lv_name = "UDPOINT_";
    }
    else if (auto1FBE3EB6_val == libCore_ge__UnitDataType_Region) {
        lv_name = "UDREGION_";
    }
    else if (auto1FBE3EB6_val == libCore_ge__UnitDataType_TextTag) {
        lv_name = "UDTEXTTAG_";
    }
    else if (auto1FBE3EB6_val == libCore_ge__UnitDataType_Unit) {
        lv_name = "UDUNIT_";
    }
    else if (auto1FBE3EB6_val == libCore_ge__UnitDataType_UnitGroup) {
        lv_name = "UDUNITGROUP_";
    }
    else {
    }
    lv_name = (lv_name + IntToString(UnitGetTag(lp_unit)) + "_" + IntToString(lp_index));
    return lv_name;
}

void libCore_gf_StoreActorForUnit (unit lp_unit, int lp_index, actor lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetActor(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Actor, lp_unit, lp_index), lp_actor);
}

actor libCore_gf_ActorStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetActor(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Actor, lp_unit, lp_index));
}

void libCore_gf_StoreTextTagForUnit (unit lp_unit, int lp_index, int lp_textTag) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SaveDataTableValueTextTag(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_TextTag, lp_unit, lp_index), lp_textTag);
}

int libCore_gf_TextTagStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libNtve_gf_ValueFromDataTableTextTag(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_TextTag, lp_unit, lp_index));
}

void libCore_gf_StorePointForUnit (unit lp_unit, int lp_index, point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetPoint(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Point, lp_unit, lp_index), lp_point);
}

point libCore_gf_PointStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPoint(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Point, lp_unit, lp_index));
}

void libCore_gf_StoreRegionForUnit (unit lp_unit, int lp_index, region lp_region) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetRegion(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Point, lp_unit, lp_index), lp_region);
}

region libCore_gf_RegionStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetRegion(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Point, lp_unit, lp_index));
}

void libCore_gf_StorePingForUnit (unit lp_unit, int lp_index, int lp_ping) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetPing(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Ping, lp_unit, lp_index), lp_ping);
}

int libCore_gf_PingStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPing(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Ping, lp_unit, lp_index));
}

void libCore_gf_StoreIntegerForUnit (unit lp_unit, int lp_index, int lp_value) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Integer, lp_unit, lp_index), lp_value);
}

int libCore_gf_IntegerStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Integer, lp_unit, lp_index));
}

void libCore_gf_StoreUnitForUnit (unit lp_unit, int lp_index, unit lp_value) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnit(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Unit, lp_unit, lp_index), lp_value);
}

unit libCore_gf_UnitStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Unit, lp_unit, lp_index));
}

void libCore_gf_StoreUnitGroupForUnit (unit lp_unit, int lp_index, unitgroup lp_value) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnitGroup(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_UnitGroup, lp_unit, lp_index), lp_value);
}

unitgroup libCore_gf_UnitGroupStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnitGroup(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_UnitGroup, lp_unit, lp_index));
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization [Map Initizalization]
//--------------------------------------------------------------------------------------------------
bool libCore_gt_InitializationMapInitizalization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto9E2D4D89_val;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitEventSetNullVariableInvalid(true);
    TriggerExecute(libCore_gt_HideDefaultUIFrame, true, false);
    TriggerExecute(libCore_gt_InitializeLevelData, true, false);
    TriggerExecute(libCore_gt_DataHeroesDeathTimes, true, true);
    TriggerExecute(libCore_gt_DataInitializeAnnouncerVOData2, true, true);
    TriggerExecute(libGame_gt_UnitStatsArmorInitialization, true, false);
    TriggerExecute(libGame_gt_UnitStatsPowerInitialization, true, false);
    TriggerExecute(libGame_gt_UnitStatsHealingTakenInitialization, true, false);
    TriggerExecute(libCore_gt_BehaviorsQuestInitialization, true, true);
    TriggerExecute(libCore_gt_BehaviorCategoriesInitialization, true, true);
    TriggerExecute(libCore_gt_TalentsDataInitializePriceData, true, true);
    TriggerExecute(libCore_gt_DataInitializeHeroes, true, true);
    libCore_gv_mAPStartPoints[1][1] = PointFromName("Start Location Player 1");
    libCore_gv_mAPStartPoints[1][2] = PointFromName("Start Location Player 2");
    libCore_gv_mAPStartPoints[1][3] = PointFromName("Start Location Player 3");
    libCore_gv_mAPStartPoints[1][4] = PointFromName("Start Location Player 4");
    libCore_gv_mAPStartPoints[1][5] = PointFromName("Start Location Player 5");
    libCore_gv_mAPStartPoints[2][1] = PointFromName("Start Location Player 6");
    libCore_gv_mAPStartPoints[2][2] = PointFromName("Start Location Player 7");
    libCore_gv_mAPStartPoints[2][3] = PointFromName("Start Location Player 8");
    libCore_gv_mAPStartPoints[2][4] = PointFromName("Start Location Player 9");
    libCore_gv_mAPStartPoints[2][5] = PointFromName("Start Location Player 10");
    libGame_gv_teams[1].lv_nPCPlayer = libCore_gv_cOMPUTER_Blue;
    libGame_gv_teams[2].lv_nPCPlayer = libCore_gv_cOMPUTER_Red;
    libUIUI_gv_heroSelectionCurateHeroSelections[libUIUI_ge_HeroSelectionRoleNumber_Assasin1][1] = "Selendis";
    libUIUI_gv_heroSelectionCurateHeroSelections[libUIUI_ge_HeroSelectionRoleNumber_Assasin1][2] = "Katarina";
    libUIUI_gv_heroSelectionCurateHeroSelections[libUIUI_ge_HeroSelectionRoleNumber_Support][1] = "Malfurion";
    libUIUI_gv_heroSelectionCurateHeroSelections[libUIUI_ge_HeroSelectionRoleNumber_Warrior][1] = "Diablo";
    libUIUI_gv_heroSelectionCurateHeroSelections[libUIUI_ge_HeroSelectionRoleNumber_Specialist][1] = "Nazeebo";
    if ((GameIsOnline() == true)) {
        GameSetSpeedValue(c_gameSpeedNormal);
        GameSetSpeedLocked(true);
    }

    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryFlames, true);
    auto9E2D4D89_val = GameTerrainSet();
    if (auto9E2D4D89_val == "Storm_Slayn_BattleForSlayn") {
        TriggerExecute(libMapM_gt_MAPINITIZALIEDBattleforSlayn, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_InitializationMapInitizalization_Init () {
    libCore_gt_InitializationMapInitizalization = TriggerCreate("libCore_gt_InitializationMapInitizalization_Func");
    TriggerAddEventMapInit(libCore_gt_InitializationMapInitizalization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: INITIALIZATION
//--------------------------------------------------------------------------------------------------
bool libCore_gt_INITIALIZATION_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTeam;
    int lv_itLane;

    // Automatic Variable Declarations
    const int auto223CB152_ae = libCore_gv_bALMaxTeams;
    int auto223CB152_var;
    unitgroup autoD5EF7988_g;
    int autoD5EF7988_u;
    unit autoD5EF7988_var;
    int auto7C35544D_ae;
    int auto4631EC85_ae;
    unitgroup auto3F401C07_g;
    int auto3F401C07_u;
    unit auto3F401C07_var;
    unitgroup auto6D87B4A3_g;
    int auto6D87B4A3_u;
    unit auto6D87B4A3_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto223CB152_var = 1;
    for ( ; auto223CB152_var <= auto223CB152_ae; auto223CB152_var += 1 ) {
        autoD5EF7988_g = UnitGroup("Building_Core", libGame_gv_teams[auto223CB152_var].lv_nPCPlayer, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 1);
        autoD5EF7988_u = UnitGroupCount(autoD5EF7988_g, c_unitCountAll);
        for (;; autoD5EF7988_u -= 1) {
            autoD5EF7988_var = UnitGroupUnitFromEnd(autoD5EF7988_g, autoD5EF7988_u);
            if (autoD5EF7988_var == null) { break; }
            libGame_gv_teams[auto223CB152_var].lv_core = autoD5EF7988_var;
        }
    }
    auto7C35544D_ae = libCore_gv_bALMaxTeams;
    lv_itTeam = 1;
    for ( ; lv_itTeam <= auto7C35544D_ae ; lv_itTeam += 1 ) {
        auto4631EC85_ae = libGame_gv_laneInfo.lv_laneCount;
        lv_itLane = 1;
        for ( ; lv_itLane <= auto4631EC85_ae ; lv_itLane += 1 ) {
            auto3F401C07_g = UnitGroup(null, libGame_gv_teams[lv_itTeam].lv_nPCPlayer, libGame_gv_teams[lv_itTeam].lv_fortRegion[lv_itLane], UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto3F401C07_u = UnitGroupCount(auto3F401C07_g, c_unitCountAll);
            for (;; auto3F401C07_u -= 1) {
                auto3F401C07_var = UnitGroupUnitFromEnd(auto3F401C07_g, auto3F401C07_u);
                if (auto3F401C07_var == null) { break; }
                if ((UnitTypeTestFlag(UnitGetType(auto3F401C07_var), c_unitFlagTownStructureWall) == false)) {
                    UnitGroupAdd(libGame_gv_teams[lv_itTeam].lv_fortRegionGROUP[lv_itLane], auto3F401C07_var);
                }

            }
            auto6D87B4A3_g = UnitGroup(null, libGame_gv_teams[lv_itTeam].lv_nPCPlayer, libGame_gv_teams[lv_itTeam].lv_keepRegion[lv_itLane], UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto6D87B4A3_u = UnitGroupCount(auto6D87B4A3_g, c_unitCountAll);
            for (;; auto6D87B4A3_u -= 1) {
                auto6D87B4A3_var = UnitGroupUnitFromEnd(auto6D87B4A3_g, auto6D87B4A3_u);
                if (auto6D87B4A3_var == null) { break; }
                if ((UnitTypeTestFlag(UnitGetType(auto6D87B4A3_var), c_unitFlagTownStructureWall) == false)) {
                    UnitGroupAdd(libGame_gv_teams[lv_itTeam].lv_keepRegionGROUP[lv_itLane], auto6D87B4A3_var);
                }

            }
        }
    }
    TriggerExecute(libCore_gt_PlayersInitialization, true, true);
    TriggerExecute(libCore_gt_InitializeMapObjectsFromName, true, true);
    TriggerExecute(libUIUI_gt_UIInitialization, true, true);
    TriggerExecute(libGame_gt_TurnonAI1112Collision, true, false);
    libUIUI_gf_HSUIShowHeroSelectionUI();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_INITIALIZATION_Init () {
    libCore_gt_INITIALIZATION = TriggerCreate("libCore_gt_INITIALIZATION_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Map Objects From Name
//--------------------------------------------------------------------------------------------------
bool libCore_gt_InitializeMapObjectsFromName_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itCamp;
    int lv_itTeam;

    // Automatic Variable Declarations
    playergroup auto99CF0CE5_g;
    int auto99CF0CE5_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libGame_gt_SetLanePoints, true, true);
    TriggerExecute(libGame_gt_SafeZoneInitialize, true, true);
    TriggerExecute(libCore_gt_SetVariablesMercenariesDefenders, true, true);
    auto99CF0CE5_g = PlayerGroupAll();
    auto99CF0CE5_var = -1;
    while (true) {
        auto99CF0CE5_var = PlayerGroupNextPlayer(auto99CF0CE5_g, auto99CF0CE5_var);
        if (auto99CF0CE5_var < 0) { break; }
        VisExploreArea(auto99CF0CE5_var, RegionFromName("Revealable Area"), true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_InitializeMapObjectsFromName_Init () {
    libCore_gt_InitializeMapObjectsFromName = TriggerCreate("libCore_gt_InitializeMapObjectsFromName_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Players Initialization
//--------------------------------------------------------------------------------------------------
bool libCore_gt_PlayersInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itTeam;
    int lv_itSlot;
    bool lv_intoEnemyTeam;

    // Automatic Variable Declarations
    const int autoE059FEED_ae = libCore_gv_bALMaxPlayers;
    const int autoE059FEED_ai = 1;
    const int auto7AC65758_ae = libCore_gv_bALMaxTeams;
    const int auto7AC65758_ai = 1;
    const int auto2A19F76C_ae = libCore_gv_bALMaxPlayersOnATeam;
    const int auto2A19F76C_ai = 1;
    int auto48334601_ae;
    playergroup auto366F70EF_g;
    int auto4DD766E3_ae;
    int auto7B4B7C43_ae;
    int auto3EE13E6D_ae;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(libCore_gv_cOMPUTER_Blue, libCore_gv_cOMPUTER_Red, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(libCore_gv_cOMPUTER_Blue, libCore_gv_cOMPUTER_Hostile, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(libCore_gv_cOMPUTER_Red, libCore_gv_cOMPUTER_Hostile, libNtve_ge_AllianceSetting_Ally);
    if ((GameIsOnline() == false)) {
        PlayerGroupAdd(libCore_gv_teamOrder, 2);
        PlayerGroupAdd(libCore_gv_teamOrder, 3);
        PlayerGroupAdd(libCore_gv_teamOrder, 4);
        PlayerGroupAdd(libCore_gv_teamOrder, 5);
        PlayerGroupAdd(libCore_gv_teamChaos, 6);
        PlayerGroupAdd(libCore_gv_teamChaos, 7);
        PlayerGroupAdd(libCore_gv_teamChaos, 8);
        PlayerGroupAdd(libCore_gv_teamChaos, 9);
        PlayerGroupAdd(libCore_gv_teamChaos, 10);
        PlayerGroupAdd(libGame_gv_teams[1].lv_teamPlayerGroup, 2);
        PlayerGroupAdd(libGame_gv_teams[1].lv_teamPlayerGroup, 3);
        PlayerGroupAdd(libGame_gv_teams[1].lv_teamPlayerGroup, 4);
        PlayerGroupAdd(libGame_gv_teams[1].lv_teamPlayerGroup, 5);
        PlayerGroupAdd(libGame_gv_teams[2].lv_teamPlayerGroup, 6);
        PlayerGroupAdd(libGame_gv_teams[2].lv_teamPlayerGroup, 7);
        PlayerGroupAdd(libGame_gv_teams[2].lv_teamPlayerGroup, 8);
        PlayerGroupAdd(libGame_gv_teams[2].lv_teamPlayerGroup, 9);
        PlayerGroupAdd(libGame_gv_teams[2].lv_teamPlayerGroup, 10);
    }
    lv_itPlayer = 1;
    for ( ; ( (autoE059FEED_ai >= 0 && lv_itPlayer <= autoE059FEED_ae) || (autoE059FEED_ai < 0 && lv_itPlayer >= autoE059FEED_ae) ) ; lv_itPlayer += autoE059FEED_ai ) {
        lv_itTeam = 1;
        for ( ; ( (auto7AC65758_ai >= 0 && lv_itTeam <= auto7AC65758_ae) || (auto7AC65758_ai < 0 && lv_itTeam >= auto7AC65758_ae) ) ; lv_itTeam += auto7AC65758_ai ) {
            lv_itSlot = 1;
            for ( ; ( (auto2A19F76C_ai >= 0 && lv_itSlot <= auto2A19F76C_ae) || (auto2A19F76C_ai < 0 && lv_itSlot >= auto2A19F76C_ae) ) ; lv_itSlot += auto2A19F76C_ai ) {
                if ((PlayerGroupPlayer(GameAttributePlayersForTeam(lv_itTeam), lv_itSlot) == lv_itPlayer) && (PlayerType(lv_itPlayer) == c_playerTypeUser) && (PlayerStatus(lv_itPlayer) == c_playerStatusActive)) {
                    libGame_gv_players[lv_itPlayer].lv_team = lv_itTeam;
                    libGame_gv_players[lv_itPlayer].lv_playerAllySlot = lv_itSlot;
                    libGame_gv_players[lv_itPlayer].lv_playerName = PlayerName(lv_itPlayer);
                    libGame_gv_players[lv_itPlayer].lv_spawnPoint = libCore_gv_mAPStartPoints[lv_itTeam][lv_itSlot];
                    libGame_gv_players[lv_itPlayer].lv_playerisJoinedatStart = true;
                    libGame_gv_teams[lv_itTeam].lv_teamActivePlayersCount += 1;
                    PlayerGroupAdd(libGame_gv_teams[lv_itTeam].lv_teamPlayerGroup, lv_itPlayer);
                    PlayerGroupAdd(libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, lv_itPlayer);
                    if ((lv_itTeam == 1)) {
                        PlayerGroupAdd(libCore_gv_teamOrder, lv_itPlayer);
                        libGame_gv_players[lv_itPlayer].lv_faction = libGame_ge_PlayerFaction_Order;
                    }
                    else {
                        PlayerGroupAdd(libCore_gv_teamChaos, lv_itPlayer);
                        libGame_gv_players[lv_itPlayer].lv_faction = libGame_ge_PlayerFaction_Chaos;
                    }
                    PlayerGroupAdd(libCore_gv_allHeroPlayersPlusObserver, lv_itPlayer);
                    PlayerGroupAdd(libCore_gv_activeHumanPlayers, lv_itPlayer);
                    PlayerOptionOverride(lv_itPlayer, "simplecommandcard", "0");
                    PlayerOptionOverride(lv_itPlayer, "displayunitstatus", "All");
                    PlayerOptionOverride(lv_itPlayer, "teamcoloredlifestatus", "0");
                    PlayerOptionOverride(lv_itPlayer, "gametooltips", "0");
                    PlayerOptionOverride(lv_itPlayer, "showalerts", "0");
                    PlayerSetState(lv_itPlayer, c_playerStateFidgetingEnabled, false);
                    libNtve_gf_SetAllianceOneWay(libCore_gv_cOMPUTER_Hostile, lv_itPlayer, libNtve_ge_AllianceSetting_Enemy);
                    PlayerSetAlliance(lv_itPlayer, c_allianceIdPushable, libCore_gv_cOMPUTER_Hostile, false);
                    PlayerSetAlliance(libCore_gv_cOMPUTER_Hostile, c_allianceIdPushable, lv_itPlayer, false);
                    CameraPan(lv_itPlayer, libGame_gv_players[lv_itPlayer].lv_spawnPoint, 0.0625, -1, 0.0, false);
                    CameraLockInput(lv_itPlayer, true);
                    PlayerAddResponse(lv_itPlayer, "CommandersUnitBrith");
                }

            }
        }
    }
    auto48334601_ae = libCore_gv_bALMaxTeams;
    lv_itTeam = 1;
    for ( ; lv_itTeam <= auto48334601_ae ; lv_itTeam += 1 ) {
        PlayerGroupAdd(libGame_gv_teams[lv_itTeam].lv_teamPlayerGroup, libGame_gv_teams[lv_itTeam].lv_nPCPlayer);
        VisRevealerCreate(libGame_gv_teams[lv_itTeam].lv_nPCPlayer, RegionFromName(("Team " + IntToString(lv_itTeam) + " - Base Region")));
        libGame_gv_players[libGame_gv_teams[lv_itTeam].lv_nPCPlayer].lv_team = lv_itTeam;
        auto366F70EF_g = libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto366F70EF_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            libGame_gv_players[lv_itPlayer].lv_playerEnemySlot = (libGame_gv_players[lv_itPlayer].lv_playerAllySlot+libGame_gv_teams[(3-lv_itTeam)].lv_teamActivePlayersCount);
        }
    }
    PlayerGroupAdd(libCore_gv_teamOrder, libCore_gv_cOMPUTER_Blue);
    PlayerGroupAdd(libCore_gv_teamChaos, libCore_gv_cOMPUTER_Red);
    PlayerGroupAdd(libCore_gv_allHeroPlayersPlusObserver, libCore_gv_oBSERVER_ObserverUIPlayer);
    libNtve_gf_SetPlayerGroupAlliance(libGame_gv_teams[1].lv_teamPlayerGroup, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetPlayerGroupAlliance(libGame_gv_teams[2].lv_teamPlayerGroup, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(libGame_gv_teams[1].lv_teamPlayerGroup, libGame_gv_teams[2].lv_teamPlayerGroup, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAllianceAspectForPlayerGroup(libGame_gv_teams[1].lv_teamPlayerGroup, c_allianceIdPushable, false);
    libNtve_gf_SetAllianceAspectForPlayerGroup(libGame_gv_teams[2].lv_teamPlayerGroup, c_allianceIdPushable, false);
    PlayerSetAlliance(libCore_gv_cOMPUTER_Blue, c_allianceIdPushable, libCore_gv_cOMPUTER_Blue, true);
    PlayerSetAlliance(libCore_gv_cOMPUTER_Red, c_allianceIdPushable, libCore_gv_cOMPUTER_Red, true);
    PlayerGroupAdd(libCore_gv_nPCPlayers, libCore_gv_cOMPUTER_Neutral);
    PlayerGroupAdd(libCore_gv_nPCPlayers, libCore_gv_cOMPUTER_Blue);
    PlayerGroupAdd(libCore_gv_nPCPlayers, libCore_gv_cOMPUTER_Red);
    PlayerGroupAdd(libCore_gv_nPCPlayers, libCore_gv_cOMPUTER_Hostile);
    auto4DD766E3_ae = libCore_gv_bALMaxEnginePlayerCount;
    lv_itPlayer = 0;
    for ( ; lv_itPlayer <= auto4DD766E3_ae ; lv_itPlayer += 1 ) {
        libCore_gv_playerGroupFromPlayer[lv_itPlayer] = PlayerGroupSingle(lv_itPlayer);
    }
    auto7B4B7C43_ae = CatalogEntryCount(c_gameCatalogAlert);
    lv_itSlot = 0;
    for ( ; lv_itSlot <= auto7B4B7C43_ae ; lv_itSlot += 1 ) {
        UISetAlertTypeVisible(PlayerGroupAll(), ((CatalogEntryGet(c_gameCatalogAlert, lv_itSlot))), false);
    }
    auto3EE13E6D_ae = libCore_gv_bALMaxPlayers;
    lv_itPlayer = 1;
    for ( ; lv_itPlayer <= auto3EE13E6D_ae ; lv_itPlayer += 1 ) {
        libGame_gf_ShareUnshareVisionOfAlliesForPlayer(true, lv_itPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_PlayersInitialization_Init () {
    libCore_gt_PlayersInitialization = TriggerCreate("libCore_gt_PlayersInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Capture Points
//--------------------------------------------------------------------------------------------------
bool libCore_gt_CreateCapturePoints_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto30391C1F_ae;
    int auto30391C1F_var;

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSMinionsAIEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto30391C1F_ae = libMapM_gv_mapMMaxCampsForMapCurrent;
    auto30391C1F_var = 1;
    for ( ; auto30391C1F_var <= auto30391C1F_ae; auto30391C1F_var += 1 ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TownMercCampCaptureBeacon", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Hostile, libAIAI_gv_defenderGroupInfo[auto30391C1F_var].lv_captainPoint);
        libGame_gf_CapturePointCreate(UnitLastCreated(), 3.0, 1.5, 0.0, true, false);
        libAIAI_gv_capturePointNumber[auto30391C1F_var] = libGame_gf_LastCreatedCapturePoint();
        libGame_gf_CapturePointDisable(auto30391C1F_var);
        libUIUI_gf_JCIInit(auto30391C1F_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_CreateCapturePoints_Init () {
    libCore_gt_CreateCapturePoints = TriggerCreate("libCore_gt_CreateCapturePoints_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Camp - Map Init
//--------------------------------------------------------------------------------------------------
bool libCore_gt_CampMapInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itCamp;

    // Automatic Variable Declarations
    int autoDFB9DEB1_ae;
    int autoDFB9DEB1_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCore_gv_sYSMinionsAIEnabled == false)) {
        return true;
    }

    autoDFB9DEB1_ae = libMapM_gv_mapMMaxCampsForMapCurrent;
    autoDFB9DEB1_var = 1;
    for ( ; autoDFB9DEB1_var <= autoDFB9DEB1_ae; autoDFB9DEB1_var += 1 ) {
        if ((GameIsOnline() == true)) {
            libAIAI_gf_DefenderAISpawnDefenderCamp(autoDFB9DEB1_var, libAIAI_gv_defenderGroupInfo[autoDFB9DEB1_var].lv_respawnTimer);
        }
        else {
            libAIAI_gf_DefenderAISpawnDefenderCamp(autoDFB9DEB1_var, 10.0);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_CampMapInit_Init () {
    libCore_gt_CampMapInit = TriggerCreate("libCore_gt_CampMapInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hide Default UI Frame
//--------------------------------------------------------------------------------------------------
bool libCore_gt_HideDefaultUIFrame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePylonButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    HelpPanelEnableTechGlossaryButton(PlayerGroupAll(), false);
    HelpPanelEnableTechTreeButton(PlayerGroupAll(), false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeControlGroupPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHeroPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeInfoPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMissionTimePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeLeaderPanel, false);
    UIUnitColorStyleOverride(PlayerGroupAll(), c_unitColorStyleOverrideWorld);
    UIStatusBarOverride(PlayerGroupAll(), c_unitStatusGroupAll);
    UISetBattleNetButtonOffset(PlayerGroupAll(), 280, 0);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    if ((GameIsOnline() == true)) {
        UISetDragSelectEnabled(PlayerGroupAll(), false);
        UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    }
    else {
        UISetDragSelectEnabled(PlayerGroupAll(), true);
        UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, true);
    }
    PingSetPlayerPingsShown(PlayerGroupAll(), false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogRestartButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogSaveButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogLoadButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogMessageLogButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogAchievementsButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogReturnToGameplayButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePingPanel, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_HideDefaultUIFrame_Init () {
    libCore_gt_HideDefaultUIFrame = TriggerCreate("libCore_gt_HideDefaultUIFrame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Variables - Mercenaries [Defenders]
//--------------------------------------------------------------------------------------------------
bool libCore_gt_SetVariablesMercenariesDefenders_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentCamp;
    int lv_mercNumber;

    // Automatic Variable Declarations
    int auto9723FC2D_ae;
    int autoA8C385B1_ae;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto9723FC2D_ae = libMapM_gv_mapMMaxCampsForMapCurrent;
    lv_currentCamp = 1;
    for ( ; lv_currentCamp <= auto9723FC2D_ae ; lv_currentCamp += 1 ) {
        libAIAI_gv_defenderGroupInfo[lv_currentCamp].lv_captainPoint = PointFromName((("Merc Camp - " + IntToString(lv_currentCamp)) + " - Captain Point"));
        libAIAI_gv_defenderGroupInfo[lv_currentCamp].lv_region = RegionFromName((("Merc Camp - " + IntToString(lv_currentCamp)) + " - Region"));
        autoA8C385B1_ae = libAIAI_gv_defenderGroupInfo[lv_currentCamp].lv_maxGroupSize;
        lv_mercNumber = 1;
        for ( ; lv_mercNumber <= autoA8C385B1_ae ; lv_mercNumber += 1 ) {
            libAIAI_gv_defenderGroupInfo[lv_currentCamp].lv_defenderDefaultPoint[lv_mercNumber] = PointFromName((("Merc Camp - " + IntToString(lv_currentCamp)) + (" - Defender Pos - " + IntToString(lv_mercNumber))));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_SetVariablesMercenariesDefenders_Init () {
    libCore_gt_SetVariablesMercenariesDefenders = TriggerCreate("libCore_gt_SetVariablesMercenariesDefenders_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Text Tags
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DEBUGTextTags_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameIsOnline() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCore_gv_dEBUGCombatTextEnabled == true)) {
        libCore_gv_dEBUGCombatTextEnabled = false;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("DEBUG: Combat Text Disabled"));
    }
    else {
        libCore_gv_dEBUGCombatTextEnabled = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("DEBUG: Combat Text Enabled"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DEBUGTextTags_Init () {
    libCore_gt_DEBUGTextTags = TriggerCreate("libCore_gt_DEBUGTextTags_Func");
    TriggerAddEventChatMessage(libCore_gt_DEBUGTextTags, c_playerAny, "CombatText", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Turn Mod On/Off
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DEBUGTurnModOnOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameIsOnline() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringContains(EventChatMessage(false), "on", c_stringAnywhere, c_stringCase) == true)) {
        libCore_gv_dEBUGCombatTextEnabled = false;
    }
    else if ((StringContains(EventChatMessage(false), "off", c_stringAnywhere, c_stringCase) == true)) {
        libCore_gv_dEBUGCombatTextEnabled = true;
    }
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DEBUGTurnModOnOff_Init () {
    libCore_gt_DEBUGTurnModOnOff = TriggerCreate("libCore_gt_DEBUGTurnModOnOff_Func");
    TriggerAddEventChatMessage(libCore_gt_DEBUGTurnModOnOff, c_playerAny, "DEBUG", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Reset CD of Player 1
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DEBUGResetCDofPlayer1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameIsOnline() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitClearCooldowns(libGame_gv_players[1].lv_heroUnit, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DEBUGResetCDofPlayer1_Init () {
    libCore_gt_DEBUGResetCDofPlayer1 = TriggerCreate("libCore_gt_DEBUGResetCDofPlayer1_Func");
    TriggerAddEventChatMessage(libCore_gt_DEBUGResetCDofPlayer1, c_playerAny, "reset", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Add 10.000 Points to Player 1
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DEBUGAdd10000PointstoPlayer1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameIsOnline() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_players[1].lv_eXPPoints += 10000.0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DEBUGAdd10000PointstoPlayer1_Init () {
    libCore_gt_DEBUGAdd10000PointstoPlayer1 = TriggerCreate("libCore_gt_DEBUGAdd10000PointstoPlayer1_Func");
    TriggerAddEventChatMessage(libCore_gt_DEBUGAdd10000PointstoPlayer1, c_playerAny, "10000", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Reset Talents for Player 1
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DEBUGResetTalentsforPlayer1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itTier;
    int lv_itColumn;
    int lv_itHeroIndex;
    string lv_itTalent;

    // Automatic Variable Declarations
    unitgroup auto82B6BC92_g;
    int auto82B6BC92_u;
    unit auto82B6BC92_var;
    int autoB099A82B_ae;
    int autoED7FE76A_ae;

    // Variable Initialization
    lv_itPlayer = 1;
    lv_itHeroIndex = libGame_gv_players[lv_itPlayer].lv_heroIndex;

    // Conditions
    if (testConds) {
        if (!((GameIsOnline() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(libGame_gv_players[lv_itPlayer].lv_heroUnit, "SYS_ResetAllBehaviorControl", lv_itPlayer, 1);
    libGame_gv_players[lv_itPlayer].lv_talentsCurrentMaxTier = 1;
    auto82B6BC92_g = UnitInventoryGroup(libGame_gv_players[lv_itPlayer].lv_heroUnit);
    auto82B6BC92_u = UnitGroupCount(auto82B6BC92_g, c_unitCountAll);
    for (;; auto82B6BC92_u -= 1) {
        auto82B6BC92_var = UnitGroupUnitFromEnd(auto82B6BC92_g, auto82B6BC92_u);
        if (auto82B6BC92_var == null) { break; }
        UnitInventoryRemove(auto82B6BC92_var);
    }
    autoB099A82B_ae = libCore_gv_dataHeroesMaxTalentsTiers;
    lv_itTier = 1;
    for ( ; lv_itTier <= autoB099A82B_ae ; lv_itTier += 1 ) {
        autoED7FE76A_ae = libCore_gv_dataHeroesMaxTalentsperTier;
        lv_itColumn = 1;
        for ( ; lv_itColumn <= autoED7FE76A_ae ; lv_itColumn += 1 ) {
            libGame_gv_players[lv_itPlayer].lv_mYTalentsTalentPicked[lv_itTier][lv_itColumn] = false;
            libCore_gf_SetDialogItemAnimationState(libUIUI_gv_uIMyCustomLeaderBoardTalents.lv_talentButton[lv_itTier][lv_itColumn], libCore_gv_playerGroupFromPlayer[lv_itPlayer], "SelectedGroup", "Unselected");
            lv_itTalent = libCore_gv_heroData[lv_itHeroIndex].lv_talentsData[lv_itTier][lv_itColumn].lv_talentLink;
            if ((PlayerHasTalent(lv_itPlayer, lv_itTalent) == true)) {
                PlayerRemoveTalent(lv_itPlayer, lv_itTalent);
                if ((libCore_gv_heroData[lv_itHeroIndex].lv_talentsData[lv_itTier][lv_itColumn].lv_talentUpgrade != null)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lv_itPlayer, libCore_gv_heroData[lv_itHeroIndex].lv_talentsData[lv_itTier][lv_itColumn].lv_talentUpgrade, 0);
                }

            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DEBUGResetTalentsforPlayer1_Init () {
    libCore_gt_DEBUGResetTalentsforPlayer1 = TriggerCreate("libCore_gt_DEBUGResetTalentsforPlayer1_Func");
    TriggerAddEventChatMessage(libCore_gt_DEBUGResetTalentsforPlayer1, c_playerAny, "ResetTalents", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Add Player to Admin Group
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DEBUGAddPlayertoAdminGroup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameIsOnline() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(libCore_gv_dEBUGAdminTeam, EventPlayer()) == false)) {
        PlayerGroupAdd(libCore_gv_dEBUGAdminTeam, EventPlayer());
    }
    else {
        PlayerGroupRemove(libCore_gv_dEBUGAdminTeam, EventPlayer());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DEBUGAddPlayertoAdminGroup_Init () {
    libCore_gt_DEBUGAddPlayertoAdminGroup = TriggerCreate("libCore_gt_DEBUGAddPlayertoAdminGroup_Func");
    TriggerAddEventChatMessage(libCore_gt_DEBUGAddPlayertoAdminGroup, c_playerAny, "Admin", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Invul
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DEBUGInvul_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameIsOnline() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ChangeUnitDamage(libGame_gv_players[EventPlayer()].lv_heroUnit, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DEBUGInvul_Init () {
    libCore_gt_DEBUGInvul = TriggerCreate("libCore_gt_DEBUGInvul_Func");
    TriggerAddEventChatMessage(libCore_gt_DEBUGInvul, c_playerAny, "Invul", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Add Heroic Ability
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DebugAddHeroicAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameIsOnline() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(UnitGroupUnit(UnitGroupSelected(1), 1), "HeroicAbilityUnlocked", 1, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DebugAddHeroicAbility_Init () {
    libCore_gt_DebugAddHeroicAbility = TriggerCreate("libCore_gt_DebugAddHeroicAbility_Func");
    TriggerAddEventChatMessage(libCore_gt_DebugAddHeroicAbility, c_playerAny, "Heroic", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Start
//--------------------------------------------------------------------------------------------------
bool libCore_gt_GameStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_transparencyCurrent;
    int lv_itTeam;
    int lv_itPlayer;
    int lv_itLevel;
    int lv_itLevelEXPValue;
    fixed lv_itDelay;

    // Automatic Variable Declarations
    int autoBD971CB1_ae;
    playergroup auto18BEEB09_g;
    int autoA85E6EC4_ae;
    const int autoB4C75F29_ae = 10;
    int autoB4C75F29_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCore_gt_CreateCapturePoints, true, true);
    TriggerExecute(libCore_gt_RunAnimationsPreBuild, true, true);
    libUIUI_gf_UISetUpTalentsPrice();
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryFlames, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 25.0, 0.0);
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambient_Underworld_Mines", c_soundtrackCueAny, c_soundtrackIndexAny);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Storm_Music_HauntedMines", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    libCore_gv_gameStarted = true;
    DialogControlSetVisible(libUIUI_gv_teamStatusPanel.lv_mainPanel, PlayerGroupAll(), true);
    autoBD971CB1_ae = libCore_gv_bALMaxTeams;
    lv_itTeam = 1;
    for ( ; lv_itTeam <= autoBD971CB1_ae ; lv_itTeam += 1 ) {
        if ((PlayerGroupCount(libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers) == 0)) {
            DialogControlSetVisible(libUIUI_gv_uITopPanel.lv_team_LevelInfo[lv_itTeam], PlayerGroupAll(), false);
        }
        auto18BEEB09_g = libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers;
        lv_itPlayer = -1;
        while (true) {
            lv_itPlayer = PlayerGroupNextPlayer(auto18BEEB09_g, lv_itPlayer);
            if (lv_itPlayer < 0) { break; }
            if ((libGame_gv_players[lv_itPlayer].lv_playerisJoinedatStart == true)) {
                libCore_gf_GameStartSpawnHero(lv_itPlayer, libGame_gv_players[lv_itPlayer].lv_playerAllySlot);
            }
        }
    }
    while (!((libCore_gv_numberofPlayerstoSpawnHeroes == (libGame_gv_teams[1].lv_teamActivePlayersCount + libGame_gv_teams[2].lv_teamActivePlayersCount)))) {
        Wait(0.0625, c_timeGame);
    }
    autoA85E6EC4_ae = libCore_gv_bALMaxTeams;
    lv_itTeam = 1;
    for ( ; lv_itTeam <= autoA85E6EC4_ae ; lv_itTeam += 1 ) {
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uITopPanel.lv_team_ExpProgressBar[lv_itTeam], libGame_gv_teams[lv_itTeam].lv_core, PlayerGroupAll());
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uITopPanel.lv_statusFrameCore[lv_itTeam], libGame_gv_teams[lv_itTeam].lv_core, PlayerGroupAll());
        if ((PlayerGroupCount(libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers) > 0)) {
            UnitXPAddXP(libGame_gv_teams[lv_itTeam].lv_core, "TeamVeterancyBehavior", 1.0);
            libNtve_gf_SetDialogItemText(libUIUI_gv_uITopPanel.lv_team_Level[lv_itTeam], IntToText(UnitLevel(libGame_gv_teams[lv_itTeam].lv_core)), PlayerGroupAll());
            libGame_gf_LevelUpAddHeroUpgradestoTeam(lv_itTeam);
            libGame_gv_teams[lv_itTeam].lv_teamLevel += 1;
        }

    }
    autoB4C75F29_var = 1;
    for ( ; autoB4C75F29_var <= autoB4C75F29_ae; autoB4C75F29_var += 1 ) {
        libGame_gf_AnnRegisterEvent(libCore_ge_AnnouncerVOEvents_Countdown30, autoB4C75F29_var, 0, 0, false);
    }
    if ((GameIsOnline() == false)) {
        TriggerExecute(libCore_gt_CampMapInit, true, false);
        TriggerExecute(libGame_gt_DefenderScaling, true, false);
    }

    TriggerEnable(libUIUI_gt_TabShowLeaderBoard, true);
    TriggerExecute(libUIUI_gt_UIMyTalentsPanelHighlightTiers, true, false);
    TriggerEnable(libUIUI_gt_UIMyPropertyPanelPeriodicUpdate, true);
    TriggerEnable(libUIUI_gt_UITopPanelBGSTimer, true);
    TriggerEnable(libUIUI_gt_UIInputIngameButtonUsed, true);
    TriggerEnable(libUIUI_gt_UIMyCustomLeaderBoardUpdateStats, true);
    TriggerEnable(libUIUI_gt_UIMyCustomLeaderBoardTalentsUpdateTalents, true);
    TriggerEnable(libUIUI_gt_ControlDownShowQuickTalents, true);
    TriggerEnable(libUIUI_gt_ControlUpHideQuickTalents, true);
    TriggerEnable(libUIUI_gt_CtrlTabChangeQuickTalentsTier, true);
    TriggerEnable(libGame_gt_EXPDataPeriodicUpdate, true);
    TriggerEnable(libGame_gt_SafeZoneUnitEntersSafeZone, true);
    TriggerEnable(libGame_gt_SafeZoneUnitEntersPuntZone, true);
    TriggerEnable(libGame_gt_SafeZoneUnitExitsSafeZone, true);
    TriggerExecute(libGame_gt_SafeZonePunchBehavior, true, false);
    TriggerExecute(libGame_gt_SafeZoneSafeBehavior, true, false);
    TriggerExecute(libGame_gt_WarpInititalize, true, false);

    if ((GameIsOnline() == true)) {
        TimerStart(libCore_gv_timerBeforeGameStart, libCore_gv_timerBGS, false, c_timeGame);
    }
    else {
        TimerStart(libCore_gv_timerBeforeGameStart, 10.0, false, c_timeGame);
    }
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/lib_Core_70EA2797"), libNtve_ge_TipType_MissionStrategy), StringExternal("Param/Value/lib_Core_9A32F628"), StringExternal("Param/Value/lib_Core_0F6A74DC"), "Assets\\Textures\\tip_voidthrasher.dds");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/lib_Core_085DF6C0"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/lib_Core_E70496E7"), StringExternal("Param/Value/lib_Core_17D95059"), "Assets\\Textures\\btn-tips-credit.dds");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/lib_Core_91FCB4FB"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/lib_Core_8237C9EB"), StringExternal("Param/Value/lib_Core_ACD348BE"), "Assets\\Textures\\ui_tipicon_campaign_exp02-focusfire.dds");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/lib_Core_2A95EC91"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/lib_Core_2803337D"), StringExternal("Param/Value/lib_Core_4E957BA9"), "Assets\\Textures\\btn-tips-hotkeys.dds");

    TriggerExecute(libCore_gt_RunAnimationsandInitTowers, true, false);
    TriggerExecute(libAIAI_gt_RunAISystem, true, true);
    TriggerExecute(libUIUI_gt_PathDisplayMoveCreate, true, false);
    if ((GameIsOnline() == false)) {
        PlayerSetAlliance(6, c_allianceIdControl, 1, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_GameStart_Init () {
    libCore_gt_GameStart = TriggerCreate("libCore_gt_GameStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer BGS Expires
//--------------------------------------------------------------------------------------------------
bool libCore_gt_TimerBGSExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB725444B_g;
    int autoB725444B_u;
    unit autoB725444B_var;
    unitgroup auto195A0F1D_g;
    int auto195A0F1D_u;
    unit auto195A0F1D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libCore_gv_gameTimer, c_timerDurationInfinite, false, c_timeGame);
    TriggerEnable(libUIUI_gt_UITopPanelBGSTimer, false);
    TriggerEnable(libUIUI_gt_UITopPanelGameTimer, true);
    libGame_gv_scalingAllowXPTrickle = true;
    autoB725444B_g = UnitGroup("StormGameStartPathingBlocker", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB725444B_u = UnitGroupCount(autoB725444B_g, c_unitCountAll);
    for (;; autoB725444B_u -= 1) {
        autoB725444B_var = UnitGroupUnitFromEnd(autoB725444B_g, autoB725444B_u);
        if (autoB725444B_var == null) { break; }
        UnitRemove(autoB725444B_var);
    }
    auto195A0F1D_g = UnitGroup("StormGameStartPathingBlockerDiagonal", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto195A0F1D_u = UnitGroupCount(auto195A0F1D_g, c_unitCountAll);
    for (;; auto195A0F1D_u -= 1) {
        auto195A0F1D_var = UnitGroupUnitFromEnd(auto195A0F1D_g, auto195A0F1D_u);
        if (auto195A0F1D_var == null) { break; }
        UnitRemove(auto195A0F1D_var);
    }
    TriggerExecute(libGame_gt_MinionSpawn, true, false);
    if ((GameIsOnline() == true)) {
        TriggerExecute(libCore_gt_CampMapInit, true, false);
        TriggerExecute(libGame_gt_DefenderScaling, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_TimerBGSExpires_Init () {
    libCore_gt_TimerBGSExpires = TriggerCreate("libCore_gt_TimerBGSExpires_Func");
    TriggerAddEventTimer(libCore_gt_TimerBGSExpires, libCore_gv_timerBeforeGameStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Run Animations and Init Towers
//--------------------------------------------------------------------------------------------------
bool libCore_gt_RunAnimationsandInitTowers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itLane;
    int lv_town;
    int lv_town2;
    point[libCore_gv_bALMaxTeams + 1][libGame_gv_mapLanesCountMax + 1] lv_keepPoint;

    // Automatic Variable Declarations
    unitgroup autoC409ADE5_g;
    int autoC409ADE5_u;
    unit autoC409ADE5_var;
    unitgroup auto2A431F1A_g;
    int auto2A431F1A_u;
    unit auto2A431F1A_var;
    unitgroup autoC9AA06CC_g;
    int autoC9AA06CC_u;
    unit autoC9AA06CC_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(10.0, c_timeGame);
    autoC409ADE5_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC409ADE5_u = UnitGroupCount(autoC409ADE5_g, c_unitCountAll);
    for (;; autoC409ADE5_u -= 1) {
        autoC409ADE5_var = UnitGroupUnitFromEnd(autoC409ADE5_g, autoC409ADE5_u);
        if (autoC409ADE5_var == null) { break; }
        if ((libAIAI_gf_UnitIsGate(autoC409ADE5_var) != true)) {
            ActorSend(libNtve_gf_MainActorofUnit(autoC409ADE5_var), "Signal PlayBuild");
        }

    }
    TriggerExecute(libAIAI_gt_InitializeTowersandTowns, true, false);
    Wait(12.0, c_timeGame);
    auto2A431F1A_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2A431F1A_u = UnitGroupCount(auto2A431F1A_g, c_unitCountAll);
    for (;; auto2A431F1A_u -= 1) {
        auto2A431F1A_var = UnitGroupUnitFromEnd(auto2A431F1A_g, auto2A431F1A_u);
        if (auto2A431F1A_var == null) { break; }
        if ((libAIAI_gf_UnitIsGate(auto2A431F1A_var) == true)) {
            ActorSend(libNtve_gf_MainActorofUnit(auto2A431F1A_var), "Signal PlayBuild");
        }

    }
    Wait(4.0, c_timeGame);
    autoC9AA06CC_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC9AA06CC_u = UnitGroupCount(autoC9AA06CC_g, c_unitCountAll);
    for (;; autoC9AA06CC_u -= 1) {
        autoC9AA06CC_var = UnitGroupUnitFromEnd(autoC9AA06CC_g, autoC9AA06CC_u);
        if (autoC9AA06CC_var == null) { break; }
        if ((libAIAI_gf_UnitIsGate(autoC9AA06CC_var) != true)) {
            UnitBehaviorRemove(autoC9AA06CC_var, "Building_WarpIn", 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_RunAnimationsandInitTowers_Init () {
    libCore_gt_RunAnimationsandInitTowers = TriggerCreate("libCore_gt_RunAnimationsandInitTowers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Run Animations PreBuild
//--------------------------------------------------------------------------------------------------
bool libCore_gt_RunAnimationsPreBuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoBE04331F_g;
    int autoBE04331F_u;
    unit autoBE04331F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoBE04331F_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBE04331F_u = UnitGroupCount(autoBE04331F_g, c_unitCountAll);
    for (;; autoBE04331F_u -= 1) {
        autoBE04331F_var = UnitGroupUnitFromEnd(autoBE04331F_g, autoBE04331F_u);
        if (autoBE04331F_var == null) { break; }
        if ((libAIAI_gf_UnitIsGate(autoBE04331F_var) != true)) {
            ActorSend(libNtve_gf_MainActorofUnit(autoBE04331F_var), "Signal PlayPreBuild");
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_RunAnimationsPreBuild_Init () {
    libCore_gt_RunAnimationsPreBuild = TriggerCreate("libCore_gt_RunAnimationsPreBuild_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Initialize Announcer VO Data 2
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataInitializeAnnouncerVOData2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_announcerPackID;
    string lv_instance;

    // Automatic Variable Declarations
    const int autoA7A5430B_ae = libCore_gv_bALMaxEnginePlayerCount;
    int autoA7A5430B_var;
    string auto2CB4CE62_userType;
    int auto2CB4CE62_i;
    string auto2B648057_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoA7A5430B_var = 1;
    for ( ; autoA7A5430B_var <= autoA7A5430B_ae; autoA7A5430B_var += 1 ) {
        libGame_gv_players[autoA7A5430B_var].lv_selectedAnnouncerVOPack = libCore_ge_AnnouncerVOPacks_ProtossFemale;
    }
    auto2CB4CE62_userType = "DataIngame_Announcers";
    auto2CB4CE62_i = 1;
    for ( ; auto2CB4CE62_i <= UserDataInstanceCount(auto2CB4CE62_userType) ; auto2CB4CE62_i += 1 ) {
        lv_instance = UserDataInstance(auto2CB4CE62_userType, auto2CB4CE62_i);
        lv_announcerPackID = libNtve_gf_UserDataInstanceGetIndex("DataIngame_Announcers", lv_instance);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_announcer = UserDataInstance("DataIngame_Announcers", lv_announcerPackID);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_AlliedCoreUnderAttack] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "CoreAttack_Ally", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_BlueTeamCoreUnderAttack] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "CoreAttack_Blue", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_RedTeamCoreUnderAttack] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "CoreAttack_Red", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_CountdownRemain] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "CountdownRemain", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_Countdown30] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "Countdown30sec", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_Countdown10] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "Countdown10sec", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_Countdown5] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "Countdown05sec", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_Countdown4] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "Countdown04sec", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_Countdown3] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "Countdown03sec", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_Countdown2] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "Countdown02sec", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_Countdown1] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "Countdown01sec", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_GameStart] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "GameStart", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_HeroSlain] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "Kill_HeroSlain", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_HeroSlainObserver] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "Kill_HeroSlain_Observer", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_EnemyKilledParticipants] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "Kill_HeroKill", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_DoubleKill] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "Kill_DoubleKill", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_TripleKill] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "Kill_TripleKill", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_QuadraKill] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "Kill_FourKill", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_PentaKill] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "Kill_MegaKill", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_TeamKill] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "Kill_TeamKill", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_TeamKill] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "Kill_TeamKill", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_BlueTeamKilled] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "Kill_TeamKill_Blue", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_RedTeamKilled] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "Kill_TeamKill_Red", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_AllyFirstBlood] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "Kill_FirstBloodAlly", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_BlueTeamFirstBlood] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "Kill_FirstBlood_Blue", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_RedTeamFirstBlood] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "Kill_FirstBlood_Red", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_APlayerHasLeftTheGame] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "PlayerAbandon", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_APlayerHasRejoinedTheGame] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "PlayerRejoin", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_Gravestomp] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "Gravestomp", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_GravestompObserver] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "Gravestomp_Observer", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_AlliedFortDestroyed] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "FortLost", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_EnemyFortDestroyed] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "FortDestroy", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_AlliedKeepDestroyed] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "KeepLost", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_EnemyKeepDestroyed] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "KeepDestroy", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_BlueTeamDestroysFort] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "FortDestroy_Blue", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_RedTeamDestroysFort] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "FortDestroy_Red", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_BlueTeamDestroysKeep] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "KeepDestroy_Blue", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_RedTeamDestroysKeep] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "KeepDestroy_Red", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_Victory] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "EndingWin", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_Defeat] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "EndingLose", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_BlueTeamWins] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "Ending_Blue", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_RedTeamWins] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "Ending_Red", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_KillingSpreeStart] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "SpreeStart", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade1Mayhem] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "SpreeFirstUpgrade", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade2Rampage] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "SpreeSecondUpgrade", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade3Untouchable] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "SpreeThirdUpgrade", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade4AllStar] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "SpreeMax", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_KillingSpreeEndYou] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "SpreeEnd", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_KillingSpreeEndAlly] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "SpreeEnd_Ally", 1), c_soundIndexAny);
        libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_TalentUnlocked] = SoundLink(UserDataGetSound("DataIngame_Announcers", lv_instance, "TalentUnlock", 1), c_soundIndexAny);
        auto2B648057_val = GameTerrainSet();
        if (auto2B648057_val == "Storm_Slayn_BattleForSlayn") {
            libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_EventStarts] = SoundLink("MapAnnouncer_VoidThrasherSpawns", -1);
            libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_EventContinues] = SoundLink("MapAnnouncer_VoidThrasherAttacks", -1);
            libCore_gv_dataAnnouncerVOPacks[lv_announcerPackID].lv_sounds[libCore_ge_AnnouncerVOEvents_EventEnds] = SoundLink("MapAnnouncer_VoidThrasherDies", -1);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataInitializeAnnouncerVOData2_Init () {
    libCore_gt_DataInitializeAnnouncerVOData2 = TriggerCreate("libCore_gt_DataInitializeAnnouncerVOData2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Behaviors Quest - Initialization
//--------------------------------------------------------------------------------------------------
bool libCore_gt_BehaviorsQuestInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_itBehavior;
    int lv_itBehaviorIndex;
    int lv_index;
    int lv_maximumStacksCount;

    // Automatic Variable Declarations
    int auto7C762E6F_ae;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto7C762E6F_ae = CatalogEntryCount(c_gameCatalogBehavior);
    lv_itBehaviorIndex = 0;
    for ( ; lv_itBehaviorIndex <= auto7C762E6F_ae ; lv_itBehaviorIndex += 1 ) {
        lv_itBehavior = ((CatalogEntryGet(c_gameCatalogBehavior, lv_itBehaviorIndex)));
        if ((UnitBehaviorHasFlag(lv_itBehavior, c_unitBehaviorFlagPassive) == true)) {
            libCore_gv_behaviorsQuestCurrentMaxCount += 1;
            lv_index = libCore_gf_BehaviorsQuestFreeIndex();
            libCore_gv_behaviorsQuestData[lv_index].lv_behavior = ((CatalogEntryGet(c_gameCatalogBehavior, lv_itBehaviorIndex)));
            lv_maximumStacksCount = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, lv_itBehavior, "MaxStackCount", c_playerAny);
            if ((lv_maximumStacksCount <= 100)) {
                libCore_gv_behaviorsQuestData[lv_index].lv_questUpdatePerStackCount = 1;
            }
            else if ((lv_maximumStacksCount > 100) && (lv_maximumStacksCount <= 1000)) {
                libCore_gv_behaviorsQuestData[lv_index].lv_questUpdatePerStackCount = 10;
            }
            else if ((lv_maximumStacksCount > 1000)) {
                libCore_gv_behaviorsQuestData[lv_index].lv_questUpdatePerStackCount = 100;
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_BehaviorsQuestInitialization_Init () {
    libCore_gt_BehaviorsQuestInitialization = TriggerCreate("libCore_gt_BehaviorsQuestInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Behaviors Quest - Increased/Destroyed
//--------------------------------------------------------------------------------------------------
bool libCore_gt_BehaviorsQuestIncreasedDestroyed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_behaviorIndex;
    int lv_stackCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    lv_behaviorIndex = libCore_gf_BehaviorsQuestBehaviorIndex(EventUnitBehavior());
    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeIncrease)) {
        lv_stackCount = UnitBehaviorCount(EventUnit(), EventUnitBehavior());
        if ((lv_stackCount < CatalogFieldValueGetAsInt(c_gameCatalogBehavior, EventUnitBehavior(), "MaxStackCount", c_playerAny))) {
            if ((libCore_gf_BehaviorsQuestValidToCreateIncreaseFX(lv_player, lv_behaviorIndex, lv_stackCount) == true)) {
                UnitCreateEffectUnit(EventUnit(), "ContinuousQuestIncreaseContinue", EventUnit());
            }
        }
        else {
            if ((libCore_gv_behaviorsQuestCompletedByPlayer[lv_behaviorIndex][lv_player] == false)) {
                libCore_gv_behaviorsQuestCompletedByPlayer[lv_behaviorIndex][lv_player] = true;
                UnitCreateEffectUnit(EventUnit(), "TalentQuestCompleteDummySet", EventUnit());
                libUIUI_gf_addquest(UnitGetOwner(EventUnit()), EventUnitBehavior());
            }
        }
    }
    else {
        libCore_gv_behaviorsQuestCompletedByPlayer[lv_behaviorIndex][lv_player] = false;
        if ((UnitHasBehavior2(EventUnit(), "SYS_ResetAllBehaviorControl") == false)) {
            SoundPlayForPlayer(SoundLink("TalentQuestResetSound", c_soundIndexAny), c_maxPlayers, libCore_gv_playerGroupFromPlayer[lv_player], 100.0, 0.0);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_BehaviorsQuestIncreasedDestroyed_Init () {
    libCore_gt_BehaviorsQuestIncreasedDestroyed = TriggerCreate("libCore_gt_BehaviorsQuestIncreasedDestroyed_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libCore_gt_BehaviorsQuestIncreasedDestroyed, null, c_unitBehaviorFlagPassive, c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChangeFromCategory(libCore_gt_BehaviorsQuestIncreasedDestroyed, null, c_unitBehaviorFlagPassive, c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Behavior Categories - Initialization
//--------------------------------------------------------------------------------------------------
bool libCore_gt_BehaviorCategoriesInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_customCategory0;
    int lv_customBehaviorCategory;
    int lv_itBehaviorIndex;
    string lv_itBehavior;

    // Automatic Variable Declarations
    int auto904FA372_ae;
    string auto06943E3D_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gf_BehaviorCategoriesSetBehaviorCategoryController(libCore_ge_BehaviorCategories_PersistentCloak, "MindControlCategory");
    libCore_gf_BehaviorCategoriesSetBehaviorCategoryController(libCore_ge_BehaviorCategories_PersistentCloak, "PersistentCloakCategory");
    libCore_gf_BehaviorCategoriesSetBehaviorCategoryController(libCore_ge_BehaviorCategories_TemporaryCloak, "TempCloakCategory");
    libCore_gf_BehaviorCategoriesSetBehaviorCategoryController(libCore_ge_BehaviorCategories_UnrevealableCloak, "UnrevealableCloakCategory");
    auto904FA372_ae = CatalogEntryCount(c_gameCatalogBehavior);
    lv_itBehaviorIndex = 0;
    for ( ; lv_itBehaviorIndex <= auto904FA372_ae ; lv_itBehaviorIndex += 1 ) {
        lv_itBehavior = ((CatalogEntryGet(c_gameCatalogBehavior, lv_itBehaviorIndex)));
        if ((UnitBehaviorHasFlag(lv_itBehavior, c_unitBehaviorFlagTimedLife) == true)) {
            lv_customCategory0 = CatalogFieldValueGet(c_gameCatalogBehavior, lv_itBehavior, "Modification.AttributeChangeArray[" + IntToString(0) + "].Attribute", c_playerAny);
            auto06943E3D_val = lv_customCategory0;
            if (auto06943E3D_val == "Mind_Control") {
                libCore_gf_BehaviorCategoriesIncludeBehaviorInList(libCore_ge_BehaviorCategories_MindControl, lv_itBehavior);
            }
            else if (auto06943E3D_val == "TemporaryCloak") {
                libCore_gf_BehaviorCategoriesIncludeBehaviorInList(libCore_ge_BehaviorCategories_TemporaryCloak, lv_itBehavior);
            }
            else if (auto06943E3D_val == "PersistentCloak") {
                libCore_gf_BehaviorCategoriesIncludeBehaviorInList(libCore_ge_BehaviorCategories_PersistentCloak, lv_itBehavior);
            }
            else if (auto06943E3D_val == "UnrevealableCloak") {
                libCore_gf_BehaviorCategoriesIncludeBehaviorInList(libCore_ge_BehaviorCategories_UnrevealableCloak, lv_itBehavior);
            }
            else {
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_BehaviorCategoriesInitialization_Init () {
    libCore_gt_BehaviorCategoriesInitialization = TriggerCreate("libCore_gt_BehaviorCategoriesInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Behavior Categories - Add Controller
//--------------------------------------------------------------------------------------------------
bool libCore_gt_BehaviorCategoriesAddController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_category;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_category = libCore_gf_BehaviorCategoriesCommandersCategoryIntegerOfBehavior(EventUnitBehavior());
    UnitBehaviorAdd(EventUnit(), libCore_gv_behaviorCategories[lv_category].lv_categoryController, UnitBehaviorEffectUnit(EventUnit(), EventUnitBehavior(), c_effectUnitCaster, 0), 1);
    UnitBehaviorSetDuration(EventUnit(), libCore_gv_behaviorCategories[lv_category].lv_categoryController, UnitBehaviorDuration(EventUnit(), EventUnitBehavior()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_BehaviorCategoriesAddController_Init () {
    libCore_gt_BehaviorCategoriesAddController = TriggerCreate("libCore_gt_BehaviorCategoriesAddController_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libCore_gt_BehaviorCategoriesAddController, null, c_unitBehaviorFlagTimedLife, c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libCore_gt_BehaviorCategoriesAddController, null, c_unitBehaviorFlagTimedLife, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Behavior Categories - Controller Behavior Destroy
//--------------------------------------------------------------------------------------------------
bool libCore_gt_BehaviorCategoriesControllerBehaviorDestroy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gf_BehaviorCategoriesRemoveAllBehaviorsByCategoryControllerFromUnit(EventUnitBehavior(), EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_BehaviorCategoriesControllerBehaviorDestroy_Init () {
    libCore_gt_BehaviorCategoriesControllerBehaviorDestroy = TriggerCreate("libCore_gt_BehaviorCategoriesControllerBehaviorDestroy_Func");
    TriggerAddEventUnitBehaviorChange(libCore_gt_BehaviorCategoriesControllerBehaviorDestroy, null, "MindControlCategory", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(libCore_gt_BehaviorCategoriesControllerBehaviorDestroy, null, "PersistentCloakCategory", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(libCore_gt_BehaviorCategoriesControllerBehaviorDestroy, null, "TempCloakCategory", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(libCore_gt_BehaviorCategoriesControllerBehaviorDestroy, null, "UnrevealableCloakCategory", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Behavior Categories - Slow
//--------------------------------------------------------------------------------------------------
bool libCore_gt_BehaviorCategoriesSlow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "CommandersSlowCategory", UnitBehaviorEffectUnit(EventUnit(), EventUnitBehavior(), c_effectUnitCaster, 0), 1);
    UnitBehaviorSetDuration(EventUnit(), "CommandersSlowCategory", UnitBehaviorDuration(EventUnit(), EventUnitBehavior()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_BehaviorCategoriesSlow_Init () {
    libCore_gt_BehaviorCategoriesSlow = TriggerCreate("libCore_gt_BehaviorCategoriesSlow_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libCore_gt_BehaviorCategoriesSlow, null, c_unitBehaviorFlagSlow, c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libCore_gt_BehaviorCategoriesSlow, null, c_unitBehaviorFlagSlow, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Behavior Categories - Stun
//--------------------------------------------------------------------------------------------------
bool libCore_gt_BehaviorCategoriesStun_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "CommandersStunCategory", UnitBehaviorEffectUnit(EventUnit(), EventUnitBehavior(), c_effectUnitCaster, 0), 1);
    UnitBehaviorSetDuration(EventUnit(), "CommandersStunCategory", UnitBehaviorDuration(EventUnit(), EventUnitBehavior()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_BehaviorCategoriesStun_Init () {
    libCore_gt_BehaviorCategoriesStun = TriggerCreate("libCore_gt_BehaviorCategoriesStun_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libCore_gt_BehaviorCategoriesStun, null, c_unitBehaviorFlagStun, c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libCore_gt_BehaviorCategoriesStun, null, c_unitBehaviorFlagStun, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Behavior Categories - Blind
//--------------------------------------------------------------------------------------------------
bool libCore_gt_BehaviorCategoriesBlind_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "CommandersBlindCategory", UnitBehaviorEffectUnit(EventUnit(), EventUnitBehavior(), c_effectUnitCaster, 0), 1);
    UnitBehaviorSetDuration(EventUnit(), "CommandersBlindCategory", UnitBehaviorDuration(EventUnit(), EventUnitBehavior()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_BehaviorCategoriesBlind_Init () {
    libCore_gt_BehaviorCategoriesBlind = TriggerCreate("libCore_gt_BehaviorCategoriesBlind_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libCore_gt_BehaviorCategoriesBlind, null, c_unitBehaviorFlagUser8, c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libCore_gt_BehaviorCategoriesBlind, null, c_unitBehaviorFlagUser8, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data Heroes - Death Times
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataHeroesDeathTimes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gv_bALDeathTimes[0] = 10.0;
    libCore_gv_bALDeathTimes[1] = 10.0;
    libCore_gv_bALDeathTimes[2] = 12.0;
    libCore_gv_bALDeathTimes[3] = 13.0;
    libCore_gv_bALDeathTimes[4] = 14.0;
    libCore_gv_bALDeathTimes[5] = 15.0;
    libCore_gv_bALDeathTimes[6] = 16.0;
    libCore_gv_bALDeathTimes[7] = 17.0;
    libCore_gv_bALDeathTimes[8] = 18.0;
    libCore_gv_bALDeathTimes[9] = 20.0;
    libCore_gv_bALDeathTimes[10] = 23.0;
    libCore_gv_bALDeathTimes[11] = 26.0;
    libCore_gv_bALDeathTimes[12] = 29.0;
    libCore_gv_bALDeathTimes[13] = 32.0;
    libCore_gv_bALDeathTimes[14] = 36.0;
    libCore_gv_bALDeathTimes[15] = 40.0;
    libCore_gv_bALDeathTimes[16] = 44.0;
    libCore_gv_bALDeathTimes[17] = 50.0;
    libCore_gv_bALDeathTimes[18] = 56.0;
    libCore_gv_bALDeathTimes[19] = 62.0;
    libCore_gv_bALDeathTimes[20] = 65.0;
    libCore_gv_bALDeathTimes[21] = 65.0;
    libCore_gv_bALDeathTimes[22] = 65.0;
    libCore_gv_bALDeathTimes[23] = 65.0;
    libCore_gv_bALDeathTimes[24] = 65.0;
    libCore_gv_bALDeathTimes[25] = 65.0;
    libCore_gv_bALDeathTimes[26] = 65.0;
    libCore_gv_bALDeathTimes[27] = 65.0;
    libCore_gv_bALDeathTimes[28] = 65.0;
    libCore_gv_bALDeathTimes[29] = 65.0;
    libCore_gv_bALDeathTimes[30] = 65.0;
    libCore_gv_bALMaxDeathTime = libCore_gv_bALDeathTimes[libCore_gv_bALMaxLevel];
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataHeroesDeathTimes_Init () {
    libCore_gt_DataHeroesDeathTimes = TriggerCreate("libCore_gt_DataHeroesDeathTimes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Initialize Heroes
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataInitializeHeroes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_heroesData;
    string lv_itInstance;
    int lv_heroIndex;
    int lv_itTalentBehaviorIndex;
    int lv_itTalentTier;
    int lv_itTalentNumber;
    int lv_itTalentColumn;
    int lv_itAbil;
    int lv_itHeroAbility;
    string lv_itTalentParentButtonLink;
    string lv_itHeroUnitType;
    string lv_itHeroLink;
    string lv_itAbilButtonLink;
    string lv_itTalentLink;
    string lv_itTalentButtonLink;
    text lv_itHotkeyText;

    // Automatic Variable Declarations
    string auto569BD896_userType;
    int auto569BD896_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heroesData = "DataIngame_Heroes";
    libCore_gf_DataInitializePrestigeData();
    auto569BD896_userType = lv_heroesData;
    auto569BD896_i = 1;
    for ( ; auto569BD896_i <= UserDataInstanceCount(auto569BD896_userType) ; auto569BD896_i += 1 ) {
        lv_itInstance = UserDataInstance(auto569BD896_userType, auto569BD896_i);
        lv_heroIndex = libNtve_gf_UserDataInstanceGetIndex(lv_heroesData, lv_itInstance);
        libCore_gv_dataHeroesNumberOfHeroes += 1;
        libCore_gv_heroData[lv_heroIndex].lv_heroCatalogLink = UserDataGetGameLink(lv_heroesData, UserDataInstance(lv_heroesData, lv_heroIndex), "Hero Link", 1);
        lv_itHeroLink = libCore_gv_heroData[lv_heroIndex].lv_heroCatalogLink;
        libCore_gv_heroData[lv_heroIndex].lv_heroLevelUpgrade = UserDataGetGameLink(lv_heroesData, UserDataInstance(lv_heroesData, lv_heroIndex), "Hero Upgrade", 1);
        libCore_gv_heroData[lv_heroIndex].lv_heroUnitType = (CatalogFieldValueGet(c_gameCatalogHero, lv_itHeroLink, "Unit", c_playerAny));
        libCore_gv_heroData[lv_heroIndex].lv_heroUnitTypeAlternate = (CatalogFieldValueGet(c_gameCatalogHero, lv_itHeroLink, "AlternateUnitArray[" + IntToString(0) + "]", c_playerAny));
        lv_itHeroUnitType = libCore_gv_heroData[lv_heroIndex].lv_heroUnitType;
        libCore_gv_heroData[lv_heroIndex].lv_name = StringExternal(CatalogFieldValueGet(c_gameCatalogHero, lv_itHeroLink, "Name", c_playerAny));
        libCore_gv_heroData[lv_heroIndex].lv_class = libCore_gf_RoleGetHeroRoleofHeroPreset(lv_itHeroLink);
        libCore_gv_heroData[lv_heroIndex].lv_heroSelectScreenButtonPortrait = (CatalogFieldValueGet(c_gameCatalogHero, lv_itHeroLink, "SelectScreenButtonImage", c_playerAny));
        libCore_gv_heroData[lv_heroIndex].lv_heroSelectScreenDraftPortrait = (CatalogFieldValueGet(c_gameCatalogHero, lv_itHeroLink, "DraftScreenPortrait", c_playerAny));
        libCore_gv_heroData[lv_heroIndex].lv_leaderboardImage = (CatalogFieldValueGet(c_gameCatalogHero, lv_itHeroLink, "LeaderboardImage", c_playerAny));
        libCore_gv_heroData[lv_heroIndex].lv_topPanelImage = (CatalogFieldValueGet(c_gameCatalogHero, lv_itHeroLink, "PartyPanelButtonImage", c_playerAny));
        libCore_gv_heroData[lv_heroIndex].lv_portrait = (CatalogFieldValueGet(c_gameCatalogHero, lv_itHeroLink, "Portrait", c_playerAny));
        libCore_gv_heroData[lv_heroIndex].lv_description = StringExternal(CatalogFieldValueGet(c_gameCatalogHero, lv_itHeroLink, "Description", c_playerAny));
        libCore_gv_heroData[lv_heroIndex].lv_universe = libCore_gf_UniverseGetHeroUniverse(lv_itHeroLink);
        libCore_gv_heroData[lv_heroIndex].lv_universeIcon = (CatalogFieldValueGet(c_gameCatalogHero, lv_itHeroLink, "UniverseIcon", c_playerAny));
        libCore_gf_DataInitializeAbilitiesDataForHero(lv_heroIndex);
        libCore_gf_DataInitializeTalentsDataForHero(lv_heroIndex);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataInitializeHeroes_Init () {
    libCore_gt_DataInitializeHeroes = TriggerCreate("libCore_gt_DataInitializeHeroes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Level Data
//--------------------------------------------------------------------------------------------------
bool libCore_gt_InitializeLevelData_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoB3843948_g;
    int autoB3843948_var;
    const int autoEE3C4FB5_ae = libCore_gv_bALMaxLevel;
    int autoEE3C4FB5_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gv_levelData[0] = 1;
    libCore_gv_levelData[1] = 2000;
    libCore_gv_levelData[2] = 2000;
    libCore_gv_levelData[3] = 2025;
    libCore_gv_levelData[4] = 2050;
    libCore_gv_levelData[5] = 2100;
    libCore_gv_levelData[6] = 3100;
    libCore_gv_levelData[7] = 3100;
    libCore_gv_levelData[8] = 3125;
    libCore_gv_levelData[9] = 3150;
    libCore_gv_levelData[10] = 3250;
    libCore_gv_levelData[11] = 4250;
    libCore_gv_levelData[12] = 4250;
    libCore_gv_levelData[13] = 4275;
    libCore_gv_levelData[14] = 4300;
    libCore_gv_levelData[15] = 4400;
    libCore_gv_levelData[16] = 5400;
    libCore_gv_levelData[17] = 5400;
    libCore_gv_levelData[18] = 5425;
    libCore_gv_levelData[19] = 5450;
    libCore_gv_levelData[20] = 5550;
    libCore_gv_levelData[21] = 6550;
    libCore_gv_levelData[22] = 6550;
    libCore_gv_levelData[23] = 6575;
    libCore_gv_levelData[24] = 6600;
    libCore_gv_levelData[25] = 6700;
    libCore_gv_levelData[26] = 7700;
    libCore_gv_levelData[27] = 7700;
    libCore_gv_levelData[28] = 7725;
    libCore_gv_levelData[29] = 7750;
    libCore_gv_levelData[30] = 7850;
    autoB3843948_g = PlayerGroupAll();
    autoB3843948_var = -1;
    while (true) {
        autoB3843948_var = PlayerGroupNextPlayer(autoB3843948_g, autoB3843948_var);
        if (autoB3843948_var < 0) { break; }
        autoEE3C4FB5_var = 1;
        for ( ; autoEE3C4FB5_var <= autoEE3C4FB5_ae; autoEE3C4FB5_var += 1 ) {
            CatalogFieldValueSet(c_gameCatalogBehavior, "TeamVeterancyBehavior", "VeterancyLevelArray[" + IntToString(autoEE3C4FB5_var) + "].MinVeterancyXP", autoB3843948_var, IntToString(libCore_gv_levelData[autoEE3C4FB5_var]));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_InitializeLevelData_Init () {
    libCore_gt_InitializeLevelData = TriggerCreate("libCore_gt_InitializeLevelData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prestige Abilities - Cooldown Controller
//--------------------------------------------------------------------------------------------------
bool libCore_gt_PrestigeAbilitiesCooldownController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itPrestigeAbilityIndex;
    fixed lv_cooldown;
    string lv_prestigeAbility;

    // Automatic Variable Declarations
    int auto098BE972_ae;
    int auto31674010_ae;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto098BE972_ae = libCore_gv_bALMaxEnginePlayerCount;
    lv_itPlayer = 1;
    for ( ; lv_itPlayer <= auto098BE972_ae ; lv_itPlayer += 1 ) {
        if ((libGame_gv_players[lv_itPlayer].lv_heroUnit == null)) {
            continue;
        }
        auto31674010_ae = libCore_gv_dataHeroesMaxPrestigeAbilities;
        lv_itPrestigeAbilityIndex = 1;
        for ( ; lv_itPrestigeAbilityIndex <= auto31674010_ae ; lv_itPrestigeAbilityIndex += 1 ) {
            lv_prestigeAbility = libCore_gv_heroPrestigeData[lv_itPrestigeAbilityIndex].lv_abilityLink[1];
            lv_cooldown = PlayerGetCooldown(lv_itPlayer, CatalogFieldValueGet(c_gameCatalogAbil, lv_prestigeAbility, "Cost[" + IntToString(0) + "].Cooldown.Link", lv_itPlayer));
            libUIUI_gf_UIMyCustomLeaderBoardPrestigeAbilitiesSetCooldownForButtonForPlayer(lv_itPlayer, lv_itPrestigeAbilityIndex, lv_cooldown);
        }
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_PrestigeAbilitiesCooldownController_Init () {
    libCore_gt_PrestigeAbilitiesCooldownController = TriggerCreate("libCore_gt_PrestigeAbilitiesCooldownController_Func");
    TriggerAddEventTimePeriodic(libCore_gt_PrestigeAbilitiesCooldownController, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talents Data - Initialize Price Data
//--------------------------------------------------------------------------------------------------
bool libCore_gt_TalentsDataInitializePriceData_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gv_talentsTierInfo[1].lv_price = 1000.0;
    libCore_gv_talentsTierInfo[2].lv_price = 2000.0;
    libCore_gv_talentsTierInfo[3].lv_price = 3000.0;
    libCore_gv_talentsTierInfo[4].lv_price = 4000.0;
    libCore_gv_talentsTierInfo[5].lv_price = 5000.0;
    libCore_gv_talentsTierInfo[6].lv_price = 6000.0;
    libCore_gv_talentsTierInfo[7].lv_price = 7000.0;
    libCore_gv_talentsTierInfo[1].lv_maximumAvailiableTalents = 1;
    libCore_gv_talentsTierInfo[2].lv_maximumAvailiableTalents = libCore_gv_dataHeroesMaxTalentsperTier;
    libCore_gv_talentsTierInfo[3].lv_maximumAvailiableTalents = libCore_gv_dataHeroesMaxTalentsperTier;
    libCore_gv_talentsTierInfo[4].lv_maximumAvailiableTalents = libCore_gv_dataHeroesMaxTalentsperTier;
    libCore_gv_talentsTierInfo[5].lv_maximumAvailiableTalents = libCore_gv_dataHeroesMaxTalentsperTier;
    libCore_gv_talentsTierInfo[6].lv_maximumAvailiableTalents = libCore_gv_dataHeroesMaxTalentsperTier;
    libCore_gv_talentsTierInfo[7].lv_maximumAvailiableTalents = libCore_gv_dataHeroesMaxTalentsperTier;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_TalentsDataInitializePriceData_Init () {
    libCore_gt_TalentsDataInitializePriceData = TriggerCreate("libCore_gt_TalentsDataInitializePriceData_Func");
}

void libCore_InitTriggers () {
    libCore_gt_InitializationMapInitizalization_Init();
    libCore_gt_INITIALIZATION_Init();
    libCore_gt_InitializeMapObjectsFromName_Init();
    libCore_gt_PlayersInitialization_Init();
    libCore_gt_CreateCapturePoints_Init();
    libCore_gt_CampMapInit_Init();
    libCore_gt_HideDefaultUIFrame_Init();
    libCore_gt_SetVariablesMercenariesDefenders_Init();
    libCore_gt_DEBUGTextTags_Init();
    libCore_gt_DEBUGTurnModOnOff_Init();
    libCore_gt_DEBUGResetCDofPlayer1_Init();
    libCore_gt_DEBUGAdd10000PointstoPlayer1_Init();
    libCore_gt_DEBUGResetTalentsforPlayer1_Init();
    libCore_gt_DEBUGAddPlayertoAdminGroup_Init();
    libCore_gt_DEBUGInvul_Init();
    libCore_gt_DebugAddHeroicAbility_Init();
    libCore_gt_GameStart_Init();
    libCore_gt_TimerBGSExpires_Init();
    libCore_gt_RunAnimationsandInitTowers_Init();
    libCore_gt_RunAnimationsPreBuild_Init();
    libCore_gt_DataInitializeAnnouncerVOData2_Init();
    libCore_gt_BehaviorsQuestInitialization_Init();
    libCore_gt_BehaviorsQuestIncreasedDestroyed_Init();
    libCore_gt_BehaviorCategoriesInitialization_Init();
    libCore_gt_BehaviorCategoriesAddController_Init();
    libCore_gt_BehaviorCategoriesControllerBehaviorDestroy_Init();
    libCore_gt_BehaviorCategoriesSlow_Init();
    libCore_gt_BehaviorCategoriesStun_Init();
    libCore_gt_BehaviorCategoriesBlind_Init();
    libCore_gt_DataHeroesDeathTimes_Init();
    libCore_gt_DataInitializeHeroes_Init();
    libCore_gt_InitializeLevelData_Init();
    libCore_gt_PrestigeAbilitiesCooldownController_Init();
    libCore_gt_TalentsDataInitializePriceData_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libCore_InitLib_completed = false;

void libCore_InitLib () {
    if (libCore_InitLib_completed) {
        return;
    }

    libCore_InitLib_completed = true;

    libCore_InitLibraries();
    libCore_InitVariables();
    libCore_InitTriggers();
}

include "LibAIAI"
include "LibGame"
include "LibGDHL"
include "LibMapM"
include "LibUIUI"

